
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08007178  08007178  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007178  08007178  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002788  20000040  080071c0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027c8  080071c0  000227c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e493  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb6  00000000  00000000  0002e503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000310c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000320c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026605  00000000  00000000  00032fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8d  00000000  00000000  000595a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8592  00000000  00000000  00069532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131ac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  00131b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800645c 	.word	0x0800645c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	0800645c 	.word	0x0800645c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	609a      	str	r2, [r3, #8]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b087      	sub	sp, #28
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3330      	adds	r3, #48	; 0x30
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	f003 030c 	and.w	r3, r3, #12
 8000816:	4413      	add	r3, r2
 8000818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	211f      	movs	r1, #31
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	401a      	ands	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0e9b      	lsrs	r3, r3, #26
 8000832:	f003 011f 	and.w	r1, r3, #31
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	431a      	orrs	r2, r3
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000846:	bf00      	nop
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000852:	b480      	push	{r7}
 8000854:	b087      	sub	sp, #28
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3314      	adds	r3, #20
 8000862:	461a      	mov	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	0e5b      	lsrs	r3, r3, #25
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	4413      	add	r3, r2
 8000870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	0d1b      	lsrs	r3, r3, #20
 800087a:	f003 031f 	and.w	r3, r3, #31
 800087e:	2107      	movs	r1, #7
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	0d1b      	lsrs	r3, r3, #20
 800088c:	f003 031f 	and.w	r3, r3, #31
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	431a      	orrs	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800089c:	bf00      	nop
 800089e:	371c      	adds	r7, #28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0318 	and.w	r3, r3, #24
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80008cc:	40d9      	lsrs	r1, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	400b      	ands	r3, r1
 80008d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	0007ffff 	.word	0x0007ffff

080008f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6093      	str	r3, [r2, #8]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000928:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <LL_RCC_SetADCClockSource+0x28>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <LL_RCC_SetADCClockSource+0x28>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4313      	orrs	r3, r2
 8000954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	4907      	ldr	r1, [pc, #28]	; (8000994 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800097e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4013      	ands	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000

08000998 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80009c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 80009fe:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000a02:	f7ff ff9b 	bl	800093c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000a06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a0a:	f7ff ffad 	bl	8000968 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f7ff ffaa 	bl	8000968 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a14:	2304      	movs	r3, #4
 8000a16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4831      	ldr	r0, [pc, #196]	; (8000aec <MX_ADC1_Init+0x130>)
 8000a26:	f004 fec3 	bl	80057b0 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	482f      	ldr	r0, [pc, #188]	; (8000aec <MX_ADC1_Init+0x130>)
 8000a2e:	f7ff ffb3 	bl	8000998 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000a32:	2300      	movs	r3, #0
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a42:	4619      	mov	r1, r3
 8000a44:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000a46:	f004 fad1 	bl	8004fec <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000a6a:	f004 fae5 	bl	8005038 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x138>)
 8000a7e:	f004 fa6d 	bl	8004f5c <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000a82:	2100      	movs	r1, #0
 8000a84:	481b      	ldr	r0, [pc, #108]	; (8000af4 <MX_ADC1_Init+0x138>)
 8000a86:	f7ff fea5 	bl	80007d4 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000a8a:	4819      	ldr	r0, [pc, #100]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000a8c:	f7ff ff30 	bl	80008f0 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000a92:	f7ff ff3f 	bl	8000914 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x13c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	099b      	lsrs	r3, r3, #6
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_ADC1_Init+0x140>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	099a      	lsrs	r2, r3, #6
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_ADC1_Init+0x144>)
 8000ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ab8:	e002      	b.n	8000ac0 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000abc:	3b01      	subs	r3, #1
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f9      	bne.n	8000aba <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <MX_ADC1_Init+0x148>)
 8000ac8:	2106      	movs	r1, #6
 8000aca:	4809      	ldr	r0, [pc, #36]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000acc:	f7ff fe95 	bl	80007fa <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	490c      	ldr	r1, [pc, #48]	; (8000b04 <MX_ADC1_Init+0x148>)
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000ad6:	f7ff febc 	bl	8000852 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000ada:	227f      	movs	r2, #127	; 0x7f
 8000adc:	4909      	ldr	r1, [pc, #36]	; (8000b04 <MX_ADC1_Init+0x148>)
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_ADC1_Init+0x134>)
 8000ae0:	f7ff fee2 	bl	80008a8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3750      	adds	r7, #80	; 0x50
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	48000800 	.word	0x48000800
 8000af0:	50040000 	.word	0x50040000
 8000af4:	50040300 	.word	0x50040300
 8000af8:	20000004 	.word	0x20000004
 8000afc:	053e2d63 	.word	0x053e2d63
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	0c900008 	.word	0x0c900008

08000b08 <LL_AHB2_GRP1_EnableClock>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000

08000b38 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	3302      	adds	r3, #2
 8000b4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	43db      	mvns	r3, r3
 8000b54:	ea02 0103 	and.w	r1, r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	fa93 f3a3 	rbit	r3, r3
 8000b64:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000b70:	2320      	movs	r3, #32
 8000b72:	e003      	b.n	8000b7c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fab3 f383 	clz	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	fa03 f202 	lsl.w	r2, r3, r2
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b92:	bf00      	nop
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <LL_GPIO_SetPinMode>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa93 f3a3 	rbit	r3, r3
 8000bbe:	613b      	str	r3, [r7, #16]
  return result;
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	e003      	b.n	8000bd6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	fab3 f383 	clz	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2103      	movs	r1, #3
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	401a      	ands	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	fa93 f3a3 	rbit	r3, r3
 8000bec:	61fb      	str	r3, [r7, #28]
  return result;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	e003      	b.n	8000c04 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	fab3 f383 	clz	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	372c      	adds	r7, #44	; 0x2c
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <LL_GPIO_SetPinPull>:
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b08b      	sub	sp, #44	; 0x2c
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa93 f3a3 	rbit	r3, r3
 8000c38:	613b      	str	r3, [r7, #16]
  return result;
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c44:	2320      	movs	r3, #32
 8000c46:	e003      	b.n	8000c50 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2103      	movs	r1, #3
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	61fb      	str	r3, [r7, #28]
  return result;
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000c72:	2320      	movs	r3, #32
 8000c74:	e003      	b.n	8000c7e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	431a      	orrs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	60da      	str	r2, [r3, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	372c      	adds	r7, #44	; 0x2c
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f7ff ff16 	bl	8000b08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000cdc:	2080      	movs	r0, #128	; 0x80
 8000cde:	f7ff ff13 	bl	8000b08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff ff10 	bl	8000b08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff0d 	bl	8000b08 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, Oscope_Pin|SPI2_CS_Pin|Enc_CLK_Pin);
 8000cee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8000cf2:	483f      	ldr	r0, [pc, #252]	; (8000df0 <MX_GPIO_Init+0x13c>)
 8000cf4:	f7ff ffd0 	bl	8000c98 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Enc_CSn_GPIO_Port, Enc_CSn_Pin);
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	483e      	ldr	r0, [pc, #248]	; (8000df4 <MX_GPIO_Init+0x140>)
 8000cfc:	f7ff ffcc 	bl	8000c98 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f7ff ffc6 	bl	8000c98 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000d0c:	493a      	ldr	r1, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x144>)
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f7ff ff12 	bl	8000b38 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 faf9 	bl	800532c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	482c      	ldr	r0, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x140>)
 8000d42:	f7ff ff6c 	bl	8000c1e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <MX_GPIO_Init+0x140>)
 8000d4e:	f7ff ff29 	bl	8000ba4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Oscope_Pin|Enc_CLK_Pin;
 8000d52:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8000d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x13c>)
 8000d6e:	f004 fd1f 	bl	80057b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <MX_GPIO_Init+0x13c>)
 8000d8e:	f004 fd0f 	bl	80057b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Enc_CSn_Pin;
 8000d92:	2340      	movs	r3, #64	; 0x40
 8000d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Enc_CSn_GPIO_Port, &GPIO_InitStruct);
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_GPIO_Init+0x140>)
 8000dac:	f004 fd00 	bl	80057b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Enc_DO_Pin;
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Enc_DO_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x140>)
 8000dc2:	f004 fcf5 	bl	80057b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f004 fce4 	bl	80057b0 <LL_GPIO_Init>

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	00f00003 	.word	0x00f00003

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60da      	str	r2, [r3, #12]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60da      	str	r2, [r3, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60da      	str	r2, [r3, #12]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f023 0203 	bic.w	r2, r3, #3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	621a      	str	r2, [r3, #32]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f023 0201 	bic.w	r2, r3, #1
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60da      	str	r2, [r3, #12]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <LL_RCC_SetLPTIMClockSource>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000fe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	041b      	lsls	r3, r3, #16
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000

0800100c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001016:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <LL_APB1_GRP2_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40021000 	.word	0x40021000

0800103c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001040:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001044:	f7ff ffc8 	bl	8000fd8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001048:	2020      	movs	r0, #32
 800104a:	f7ff ffdf 	bl	800100c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800104e:	f7ff fed5 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8001052:	4603      	mov	r3, r0
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff07 	bl	8000e6c <NVIC_EncodePriority>
 800105e:	4603      	mov	r3, r0
 8001060:	4619      	mov	r1, r3
 8001062:	2042      	movs	r0, #66	; 0x42
 8001064:	f7ff fed8 	bl	8000e18 <__NVIC_SetPriority>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8001068:	2100      	movs	r1, #0
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 800106c:	f7ff ffa0 	bl	8000fb0 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001070:	2100      	movs	r1, #0
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 8001074:	f7ff ff66 	bl	8000f44 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8001078:	2100      	movs	r1, #0
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 800107c:	f7ff ff4f 	bl	8000f1e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001080:	2100      	movs	r1, #0
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 8001084:	f7ff ff25 	bl	8000ed2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8001088:	2100      	movs	r1, #0
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 800108c:	f7ff ff34 	bl	8000ef8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 8001092:	f7ff ff7d 	bl	8000f90 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 8001096:	2100      	movs	r1, #0
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <MX_LPTIM2_Init+0x68>)
 800109a:	f7ff ff66 	bl	8000f6a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40009400 	.word	0x40009400

080010a8 <__NVIC_SetPriorityGrouping>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001104:	f043 0201 	orr.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_LPTIM_Enable>:
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	611a      	str	r2, [r3, #16]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_LPTIM_StartCounter>:
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	f023 0206 	bic.w	r2, r3, #6
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_LPTIM_SetAutoReload>:
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	0c1b      	lsrs	r3, r3, #16
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f043 0202 	orr.w	r2, r3, #2
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_RCC_LSE_Enable>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LL_RCC_LSE_Enable+0x20>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <LL_RCC_LSE_Enable+0x20>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <LL_RCC_LSE_SetDriveCapability>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	f023 0218 	bic.w	r2, r3, #24
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000

080011f4 <LL_RCC_LSE_IsReady>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <LL_RCC_LSE_IsReady+0x24>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d101      	bne.n	800120a <LL_RCC_LSE_IsReady+0x16>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_RCC_LSE_IsReady+0x18>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <LL_RCC_MSI_Enable>:
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <LL_RCC_MSI_Enable+0x1c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <LL_RCC_MSI_Enable+0x1c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <LL_RCC_MSI_IsReady>:
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <LL_RCC_MSI_IsReady+0x20>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b02      	cmp	r3, #2
 800124a:	d101      	bne.n	8001250 <LL_RCC_MSI_IsReady+0x14>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <LL_RCC_MSI_IsReady+0x16>
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_MSI_EnablePLLMode>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <LL_RCC_MSI_SetRange>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <LL_RCC_MSI_SetRange+0x24>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <LL_RCC_MSI_SetRange+0x24>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000

080012c8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	4904      	ldr	r1, [pc, #16]	; (80012f0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <LL_RCC_SetSysClkSource>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <LL_RCC_SetSysClkSource+0x24>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 0203 	bic.w	r2, r3, #3
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <LL_RCC_SetSysClkSource+0x24>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <LL_RCC_GetSysClkSource>:
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <LL_RCC_GetSysClkSource+0x18>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <LL_RCC_SetAHBPrescaler>:
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <LL_RCC_SetAHBPrescaler+0x24>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	4904      	ldr	r1, [pc, #16]	; (800135c <LL_RCC_SetAHBPrescaler+0x24>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000

08001360 <LL_RCC_SetAPB1Prescaler>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <LL_RCC_SetAPB1Prescaler+0x24>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001370:	4904      	ldr	r1, [pc, #16]	; (8001384 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000

08001388 <LL_RCC_SetAPB2Prescaler>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_RCC_SetAPB2Prescaler+0x24>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <LL_RCC_SetAPB2Prescaler+0x24>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_RCC_PLL_Enable+0x1c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <LL_RCC_PLL_Enable+0x1c>)
 80013ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <LL_RCC_PLL_IsReady+0x24>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013e0:	d101      	bne.n	80013e6 <LL_RCC_PLL_IsReady+0x16>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_RCC_PLL_IsReady+0x18>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800140c:	4013      	ands	r3, r2
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	0212      	lsls	r2, r2, #8
 8001418:	4311      	orrs	r1, r2
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	4904      	ldr	r1, [pc, #16]	; (8001430 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	f9ff808c 	.word	0xf9ff808c

08001438 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <LL_APB1_GRP1_EnableClock>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001462:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <LL_APB1_GRP1_EnableClock+0x2c>)
 800146e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000

08001488 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001492:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800149e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000

080014b8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <LL_FLASH_SetLatency+0x24>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 0207 	bic.w	r2, r3, #7
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <LL_FLASH_SetLatency+0x24>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40022000 	.word	0x40022000

080014e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <LL_FLASH_GetLatency+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0307 	and.w	r3, r3, #7
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <LL_SYSTICK_EnableIT+0x1c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <LL_SYSTICK_EnableIT+0x1c>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800152c:	4904      	ldr	r1, [pc, #16]	; (8001540 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40007000 	.word	0x40007000

08001544 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_PWR_EnableBkUpAccess+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <LL_PWR_EnableBkUpAccess+0x1c>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40007000 	.word	0x40007000

08001564 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff ff7c 	bl	8001488 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001590:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001594:	f7ff ff60 	bl	8001458 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f7ff fd85 	bl	80010a8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f86b 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f7ff fb87 	bl	8000cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015a6:	f000 ff21 	bl	80023ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80015aa:	f000 fcbd 	bl	8001f28 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 80015ae:	f7ff fd45 	bl	800103c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 80015b2:	f000 fd0f 	bl	8001fd4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80015b6:	f7ff fa01 	bl	80009bc <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t enc;
	enc.CSn_GPIOx	= Enc_CSn_GPIO_Port;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <main+0xd4>)
 80015bc:	603b      	str	r3, [r7, #0]
	enc.CSn_Pin		= Enc_CSn_Pin;
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	81bb      	strh	r3, [r7, #12]
	enc.CLK_GPIOx	= Enc_CLK_GPIO_Port;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <main+0xd8>)
 80015c4:	607b      	str	r3, [r7, #4]
	enc.CLK_Pin		= Enc_CLK_Pin;
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	81fb      	strh	r3, [r7, #14]
	enc.DO_GPIOx	= Enc_DO_GPIO_Port;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <main+0xd4>)
 80015cc:	60bb      	str	r3, [r7, #8]
	enc.DO_Pin		= Enc_DO_Pin;
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	823b      	strh	r3, [r7, #16]
/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	// Enable SysTick interrupt (why isn't this in atollic??)
	LL_SYSTICK_EnableIT();
 80015d2:	f7ff ff93 	bl	80014fc <LL_SYSTICK_EnableIT>

	// Start LPTIM2 interrupt
	LL_LPTIM_Enable(LPTIM2);
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <main+0xdc>)
 80015d8:	f7ff fd9e 	bl	8001118 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80015dc:	4820      	ldr	r0, [pc, #128]	; (8001660 <main+0xdc>)
 80015de:	f7ff fdd1 	bl	8001184 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload( LPTIM2, LPTIM2_PERIOD );
 80015e2:	213f      	movs	r1, #63	; 0x3f
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <main+0xdc>)
 80015e6:	f7ff fdba 	bl	800115e <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter( LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS );
 80015ea:	2104      	movs	r1, #4
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <main+0xdc>)
 80015ee:	f7ff fda3 	bl	8001138 <LL_LPTIM_StartCounter>

	// Enable peripherals
	LL_SPI_Enable(SPI1);
 80015f2:	481c      	ldr	r0, [pc, #112]	; (8001664 <main+0xe0>)
 80015f4:	f7ff ffb6 	bl	8001564 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 80015f8:	481b      	ldr	r0, [pc, #108]	; (8001668 <main+0xe4>)
 80015fa:	f7ff ffb3 	bl	8001564 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 80015fe:	481b      	ldr	r0, [pc, #108]	; (800166c <main+0xe8>)
 8001600:	f7ff fd76 	bl	80010f0 <LL_ADC_Enable>

	// Initialize devices
	CAN_configure();
 8001604:	f001 fb68 	bl	8002cd8 <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <main+0xec>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f001 f892 	bl	8002736 <EPOS4_SetCSTMode>
	AS5145B_Init(&enc);
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f000 ff97 	bl	8002548 <AS5145B_Init>
	systick_app_timer_module_init();
 800161a:	f000 fe6b 	bl	80022f4 <systick_app_timer_module_init>
	mpu9255_init(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f003 fc02 	bl	8004e28 <mpu9255_init>
	readTimer_event_handler();
 8001624:	f003 fb72 	bl	8004d0c <readTimer_event_handler>

	// Remove spikes from beginning
	for ( uint16_t i = 0; i < 1000; i++ );
 8001628:	2300      	movs	r3, #0
 800162a:	82fb      	strh	r3, [r7, #22]
 800162c:	e002      	b.n	8001634 <main+0xb0>
 800162e:	8afb      	ldrh	r3, [r7, #22]
 8001630:	3301      	adds	r3, #1
 8001632:	82fb      	strh	r3, [r7, #22]
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800163a:	d3f8      	bcc.n	800162e <main+0xaa>

/*******************************************************************************
* TEST PROGRAMS
*******************************************************************************/

RequireTestProgram(ReadOnly);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 f8cf 	bl	80017e0 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while (1)
  {
	  if (isProsthesisControlRequired)
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <main+0xf0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0fb      	beq.n	8001642 <main+0xbe>
	  {
		  RunProsthesisControl();
 800164a:	f000 f8b5 	bl	80017b8 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <main+0xf0>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	  if (isProsthesisControlRequired)
 8001654:	e7f5      	b.n	8001642 <main+0xbe>
 8001656:	bf00      	nop
 8001658:	48000800 	.word	0x48000800
 800165c:	48000400 	.word	0x48000400
 8001660:	40009400 	.word	0x40009400
 8001664:	40013000 	.word	0x40013000
 8001668:	40003800 	.word	0x40003800
 800166c:	50040000 	.word	0x50040000
 8001670:	20000000 	.word	0x20000000
 8001674:	2000005c 	.word	0x2000005c

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800167c:	2004      	movs	r0, #4
 800167e:	f7ff ff1b 	bl	80014b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001682:	bf00      	nop
 8001684:	f7ff ff2c 	bl	80014e0 <LL_FLASH_GetLatency>
 8001688:	4603      	mov	r3, r0
 800168a:	2b04      	cmp	r3, #4
 800168c:	d1fa      	bne.n	8001684 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800168e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001692:	f7ff ff43 	bl	800151c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001696:	f7ff fdc1 	bl	800121c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800169a:	bf00      	nop
 800169c:	f7ff fdce 	bl	800123c <LL_RCC_MSI_IsReady>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d1fa      	bne.n	800169c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 80016a6:	f7ff fdeb 	bl	8001280 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 80016aa:	20b0      	movs	r0, #176	; 0xb0
 80016ac:	f7ff fdf8 	bl	80012a0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fe09 	bl	80012c8 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80016b6:	f7ff ff45 	bl	8001544 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fd84 	bl	80011c8 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 80016c0:	f7ff fd70 	bl	80011a4 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 80016c4:	bf00      	nop
 80016c6:	f7ff fd95 	bl	80011f4 <LL_RCC_LSE_IsReady>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d1fa      	bne.n	80016c6 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 80016d0:	f7ff fdc6 	bl	8001260 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 80016d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d8:	2228      	movs	r2, #40	; 0x28
 80016da:	2150      	movs	r1, #80	; 0x50
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fe8b 	bl	80013f8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80016e2:	f7ff fea9 	bl	8001438 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80016e6:	f7ff fe63 	bl	80013b0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80016ea:	bf00      	nop
 80016ec:	f7ff fe70 	bl	80013d0 <LL_RCC_PLL_IsReady>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d1fa      	bne.n	80016ec <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f7ff fdfc 	bl	80012f4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80016fc:	bf00      	nop
 80016fe:	f7ff fe0d 	bl	800131c <LL_RCC_GetSysClkSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d1fa      	bne.n	80016fe <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fe15 	bl	8001338 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800170e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001712:	f7ff fe25 	bl	8001360 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001716:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800171a:	f7ff fe35 	bl	8001388 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <SystemClock_Config+0xb8>)
 8001720:	f004 fe0c 	bl	800633c <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <SystemClock_Config+0xb8>)
 8001726:	f004 fe3f 	bl	80063a8 <LL_SetSystemCoreClock>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	04c4b400 	.word	0x04c4b400

08001734 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001748:	f043 0204 	orr.w	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	b29b      	uxth	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b08      	cmp	r3, #8
 8001788:	d101      	bne.n	800178e <LL_ADC_IsActiveFlag_EOS+0x18>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsActiveFlag_EOS+0x1a>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2208      	movs	r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <RunProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void RunProsthesisControl (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	GetInputs();
 80017bc:	f000 f82c 	bl	8001818 <GetInputs>

	// If test program is required, run test program
	// Otherwise continue prosthesis control
	if (isTestProgramRequired)
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <RunProsthesisControl+0x24>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <RunProsthesisControl+0x16>
	{
		RunTestProgram();
 80017c8:	f000 fa92 	bl	8001cf0 <RunTestProgram>
	else
	{
		RunStateMachine();
		SetOutputs();
	}
}
 80017cc:	e003      	b.n	80017d6 <RunProsthesisControl+0x1e>
		RunStateMachine();
 80017ce:	f000 fa0d 	bl	8001bec <RunStateMachine>
		SetOutputs();
 80017d2:	f000 fa27 	bl	8001c24 <SetOutputs>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000006d 	.word	0x2000006d

080017e0 <RequireTestProgram>:

void RequireTestProgram ( enum TestPrograms_e option )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <RequireTestProgram+0x2c>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	7013      	strb	r3, [r2, #0]

	if ( testProgram != None)
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <RequireTestProgram+0x2c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <RequireTestProgram+0x30>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000005d 	.word	0x2000005d
 8001810:	2000006d 	.word	0x2000006d
 8001814:	00000000 	.word	0x00000000

08001818 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs (void)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
	float tau = 1 / ( 2 * 3.1416f * 10 );			// Time constant
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <GetInputs+0x124>)
 8001820:	60fb      	str	r3, [r7, #12]
	float dt = 1 / 512.0f;							// Sample time
 8001822:	f04f 536c 	mov.w	r3, #989855744	; 0x3b000000
 8001826:	60bb      	str	r3, [r7, #8]
	float encBias_deg = 1325.0f * 360.0f/4096.0f;	// Bias found using RunTestProgram below
 8001828:	4b45      	ldr	r3, [pc, #276]	; (8001940 <GetInputs+0x128>)
 800182a:	607b      	str	r3, [r7, #4]

	CM_angle_deg[0]	= AS5145B_ReadPosition_Deg() - encBias_deg;
 800182c:	f000 ff40 	bl	80026b0 <AS5145B_ReadPosition_Deg>
 8001830:	eeb0 7a40 	vmov.f32	s14, s0
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183c:	4b41      	ldr	r3, [pc, #260]	; (8001944 <GetInputs+0x12c>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
	CM_loadCell_bot[0] = ReadADC();	// ??
 8001842:	f000 fae9 	bl	8001e18 <ReadADC>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <GetInputs+0x130>)
 800184c:	801a      	strh	r2, [r3, #0]
	CM_loadCell_top[0] = ReadADC();	// ??
 800184e:	f000 fae3 	bl	8001e18 <ReadADC>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <GetInputs+0x134>)
 8001858:	801a      	strh	r2, [r3, #0]

	// No derivative of angle (angular speed) on first execution
	// No filtering for load cells on first or second execution
	if (isFirst)
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <GetInputs+0x138>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d022      	beq.n	80018a8 <GetInputs+0x90>
	{
		CM_speed_dps = 0;
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <GetInputs+0x13c>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

		CM_loadCell_bot[2] = CM_loadCell_bot[0];
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <GetInputs+0x130>)
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <GetInputs+0x130>)
 8001870:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top[2] = CM_loadCell_top[0];
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <GetInputs+0x134>)
 8001874:	881a      	ldrh	r2, [r3, #0]
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <GetInputs+0x134>)
 8001878:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[0] = CM_loadCell_bot[0];
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <GetInputs+0x130>)
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <GetInputs+0x140>)
 8001880:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] = CM_loadCell_top[0];
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <GetInputs+0x134>)
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	4b35      	ldr	r3, [pc, #212]	; (800195c <GetInputs+0x144>)
 8001888:	801a      	strh	r2, [r3, #0]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot_filtered[0];
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <GetInputs+0x140>)
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <GetInputs+0x140>)
 8001890:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top_filtered[0];
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <GetInputs+0x144>)
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <GetInputs+0x144>)
 8001898:	809a      	strh	r2, [r3, #4]

		isFirst = 0;
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <GetInputs+0x138>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <GetInputs+0x148>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot[0];
		CM_loadCell_top_filtered[1] = CM_loadCell_top[0];
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot_filtered[0];
		CM_loadCell_top_filtered[1] = CM_loadCell_top_filtered[0];
	}
}
 80018a6:	e183      	b.n	8001bb0 <GetInputs+0x398>
	else if (isSecond)
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <GetInputs+0x148>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d059      	beq.n	8001964 <GetInputs+0x14c>
		CM_speed_dps = ( 2*( CM_angle_deg[0] - CM_angle_deg[1] ) + ( 2*tau - dt )*CM_speed_dps ) / ( dt + 2*tau );
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <GetInputs+0x12c>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <GetInputs+0x12c>)
 80018b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <GetInputs+0x13c>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee77 6a27 	vadd.f32	s13, s14, s15
 80018e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <GetInputs+0x13c>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
		CM_angle_deg[1] = CM_angle_deg[0];
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <GetInputs+0x12c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <GetInputs+0x12c>)
 8001902:	6053      	str	r3, [r2, #4]
		CM_loadCell_bot[1] = CM_loadCell_bot[0];
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <GetInputs+0x130>)
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <GetInputs+0x130>)
 800190a:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top[1] = CM_loadCell_top[0];
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <GetInputs+0x134>)
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <GetInputs+0x134>)
 8001912:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[0] = CM_loadCell_bot[0];
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <GetInputs+0x130>)
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <GetInputs+0x140>)
 800191a:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] = CM_loadCell_top[0];
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <GetInputs+0x134>)
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <GetInputs+0x144>)
 8001922:	801a      	strh	r2, [r3, #0]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot_filtered[0];
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <GetInputs+0x140>)
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <GetInputs+0x140>)
 800192a:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top_filtered[0];
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <GetInputs+0x144>)
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <GetInputs+0x144>)
 8001932:	805a      	strh	r2, [r3, #2]
		isSecond = 0;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <GetInputs+0x148>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
}
 800193a:	e139      	b.n	8001bb0 <GetInputs+0x398>
 800193c:	3c826122 	.word	0x3c826122
 8001940:	42e8e900 	.word	0x42e8e900
 8001944:	20000070 	.word	0x20000070
 8001948:	20000084 	.word	0x20000084
 800194c:	2000008c 	.word	0x2000008c
 8001950:	20000002 	.word	0x20000002
 8001954:	2000007c 	.word	0x2000007c
 8001958:	2000009c 	.word	0x2000009c
 800195c:	20000094 	.word	0x20000094
 8001960:	2000006c 	.word	0x2000006c
		CM_speed_dps = ( 2*( CM_angle_deg[0] - CM_angle_deg[1] ) + ( 2*tau - dt )*CM_speed_dps ) / ( dt + 2*tau );
 8001964:	4b9a      	ldr	r3, [pc, #616]	; (8001bd0 <GetInputs+0x3b8>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	4b99      	ldr	r3, [pc, #612]	; (8001bd0 <GetInputs+0x3b8>)
 800196c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001978:	edd7 7a03 	vldr	s15, [r7, #12]
 800197c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001980:	edd7 7a02 	vldr	s15, [r7, #8]
 8001984:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001988:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <GetInputs+0x3bc>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001996:	edd7 7a03 	vldr	s15, [r7, #12]
 800199a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019aa:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <GetInputs+0x3bc>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]
		CM_loadCell_bot_filtered[0] =   1.6556f * CM_loadCell_bot_filtered[1] - 0.7068 * CM_loadCell_bot_filtered[2]
 80019b0:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <GetInputs+0x3c0>)
 80019b2:	885b      	ldrh	r3, [r3, #2]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001bdc <GetInputs+0x3c4>
 80019c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c4:	ee17 0a90 	vmov	r0, s15
 80019c8:	f7fe fe8c 	bl	80006e4 <__aeabi_f2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <GetInputs+0x3c0>)
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fe73 	bl	80006c0 <__aeabi_i2d>
 80019da:	a377      	add	r3, pc, #476	; (adr r3, 8001bb8 <GetInputs+0x3a0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fbf2 	bl	80001c8 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fd1a 	bl	8000424 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
									  + 0.0128 * CM_loadCell_bot[0] + 0.0256 * CM_loadCell_bot[1] + 0.0128 * CM_loadCell_bot[2];
 80019f8:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <GetInputs+0x3c8>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fe5f 	bl	80006c0 <__aeabi_i2d>
 8001a02:	a36f      	add	r3, pc, #444	; (adr r3, 8001bc0 <GetInputs+0x3a8>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fbde 	bl	80001c8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fd08 	bl	8000428 <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <GetInputs+0x3c8>)
 8001a22:	885b      	ldrh	r3, [r3, #2]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fe4b 	bl	80006c0 <__aeabi_i2d>
 8001a2a:	a367      	add	r3, pc, #412	; (adr r3, 8001bc8 <GetInputs+0x3b0>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fbca 	bl	80001c8 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fcf4 	bl	8000428 <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4614      	mov	r4, r2
 8001a46:	461d      	mov	r5, r3
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <GetInputs+0x3c8>)
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fe37 	bl	80006c0 <__aeabi_i2d>
 8001a52:	a35b      	add	r3, pc, #364	; (adr r3, 8001bc0 <GetInputs+0x3a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fbb6 	bl	80001c8 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fce0 	bl	8000428 <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
		CM_loadCell_bot_filtered[0] =   1.6556f * CM_loadCell_bot_filtered[1] - 0.7068 * CM_loadCell_bot_filtered[2]
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7fe fe90 	bl	8000794 <__aeabi_d2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <GetInputs+0x3c0>)
 8001a7a:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] =   1.6556f * CM_loadCell_top_filtered[1] - 0.7068 * CM_loadCell_top_filtered[2]
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <GetInputs+0x3cc>)
 8001a7e:	885b      	ldrh	r3, [r3, #2]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001bdc <GetInputs+0x3c4>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fe26 	bl	80006e4 <__aeabi_f2d>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <GetInputs+0x3cc>)
 8001a9e:	889b      	ldrh	r3, [r3, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fe0d 	bl	80006c0 <__aeabi_i2d>
 8001aa6:	a344      	add	r3, pc, #272	; (adr r3, 8001bb8 <GetInputs+0x3a0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fb8c 	bl	80001c8 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fcb4 	bl	8000424 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
									  + 0.0128 * CM_loadCell_top[0] + 0.0256 * CM_loadCell_top[1] + 0.0128 * CM_loadCell_top[2];
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <GetInputs+0x3d0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fdf9 	bl	80006c0 <__aeabi_i2d>
 8001ace:	a33c      	add	r3, pc, #240	; (adr r3, 8001bc0 <GetInputs+0x3a8>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fb78 	bl	80001c8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fca2 	bl	8000428 <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <GetInputs+0x3d0>)
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fde5 	bl	80006c0 <__aeabi_i2d>
 8001af6:	a334      	add	r3, pc, #208	; (adr r3, 8001bc8 <GetInputs+0x3b0>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fb64 	bl	80001c8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fc8e 	bl	8000428 <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4614      	mov	r4, r2
 8001b12:	461d      	mov	r5, r3
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <GetInputs+0x3d0>)
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fdd1 	bl	80006c0 <__aeabi_i2d>
 8001b1e:	a328      	add	r3, pc, #160	; (adr r3, 8001bc0 <GetInputs+0x3a8>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fb50 	bl	80001c8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fc7a 	bl	8000428 <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
		CM_loadCell_top_filtered[0] =   1.6556f * CM_loadCell_top_filtered[1] - 0.7068 * CM_loadCell_top_filtered[2]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe fe2a 	bl	8000794 <__aeabi_d2uiz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <GetInputs+0x3cc>)
 8001b46:	801a      	strh	r2, [r3, #0]
		CM_angle_deg[1] = CM_angle_deg[0];
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <GetInputs+0x3b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <GetInputs+0x3b8>)
 8001b4e:	6053      	str	r3, [r2, #4]
		CM_loadCell_bot[2] = CM_loadCell_bot[1];
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <GetInputs+0x3c8>)
 8001b52:	885a      	ldrh	r2, [r3, #2]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <GetInputs+0x3c8>)
 8001b56:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top[2] = CM_loadCell_top[1];
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <GetInputs+0x3d0>)
 8001b5a:	885a      	ldrh	r2, [r3, #2]
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <GetInputs+0x3d0>)
 8001b5e:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot[1] = CM_loadCell_bot[0];
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <GetInputs+0x3c8>)
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <GetInputs+0x3c8>)
 8001b66:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top[1] = CM_loadCell_top[0];
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <GetInputs+0x3d0>)
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <GetInputs+0x3d0>)
 8001b6e:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot[1];
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <GetInputs+0x3c8>)
 8001b72:	885a      	ldrh	r2, [r3, #2]
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <GetInputs+0x3c0>)
 8001b76:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top[1];
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <GetInputs+0x3d0>)
 8001b7a:	885a      	ldrh	r2, [r3, #2]
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <GetInputs+0x3cc>)
 8001b7e:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot_filtered[1];
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <GetInputs+0x3c0>)
 8001b82:	885a      	ldrh	r2, [r3, #2]
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <GetInputs+0x3c0>)
 8001b86:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top_filtered[1];
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <GetInputs+0x3cc>)
 8001b8a:	885a      	ldrh	r2, [r3, #2]
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <GetInputs+0x3cc>)
 8001b8e:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot[0];
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <GetInputs+0x3c8>)
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <GetInputs+0x3c0>)
 8001b96:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top[0];
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <GetInputs+0x3d0>)
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <GetInputs+0x3cc>)
 8001b9e:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot_filtered[0];
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <GetInputs+0x3c0>)
 8001ba2:	881a      	ldrh	r2, [r3, #0]
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <GetInputs+0x3c0>)
 8001ba6:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top_filtered[0];
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <GetInputs+0x3cc>)
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <GetInputs+0x3cc>)
 8001bae:	805a      	strh	r2, [r3, #2]
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	089a0275 	.word	0x089a0275
 8001bbc:	3fe69e1b 	.word	0x3fe69e1b
 8001bc0:	eb1c432d 	.word	0xeb1c432d
 8001bc4:	3f8a36e2 	.word	0x3f8a36e2
 8001bc8:	eb1c432d 	.word	0xeb1c432d
 8001bcc:	3f9a36e2 	.word	0x3f9a36e2
 8001bd0:	20000070 	.word	0x20000070
 8001bd4:	2000007c 	.word	0x2000007c
 8001bd8:	2000009c 	.word	0x2000009c
 8001bdc:	3fd3eab3 	.word	0x3fd3eab3
 8001be0:	20000084 	.word	0x20000084
 8001be4:	20000094 	.word	0x20000094
 8001be8:	2000008c 	.word	0x2000008c

08001bec <RunStateMachine>:

static void RunStateMachine (void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	switch (0)
	{
	case 0:
		Kp = 2.5;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <RunStateMachine+0x28>)
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <RunStateMachine+0x2c>)
 8001bf4:	601a      	str	r2, [r3, #0]
		Kd = 0;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <RunStateMachine+0x30>)
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
		equilibriumPoint_deg = 0;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <RunStateMachine+0x34>)
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
		break;
 8001c06:	bf00      	nop
	}
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000060 	.word	0x20000060
 8001c18:	40200000 	.word	0x40200000
 8001c1c:	20000064 	.word	0x20000064
 8001c20:	20000068 	.word	0x20000068

08001c24 <SetOutputs>:

static void SetOutputs (void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <RunImpedanceControl>:

static void RunImpedanceControl (void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
	float gearRatio = 40;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <RunImpedanceControl+0x94>)
 8001c3c:	617b      	str	r3, [r7, #20]
	float torqueConst_nmpa = 0.095f;	// is this number accurate??
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <RunImpedanceControl+0x98>)
 8001c40:	613b      	str	r3, [r7, #16]
	float nomCurrent_amp = 8;			// is this number accurate??
 8001c42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001c46:	60fb      	str	r3, [r7, #12]

	float errorPos_deg = equilibriumPoint_deg - CM_angle_deg[0];
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <RunImpedanceControl+0x9c>)
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <RunImpedanceControl+0xa0>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	edc7 7a02 	vstr	s15, [r7, #8]
	CM_jointTorque_nm = Kp*errorPos_deg - Kd*CM_speed_dps;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <RunImpedanceControl+0xa4>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <RunImpedanceControl+0xa8>)
 8001c6c:	edd3 6a00 	vldr	s13, [r3]
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <RunImpedanceControl+0xac>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <RunImpedanceControl+0xb0>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
	int32_t motTorque = CM_jointTorque_nm / ( torqueConst_nmpa * gearRatio * nomCurrent_amp ) * 1000.0f;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <RunImpedanceControl+0xb0>)
 8001c86:	edd3 6a00 	vldr	s13, [r3]
 8001c8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ce8 <RunImpedanceControl+0xb4>
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cae:	ee17 3a90 	vmov	r3, s15
 8001cb2:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque( CAN_ID, motTorque );
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <RunImpedanceControl+0xb8>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fd9e 	bl	80027fc <EPOS4_SetTorque>
}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	42200000 	.word	0x42200000
 8001ccc:	3dc28f5c 	.word	0x3dc28f5c
 8001cd0:	20000068 	.word	0x20000068
 8001cd4:	20000070 	.word	0x20000070
 8001cd8:	20000060 	.word	0x20000060
 8001cdc:	20000064 	.word	0x20000064
 8001ce0:	2000007c 	.word	0x2000007c
 8001ce4:	20000078 	.word	0x20000078
 8001ce8:	447a0000 	.word	0x447a0000
 8001cec:	20000000 	.word	0x20000000

08001cf0 <RunTestProgram>:

static void RunTestProgram (void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
	switch (testProgram)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <RunTestProgram+0x100>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d873      	bhi.n	8001de6 <RunTestProgram+0xf6>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <RunTestProgram+0x14>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001de5 	.word	0x08001de5
 8001d08:	08001de5 	.word	0x08001de5
 8001d0c:	08001d19 	.word	0x08001d19
 8001d10:	08001d2b 	.word	0x08001d2b
 8001d14:	08001d67 	.word	0x08001d67
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 150;
 8001d18:	2396      	movs	r3, #150	; 0x96
 8001d1a:	60fb      	str	r3, [r7, #12]
		EPOS4_SetTorque( CAN_ID, torque );
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <RunTestProgram+0x104>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd6a 	bl	80027fc <EPOS4_SetTorque>
		break;
 8001d28:	e05d      	b.n	8001de6 <RunTestProgram+0xf6>
	}
	case AverageMagEnc:
	{
		uint16_t i;
		uint32_t sum = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]

		for ( i = 0; i < 1000; i++ )
 8001d2e:	2300      	movs	r3, #0
 8001d30:	83fb      	strh	r3, [r7, #30]
 8001d32:	e00c      	b.n	8001d4e <RunTestProgram+0x5e>
		{
			struct AS5145B_Data_s data  = AS5145B_ReadData();
 8001d34:	f000 fc28 	bl	8002588 <AS5145B_ReadData>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60bb      	str	r3, [r7, #8]
			sum                        += data.pos;
 8001d3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d40:	461a      	mov	r2, r3
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4413      	add	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
		for ( i = 0; i < 1000; i++ )
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfb      	ldrh	r3, [r7, #30]
 8001d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d54:	d3ee      	bcc.n	8001d34 <RunTestProgram+0x44>
		}

		CM_average_MagEnc = sum / i;
 8001d56:	8bfb      	ldrh	r3, [r7, #30]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <RunTestProgram+0x108>)
 8001d62:	801a      	strh	r2, [r3, #0]
		(void) CM_average_MagEnc;

		while (1);	// Halt program
 8001d64:	e7fe      	b.n	8001d64 <RunTestProgram+0x74>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <RunTestProgram+0x10c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d037      	beq.n	8001dde <RunTestProgram+0xee>
		{
			uint16_t i;

			Kp = 2.5;
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <RunTestProgram+0x110>)
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <RunTestProgram+0x114>)
 8001d72:	601a      	str	r2, [r3, #0]
			Kd = 0;
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <RunTestProgram+0x118>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
			uint32_t sum = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

			for ( i = 0; i < 1000; i++ )
 8001d80:	2300      	movs	r3, #0
 8001d82:	82fb      	strh	r3, [r7, #22]
 8001d84:	e00c      	b.n	8001da0 <RunTestProgram+0xb0>
			{
				struct AS5145B_Data_s data = AS5145B_ReadData();
 8001d86:	f000 fbff 	bl	8002588 <AS5145B_ReadData>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	607b      	str	r3, [r7, #4]
				sum += data.pos;
 8001d8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
			for ( i = 0; i < 1000; i++ )
 8001d9a:	8afb      	ldrh	r3, [r7, #22]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	82fb      	strh	r3, [r7, #22]
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da6:	d3ee      	bcc.n	8001d86 <RunTestProgram+0x96>
			}

			equilibriumPoint_deg = (float) sum/i * 360/4096;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db2:	8afb      	ldrh	r3, [r7, #22]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e0c <RunTestProgram+0x11c>
 8001dc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001e10 <RunTestProgram+0x120>
 8001dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <RunTestProgram+0x124>)
 8001dd2:	edc3 7a00 	vstr	s15, [r3]

			isFirst = 0;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <RunTestProgram+0x10c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		else
		{
			RunImpedanceControl();
		}

		break;
 8001ddc:	e003      	b.n	8001de6 <RunTestProgram+0xf6>
			RunImpedanceControl();
 8001dde:	f7ff ff29 	bl	8001c34 <RunImpedanceControl>
		break;
 8001de2:	e000      	b.n	8001de6 <RunTestProgram+0xf6>
		break;
 8001de4:	bf00      	nop
	}
	}
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000005d 	.word	0x2000005d
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000080 	.word	0x20000080
 8001dfc:	20000002 	.word	0x20000002
 8001e00:	20000060 	.word	0x20000060
 8001e04:	40200000 	.word	0x40200000
 8001e08:	20000064 	.word	0x20000064
 8001e0c:	43b40000 	.word	0x43b40000
 8001e10:	45800000 	.word	0x45800000
 8001e14:	20000068 	.word	0x20000068

08001e18 <ReadADC>:

// move to driver??
static uint16_t ReadADC (void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	LL_ADC_REG_StartConversion(ADC1);
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <ReadADC+0x34>)
 8001e20:	f7ff fc88 	bl	8001734 <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOS(ADC1) );				// change to EOC??
 8001e24:	bf00      	nop
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <ReadADC+0x34>)
 8001e28:	f7ff fca5 	bl	8001776 <LL_ADC_IsActiveFlag_EOS>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f9      	beq.n	8001e26 <ReadADC+0xe>
	LL_ADC_ClearFlag_EOS(ADC1);								// remove this??
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <ReadADC+0x34>)
 8001e34:	f7ff fcb2 	bl	800179c <LL_ADC_ClearFlag_EOS>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADC1);	// change resolution??
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <ReadADC+0x34>)
 8001e3a:	f7ff fc8f 	bl	800175c <LL_ADC_REG_ReadConversionData12>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
	return val;
 8001e42:	88fb      	ldrh	r3, [r7, #6]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	50040000 	.word	0x50040000

08001e50 <LL_AHB2_GRP1_EnableClock>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000

08001e80 <LL_APB1_GRP1_EnableClock>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000

08001eb0 <LL_APB2_GRP1_EnableClock>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ec6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000

08001ee0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0210 	bic.w	r2, r3, #16
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 0208 	bic.w	r2, r3, #8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b090      	sub	sp, #64	; 0x40
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	2228      	movs	r2, #40	; 0x28
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fa88 	bl	800644c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f50:	f7ff ffae 	bl	8001eb0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff ff7b 	bl	8001e50 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001f5a:	23e0      	movs	r3, #224	; 0xe0
 8001f5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	463b      	mov	r3, r7
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f003 fc19 	bl	80057b0 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f82:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f86:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001f88:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f8c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001fa8:	2307      	movs	r3, #7
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MX_SPI1_Init+0xa8>)
 8001fb4:	f004 f864 	bl	8006080 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_SPI1_Init+0xa8>)
 8001fbc:	f7ff ff90 	bl	8001ee0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <MX_SPI1_Init+0xa8>)
 8001fc2:	f7ff ffa0 	bl	8001f06 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3740      	adds	r7, #64	; 0x40
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40013000 	.word	0x40013000

08001fd4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b090      	sub	sp, #64	; 0x40
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	2228      	movs	r2, #40	; 0x28
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fa32 	bl	800644c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001ff8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ffc:	f7ff ff40 	bl	8001e80 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002000:	2002      	movs	r0, #2
 8002002:	f7ff ff25 	bl	8001e50 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8002006:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800200a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800200c:	2302      	movs	r3, #2
 800200e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800201c:	2305      	movs	r3, #5
 800201e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4815      	ldr	r0, [pc, #84]	; (800207c <MX_SPI2_Init+0xa8>)
 8002026:	f003 fbc3 	bl	80057b0 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800202e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002032:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002034:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002038:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800203a:	2302      	movs	r3, #2
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800203e:	2301      	movs	r3, #1
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002048:	2308      	movs	r3, #8
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002054:	2307      	movs	r3, #7
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <MX_SPI2_Init+0xac>)
 8002060:	f004 f80e 	bl	8006080 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002064:	2100      	movs	r1, #0
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <MX_SPI2_Init+0xac>)
 8002068:	f7ff ff3a 	bl	8001ee0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_SPI2_Init+0xac>)
 800206e:	f7ff ff4a 	bl	8001f06 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3740      	adds	r7, #64	; 0x40
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	48000400 	.word	0x48000400
 8002080:	40003800 	.word	0x40003800

08002084 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f043 0202 	orr.w	r2, r3, #2
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d101      	bne.n	80020bc <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <NMI_Handler+0x4>

080020d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <HardFault_Handler+0x4>

080020d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <BusFault_Handler+0x4>

080020e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <UsageFault_Handler+0x4>

080020e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler (does moving this to IRQn 1 work ??
******************************************************************************/

	systick_app_timer_tickAndProcess();
 8002116:	f000 f829 	bl	800216c <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <LPTIM2_IRQHandler+0x20>)
 8002126:	f7ff ffbd 	bl	80020a4 <LL_LPTIM_IsActiveFlag_ARRM>
 800212a:	4603      	mov	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <LPTIM2_IRQHandler+0x24>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 8002136:	4802      	ldr	r0, [pc, #8]	; (8002140 <LPTIM2_IRQHandler+0x20>)
 8002138:	f7ff ffa4 	bl	8002084 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40009400 	.word	0x40009400
 8002144:	2000005c 	.word	0x2000005c

08002148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e050      	b.n	800221a <systick_app_timer_tickAndProcess+0xae>
			// quick null check, for sanity
			if (appTimer.channel[i].timer != 0) {
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d046      	beq.n	8002214 <systick_app_timer_tickAndProcess+0xa8>
				if (appTimer.channel[i].active) {
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4a28      	ldr	r2, [pc, #160]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 800218a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d040      	beq.n	8002214 <systick_app_timer_tickAndProcess+0xa8>
					appTimer.channel[i].timer->value++;
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	3201      	adds	r2, #1
 80021a0:	605a      	str	r2, [r3, #4]
					// if the timer alarm has been set above 0, then there is something to process
					if (appTimer.channel[i].timer->alarm > 0) {
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d030      	beq.n	8002214 <systick_app_timer_tickAndProcess+0xa8>
						// if value meets or exceeds alarm value, process the timer
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	491a      	ldr	r1, [pc, #104]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d322      	bcc.n	8002214 <systick_app_timer_tickAndProcess+0xa8>
							// if timer has a callback, call it and then reset the value
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <systick_app_timer_tickAndProcess+0x8e>
								appTimer.channel[i].timer->timerAlarmCallback();
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	7a1b      	ldrb	r3, [r3, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <systick_app_timer_tickAndProcess+0xa8>
								appTimer.channel[i].active = false;
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <systick_app_timer_tickAndProcess+0xc0>)
 800220e:	2100      	movs	r1, #0
 8002210:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	3301      	adds	r3, #1
 8002218:	71fb      	strb	r3, [r7, #7]
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d9ab      	bls.n	8002178 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200000a4 	.word	0x200000a4

08002230 <systick_app_timer_channel_start>:
	}

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d901      	bls.n	8002244 <systick_app_timer_channel_start+0x14>
		return 2; // channel number out of bounds
 8002240:	2302      	movs	r3, #2
 8002242:	e015      	b.n	8002270 <systick_app_timer_channel_start+0x40>
	}

	if (appTimer.channel[channel].timer) {
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <systick_app_timer_channel_start+0x4c>)
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <systick_app_timer_channel_start+0x3e>
		appTimer.channel[channel].timer->value = 0; // reset when starting
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4a09      	ldr	r2, [pc, #36]	; (800227c <systick_app_timer_channel_start+0x4c>)
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
		appTimer.channel[channel].active = true;
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <systick_app_timer_channel_start+0x4c>)
 8002264:	2101      	movs	r1, #1
 8002266:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		return 0;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <systick_app_timer_channel_start+0x40>
	}

	return 1; // channel not found
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200000a4 	.word	0x200000a4

08002280 <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 800228a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800228e:	2b09      	cmp	r3, #9
 8002290:	d901      	bls.n	8002296 <systick_app_timer_channel_create+0x16>
		return 2; // timer module is full
 8002292:	2302      	movs	r3, #2
 8002294:	e026      	b.n	80022e4 <systick_app_timer_channel_create+0x64>
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e017      	b.n	80022cc <systick_app_timer_channel_create+0x4c>
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <systick_app_timer_channel_create+0x46>
			appTimer.channel[i].timer = timer;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]
			appTimer.channel[i].timer->channel = i;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	701a      	strb	r2, [r3, #0]
			break;
 80022c4:	e005      	b.n	80022d2 <systick_app_timer_channel_create+0x52>
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3301      	adds	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b09      	cmp	r3, #9
 80022d0:	d9e4      	bls.n	800229c <systick_app_timer_channel_create+0x1c>
		}
	}

	appTimer.count++;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 80022d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <systick_app_timer_channel_create+0x70>)
 80022de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return 0;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	200000a4 	.word	0x200000a4

080022f4 <systick_app_timer_module_init>:

void systick_app_timer_module_init() {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

	memset(&appTimer, 0, sizeof(appTimer));
 80022f8:	2254      	movs	r2, #84	; 0x54
 80022fa:	2100      	movs	r1, #0
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <systick_app_timer_module_init+0x14>)
 80022fe:	f004 f8a5 	bl	800644c <memset>

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200000a4 	.word	0x200000a4

0800230c <LL_RCC_SetUSARTClockSource>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <LL_RCC_SetUSARTClockSource+0x30>)
 8002316:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	43db      	mvns	r3, r3
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4905      	ldr	r1, [pc, #20]	; (800233c <LL_RCC_SetUSARTClockSource+0x30>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <LL_AHB2_GRP1_EnableClock>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800234a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40021000 	.word	0x40021000

08002370 <LL_APB1_GRP1_EnableClock>:
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <LL_APB1_GRP1_EnableClock+0x2c>)
 800237a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <LL_APB1_GRP1_EnableClock+0x2c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4313      	orrs	r3, r2
 8002382:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40021000 	.word	0x40021000

080023a0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	611a      	str	r2, [r3, #16]
 8002402:	615a      	str	r2, [r3, #20]
 8002404:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8002416:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800241a:	f7ff ff77 	bl	800230c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800241e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002422:	f7ff ffa5 	bl	8002370 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002426:	2001      	movs	r0, #1
 8002428:	f7ff ff8a 	bl	8002340 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800242c:	230c      	movs	r3, #12
 800242e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002430:	2302      	movs	r3, #2
 8002432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002440:	2307      	movs	r3, #7
 8002442:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244c:	f003 f9b0 	bl	80057b0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002450:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002454:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002462:	230c      	movs	r3, #12
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <MX_USART2_UART_Init+0xa4>)
 8002476:	f003 fecb 	bl	8006210 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART2_UART_Init+0xa4>)
 800247c:	f7ff ffa0 	bl	80023c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_USART2_UART_Init+0xa4>)
 8002482:	f7ff ff8d 	bl	80023a0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	3738      	adds	r7, #56	; 0x38
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40004400 	.word	0x40004400

08002494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002498:	f7ff fe56 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	; (80024e0 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c2:	f003 ff81 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c6:	f7ff f85d 	bl	8001584 <main>

080024ca <LoopForever>:

LoopForever:
    b LoopForever
 80024ca:	e7fe      	b.n	80024ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80024d8:	08007180 	.word	0x08007180
  ldr r2, =_sbss
 80024dc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80024e0:	200027c8 	.word	0x200027c8

080024e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC1_2_IRQHandler>

080024e6 <LL_GPIO_IsInputPinSet>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d101      	bne.n	8002502 <LL_GPIO_IsInputPinSet+0x1c>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <LL_GPIO_IsInputPinSet+0x1e>
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_GPIO_SetOutputPin>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_GPIO_ResetOutputPin>:
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <AS5145B_Init>:
 * INITIALIZATION FUNCTIONS
 ******************************************************************************/

// Initialize device
void AS5145B_Init ( AS5145B_Init_t *AS5145B_Init )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	// Copy memory of device initialization handle to device handle (provides ownership of the device handle to this driver)
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 8002550:	2214      	movs	r2, #20
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <AS5145B_Init+0x3c>)
 8002556:	f003 ff6b 	bl	8006430 <memcpy>

	// Initialize pins
	LL_GPIO_SetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );		// Chip select pin initially high (Figure 13 in DS)
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <AS5145B_Init+0x3c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <AS5145B_Init+0x3c>)
 8002560:	8992      	ldrh	r2, [r2, #12]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ffd3 	bl	8002510 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );		// Clock pin initially high (Figure 13 in DS)
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <AS5145B_Init+0x3c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <AS5145B_Init+0x3c>)
 8002570:	89d2      	ldrh	r2, [r2, #14]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ffcb 	bl	8002510 <LL_GPIO_SetOutputPin>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200000f8 	.word	0x200000f8

08002588 <AS5145B_ReadData>:
 ******************************************************************************/

// Read data (first 12 bits = position, remaining 6 bits = status, MSB first, Figure 13 in DS)
// @param posBias Amount of bias to be removed from angular position data in ADC
struct AS5145B_Data_s AS5145B_ReadData (void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
	// Declare variables
	struct AS5145B_Data_s data;		// Data structure

	// Declare initialized variables
	data.pos    = 0;	// Angular position
 800258e:	2300      	movs	r3, #0
 8002590:	80bb      	strh	r3, [r7, #4]
	data.status = 0;	// Status of device
 8002592:	2300      	movs	r3, #0
 8002594:	71bb      	strb	r3, [r7, #6]

	// Enable chip select pin
	LL_GPIO_ResetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );	// Chip select pin is active low
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <AS5145B_ReadData+0x124>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a44      	ldr	r2, [pc, #272]	; (80026ac <AS5145B_ReadData+0x124>)
 800259c:	8992      	ldrh	r2, [r2, #12]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ffc3 	bl	800252c <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 80025a6:	f000 f8a9 	bl	80026fc <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for ( int i = 12-1; i >= 0; i-- )
 80025aa:	230b      	movs	r3, #11
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e02d      	b.n	800260c <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );						// Set clock low
 80025b0:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <AS5145B_ReadData+0x124>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a3d      	ldr	r2, [pc, #244]	; (80026ac <AS5145B_ReadData+0x124>)
 80025b6:	89d2      	ldrh	r2, [r2, #14]
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffb6 	bl	800252c <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80025c0:	f000 f89c 	bl	80026fc <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );							// Set clock high
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <AS5145B_ReadData+0x124>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a38      	ldr	r2, [pc, #224]	; (80026ac <AS5145B_ReadData+0x124>)
 80025ca:	89d2      	ldrh	r2, [r2, #14]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff9e 	bl	8002510 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80025d4:	f000 f892 	bl	80026fc <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet( AS5145B.DO_GPIOx, AS5145B.DO_Pin ) & 0x01;	// Read data bit
 80025d8:	4b34      	ldr	r3, [pc, #208]	; (80026ac <AS5145B_ReadData+0x124>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a33      	ldr	r2, [pc, #204]	; (80026ac <AS5145B_ReadData+0x124>)
 80025de:	8a12      	ldrh	r2, [r2, #16]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff7f 	bl	80024e6 <LL_GPIO_IsInputPinSet>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	73bb      	strb	r3, [r7, #14]
		data.pos     |= (temp) << i;														// Assign and shift bit
 80025f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025f6:	7bb9      	ldrb	r1, [r7, #14]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	80bb      	strh	r3, [r7, #4]
	for ( int i = 12-1; i >= 0; i-- )
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3b01      	subs	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	dace      	bge.n	80025b0 <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for ( int i = 6-1; i >= 0; i-- )
 8002612:	2305      	movs	r3, #5
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e02e      	b.n	8002676 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );						// Set clock low
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <AS5145B_ReadData+0x124>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <AS5145B_ReadData+0x124>)
 800261e:	89d2      	ldrh	r2, [r2, #14]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff82 	bl	800252c <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8002628:	f000 f868 	bl	80026fc <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );							// Set clock high
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <AS5145B_ReadData+0x124>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <AS5145B_ReadData+0x124>)
 8002632:	89d2      	ldrh	r2, [r2, #14]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff6a 	bl	8002510 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 800263c:	f000 f85e 	bl	80026fc <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet( AS5145B.DO_GPIOx, AS5145B.DO_Pin ) & 0x01;	// Read data bit
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <AS5145B_ReadData+0x124>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <AS5145B_ReadData+0x124>)
 8002646:	8a12      	ldrh	r2, [r2, #16]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff4b 	bl	80024e6 <LL_GPIO_IsInputPinSet>
 8002650:	4603      	mov	r3, r0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;														// Assign and shift bit
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	b25a      	sxtb	r2, r3
 800265e:	7bf9      	ldrb	r1, [r7, #15]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	71bb      	strb	r3, [r7, #6]
	for ( int i = 6-1; i >= 0; i-- )
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3b01      	subs	r3, #1
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	dacd      	bge.n	8002618 <AS5145B_ReadData+0x90>
	}

	// Disable Chip select pin
	LL_GPIO_SetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );		// Chip select pin is inactive high
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <AS5145B_ReadData+0x124>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <AS5145B_ReadData+0x124>)
 8002682:	8992      	ldrh	r2, [r2, #12]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff42 	bl	8002510 <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 800268c:	f000 f836 	bl	80026fc <AS5145B_Delay_500ns>

	// Return
	return data;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	2300      	movs	r3, #0
 8002696:	893a      	ldrh	r2, [r7, #8]
 8002698:	f362 030f 	bfi	r3, r2, #0, #16
 800269c:	897a      	ldrh	r2, [r7, #10]
 800269e:	f362 431f 	bfi	r3, r2, #16, #16
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200000f8 	.word	0x200000f8

080026b0 <AS5145B_ReadPosition_Deg>:

// Read angular position in degrees
// @param posBias	Amount of bias to be removed from angular position data in ADC
float AS5145B_ReadPosition_Deg (void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
	// Declare variables
	struct AS5145B_Data_s data;		// Data structure

	// Read data and separate angular position
	data          = AS5145B_ReadData();		// Read data
 80026b6:	f7ff ff67 	bl	8002588 <AS5145B_ReadData>
 80026ba:	4603      	mov	r3, r0
 80026bc:	607b      	str	r3, [r7, #4]
	int16_t temp = data.pos;						// Separate angular position
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	81fb      	strh	r3, [r7, #14]

	// Convert angular position from ADC to degrees
	float pos = (float) temp*AS5145B_ADC2DEG;
 80026c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80026f4 <AS5145B_ReadPosition_Deg+0x44>
 80026d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026d6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80026f8 <AS5145B_ReadPosition_Deg+0x48>
 80026da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026de:	edc7 7a02 	vstr	s15, [r7, #8]

	// Return
	return pos;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	ee07 3a90 	vmov	s15, r3
}
 80026e8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	43b40000 	.word	0x43b40000
 80026f8:	45800000 	.word	0x45800000

080026fc <AS5145B_Delay_500ns>:
 * OTHER FUNCTIONS
 ******************************************************************************/

// Delay of approximately 500 nanoseconds for 80 MHz SYSCLK
void AS5145B_Delay_500ns (void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
	for ( uint8_t i = 0; i < 2; i++ )
 8002702:	2300      	movs	r3, #0
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	e00c      	b.n	8002722 <AS5145B_Delay_500ns+0x26>
	{
		for( uint8_t j = 0; j < 3; j++ )
 8002708:	2300      	movs	r3, #0
 800270a:	71bb      	strb	r3, [r7, #6]
 800270c:	e003      	b.n	8002716 <AS5145B_Delay_500ns+0x1a>
		 __NOP();
 800270e:	bf00      	nop
		for( uint8_t j = 0; j < 3; j++ )
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	3301      	adds	r3, #1
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d9f8      	bls.n	800270e <AS5145B_Delay_500ns+0x12>
	for ( uint8_t i = 0; i < 2; i++ )
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	3301      	adds	r3, #1
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d9ef      	bls.n	8002708 <AS5145B_Delay_500ns+0xc>
	}
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	80fb      	strh	r3, [r7, #6]
	// Declare variables
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 8002740:	f107 0008 	add.w	r0, r7, #8
 8002744:	2306      	movs	r3, #6
 8002746:	2200      	movs	r2, #0
 8002748:	f246 0140 	movw	r1, #24640	; 0x6040
 800274c:	f000 f872 	bl	8002834 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	2108      	movs	r1, #8
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa76 	bl	8002c4a <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800275e:	200a      	movs	r0, #10
 8002760:	f003 fdfa 	bl	8006358 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8002764:	f107 0008 	add.w	r0, r7, #8
 8002768:	230f      	movs	r3, #15
 800276a:	2200      	movs	r2, #0
 800276c:	f246 0140 	movw	r1, #24640	; 0x6040
 8002770:	f000 f860 	bl	8002834 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	2108      	movs	r1, #8
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa64 	bl	8002c4a <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8002782:	200a      	movs	r0, #10
 8002784:	f003 fde8 	bl	8006358 <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 8002788:	f107 0008 	add.w	r0, r7, #8
 800278c:	230a      	movs	r3, #10
 800278e:	2200      	movs	r2, #0
 8002790:	f246 0160 	movw	r1, #24672	; 0x6060
 8002794:	f000 f84e 	bl	8002834 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8002798:	f107 0208 	add.w	r2, r7, #8
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2108      	movs	r1, #8
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa52 	bl	8002c4a <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80027a6:	200a      	movs	r0, #10
 80027a8:	f003 fdd6 	bl	8006358 <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80027ac:	f107 0008 	add.w	r0, r7, #8
 80027b0:	2306      	movs	r3, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	f246 0140 	movw	r1, #24640	; 0x6040
 80027b8:	f000 f83c 	bl	8002834 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2108      	movs	r1, #8
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fa40 	bl	8002c4a <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80027ca:	200a      	movs	r0, #10
 80027cc:	f003 fdc4 	bl	8006358 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 80027d0:	f107 0008 	add.w	r0, r7, #8
 80027d4:	230f      	movs	r3, #15
 80027d6:	2200      	movs	r2, #0
 80027d8:	f246 0140 	movw	r1, #24640	; 0x6040
 80027dc:	f000 f82a 	bl	8002834 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80027e0:	f107 0208 	add.w	r2, r7, #8
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2108      	movs	r1, #8
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fa2e 	bl	8002c4a <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80027ee:	200a      	movs	r0, #10
 80027f0:	f003 fdb2 	bl	8006358 <LL_mDelay>
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// @param torque	100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f107 0008 	add.w	r0, r7, #8
 800280e:	2200      	movs	r2, #0
 8002810:	f246 0171 	movw	r1, #24689	; 0x6071
 8002814:	f000 f80e 	bl	8002834 <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 8002818:	f107 0208 	add.w	r2, r7, #8
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	2108      	movs	r1, #8
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fa12 	bl	8002c4a <CAN_transmit>
    EPOS4_usDelay(50);					// Can we do better??
 8002826:	2032      	movs	r0, #50	; 0x32
 8002828:	f000 f83d 	bl	80028a6 <EPOS4_usDelay>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <EPOS4_DataFramer>:
 * OTHER FUNCTIONS
 ******************************************************************************/

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_DataFramer( uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	4613      	mov	r3, r2
 8002844:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2222      	movs	r2, #34	; 0x22
 800284a:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3301      	adds	r3, #1
 8002850:	897a      	ldrh	r2, [r7, #10]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3302      	adds	r3, #2
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3303      	adds	r3, #3
 8002868:	7a7a      	ldrb	r2, [r7, #9]
 800286a:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3304      	adds	r3, #4
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0a1a      	lsrs	r2, r3, #8
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3305      	adds	r3, #5
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0c1a      	lsrs	r2, r3, #16
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3306      	adds	r3, #6
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0e1a      	lsrs	r2, r3, #24
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3307      	adds	r3, #7
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <EPOS4_usDelay>:

// Can we lose this??
void EPOS4_usDelay( uint32_t us )
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	e00c      	b.n	80028ce <EPOS4_usDelay+0x28>
    {
    	for(i=0;i<11;i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e003      	b.n	80028c2 <EPOS4_usDelay+0x1c>
         __NOP();
 80028ba:	bf00      	nop
    	for(i=0;i<11;i++)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b0a      	cmp	r3, #10
 80028c6:	d9f8      	bls.n	80028ba <EPOS4_usDelay+0x14>
    for(k=0;k<us;k++)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d3ee      	bcc.n	80028b4 <EPOS4_usDelay+0xe>
    }
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	330c      	adds	r3, #12
 80028f4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_GPIO_SetOutputPin>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	619a      	str	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_GPIO_ResetOutputPin>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 8002944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <clearChipSelect+0x14>)
 800294a:	f7ff ffdd 	bl	8002908 <LL_GPIO_SetOutputPin>
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	48000400 	.word	0x48000400

08002958 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 800295c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <setChipSelect+0x14>)
 8002962:	f7ff ffdf 	bl	8002924 <LL_GPIO_ResetOutputPin>
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	48000400 	.word	0x48000400

08002970 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8002976:	f7ff ffef 	bl	8002958 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 800297a:	21c0      	movs	r1, #192	; 0xc0
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <mcp25625_reset+0x44>)
 800297e:	f7ff ffb1 	bl	80028e4 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8002982:	bf00      	nop
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <mcp25625_reset+0x44>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8002990:	f7ff ffd6 	bl	8002940 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002994:	e002      	b.n	800299c <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <mcp25625_reset+0x44>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <mcp25625_reset+0x44>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f6      	bne.n	8002996 <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40003800 	.word	0x40003800

080029b8 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 80029c8:	f7ff ffc6 	bl	8002958 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 80029cc:	2102      	movs	r1, #2
 80029ce:	4816      	ldr	r0, [pc, #88]	; (8002a28 <mcp25625_writeRegister+0x70>)
 80029d0:	f7ff ff88 	bl	80028e4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4813      	ldr	r0, [pc, #76]	; (8002a28 <mcp25625_writeRegister+0x70>)
 80029da:	f7ff ff83 	bl	80028e4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	4619      	mov	r1, r3
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <mcp25625_writeRegister+0x70>)
 80029e4:	f7ff ff7e 	bl	80028e4 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80029e8:	bf00      	nop
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <mcp25625_writeRegister+0x70>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f9      	bne.n	80029ea <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80029f6:	bf00      	nop
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <mcp25625_writeRegister+0x70>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 8002a04:	f7ff ff9c 	bl	8002940 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002a08:	e002      	b.n	8002a10 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <mcp25625_writeRegister+0x70>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <mcp25625_writeRegister+0x70>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f6      	bne.n	8002a0a <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40003800 	.word	0x40003800

08002a2c <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 8002a36:	f7ff ff8f 	bl	8002958 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4814      	ldr	r0, [pc, #80]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a3e:	f7ff ff51 	bl	80028e4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4619      	mov	r1, r3
 8002a46:	4812      	ldr	r0, [pc, #72]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a48:	f7ff ff4c 	bl	80028e4 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4810      	ldr	r0, [pc, #64]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a50:	f7ff ff48 	bl	80028e4 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8002a54:	bf00      	nop
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8002a62:	bf00      	nop
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f9      	bne.n	8002a64 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <mcp25625_readRegister+0x64>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();						// Disable CS
 8002a82:	f7ff ff5d 	bl	8002940 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 8002a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40003800 	.word	0x40003800

08002a94 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	603a      	str	r2, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 8002aa4:	f7ff ff58 	bl	8002958 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481d      	ldr	r0, [pc, #116]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002aae:	f7ff ff19 	bl	80028e4 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e011      	b.n	8002adc <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8002ab8:	bf00      	nop
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f9      	beq.n	8002aba <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4814      	ldr	r0, [pc, #80]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002ad2:	f7ff ff07 	bl	80028e4 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3e9      	bcc.n	8002ab8 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8002ae4:	bf00      	nop
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f9      	bne.n	8002ae6 <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8002af2:	bf00      	nop
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f9      	bne.n	8002af4 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8002b00:	f7ff ff1e 	bl	8002940 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8002b04:	e002      	b.n	8002b0c <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <mcp25625_loadTXB+0x90>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f6      	bne.n	8002b06 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40003800 	.word	0x40003800

08002b28 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8002b2c:	2030      	movs	r0, #48	; 0x30
 8002b2e:	f7ff ff7d 	bl	8002a2c <mcp25625_readRegister>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 8002b3c:	2040      	movs	r0, #64	; 0x40
 8002b3e:	f7ff ff75 	bl	8002a2c <mcp25625_readRegister>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 8002b4c:	2050      	movs	r0, #80	; 0x50
 8002b4e:	f7ff ff6d 	bl	8002a2c <mcp25625_readRegister>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	210d      	movs	r1, #13
 8002b64:	2044      	movs	r0, #68	; 0x44
 8002b66:	f7ff ff95 	bl	8002a94 <mcp25625_loadTXB>
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	210d      	movs	r1, #13
 8002b7e:	2042      	movs	r0, #66	; 0x42
 8002b80:	f7ff ff88 	bl	8002a94 <mcp25625_loadTXB>
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	210d      	movs	r1, #13
 8002b98:	2040      	movs	r0, #64	; 0x40
 8002b9a:	f7ff ff7b 	bl	8002a94 <mcp25625_loadTXB>
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8002baa:	210b      	movs	r1, #11
 8002bac:	2050      	movs	r0, #80	; 0x50
 8002bae:	f7ff ff03 	bl	80029b8 <mcp25625_writeRegister>
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8002bba:	210b      	movs	r1, #11
 8002bbc:	2040      	movs	r0, #64	; 0x40
 8002bbe:	f7ff fefb 	bl	80029b8 <mcp25625_writeRegister>
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8002bca:	210b      	movs	r1, #11
 8002bcc:	2030      	movs	r0, #48	; 0x30
 8002bce:	f7ff fef3 	bl	80029b8 <mcp25625_writeRegister>
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8002bde:	f7ff ffb3 	bl	8002b48 <getTXB2CTRL>
 8002be2:	4603      	mov	r3, r0
 8002be4:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8002be6:	7b3b      	ldrb	r3, [r7, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ffaf 	bl	8002b58 <loadTXB2>
		setTXREQ2();
 8002bfa:	f7ff ffd4 	bl	8002ba6 <setTXREQ2>
		return; // once txbuffer is loaded, return
 8002bfe:	e021      	b.n	8002c44 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8002c00:	f7ff ff9a 	bl	8002b38 <getTXB1CTRL>
 8002c04:	4603      	mov	r3, r0
 8002c06:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ffab 	bl	8002b72 <loadTXB1>
		setTXREQ1();
 8002c1c:	f7ff ffcb 	bl	8002bb6 <setTXREQ1>
		return; //once tx buffer is loaded, return
 8002c20:	e010      	b.n	8002c44 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8002c22:	f7ff ff81 	bl	8002b28 <getTXB0CTRL>
 8002c26:	4603      	mov	r3, r0
 8002c28:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8002c2a:	7b3b      	ldrb	r3, [r7, #12]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ffa7 	bl	8002b8c <loadTXB0>
		setTXREQ0();
 8002c3e:	f7ff ffc2 	bl	8002bc6 <setTXREQ0>
		return; // once tx buffer is loaded, return
 8002c42:	bf00      	nop
	}
}
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	603a      	str	r2, [r7, #0]
 8002c54:	80fb      	strh	r3, [r7, #6]
 8002c56:	460b      	mov	r3, r1
 8002c58:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	220d      	movs	r2, #13
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fbf2 	bl	800644c <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	015b      	lsls	r3, r3, #5
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8002c7a:	797b      	ldrb	r3, [r7, #5]
 8002c7c:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
 8002c82:	e00b      	b.n	8002c9c <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	441a      	add	r2, r3
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	3318      	adds	r3, #24
 8002c90:	443b      	add	r3, r7
 8002c92:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
 8002c9c:	7dfa      	ldrb	r2, [r7, #23]
 8002c9e:	797b      	ldrb	r3, [r7, #5]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ef      	bcc.n	8002c84 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff94 	bl	8002bd6 <mcp25625_sendCAN>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <mcp25625_init>:

void mcp25625_init (void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8002cbc:	f240 2276 	movw	r2, #630	; 0x276
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <mcp25625_init+0x1c>)
 8002cc4:	f003 fbc2 	bl	800644c <memset>
	clearChipSelect();
 8002cc8:	f7ff fe3a 	bl	8002940 <clearChipSelect>
	mcp25625_reset();
 8002ccc:	f7ff fe50 	bl	8002970 <mcp25625_reset>
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000010c 	.word	0x2000010c

08002cd8 <CAN_configure>:

void CAN_configure()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8002cde:	23c0      	movs	r3, #192	; 0xc0
 8002ce0:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8002ce2:	2389      	movs	r3, #137	; 0x89
 8002ce4:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8002cea:	2308      	movs	r3, #8
 8002cec:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8002cee:	f7ff ffe3 	bl	8002cb8 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 8002cf2:	7b3b      	ldrb	r3, [r7, #12]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	202a      	movs	r0, #42	; 0x2a
 8002cf8:	f7ff fe5e 	bl	80029b8 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 8002cfc:	7a3b      	ldrb	r3, [r7, #8]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	2029      	movs	r0, #41	; 0x29
 8002d02:	f7ff fe59 	bl	80029b8 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 8002d06:	793b      	ldrb	r3, [r7, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	2028      	movs	r0, #40	; 0x28
 8002d0c:	f7ff fe54 	bl	80029b8 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 8002d10:	783b      	ldrb	r3, [r7, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	200f      	movs	r0, #15
 8002d16:	f7ff fe4f 	bl	80029b8 <mcp25625_writeRegister>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <set_int_enable+0xb0>)
 8002d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01c      	beq.n	8002d72 <set_int_enable+0x4e>
        if (enable)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e001      	b.n	8002d48 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <set_int_enable+0xb0>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	7818      	ldrb	r0, [r3, #0]
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <set_int_enable+0xb0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	7c59      	ldrb	r1, [r3, #17]
 8002d54:	f107 030f 	add.w	r3, r7, #15
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f001 ff11 	bl	8004b80 <mpu9255_write>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <set_int_enable+0x46>
            return -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e030      	b.n	8002dcc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <set_int_enable+0xb0>)
 8002d6e:	745a      	strb	r2, [r3, #17]
 8002d70:	e02b      	b.n	8002dca <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <set_int_enable+0xb0>)
 8002d74:	7a9b      	ldrb	r3, [r3, #10]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <set_int_enable+0x5c>
            return -1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	e025      	b.n	8002dcc <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <set_int_enable+0x6e>
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <set_int_enable+0xb0>)
 8002d88:	7c5b      	ldrb	r3, [r3, #17]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <set_int_enable+0x6e>
            return 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e01c      	b.n	8002dcc <set_int_enable+0xa8>
        if (enable)
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e001      	b.n	8002da2 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <set_int_enable+0xb0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	7818      	ldrb	r0, [r3, #0]
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <set_int_enable+0xb0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	7c59      	ldrb	r1, [r3, #17]
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	2201      	movs	r2, #1
 8002db4:	f001 fee4 	bl	8004b80 <mpu9255_write>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <set_int_enable+0xa0>
            return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e003      	b.n	8002dcc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <set_int_enable+0xb0>)
 8002dc8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000008 	.word	0x20000008

08002dd8 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002de4:	4b5c      	ldr	r3, [pc, #368]	; (8002f58 <mpu_init+0x180>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	7818      	ldrb	r0, [r3, #0]
 8002dea:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <mpu_init+0x180>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	7d59      	ldrb	r1, [r3, #21]
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	2201      	movs	r2, #1
 8002df6:	f001 fec3 	bl	8004b80 <mpu9255_write>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <mpu_init+0x2e>
        return -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	e0a3      	b.n	8002f4e <mpu_init+0x176>
    delay_ms(100);
 8002e06:	2064      	movs	r0, #100	; 0x64
 8002e08:	f001 ff50 	bl	8004cac <mpu9255_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002e10:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <mpu_init+0x180>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	7818      	ldrb	r0, [r3, #0]
 8002e16:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <mpu_init+0x180>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	7d59      	ldrb	r1, [r3, #21]
 8002e1c:	f107 0308 	add.w	r3, r7, #8
 8002e20:	2201      	movs	r2, #1
 8002e22:	f001 fead 	bl	8004b80 <mpu9255_write>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <mpu_init+0x5a>
        return -1;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	e08d      	b.n	8002f4e <mpu_init+0x176>

   st.chip_cfg.accel_half = 0;
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <mpu_init+0x180>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8002e38:	2348      	movs	r3, #72	; 0x48
 8002e3a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8002e3c:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <mpu_init+0x180>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	7818      	ldrb	r0, [r3, #0]
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <mpu_init+0x180>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	7a19      	ldrb	r1, [r3, #8]
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f001 fe97 	bl	8004b80 <mpu9255_write>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <mpu_init+0x86>
        return -1;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	e077      	b.n	8002f4e <mpu_init+0x176>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	; (8002f58 <mpu_init+0x180>)
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <mpu_init+0x180>)
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <mpu_init+0x180>)
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <mpu_init+0x180>)
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <mpu_init+0x180>)
 8002e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e7c:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <mpu_init+0x180>)
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <mpu_init+0x180>)
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <mpu_init+0x180>)
 8002e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <mpu_init+0x180>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <mpu_init+0x180>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <mpu_init+0x180>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <mpu_init+0x180>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <mpu_init+0x180>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4828      	ldr	r0, [pc, #160]	; (8002f5c <mpu_init+0x184>)
 8002eba:	f003 fac7 	bl	800644c <memset>
    st.chip_cfg.dmp_on = 0;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <mpu_init+0x180>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <mpu_init+0x180>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <mpu_init+0x180>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8002ed4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ed8:	f000 f9e4 	bl	80032a4 <mpu_set_gyro_fsr>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <mpu_init+0x110>
        return -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	e032      	b.n	8002f4e <mpu_init+0x176>
    if (mpu_set_accel_fsr(8))
 8002ee8:	2008      	movs	r0, #8
 8002eea:	f000 fa69 	bl	80033c0 <mpu_set_accel_fsr>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <mpu_init+0x122>
        return -1;
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	e029      	b.n	8002f4e <mpu_init+0x176>
    if (mpu_set_lpf(188))
 8002efa:	20bc      	movs	r0, #188	; 0xbc
 8002efc:	f000 fac8 	bl	8003490 <mpu_set_lpf>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <mpu_init+0x134>
        return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	e020      	b.n	8002f4e <mpu_init+0x176>
    if (mpu_set_sample_rate(100))
 8002f0c:	2064      	movs	r0, #100	; 0x64
 8002f0e:	f000 fb0d 	bl	800352c <mpu_set_sample_rate>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <mpu_init+0x146>
        return -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	e017      	b.n	8002f4e <mpu_init+0x176>
    if (mpu_configure_fifo(0))
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f000 fbb2 	bl	8003688 <mpu_configure_fifo>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <mpu_init+0x158>
        return -1;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e00e      	b.n	8002f4e <mpu_init+0x176>
    if (int_param)
        reg_int_cb(int_param);
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8002f30:	f000 ff5a 	bl	8003de8 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8002f34:	200a      	movs	r0, #10
 8002f36:	f000 fb67 	bl	8003608 <mpu_set_compass_sample_rate>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <mpu_init+0x16e>
        return -1;
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	e003      	b.n	8002f4e <mpu_init+0x176>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f000 fbf0 	bl	800372c <mpu_set_sensors>
    return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	2000001e 	.word	0x2000001e

08002f60 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b28      	cmp	r3, #40	; 0x28
 8002f6e:	d902      	bls.n	8002f76 <mpu_lp_accel_mode+0x16>
        return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e08c      	b.n	8003090 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11c      	bne.n	8002fb6 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 fd79 	bl	8003a74 <mpu_set_int_latched>
        tmp[0] = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8002f86:	2307      	movs	r3, #7
 8002f88:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	7818      	ldrb	r0, [r3, #0]
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	7d59      	ldrb	r1, [r3, #21]
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f001 fdf0 	bl	8004b80 <mpu9255_write>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <mpu_lp_accel_mode+0x4c>
            return -1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e071      	b.n	8003090 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	751a      	strb	r2, [r3, #20]
        return 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e06c      	b.n	8003090 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fd5c 	bl	8003a74 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	733b      	strb	r3, [r7, #12]
 8002fc6:	e032      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d102      	bne.n	8002fd4 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	733b      	strb	r3, [r7, #12]
 8002fd2:	e02c      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d802      	bhi.n	8002fe0 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	733b      	strb	r3, [r7, #12]
 8002fde:	e026      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d802      	bhi.n	8002fec <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	733b      	strb	r3, [r7, #12]
 8002fea:	e020      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b14      	cmp	r3, #20
 8002ff0:	d802      	bhi.n	8002ff8 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	733b      	strb	r3, [r7, #12]
 8002ff6:	e01a      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b28      	cmp	r3, #40	; 0x28
 8002ffc:	d802      	bhi.n	8003004 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8002ffe:	2307      	movs	r3, #7
 8003000:	733b      	strb	r3, [r7, #12]
 8003002:	e014      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2b50      	cmp	r3, #80	; 0x50
 8003008:	d802      	bhi.n	8003010 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 800300a:	2308      	movs	r3, #8
 800300c:	733b      	strb	r3, [r7, #12]
 800300e:	e00e      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2ba0      	cmp	r3, #160	; 0xa0
 8003014:	d802      	bhi.n	800301c <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8003016:	2309      	movs	r3, #9
 8003018:	733b      	strb	r3, [r7, #12]
 800301a:	e008      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003022:	d802      	bhi.n	800302a <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8003024:	230a      	movs	r3, #10
 8003026:	733b      	strb	r3, [r7, #12]
 8003028:	e001      	b.n	800302e <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 800302a:	230b      	movs	r3, #11
 800302c:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	7818      	ldrb	r0, [r3, #0]
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7a59      	ldrb	r1, [r3, #9]
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	2201      	movs	r2, #1
 8003040:	f001 fd9e 	bl	8004b80 <mpu9255_write>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <mpu_lp_accel_mode+0xf0>
        return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e01f      	b.n	8003090 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8003050:	2320      	movs	r3, #32
 8003052:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	7818      	ldrb	r0, [r3, #0]
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <mpu_lp_accel_mode+0x138>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	7d59      	ldrb	r1, [r3, #21]
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	2201      	movs	r2, #1
 8003066:	f001 fd8b 	bl	8004b80 <mpu9255_write>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <mpu_lp_accel_mode+0x116>
        return -1;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295
 8003074:	e00c      	b.n	8003090 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8003078:	2208      	movs	r2, #8
 800307a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <mpu_lp_accel_mode+0x138>)
 800307e:	2200      	movs	r2, #0
 8003080:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <mpu_lp_accel_mode+0x138>)
 8003084:	2201      	movs	r2, #1
 8003086:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8003088:	2000      	movs	r0, #0
 800308a:	f000 fafd 	bl	8003688 <mpu_configure_fifo>

    return 0;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000008 	.word	0x20000008

0800309c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80030a2:	4b7e      	ldr	r3, [pc, #504]	; (800329c <mpu_reset_fifo+0x200>)
 80030a4:	7a9b      	ldrb	r3, [r3, #10]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <mpu_reset_fifo+0x14>
        return -1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e0f1      	b.n	8003294 <mpu_reset_fifo+0x1f8>

    data = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80030b4:	4b79      	ldr	r3, [pc, #484]	; (800329c <mpu_reset_fifo+0x200>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	7818      	ldrb	r0, [r3, #0]
 80030ba:	4b78      	ldr	r3, [pc, #480]	; (800329c <mpu_reset_fifo+0x200>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	7c59      	ldrb	r1, [r3, #17]
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	2201      	movs	r2, #1
 80030c4:	f001 fd5c 	bl	8004b80 <mpu9255_write>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <mpu_reset_fifo+0x38>
        return -1;
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	e0df      	b.n	8003294 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <mpu_reset_fifo+0x200>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	7818      	ldrb	r0, [r3, #0]
 80030da:	4b70      	ldr	r3, [pc, #448]	; (800329c <mpu_reset_fifo+0x200>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	7959      	ldrb	r1, [r3, #5]
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	2201      	movs	r2, #1
 80030e4:	f001 fd4c 	bl	8004b80 <mpu9255_write>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <mpu_reset_fifo+0x58>
        return -1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e0cf      	b.n	8003294 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80030f4:	4b69      	ldr	r3, [pc, #420]	; (800329c <mpu_reset_fifo+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	7818      	ldrb	r0, [r3, #0]
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <mpu_reset_fifo+0x200>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	7919      	ldrb	r1, [r3, #4]
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	2201      	movs	r2, #1
 8003104:	f001 fd3c 	bl	8004b80 <mpu9255_write>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <mpu_reset_fifo+0x78>
        return -1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e0bf      	b.n	8003294 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <mpu_reset_fifo+0x200>)
 8003116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d05c      	beq.n	80031d8 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800311e:	230c      	movs	r3, #12
 8003120:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003122:	4b5e      	ldr	r3, [pc, #376]	; (800329c <mpu_reset_fifo+0x200>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	7818      	ldrb	r0, [r3, #0]
 8003128:	4b5c      	ldr	r3, [pc, #368]	; (800329c <mpu_reset_fifo+0x200>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	7919      	ldrb	r1, [r3, #4]
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	2201      	movs	r2, #1
 8003132:	f001 fd25 	bl	8004b80 <mpu9255_write>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <mpu_reset_fifo+0xa6>
            return -1;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e0a8      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8003142:	2032      	movs	r0, #50	; 0x32
 8003144:	f001 fdb2 	bl	8004cac <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8003148:	23c0      	movs	r3, #192	; 0xc0
 800314a:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <mpu_reset_fifo+0x200>)
 800314e:	7a9b      	ldrb	r3, [r3, #10]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f043 0320 	orr.w	r3, r3, #32
 800315e:	b2db      	uxtb	r3, r3
 8003160:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <mpu_reset_fifo+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	7818      	ldrb	r0, [r3, #0]
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <mpu_reset_fifo+0x200>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	7919      	ldrb	r1, [r3, #4]
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	2201      	movs	r2, #1
 8003172:	f001 fd05 	bl	8004b80 <mpu9255_write>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <mpu_reset_fifo+0xe6>
            return -1;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e088      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8003182:	4b46      	ldr	r3, [pc, #280]	; (800329c <mpu_reset_fifo+0x200>)
 8003184:	7c5b      	ldrb	r3, [r3, #17]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800318a:	2302      	movs	r3, #2
 800318c:	71fb      	strb	r3, [r7, #7]
 800318e:	e001      	b.n	8003194 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <mpu_reset_fifo+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	7818      	ldrb	r0, [r3, #0]
 800319a:	4b40      	ldr	r3, [pc, #256]	; (800329c <mpu_reset_fifo+0x200>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	7c59      	ldrb	r1, [r3, #17]
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	2201      	movs	r2, #1
 80031a4:	f001 fcec 	bl	8004b80 <mpu9255_write>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <mpu_reset_fifo+0x118>
            return -1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e06f      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        data = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <mpu_reset_fifo+0x200>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	7818      	ldrb	r0, [r3, #0]
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <mpu_reset_fifo+0x200>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	7959      	ldrb	r1, [r3, #5]
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	2201      	movs	r2, #1
 80031c8:	f001 fcda 	bl	8004b80 <mpu9255_write>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d05f      	beq.n	8003292 <mpu_reset_fifo+0x1f6>
            return -1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e05d      	b.n	8003294 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 80031d8:	2304      	movs	r3, #4
 80031da:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <mpu_reset_fifo+0x200>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	7818      	ldrb	r0, [r3, #0]
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <mpu_reset_fifo+0x200>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	7919      	ldrb	r1, [r3, #4]
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	2201      	movs	r2, #1
 80031ec:	f001 fcc8 	bl	8004b80 <mpu9255_write>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <mpu_reset_fifo+0x160>
            return -1;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	e04b      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <mpu_reset_fifo+0x200>)
 80031fe:	7c9b      	ldrb	r3, [r3, #18]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <mpu_reset_fifo+0x174>
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <mpu_reset_fifo+0x200>)
 8003206:	7a9b      	ldrb	r3, [r3, #10]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8003210:	2340      	movs	r3, #64	; 0x40
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	e001      	b.n	800321a <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003216:	2360      	movs	r3, #96	; 0x60
 8003218:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <mpu_reset_fifo+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	7818      	ldrb	r0, [r3, #0]
 8003220:	4b1e      	ldr	r3, [pc, #120]	; (800329c <mpu_reset_fifo+0x200>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	7919      	ldrb	r1, [r3, #4]
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	2201      	movs	r2, #1
 800322a:	f001 fca9 	bl	8004b80 <mpu9255_write>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <mpu_reset_fifo+0x19e>
            return -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	e02c      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800323a:	2032      	movs	r0, #50	; 0x32
 800323c:	f001 fd36 	bl	8004cac <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <mpu_reset_fifo+0x200>)
 8003242:	7c5b      	ldrb	r3, [r3, #17]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8003248:	2301      	movs	r3, #1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	e001      	b.n	8003252 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <mpu_reset_fifo+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	7818      	ldrb	r0, [r3, #0]
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <mpu_reset_fifo+0x200>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	7c59      	ldrb	r1, [r3, #17]
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	2201      	movs	r2, #1
 8003262:	f001 fc8d 	bl	8004b80 <mpu9255_write>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <mpu_reset_fifo+0x1d6>
            return -1;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
 8003270:	e010      	b.n	8003294 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <mpu_reset_fifo+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	7818      	ldrb	r0, [r3, #0]
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <mpu_reset_fifo+0x200>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	7959      	ldrb	r1, [r3, #5]
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <mpu_reset_fifo+0x204>)
 8003280:	2201      	movs	r2, #1
 8003282:	f001 fc7d 	bl	8004b80 <mpu9255_write>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <mpu_reset_fifo+0x1f6>
            return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	e000      	b.n	8003294 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000008 	.word	0x20000008
 80032a0:	20000018 	.word	0x20000018

080032a4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <mpu_set_gyro_fsr+0xa4>)
 80032b0:	7a9b      	ldrb	r3, [r3, #10]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <mpu_set_gyro_fsr+0x18>
        return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	e041      	b.n	8003340 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032c2:	d017      	beq.n	80032f4 <mpu_set_gyro_fsr+0x50>
 80032c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032c8:	dc17      	bgt.n	80032fa <mpu_set_gyro_fsr+0x56>
 80032ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ce:	d00e      	beq.n	80032ee <mpu_set_gyro_fsr+0x4a>
 80032d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032d4:	dc11      	bgt.n	80032fa <mpu_set_gyro_fsr+0x56>
 80032d6:	2bfa      	cmp	r3, #250	; 0xfa
 80032d8:	d003      	beq.n	80032e2 <mpu_set_gyro_fsr+0x3e>
 80032da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032de:	d003      	beq.n	80032e8 <mpu_set_gyro_fsr+0x44>
 80032e0:	e00b      	b.n	80032fa <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
        break;
 80032e6:	e00b      	b.n	8003300 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80032e8:	2308      	movs	r3, #8
 80032ea:	73fb      	strb	r3, [r7, #15]
        break;
 80032ec:	e008      	b.n	8003300 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80032ee:	2310      	movs	r3, #16
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e005      	b.n	8003300 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80032f4:	2318      	movs	r3, #24
 80032f6:	73fb      	strb	r3, [r7, #15]
        break;
 80032f8:	e002      	b.n	8003300 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	e01f      	b.n	8003340 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <mpu_set_gyro_fsr+0xa4>)
 8003302:	7a1a      	ldrb	r2, [r3, #8]
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	429a      	cmp	r2, r3
 800330c:	d101      	bne.n	8003312 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800330e:	2300      	movs	r3, #0
 8003310:	e016      	b.n	8003340 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <mpu_set_gyro_fsr+0xa4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	7818      	ldrb	r0, [r3, #0]
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <mpu_set_gyro_fsr+0xa4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	7999      	ldrb	r1, [r3, #6]
 800331e:	f107 030f 	add.w	r3, r7, #15
 8003322:	2201      	movs	r2, #1
 8003324:	f001 fc2c 	bl	8004b80 <mpu9255_write>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <mpu_set_gyro_fsr+0x90>
        return -1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e005      	b.n	8003340 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b03      	ldr	r3, [pc, #12]	; (8003348 <mpu_set_gyro_fsr+0xa4>)
 800333c:	721a      	strb	r2, [r3, #8]
    return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000008 	.word	0x20000008

0800334c <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <mpu_get_accel_fsr+0x70>)
 8003356:	7a5b      	ldrb	r3, [r3, #9]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d81b      	bhi.n	8003394 <mpu_get_accel_fsr+0x48>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <mpu_get_accel_fsr+0x18>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337d 	.word	0x0800337d
 800336c:	08003385 	.word	0x08003385
 8003370:	0800338d 	.word	0x0800338d
    case INV_FSR_2G:
        fsr[0] = 2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
        break;
 800337a:	e00e      	b.n	800339a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2204      	movs	r2, #4
 8003380:	701a      	strb	r2, [r3, #0]
        break;
 8003382:	e00a      	b.n	800339a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2208      	movs	r2, #8
 8003388:	701a      	strb	r2, [r3, #0]
        break;
 800338a:	e006      	b.n	800339a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2210      	movs	r2, #16
 8003390:	701a      	strb	r2, [r3, #0]
        break;
 8003392:	e002      	b.n	800339a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	e00a      	b.n	80033b0 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <mpu_get_accel_fsr+0x70>)
 800339c:	7cdb      	ldrb	r3, [r3, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	701a      	strb	r2, [r3, #0]
    return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000008 	.word	0x20000008

080033c0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <mpu_set_accel_fsr+0xcc>)
 80033cc:	7a9b      	ldrb	r3, [r3, #10]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <mpu_set_accel_fsr+0x18>
        return -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e054      	b.n	8003482 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	3b02      	subs	r3, #2
 80033dc:	2b0e      	cmp	r3, #14
 80033de:	d82d      	bhi.n	800343c <mpu_set_accel_fsr+0x7c>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <mpu_set_accel_fsr+0x28>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	08003425 	.word	0x08003425
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800342b 	.word	0x0800342b
 80033f4:	0800343d 	.word	0x0800343d
 80033f8:	0800343d 	.word	0x0800343d
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	08003431 	.word	0x08003431
 8003404:	0800343d 	.word	0x0800343d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	0800343d 	.word	0x0800343d
 8003410:	0800343d 	.word	0x0800343d
 8003414:	0800343d 	.word	0x0800343d
 8003418:	0800343d 	.word	0x0800343d
 800341c:	0800343d 	.word	0x0800343d
 8003420:	08003437 	.word	0x08003437
    case 2:
        data = INV_FSR_2G << 3;
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]
        break;
 8003428:	e00b      	b.n	8003442 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800342a:	2308      	movs	r3, #8
 800342c:	73fb      	strb	r3, [r7, #15]
        break;
 800342e:	e008      	b.n	8003442 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8003430:	2310      	movs	r3, #16
 8003432:	73fb      	strb	r3, [r7, #15]
        break;
 8003434:	e005      	b.n	8003442 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8003436:	2318      	movs	r3, #24
 8003438:	73fb      	strb	r3, [r7, #15]
        break;
 800343a:	e002      	b.n	8003442 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
 8003440:	e01f      	b.n	8003482 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <mpu_set_accel_fsr+0xcc>)
 8003444:	7a5a      	ldrb	r2, [r3, #9]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	429a      	cmp	r2, r3
 800344e:	d101      	bne.n	8003454 <mpu_set_accel_fsr+0x94>
        return 0;
 8003450:	2300      	movs	r3, #0
 8003452:	e016      	b.n	8003482 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <mpu_set_accel_fsr+0xcc>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	7818      	ldrb	r0, [r3, #0]
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <mpu_set_accel_fsr+0xcc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	79d9      	ldrb	r1, [r3, #7]
 8003460:	f107 030f 	add.w	r3, r7, #15
 8003464:	2201      	movs	r2, #1
 8003466:	f001 fb8b 	bl	8004b80 <mpu9255_write>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <mpu_set_accel_fsr+0xb6>
        return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
 8003474:	e005      	b.n	8003482 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	08db      	lsrs	r3, r3, #3
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <mpu_set_accel_fsr+0xcc>)
 800347e:	725a      	strb	r2, [r3, #9]
    return 0;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000008 	.word	0x20000008

08003490 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <mpu_set_lpf+0x98>)
 800349c:	7a9b      	ldrb	r3, [r3, #10]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <mpu_set_lpf+0x18>
        return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	e03b      	b.n	8003520 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	2bbb      	cmp	r3, #187	; 0xbb
 80034ac:	d902      	bls.n	80034b4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e019      	b.n	80034e8 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b61      	cmp	r3, #97	; 0x61
 80034b8:	d902      	bls.n	80034c0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80034ba:	2302      	movs	r3, #2
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e013      	b.n	80034e8 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	2b29      	cmp	r3, #41	; 0x29
 80034c4:	d902      	bls.n	80034cc <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e00d      	b.n	80034e8 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b13      	cmp	r3, #19
 80034d0:	d902      	bls.n	80034d8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80034d2:	2304      	movs	r3, #4
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e007      	b.n	80034e8 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2b09      	cmp	r3, #9
 80034dc:	d902      	bls.n	80034e4 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80034de:	2305      	movs	r3, #5
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e001      	b.n	80034e8 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80034e4:	2306      	movs	r3, #6
 80034e6:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <mpu_set_lpf+0x98>)
 80034ea:	7ada      	ldrb	r2, [r3, #11]
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d101      	bne.n	80034f6 <mpu_set_lpf+0x66>
        return 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e014      	b.n	8003520 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <mpu_set_lpf+0x98>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	7818      	ldrb	r0, [r3, #0]
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <mpu_set_lpf+0x98>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	7899      	ldrb	r1, [r3, #2]
 8003502:	f107 030f 	add.w	r3, r7, #15
 8003506:	2201      	movs	r2, #1
 8003508:	f001 fb3a 	bl	8004b80 <mpu9255_write>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <mpu_set_lpf+0x88>
        return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e003      	b.n	8003520 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <mpu_set_lpf+0x98>)
 800351c:	72da      	strb	r2, [r3, #11]
    return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000008 	.word	0x20000008

0800352c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <mpu_set_sample_rate+0xd8>)
 8003538:	7a9b      	ldrb	r3, [r3, #10]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <mpu_set_sample_rate+0x18>
        return -1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
 8003542:	e05b      	b.n	80035fc <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <mpu_set_sample_rate+0xd8>)
 8003546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <mpu_set_sample_rate+0x28>
        return -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	e053      	b.n	80035fc <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <mpu_set_sample_rate+0xd8>)
 8003556:	7d1b      	ldrb	r3, [r3, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <mpu_set_sample_rate+0x48>
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	2b28      	cmp	r3, #40	; 0x28
 8003566:	d805      	bhi.n	8003574 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fcf8 	bl	8002f60 <mpu_lp_accel_mode>
                return 0;
 8003570:	2300      	movs	r3, #0
 8003572:	e043      	b.n	80035fc <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8003574:	2000      	movs	r0, #0
 8003576:	f7ff fcf3 	bl	8002f60 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d802      	bhi.n	8003586 <mpu_set_sample_rate+0x5a>
            rate = 4;
 8003580:	2304      	movs	r3, #4
 8003582:	80fb      	strh	r3, [r7, #6]
 8003584:	e006      	b.n	8003594 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358c:	d902      	bls.n	8003594 <mpu_set_sample_rate+0x68>
            rate = 1000;
 800358e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003592:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800359a:	fb92 f3f3 	sdiv	r3, r2, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <mpu_set_sample_rate+0xd8>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	7818      	ldrb	r0, [r3, #0]
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <mpu_set_sample_rate+0xd8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	7859      	ldrb	r1, [r3, #1]
 80035b2:	f107 030f 	add.w	r3, r7, #15
 80035b6:	2201      	movs	r2, #1
 80035b8:	f001 fae2 	bl	8004b80 <mpu9255_write>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <mpu_set_sample_rate+0x9c>
            return -1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e019      	b.n	80035fc <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	3301      	adds	r3, #1
 80035cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <mpu_set_sample_rate+0xd8>)
 80035d8:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <mpu_set_sample_rate+0xd8>)
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	bf28      	it	cs
 80035e2:	2364      	movcs	r3, #100	; 0x64
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f80e 	bl	8003608 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <mpu_set_sample_rate+0xd8>)
 80035ee:	89db      	ldrh	r3, [r3, #14]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff4b 	bl	8003490 <mpu_set_lpf>
        return 0;
 80035fa:	2300      	movs	r3, #0
    }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000008 	.word	0x20000008

08003608 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <mpu_set_compass_sample_rate+0x20>
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 800361a:	89db      	ldrh	r3, [r3, #14]
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	429a      	cmp	r2, r3
 8003620:	d802      	bhi.n	8003628 <mpu_set_compass_sample_rate+0x20>
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d902      	bls.n	800362e <mpu_set_compass_sample_rate+0x26>
        return -1;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	e026      	b.n	800367c <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 8003630:	89da      	ldrh	r2, [r3, #14]
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	7818      	ldrb	r0, [r3, #0]
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8003650:	f107 030f 	add.w	r3, r7, #15
 8003654:	2201      	movs	r2, #1
 8003656:	f001 fa93 	bl	8004b80 <mpu9255_write>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	e00a      	b.n	800367c <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 8003668:	89db      	ldrh	r3, [r3, #14]
 800366a:	461a      	mov	r2, r3
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	fb92 f3f3 	sdiv	r3, r2, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	; (8003684 <mpu_set_compass_sample_rate+0x7c>)
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 800367a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000008 	.word	0x20000008

08003688 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <mpu_configure_fifo+0x24>
        return 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e038      	b.n	800371e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036ae:	7a9b      	ldrb	r3, [r3, #10]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <mpu_configure_fifo+0x32>
            return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	e031      	b.n	800371e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036bc:	7c1b      	ldrb	r3, [r3, #16]
 80036be:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036c2:	7a9a      	ldrb	r2, [r3, #10]
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036cc:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036d0:	7c1b      	ldrb	r3, [r3, #16]
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d003      	beq.n	80036e0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e001      	b.n	80036e4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <mpu_configure_fifo+0x6a>
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <mpu_configure_fifo+0xa0>)
 80036ec:	7d1b      	ldrb	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7ff fb16 	bl	8002d24 <set_int_enable>
 80036f8:	e002      	b.n	8003700 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff fb12 	bl	8002d24 <set_int_enable>
        if (sensors) {
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8003706:	f7ff fcc9 	bl	800309c <mpu_reset_fifo>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <mpu_configure_fifo+0xa0>)
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	7413      	strb	r3, [r2, #16]
                return -1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	e000      	b.n	800371e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800371c:	68fb      	ldr	r3, [r7, #12]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000008 	.word	0x20000008

0800372c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e007      	b.n	8003756 <mpu_set_sensors+0x2a>
    else if (sensors)
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <mpu_set_sensors+0x26>
        data = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e001      	b.n	8003756 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	7818      	ldrb	r0, [r3, #0]
 800375c:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <mpu_set_sensors+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	7d59      	ldrb	r1, [r3, #21]
 8003762:	f107 030f 	add.w	r3, r7, #15
 8003766:	2201      	movs	r2, #1
 8003768:	f001 fa0a 	bl	8004b80 <mpu9255_write>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8003772:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003774:	2200      	movs	r2, #0
 8003776:	729a      	strb	r2, [r3, #10]
        return -1;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	e0ae      	b.n	80038dc <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003788:	731a      	strb	r2, [r3, #12]

    data = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	7818      	ldrb	r0, [r3, #0]
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	7d99      	ldrb	r1, [r3, #22]
 80037ea:	f107 030f 	add.w	r3, r7, #15
 80037ee:	2201      	movs	r2, #1
 80037f0:	f001 f9c6 	bl	8004b80 <mpu9255_write>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80037fa:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	729a      	strb	r2, [r3, #10]
        return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e06a      	b.n	80038dc <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <mpu_set_sensors+0xec>
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	2b08      	cmp	r3, #8
 8003810:	d002      	beq.n	8003818 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8003812:	2000      	movs	r0, #0
 8003814:	f000 f92e 	bl	8003a74 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <mpu_set_sensors+0x1b8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	7818      	ldrb	r0, [r3, #0]
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	7919      	ldrb	r1, [r3, #4]
 8003824:	f107 030e 	add.w	r3, r7, #14
 8003828:	2201      	movs	r2, #1
 800382a:	f001 f9f5 	bl	8004c18 <mpu9255_read>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <mpu_set_sensors+0x10e>
        return -1;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	e050      	b.n	80038dc <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8003844:	2311      	movs	r3, #17
 8003846:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	f043 0320 	orr.w	r3, r3, #32
 800384e:	b2db      	uxtb	r3, r3
 8003850:	73bb      	strb	r3, [r7, #14]
 8003852:	e006      	b.n	8003862 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8003854:	2310      	movs	r3, #16
 8003856:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003858:	7bbb      	ldrb	r3, [r7, #14]
 800385a:	f023 0320 	bic.w	r3, r3, #32
 800385e:	b2db      	uxtb	r3, r3
 8003860:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]
 8003876:	e004      	b.n	8003882 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8003878:	7bbb      	ldrb	r3, [r7, #14]
 800387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387e:	b2db      	uxtb	r3, r3
 8003880:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <mpu_set_sensors+0x1b8>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	7818      	ldrb	r0, [r3, #0]
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <mpu_set_sensors+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8003890:	f107 030f 	add.w	r3, r7, #15
 8003894:	2201      	movs	r2, #1
 8003896:	f001 f973 	bl	8004b80 <mpu9255_write>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <mpu_set_sensors+0x17a>
        return -1;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	e01a      	b.n	80038dc <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	7818      	ldrb	r0, [r3, #0]
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	7919      	ldrb	r1, [r3, #4]
 80038b2:	f107 030e 	add.w	r3, r7, #14
 80038b6:	2201      	movs	r2, #1
 80038b8:	f001 f962 	bl	8004b80 <mpu9255_write>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <mpu_set_sensors+0x19c>
        return -1;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	e009      	b.n	80038dc <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80038c8:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <mpu_set_sensors+0x1b8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80038d4:	2032      	movs	r0, #50	; 0x32
 80038d6:	f001 f9e9 	bl	8004cac <mpu9255_delay_ms>
    return 0;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000008 	.word	0x20000008

080038e8 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <mpu_set_bypass+0x188>)
 80038f4:	7c9b      	ldrb	r3, [r3, #18]
 80038f6:	79fa      	ldrb	r2, [r7, #7]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d101      	bne.n	8003900 <mpu_set_bypass+0x18>
        return 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e0b2      	b.n	8003a66 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d050      	beq.n	80039a8 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003906:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <mpu_set_bypass+0x188>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	7818      	ldrb	r0, [r3, #0]
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <mpu_set_bypass+0x188>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	7919      	ldrb	r1, [r3, #4]
 8003912:	f107 030f 	add.w	r3, r7, #15
 8003916:	2201      	movs	r2, #1
 8003918:	f001 f97e 	bl	8004c18 <mpu9255_read>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <mpu_set_bypass+0x40>
            return -1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	e09e      	b.n	8003a66 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	f023 0320 	bic.w	r3, r3, #32
 800392e:	b2db      	uxtb	r3, r3
 8003930:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003932:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <mpu_set_bypass+0x188>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	7818      	ldrb	r0, [r3, #0]
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <mpu_set_bypass+0x188>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	7919      	ldrb	r1, [r3, #4]
 800393e:	f107 030f 	add.w	r3, r7, #15
 8003942:	2201      	movs	r2, #1
 8003944:	f001 f91c 	bl	8004b80 <mpu9255_write>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <mpu_set_bypass+0x6c>
            return -1;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e088      	b.n	8003a66 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003954:	2003      	movs	r0, #3
 8003956:	f001 f9a9 	bl	8004cac <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 800395a:	2302      	movs	r3, #2
 800395c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <mpu_set_bypass+0x188>)
 8003960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800396e:	b2db      	uxtb	r3, r3
 8003970:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <mpu_set_bypass+0x188>)
 8003974:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003982:	b2db      	uxtb	r3, r3
 8003984:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <mpu_set_bypass+0x188>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	7818      	ldrb	r0, [r3, #0]
 800398c:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <mpu_set_bypass+0x188>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	7dd9      	ldrb	r1, [r3, #23]
 8003992:	f107 030f 	add.w	r3, r7, #15
 8003996:	2201      	movs	r2, #1
 8003998:	f001 f8f2 	bl	8004b80 <mpu9255_write>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05d      	beq.n	8003a5e <mpu_set_bypass+0x176>
            return -1;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	e05e      	b.n	8003a66 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <mpu_set_bypass+0x188>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	7818      	ldrb	r0, [r3, #0]
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <mpu_set_bypass+0x188>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	7919      	ldrb	r1, [r3, #4]
 80039b4:	f107 030f 	add.w	r3, r7, #15
 80039b8:	2201      	movs	r2, #1
 80039ba:	f001 f92d 	bl	8004c18 <mpu9255_read>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <mpu_set_bypass+0xe2>
            return -1;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295
 80039c8:	e04d      	b.n	8003a66 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <mpu_set_bypass+0x188>)
 80039cc:	7a9b      	ldrb	r3, [r3, #10]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	f043 0320 	orr.w	r3, r3, #32
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e004      	b.n	80039ec <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	f023 0320 	bic.w	r3, r3, #32
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <mpu_set_bypass+0x188>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	7818      	ldrb	r0, [r3, #0]
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <mpu_set_bypass+0x188>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	7919      	ldrb	r1, [r3, #4]
 80039f8:	f107 030f 	add.w	r3, r7, #15
 80039fc:	2201      	movs	r2, #1
 80039fe:	f001 f8bf 	bl	8004b80 <mpu9255_write>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <mpu_set_bypass+0x126>
            return -1;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	e02b      	b.n	8003a66 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003a0e:	2003      	movs	r0, #3
 8003a10:	f001 f94c 	bl	8004cac <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <mpu_set_bypass+0x188>)
 8003a16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e001      	b.n	8003a28 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <mpu_set_bypass+0x188>)
 8003a2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <mpu_set_bypass+0x188>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	7818      	ldrb	r0, [r3, #0]
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <mpu_set_bypass+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	7dd9      	ldrb	r1, [r3, #23]
 8003a48:	f107 030f 	add.w	r3, r7, #15
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f001 f897 	bl	8004b80 <mpu9255_write>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <mpu_set_bypass+0x176>
            return -1;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e003      	b.n	8003a66 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8003a5e:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <mpu_set_bypass+0x188>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	7493      	strb	r3, [r2, #18]
    return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000008 	.word	0x20000008

08003a74 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003a80:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003a84:	79fa      	ldrb	r2, [r7, #7]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d101      	bne.n	8003a8e <mpu_set_int_latched+0x1a>
        return 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e030      	b.n	8003af0 <mpu_set_int_latched+0x7c>

    if (enable)
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003a94:	2330      	movs	r3, #48	; 0x30
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e001      	b.n	8003a9e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003aa0:	7c9b      	ldrb	r3, [r3, #18]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003ab2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	7818      	ldrb	r0, [r3, #0]
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	7dd9      	ldrb	r1, [r3, #23]
 8003ad0:	f107 030f 	add.w	r3, r7, #15
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f001 f853 	bl	8004b80 <mpu9255_write>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <mpu_set_int_latched+0x72>
        return -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae4:	e004      	b.n	8003af0 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <mpu_set_int_latched+0x84>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000008 	.word	0x20000008

08003afc <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	603a      	str	r2, [r7, #0]
 8003b06:	80fb      	strh	r3, [r7, #6]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <mpu_write_mem+0x1c>
        return -1;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e03d      	b.n	8003b94 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b1a:	7a9b      	ldrb	r3, [r3, #10]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <mpu_write_mem+0x2a>
        return -1;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e036      	b.n	8003b94 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003b36:	7b7b      	ldrb	r3, [r7, #13]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	88bb      	ldrh	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b40:	6852      	ldr	r2, [r2, #4]
 8003b42:	8952      	ldrh	r2, [r2, #10]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	dd02      	ble.n	8003b4e <mpu_write_mem+0x52>
        return -1;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	e022      	b.n	8003b94 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	7818      	ldrb	r0, [r3, #0]
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	7ed9      	ldrb	r1, [r3, #27]
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f001 f80e 	bl	8004b80 <mpu9255_write>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <mpu_write_mem+0x74>
        return -1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e011      	b.n	8003b94 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	7818      	ldrb	r0, [r3, #0]
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <mpu_write_mem+0xa0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	7e19      	ldrb	r1, [r3, #24]
 8003b7c:	88bb      	ldrh	r3, [r7, #4]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f000 fffd 	bl	8004b80 <mpu9255_write>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <mpu_write_mem+0x96>
        return -1;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e000      	b.n	8003b94 <mpu_write_mem+0x98>
    return 0;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	20000008 	.word	0x20000008

08003ba0 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	603a      	str	r2, [r7, #0]
 8003baa:	80fb      	strh	r3, [r7, #6]
 8003bac:	460b      	mov	r3, r1
 8003bae:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <mpu_read_mem+0x1c>
        return -1;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	e03d      	b.n	8003c38 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <mpu_read_mem+0xa0>)
 8003bbe:	7a9b      	ldrb	r3, [r3, #10]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <mpu_read_mem+0x2a>
        return -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e036      	b.n	8003c38 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003bda:	7b7b      	ldrb	r3, [r7, #13]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	88bb      	ldrh	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <mpu_read_mem+0xa0>)
 8003be4:	6852      	ldr	r2, [r2, #4]
 8003be6:	8952      	ldrh	r2, [r2, #10]
 8003be8:	4293      	cmp	r3, r2
 8003bea:	dd02      	ble.n	8003bf2 <mpu_read_mem+0x52>
        return -1;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf0:	e022      	b.n	8003c38 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <mpu_read_mem+0xa0>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	7818      	ldrb	r0, [r3, #0]
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <mpu_read_mem+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	7ed9      	ldrb	r1, [r3, #27]
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2202      	movs	r2, #2
 8003c04:	f000 ffbc 	bl	8004b80 <mpu9255_write>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <mpu_read_mem+0x74>
        return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	e011      	b.n	8003c38 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <mpu_read_mem+0xa0>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	7818      	ldrb	r0, [r3, #0]
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <mpu_read_mem+0xa0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	7e19      	ldrb	r1, [r3, #24]
 8003c20:	88bb      	ldrh	r3, [r7, #4]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f000 fff7 	bl	8004c18 <mpu9255_read>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <mpu_read_mem+0x96>
        return -1;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e000      	b.n	8003c38 <mpu_read_mem+0x98>
    return 0;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000008 	.word	0x20000008

08003c44 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	81fb      	strh	r3, [r7, #14]
 8003c54:	460b      	mov	r3, r1
 8003c56:	81bb      	strh	r3, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003c5c:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <mpu_load_firmware+0xf8>)
 8003c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	e062      	b.n	8003d32 <mpu_load_firmware+0xee>

    if (!firmware)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <mpu_load_firmware+0x34>
        return -1;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e05c      	b.n	8003d32 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003c78:	2300      	movs	r3, #0
 8003c7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c7c:	e034      	b.n	8003ce8 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003c7e:	89fa      	ldrh	r2, [r7, #14]
 8003c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	bfa8      	it	ge
 8003c88:	2310      	movge	r3, #16
 8003c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003c8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	441a      	add	r2, r3
 8003c92:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff30 	bl	8003afc <mpu_write_mem>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <mpu_load_firmware+0x64>
            return -1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e044      	b.n	8003d32 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8003ca8:	f107 0214 	add.w	r2, r7, #20
 8003cac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003cae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff75 	bl	8003ba0 <mpu_read_mem>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <mpu_load_firmware+0x7e>
            return -1;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc0:	e037      	b.n	8003d32 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8003cc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cca:	f107 0114 	add.w	r1, r7, #20
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fb9e 	bl	8006410 <memcmp>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <mpu_load_firmware+0x9c>
            return -2;
 8003cda:	f06f 0301 	mvn.w	r3, #1
 8003cde:	e028      	b.n	8003d32 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003ce0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce4:	4413      	add	r3, r2
 8003ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ce8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3c6      	bcc.n	8003c7e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8003cf0:	89bb      	ldrh	r3, [r7, #12]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8003cfa:	89bb      	ldrh	r3, [r7, #12]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <mpu_load_firmware+0xf8>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	7818      	ldrb	r0, [r3, #0]
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <mpu_load_firmware+0xf8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	7f59      	ldrb	r1, [r3, #29]
 8003d0c:	f107 0310 	add.w	r3, r7, #16
 8003d10:	2202      	movs	r2, #2
 8003d12:	f000 ff35 	bl	8004b80 <mpu9255_write>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <mpu_load_firmware+0xde>
        return -1;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	e007      	b.n	8003d32 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <mpu_load_firmware+0xf8>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003d2a:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <mpu_load_firmware+0xf8>)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000008 	.word	0x20000008

08003d40 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d101      	bne.n	8003d5a <mpu_set_dmp_state+0x1a>
        return 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e040      	b.n	8003ddc <mpu_set_dmp_state+0x9c>

    if (enable) {
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d027      	beq.n	8003db0 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <mpu_set_dmp_state+0x30>
            return -1;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e035      	b.n	8003ddc <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fe ffd7 	bl	8002d24 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7ff fdb6 	bl	80038e8 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fbd3 	bl	800352c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	7818      	ldrb	r0, [r3, #0]
 8003d90:	f107 030f 	add.w	r3, r7, #15
 8003d94:	2201      	movs	r2, #1
 8003d96:	2123      	movs	r1, #35	; 0x23
 8003d98:	f000 fef2 	bl	8004b80 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f7fe ffbd 	bl	8002d24 <set_int_enable>
        mpu_reset_fifo();
 8003daa:	f7ff f977 	bl	800309c <mpu_reset_fifo>
 8003dae:	e014      	b.n	8003dda <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fe ffb7 	bl	8002d24 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003db8:	7c1b      	ldrb	r3, [r3, #16]
 8003dba:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	7818      	ldrb	r0, [r3, #0]
 8003dc2:	f107 030f 	add.w	r3, r7, #15
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2123      	movs	r1, #35	; 0x23
 8003dca:	f000 fed9 	bl	8004b80 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <mpu_set_dmp_state+0xa4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8003dd6:	f7ff f961 	bl	800309c <mpu_reset_fifo>
    }
    return 0;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000008 	.word	0x20000008

08003de8 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7ff fd7a 	bl	80038e8 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003df4:	230c      	movs	r3, #12
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e00f      	b.n	8003e1a <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	7bf8      	ldrb	r0, [r7, #15]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2100      	movs	r1, #0
 8003e02:	f000 ff09 	bl	8004c18 <mpu9255_read>
 8003e06:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <setup_compass+0x2c>
 8003e0e:	793b      	ldrb	r3, [r7, #4]
 8003e10:	2b48      	cmp	r3, #72	; 0x48
 8003e12:	d006      	beq.n	8003e22 <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	3301      	adds	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d9ec      	bls.n	8003dfa <setup_compass+0x12>
 8003e20:	e000      	b.n	8003e24 <setup_compass+0x3c>
            break;
 8003e22:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d902      	bls.n	8003e30 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        //log_e("Compass not found.\n");
        return -1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e112      	b.n	8004056 <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8003e30:	4a8b      	ldr	r2, [pc, #556]	; (8004060 <setup_compass+0x278>)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8003e38:	2310      	movs	r3, #16
 8003e3a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003e3c:	4b88      	ldr	r3, [pc, #544]	; (8004060 <setup_compass+0x278>)
 8003e3e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	2201      	movs	r2, #1
 8003e46:	210a      	movs	r1, #10
 8003e48:	f000 fe9a 	bl	8004b80 <mpu9255_write>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <setup_compass+0x70>
        return -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e0fe      	b.n	8004056 <setup_compass+0x26e>
    delay_ms(1);
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f000 ff27 	bl	8004cac <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8003e5e:	231f      	movs	r3, #31
 8003e60:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003e62:	4b7f      	ldr	r3, [pc, #508]	; (8004060 <setup_compass+0x278>)
 8003e64:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	210a      	movs	r1, #10
 8003e6e:	f000 fe87 	bl	8004b80 <mpu9255_write>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <setup_compass+0x96>
        return -1;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	e0eb      	b.n	8004056 <setup_compass+0x26e>
    delay_ms(1);
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f000 ff14 	bl	8004cac <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8003e84:	4b76      	ldr	r3, [pc, #472]	; (8004060 <setup_compass+0x278>)
 8003e86:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	2110      	movs	r1, #16
 8003e90:	f000 fec2 	bl	8004c18 <mpu9255_read>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <setup_compass+0xb8>
        return -1;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	e0da      	b.n	8004056 <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8003ea0:	793b      	ldrb	r3, [r7, #4]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3380      	adds	r3, #128	; 0x80
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <setup_compass+0x278>)
 8003eac:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8003eae:	797b      	ldrb	r3, [r7, #5]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3380      	adds	r3, #128	; 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	4b69      	ldr	r3, [pc, #420]	; (8004060 <setup_compass+0x278>)
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8003ebc:	79bb      	ldrb	r3, [r7, #6]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3380      	adds	r3, #128	; 0x80
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	b21a      	sxth	r2, r3
 8003ec6:	4b66      	ldr	r3, [pc, #408]	; (8004060 <setup_compass+0x278>)
 8003ec8:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003ece:	4b64      	ldr	r3, [pc, #400]	; (8004060 <setup_compass+0x278>)
 8003ed0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	210a      	movs	r1, #10
 8003eda:	f000 fe51 	bl	8004b80 <mpu9255_write>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <setup_compass+0x102>
        return -1;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e0b5      	b.n	8004056 <setup_compass+0x26e>
    delay_ms(1);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 fede 	bl	8004cac <mpu9255_delay_ms>

    mpu_set_bypass(0);
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f7ff fcf9 	bl	80038e8 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8003ef6:	2340      	movs	r3, #64	; 0x40
 8003ef8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <setup_compass+0x278>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	7818      	ldrb	r0, [r3, #0]
 8003f00:	4b57      	ldr	r3, [pc, #348]	; (8004060 <setup_compass+0x278>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	7e99      	ldrb	r1, [r3, #26]
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f000 fe39 	bl	8004b80 <mpu9255_write>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <setup_compass+0x132>
        return -1;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e09d      	b.n	8004056 <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <setup_compass+0x278>)
 8003f1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <setup_compass+0x278>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	7818      	ldrb	r0, [r3, #0]
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <setup_compass+0x278>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	7f99      	ldrb	r1, [r3, #30]
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2201      	movs	r2, #1
 8003f38:	f000 fe22 	bl	8004b80 <mpu9255_write>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <setup_compass+0x160>
        return -1;
 8003f42:	f04f 33ff 	mov.w	r3, #4294967295
 8003f46:	e086      	b.n	8004056 <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003f4c:	4b44      	ldr	r3, [pc, #272]	; (8004060 <setup_compass+0x278>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	7818      	ldrb	r0, [r3, #0]
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <setup_compass+0x278>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	7fd9      	ldrb	r1, [r3, #31]
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f000 fe10 	bl	8004b80 <mpu9255_write>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <setup_compass+0x184>
        return -1;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	e074      	b.n	8004056 <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8003f6c:	2388      	movs	r3, #136	; 0x88
 8003f6e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <setup_compass+0x278>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	7818      	ldrb	r0, [r3, #0]
 8003f76:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <setup_compass+0x278>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	2201      	movs	r2, #1
 8003f82:	f000 fdfd 	bl	8004b80 <mpu9255_write>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <setup_compass+0x1aa>
        return -1;
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f90:	e061      	b.n	8004056 <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <setup_compass+0x278>)
 8003f94:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f98:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <setup_compass+0x278>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	7818      	ldrb	r0, [r3, #0]
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <setup_compass+0x278>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	2201      	movs	r2, #1
 8003fac:	f000 fde8 	bl	8004b80 <mpu9255_write>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <setup_compass+0x1d4>
        return -1;
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	e04c      	b.n	8004056 <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <setup_compass+0x278>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	7818      	ldrb	r0, [r3, #0]
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <setup_compass+0x278>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f000 fdd5 	bl	8004b80 <mpu9255_write>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <setup_compass+0x1fa>
        return -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e039      	b.n	8004056 <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8003fe2:	2381      	movs	r3, #129	; 0x81
 8003fe4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <setup_compass+0x278>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	7818      	ldrb	r0, [r3, #0]
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <setup_compass+0x278>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f000 fdc2 	bl	8004b80 <mpu9255_write>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <setup_compass+0x220>
        return -1;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	e026      	b.n	8004056 <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8004008:	2311      	movs	r3, #17
 800400a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <setup_compass+0x278>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	7818      	ldrb	r0, [r3, #0]
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <setup_compass+0x278>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	2201      	movs	r2, #1
 800401e:	f000 fdaf 	bl	8004b80 <mpu9255_write>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <setup_compass+0x246>
        return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	e013      	b.n	8004056 <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 800402e:	2303      	movs	r3, #3
 8004030:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <setup_compass+0x278>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	7818      	ldrb	r0, [r3, #0]
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <setup_compass+0x278>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	2201      	movs	r2, #1
 8004044:	f000 fd9c 	bl	8004b80 <mpu9255_write>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <setup_compass+0x26c>
        return -1;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	e000      	b.n	8004056 <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000008 	.word	0x20000008

08004064 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8004068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800406c:	23c8      	movs	r3, #200	; 0xc8
 800406e:	4904      	ldr	r1, [pc, #16]	; (8004080 <dmp_load_motion_driver_firmware+0x1c>)
 8004070:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8004074:	f7ff fde6 	bl	8003c44 <mpu_load_firmware>
 8004078:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800407a:	4618      	mov	r0, r3
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08006580 	.word	0x08006580

08004084 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800408e:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <dmp_set_orientation+0x1c4>)
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4611      	mov	r1, r2
 8004098:	8019      	strh	r1, [r3, #0]
 800409a:	3302      	adds	r3, #2
 800409c:	0c12      	lsrs	r2, r2, #16
 800409e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80040a0:	4a6a      	ldr	r2, [pc, #424]	; (800424c <dmp_set_orientation+0x1c8>)
 80040a2:	f107 0310 	add.w	r3, r7, #16
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4611      	mov	r1, r2
 80040aa:	8019      	strh	r1, [r3, #0]
 80040ac:	3302      	adds	r3, #2
 80040ae:	0c12      	lsrs	r2, r2, #16
 80040b0:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 80040b2:	4a67      	ldr	r2, [pc, #412]	; (8004250 <dmp_set_orientation+0x1cc>)
 80040b4:	f107 030c 	add.w	r3, r7, #12
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	4611      	mov	r1, r2
 80040bc:	8019      	strh	r1, [r3, #0]
 80040be:	3302      	adds	r3, #2
 80040c0:	0c12      	lsrs	r2, r2, #16
 80040c2:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 80040c4:	4a63      	ldr	r2, [pc, #396]	; (8004254 <dmp_set_orientation+0x1d0>)
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	4611      	mov	r1, r2
 80040ce:	8019      	strh	r1, [r3, #0]
 80040d0:	3302      	adds	r3, #2
 80040d2:	0c12      	lsrs	r2, r2, #16
 80040d4:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	3320      	adds	r3, #32
 80040de:	443b      	add	r3, r7
 80040e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80040e4:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	3320      	adds	r3, #32
 80040f2:	443b      	add	r3, r7
 80040f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80040f8:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	3320      	adds	r3, #32
 8004106:	443b      	add	r3, r7
 8004108:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800410c:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	3320      	adds	r3, #32
 8004116:	443b      	add	r3, r7
 8004118:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800411c:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	b29b      	uxth	r3, r3
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	3320      	adds	r3, #32
 800412a:	443b      	add	r3, r7
 800412c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004130:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	b29b      	uxth	r3, r3
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	3320      	adds	r3, #32
 800413e:	443b      	add	r3, r7
 8004140:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004144:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8004146:	f107 031c 	add.w	r3, r7, #28
 800414a:	461a      	mov	r2, r3
 800414c:	2103      	movs	r1, #3
 800414e:	f240 4026 	movw	r0, #1062	; 0x426
 8004152:	f7ff fcd3 	bl	8003afc <mpu_write_mem>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <dmp_set_orientation+0xde>
        return -1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e06e      	b.n	8004240 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	461a      	mov	r2, r3
 8004168:	2103      	movs	r1, #3
 800416a:	f240 402a 	movw	r0, #1066	; 0x42a
 800416e:	f7ff fcc5 	bl	8003afc <mpu_write_mem>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <dmp_set_orientation+0xfa>
        return -1;
 8004178:	f04f 33ff 	mov.w	r3, #4294967295
 800417c:	e060      	b.n	8004240 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800417e:	f107 031c 	add.w	r3, r7, #28
 8004182:	f107 020c 	add.w	r2, r7, #12
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4611      	mov	r1, r2
 800418a:	8019      	strh	r1, [r3, #0]
 800418c:	3302      	adds	r3, #2
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8004192:	f107 0318 	add.w	r3, r7, #24
 8004196:	f107 0208 	add.w	r2, r7, #8
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	4611      	mov	r1, r2
 800419e:	8019      	strh	r1, [r3, #0]
 80041a0:	3302      	adds	r3, #2
 80041a2:	0c12      	lsrs	r2, r2, #16
 80041a4:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 80041b0:	7f3b      	ldrb	r3, [r7, #28]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 80041ba:	7e3b      	ldrb	r3, [r7, #24]
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80041ce:	7f7b      	ldrb	r3, [r7, #29]
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80041d8:	7e7b      	ldrb	r3, [r7, #25]
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80041f6:	7ebb      	ldrb	r3, [r7, #26]
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8004200:	f107 031c 	add.w	r3, r7, #28
 8004204:	461a      	mov	r2, r3
 8004206:	2103      	movs	r1, #3
 8004208:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800420c:	f7ff fc76 	bl	8003afc <mpu_write_mem>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <dmp_set_orientation+0x198>
        return -1;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	e011      	b.n	8004240 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800421c:	f107 0318 	add.w	r3, r7, #24
 8004220:	461a      	mov	r2, r3
 8004222:	2103      	movs	r1, #3
 8004224:	f240 4031 	movw	r0, #1073	; 0x431
 8004228:	f7ff fc68 	bl	8003afc <mpu_write_mem>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <dmp_set_orientation+0x1b4>
        return -1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	e003      	b.n	8004240 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8004238:	4a07      	ldr	r2, [pc, #28]	; (8004258 <dmp_set_orientation+0x1d4>)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	8113      	strh	r3, [r2, #8]
    return 0;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08006474 	.word	0x08006474
 800424c:	08006478 	.word	0x08006478
 8004250:	0800647c 	.word	0x0800647c
 8004254:	08006480 	.word	0x08006480
 8004258:	20000384 	.word	0x20000384

0800425c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <dmp_set_fifo_rate+0x88>)
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	ca07      	ldmia	r2, {r0, r1, r2}
 800426e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2bc8      	cmp	r3, #200	; 0xc8
 8004276:	d902      	bls.n	800427e <dmp_set_fifo_rate+0x22>
        return -1;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e02e      	b.n	80042dc <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	22c8      	movs	r2, #200	; 0xc8
 8004282:	fb92 f3f3 	sdiv	r3, r2, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800428c:	8bfb      	ldrh	r3, [r7, #30]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8004296:	8bfb      	ldrh	r3, [r7, #30]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	461a      	mov	r2, r3
 80042a2:	2102      	movs	r1, #2
 80042a4:	f240 2016 	movw	r0, #534	; 0x216
 80042a8:	f7ff fc28 	bl	8003afc <mpu_write_mem>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <dmp_set_fifo_rate+0x5c>
        return -1;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	e011      	b.n	80042dc <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80042b8:	f107 0310 	add.w	r3, r7, #16
 80042bc:	461a      	mov	r2, r3
 80042be:	210c      	movs	r1, #12
 80042c0:	f640 20c1 	movw	r0, #2753	; 0xac1
 80042c4:	f7ff fc1a 	bl	8003afc <mpu_write_mem>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <dmp_set_fifo_rate+0x78>
        return -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e003      	b.n	80042dc <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <dmp_set_fifo_rate+0x8c>)
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	8193      	strh	r3, [r2, #12]
    return 0;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	08006484 	.word	0x08006484
 80042e8:	20000384 	.word	0x20000384

080042ec <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	460a      	mov	r2, r1
 80042f6:	71fb      	strb	r3, [r7, #7]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <dmp_set_tap_thresh+0x22>
 8004306:	88bb      	ldrh	r3, [r7, #4]
 8004308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800430c:	d902      	bls.n	8004314 <dmp_set_tap_thresh+0x28>
        return -1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	e10b      	b.n	800452c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8004314:	88bb      	ldrh	r3, [r7, #4]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800431e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8004534 <dmp_set_tap_thresh+0x248>
 8004322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004326:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800432a:	f107 030b 	add.w	r3, r7, #11
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f80c 	bl	800334c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	3b02      	subs	r3, #2
 8004338:	2b0e      	cmp	r3, #14
 800433a:	d87d      	bhi.n	8004438 <dmp_set_tap_thresh+0x14c>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <dmp_set_tap_thresh+0x58>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004381 	.word	0x08004381
 8004348:	08004439 	.word	0x08004439
 800434c:	080043af 	.word	0x080043af
 8004350:	08004439 	.word	0x08004439
 8004354:	08004439 	.word	0x08004439
 8004358:	08004439 	.word	0x08004439
 800435c:	080043dd 	.word	0x080043dd
 8004360:	08004439 	.word	0x08004439
 8004364:	08004439 	.word	0x08004439
 8004368:	08004439 	.word	0x08004439
 800436c:	08004439 	.word	0x08004439
 8004370:	08004439 	.word	0x08004439
 8004374:	08004439 	.word	0x08004439
 8004378:	08004439 	.word	0x08004439
 800437c:	0800440b 	.word	0x0800440b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004380:	edd7 7a04 	vldr	s15, [r7, #16]
 8004384:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004538 <dmp_set_tap_thresh+0x24c>
 8004388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004390:	ee17 3a90 	vmov	r3, s15
 8004394:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004396:	edd7 7a04 	vldr	s15, [r7, #16]
 800439a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800453c <dmp_set_tap_thresh+0x250>
 800439e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a6:	ee17 3a90 	vmov	r3, s15
 80043aa:	82bb      	strh	r3, [r7, #20]
        break;
 80043ac:	e047      	b.n	800443e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 80043ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004540 <dmp_set_tap_thresh+0x254>
 80043b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043be:	ee17 3a90 	vmov	r3, s15
 80043c2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 80043c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80043c8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004544 <dmp_set_tap_thresh+0x258>
 80043cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d4:	ee17 3a90 	vmov	r3, s15
 80043d8:	82bb      	strh	r3, [r7, #20]
        break;
 80043da:	e030      	b.n	800443e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 80043dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80043e0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004548 <dmp_set_tap_thresh+0x25c>
 80043e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ec:	ee17 3a90 	vmov	r3, s15
 80043f0:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80043f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800454c <dmp_set_tap_thresh+0x260>
 80043fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004402:	ee17 3a90 	vmov	r3, s15
 8004406:	82bb      	strh	r3, [r7, #20]
        break;
 8004408:	e019      	b.n	800443e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800440a:	edd7 7a04 	vldr	s15, [r7, #16]
 800440e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004550 <dmp_set_tap_thresh+0x264>
 8004412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441a:	ee17 3a90 	vmov	r3, s15
 800441e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004420:	edd7 7a04 	vldr	s15, [r7, #16]
 8004424:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004554 <dmp_set_tap_thresh+0x268>
 8004428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004430:	ee17 3a90 	vmov	r3, s15
 8004434:	82bb      	strh	r3, [r7, #20]
        break;
 8004436:	e002      	b.n	800443e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	e076      	b.n	800452c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800443e:	8afb      	ldrh	r3, [r7, #22]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	b29b      	uxth	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004448:	8afb      	ldrh	r3, [r7, #22]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800444e:	8abb      	ldrh	r3, [r7, #20]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	b29b      	uxth	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004458:	8abb      	ldrh	r3, [r7, #20]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004468:	f107 030c 	add.w	r3, r7, #12
 800446c:	461a      	mov	r2, r3
 800446e:	2102      	movs	r1, #2
 8004470:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004474:	f7ff fb42 	bl	8003afc <mpu_write_mem>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <dmp_set_tap_thresh+0x198>
            return -1;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	e053      	b.n	800452c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	3302      	adds	r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	2102      	movs	r1, #2
 800448e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004492:	f7ff fb33 	bl	8003afc <mpu_write_mem>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <dmp_set_tap_thresh+0x1b6>
            return -1;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	e044      	b.n	800452c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01c      	beq.n	80044e6 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	461a      	mov	r2, r3
 80044b2:	2102      	movs	r1, #2
 80044b4:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 80044b8:	f7ff fb20 	bl	8003afc <mpu_write_mem>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <dmp_set_tap_thresh+0x1dc>
            return -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	e031      	b.n	800452c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	3302      	adds	r3, #2
 80044ce:	461a      	mov	r2, r3
 80044d0:	2102      	movs	r1, #2
 80044d2:	f44f 7094 	mov.w	r0, #296	; 0x128
 80044d6:	f7ff fb11 	bl	8003afc <mpu_write_mem>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <dmp_set_tap_thresh+0x1fa>
            return -1;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	e022      	b.n	800452c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01c      	beq.n	800452a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	461a      	mov	r2, r3
 80044f6:	2102      	movs	r1, #2
 80044f8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80044fc:	f7ff fafe 	bl	8003afc <mpu_write_mem>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <dmp_set_tap_thresh+0x220>
            return -1;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	e00f      	b.n	800452c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	3302      	adds	r3, #2
 8004512:	461a      	mov	r2, r3
 8004514:	2102      	movs	r1, #2
 8004516:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800451a:	f7ff faef 	bl	8003afc <mpu_write_mem>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <dmp_set_tap_thresh+0x23e>
            return -1;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e000      	b.n	800452c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	43480000 	.word	0x43480000
 8004538:	46800000 	.word	0x46800000
 800453c:	46400000 	.word	0x46400000
 8004540:	46000000 	.word	0x46000000
 8004544:	45c00000 	.word	0x45c00000
 8004548:	45800000 	.word	0x45800000
 800454c:	45400000 	.word	0x45400000
 8004550:	45000000 	.word	0x45000000
 8004554:	44c00000 	.word	0x44c00000

08004558 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004576:	b2db      	uxtb	r3, r3
 8004578:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	f043 030c 	orr.w	r3, r3, #12
 800458a:	b2db      	uxtb	r3, r3
 800458c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	f043 0303 	orr.w	r3, r3, #3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80045a2:	f107 030f 	add.w	r3, r7, #15
 80045a6:	461a      	mov	r2, r3
 80045a8:	2101      	movs	r1, #1
 80045aa:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80045ae:	f7ff faa5 	bl	8003afc <mpu_write_mem>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <dmp_set_tap_count+0x16>
        min_taps = 1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	71fb      	strb	r3, [r7, #7]
 80045d0:	e004      	b.n	80045dc <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d901      	bls.n	80045dc <dmp_set_tap_count+0x20>
        min_taps = 4;
 80045d8:	2304      	movs	r3, #4
 80045da:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80045e4:	f107 030f 	add.w	r3, r7, #15
 80045e8:	461a      	mov	r2, r3
 80045ea:	2101      	movs	r1, #1
 80045ec:	f240 104f 	movw	r0, #335	; 0x14f
 80045f0:	f7ff fa84 	bl	8003afc <mpu_write_mem>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <dmp_set_tap_time+0x40>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	b29b      	uxth	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004620:	89fb      	ldrh	r3, [r7, #14]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	461a      	mov	r2, r3
 800462c:	2102      	movs	r1, #2
 800462e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8004632:	f7ff fa63 	bl	8003afc <mpu_write_mem>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	cccccccd 	.word	0xcccccccd

08004644 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <dmp_set_tap_time_multi+0x40>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800465a:	89fb      	ldrh	r3, [r7, #14]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	b29b      	uxth	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	461a      	mov	r2, r3
 8004670:	2102      	movs	r1, #2
 8004672:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8004676:	f7ff fa41 	bl	8003afc <mpu_write_mem>
 800467a:	4603      	mov	r3, r0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	cccccccd 	.word	0xcccccccd

08004688 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <dmp_set_shake_reject_thresh+0x5c>)
 8004698:	fb82 1203 	smull	r1, r2, r2, r3
 800469c:	1192      	asrs	r2, r2, #6
 800469e:	17db      	asrs	r3, r3, #31
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	161b      	asrs	r3, r3, #24
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	141b      	asrs	r3, r3, #16
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	121b      	asrs	r3, r3, #8
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	461a      	mov	r2, r3
 80046ce:	2104      	movs	r1, #4
 80046d0:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 80046d4:	f7ff fa12 	bl	8003afc <mpu_write_mem>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	10624dd3 	.word	0x10624dd3

080046e8 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <dmp_set_shake_reject_time+0x40>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	b29b      	uxth	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	461a      	mov	r2, r3
 8004714:	2102      	movs	r1, #2
 8004716:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800471a:	f7ff f9ef 	bl	8003afc <mpu_write_mem>
 800471e:	4603      	mov	r3, r0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	cccccccd 	.word	0xcccccccd

0800472c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <dmp_set_shake_reject_timeout+0x40>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	b29b      	uxth	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	461a      	mov	r2, r3
 8004758:	2102      	movs	r1, #2
 800475a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800475e:	f7ff f9cd 	bl	8003afc <mpu_write_mem>
 8004762:	4603      	mov	r3, r0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	cccccccd 	.word	0xcccccccd

08004770 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800477a:	2302      	movs	r3, #2
 800477c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800477e:	23ca      	movs	r3, #202	; 0xca
 8004780:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004782:	23e3      	movs	r3, #227	; 0xe3
 8004784:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8004786:	2309      	movs	r3, #9
 8004788:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	461a      	mov	r2, r3
 8004790:	2104      	movs	r1, #4
 8004792:	2068      	movs	r0, #104	; 0x68
 8004794:	f7ff f9b2 	bl	8003afc <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004798:	23a3      	movs	r3, #163	; 0xa3
 800479a:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d006      	beq.n	80047b4 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80047a6:	23c0      	movs	r3, #192	; 0xc0
 80047a8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80047aa:	23c8      	movs	r3, #200	; 0xc8
 80047ac:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80047ae:	23c2      	movs	r3, #194	; 0xc2
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e005      	b.n	80047c0 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80047b4:	23a3      	movs	r3, #163	; 0xa3
 80047b6:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80047b8:	23a3      	movs	r3, #163	; 0xa3
 80047ba:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80047bc:	23a3      	movs	r3, #163	; 0xa3
 80047be:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80047ca:	23c4      	movs	r3, #196	; 0xc4
 80047cc:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80047ce:	23cc      	movs	r3, #204	; 0xcc
 80047d0:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80047d2:	23c6      	movs	r3, #198	; 0xc6
 80047d4:	74bb      	strb	r3, [r7, #18]
 80047d6:	e005      	b.n	80047e4 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80047d8:	23a3      	movs	r3, #163	; 0xa3
 80047da:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80047dc:	23a3      	movs	r3, #163	; 0xa3
 80047de:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80047e0:	23a3      	movs	r3, #163	; 0xa3
 80047e2:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80047e4:	23a3      	movs	r3, #163	; 0xa3
 80047e6:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80047e8:	23a3      	movs	r3, #163	; 0xa3
 80047ea:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80047ec:	23a3      	movs	r3, #163	; 0xa3
 80047ee:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	461a      	mov	r2, r3
 80047f6:	210a      	movs	r1, #10
 80047f8:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80047fc:	f7ff f97e 	bl	8003afc <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800480a:	2320      	movs	r3, #32
 800480c:	733b      	strb	r3, [r7, #12]
 800480e:	e001      	b.n	8004814 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004810:	23d8      	movs	r3, #216	; 0xd8
 8004812:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	461a      	mov	r2, r3
 800481a:	2101      	movs	r1, #1
 800481c:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004820:	f7ff f96c 	bl	8003afc <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800482e:	2001      	movs	r0, #1
 8004830:	f000 f8c6 	bl	80049c0 <dmp_enable_gyro_cal>
 8004834:	e002      	b.n	800483c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004836:	2000      	movs	r0, #0
 8004838:	f000 f8c2 	bl	80049c0 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004850:	23b2      	movs	r3, #178	; 0xb2
 8004852:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004854:	238b      	movs	r3, #139	; 0x8b
 8004856:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004858:	23b6      	movs	r3, #182	; 0xb6
 800485a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800485c:	239b      	movs	r3, #155	; 0x9b
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e007      	b.n	8004872 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8004862:	23b0      	movs	r3, #176	; 0xb0
 8004864:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800486a:	23b4      	movs	r3, #180	; 0xb4
 800486c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800486e:	2390      	movs	r3, #144	; 0x90
 8004870:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	461a      	mov	r2, r3
 8004878:	2104      	movs	r1, #4
 800487a:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800487e:	f7ff f93d 	bl	8003afc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d025      	beq.n	80048d8 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800488c:	23f8      	movs	r3, #248	; 0xf8
 800488e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	461a      	mov	r2, r3
 8004896:	2101      	movs	r1, #1
 8004898:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800489c:	f7ff f92e 	bl	8003afc <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80048a0:	21fa      	movs	r1, #250	; 0xfa
 80048a2:	2007      	movs	r0, #7
 80048a4:	f7ff fd22 	bl	80042ec <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80048a8:	2007      	movs	r0, #7
 80048aa:	f7ff fe55 	bl	8004558 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80048ae:	2001      	movs	r0, #1
 80048b0:	f7ff fe84 	bl	80045bc <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80048b4:	2064      	movs	r0, #100	; 0x64
 80048b6:	f7ff fea3 	bl	8004600 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80048ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048be:	f7ff fec1 	bl	8004644 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80048c2:	21c8      	movs	r1, #200	; 0xc8
 80048c4:	483c      	ldr	r0, [pc, #240]	; (80049b8 <dmp_enable_feature+0x248>)
 80048c6:	f7ff fedf 	bl	8004688 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80048ca:	2028      	movs	r0, #40	; 0x28
 80048cc:	f7ff ff0c 	bl	80046e8 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80048d0:	200a      	movs	r0, #10
 80048d2:	f7ff ff2b 	bl	800472c <dmp_set_shake_reject_timeout>
 80048d6:	e009      	b.n	80048ec <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80048d8:	23d8      	movs	r3, #216	; 0xd8
 80048da:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	461a      	mov	r2, r3
 80048e2:	2101      	movs	r1, #1
 80048e4:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80048e8:	f7ff f908 	bl	8003afc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80048f6:	23d9      	movs	r3, #217	; 0xd9
 80048f8:	733b      	strb	r3, [r7, #12]
 80048fa:	e001      	b.n	8004900 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80048fc:	23d8      	movs	r3, #216	; 0xd8
 80048fe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	461a      	mov	r2, r3
 8004906:	2101      	movs	r1, #1
 8004908:	f240 703d 	movw	r0, #1853	; 0x73d
 800490c:	f7ff f8f6 	bl	8003afc <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800491a:	2001      	movs	r0, #1
 800491c:	f000 f880 	bl	8004a20 <dmp_enable_lp_quat>
 8004920:	e002      	b.n	8004928 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8004922:	2000      	movs	r0, #0
 8004924:	f000 f87c 	bl	8004a20 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8004932:	2001      	movs	r0, #1
 8004934:	f000 f89b 	bl	8004a6e <dmp_enable_6x_lp_quat>
 8004938:	e002      	b.n	8004940 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800493a:	2000      	movs	r0, #0
 800493c:	f000 f897 	bl	8004a6e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	b29a      	uxth	r2, r3
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <dmp_enable_feature+0x24c>)
 800494a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800494c:	f7fe fba6 	bl	800309c <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <dmp_enable_feature+0x24c>)
 8004952:	2200      	movs	r2, #0
 8004954:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <dmp_enable_feature+0x24c>)
 8004962:	7b9b      	ldrb	r3, [r3, #14]
 8004964:	3306      	adds	r3, #6
 8004966:	b2da      	uxtb	r2, r3
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <dmp_enable_feature+0x24c>)
 800496a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <dmp_enable_feature+0x24c>)
 8004978:	7b9b      	ldrb	r3, [r3, #14]
 800497a:	3306      	adds	r3, #6
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <dmp_enable_feature+0x24c>)
 8004980:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	f003 0314 	and.w	r3, r3, #20
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <dmp_enable_feature+0x24c>)
 800498e:	7b9b      	ldrb	r3, [r3, #14]
 8004990:	3310      	adds	r3, #16
 8004992:	b2da      	uxtb	r2, r3
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <dmp_enable_feature+0x24c>)
 8004996:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <dmp_enable_feature+0x24c>)
 80049a4:	7b9b      	ldrb	r3, [r3, #14]
 80049a6:	3304      	adds	r3, #4
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <dmp_enable_feature+0x24c>)
 80049ac:	739a      	strb	r2, [r3, #14]

    return 0;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	02cae309 	.word	0x02cae309
 80049bc:	20000384 	.word	0x20000384

080049c0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00f      	beq.n	80049f0 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <dmp_enable_gyro_cal+0x58>)
 80049d2:	f107 0314 	add.w	r3, r7, #20
 80049d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80049d8:	c303      	stmia	r3!, {r0, r1}
 80049da:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	461a      	mov	r2, r3
 80049e2:	2109      	movs	r1, #9
 80049e4:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80049e8:	f7ff f888 	bl	8003afc <mpu_write_mem>
 80049ec:	4603      	mov	r3, r0
 80049ee:	e00e      	b.n	8004a0e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <dmp_enable_gyro_cal+0x5c>)
 80049f2:	f107 0308 	add.w	r3, r7, #8
 80049f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80049f8:	c303      	stmia	r3!, {r0, r1}
 80049fa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	461a      	mov	r2, r3
 8004a02:	2109      	movs	r1, #9
 8004a04:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004a08:	f7ff f878 	bl	8003afc <mpu_write_mem>
 8004a0c:	4603      	mov	r3, r0
    }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	08006490 	.word	0x08006490
 8004a1c:	0800649c 	.word	0x0800649c

08004a20 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004a34:	23c2      	movs	r3, #194	; 0xc2
 8004a36:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004a38:	23c4      	movs	r3, #196	; 0xc4
 8004a3a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004a3c:	23c6      	movs	r3, #198	; 0xc6
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e006      	b.n	8004a50 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	2204      	movs	r2, #4
 8004a48:	218b      	movs	r1, #139	; 0x8b
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 fcfe 	bl	800644c <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	461a      	mov	r2, r3
 8004a56:	2104      	movs	r1, #4
 8004a58:	f640 2098 	movw	r0, #2712	; 0xa98
 8004a5c:	f7ff f84e 	bl	8003afc <mpu_write_mem>

    return mpu_reset_fifo();
 8004a60:	f7fe fb1c 	bl	800309c <mpu_reset_fifo>
 8004a64:	4603      	mov	r3, r0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4603      	mov	r3, r0
 8004a76:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8004a7e:	2320      	movs	r3, #32
 8004a80:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8004a82:	2328      	movs	r3, #40	; 0x28
 8004a84:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004a86:	2330      	movs	r3, #48	; 0x30
 8004a88:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004a8a:	2338      	movs	r3, #56	; 0x38
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e006      	b.n	8004a9e <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	2204      	movs	r2, #4
 8004a96:	21a3      	movs	r1, #163	; 0xa3
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fcd7 	bl	800644c <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2104      	movs	r1, #4
 8004aa6:	f640 209e 	movw	r0, #2718	; 0xa9e
 8004aaa:	f7ff f827 	bl	8003afc <mpu_write_mem>

    return mpu_reset_fifo();
 8004aae:	f7fe faf5 	bl	800309c <mpu_reset_fifo>
 8004ab2:	4603      	mov	r3, r0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <dmp_register_tap_cb>:
 *  \n TAP_Z_DOWN
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    dmp.tap_cb = func;
 8004ac4:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <dmp_register_tap_cb+0x1c>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6013      	str	r3, [r2, #0]
    return 0;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000384 	.word	0x20000384

08004adc <dmp_register_android_orient_cb>:
 *  @brief      Register a function to be executed on a android orientation event.
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    dmp.android_orient_cb = func;
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <dmp_register_android_orient_cb+0x1c>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6053      	str	r3, [r2, #4]
    return 0;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000384 	.word	0x20000384

08004afc <LL_SPI_TransmitData8>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	701a      	strb	r2, [r3, #0]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_GPIO_SetOutputPin>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	619a      	str	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_GPIO_ResetOutputPin>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <clearChipSelect>:
static uint8_t writeIndex = 0;
#else
dmp_data_t dmpData;
#endif
// CS is active low. This disables the chip
__STATIC_INLINE void clearChipSelect() {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8004b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b64:	f7ff ffdc 	bl	8004b20 <LL_GPIO_SetOutputPin>
}
 8004b68:	bf00      	nop
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <setChipSelect>:

// CS is active low. This enables the chip.
__STATIC_INLINE void setChipSelect() {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8004b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b78:	f7ff ffe0 	bl	8004b3c <LL_GPIO_ResetOutputPin>
}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <mpu9255_write>:

int mpu9255_write(unsigned char slave_addr, unsigned char reg_addr,
     unsigned char length, unsigned char const *data) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	71fb      	strb	r3, [r7, #7]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	71bb      	strb	r3, [r7, #6]
 8004b90:	4613      	mov	r3, r2
 8004b92:	717b      	strb	r3, [r7, #5]

	(void)slave_addr; // NOT NEEDED, I2C variable. Suppress unused variable warning

	setChipSelect();
 8004b94:	f7ff ffea 	bl	8004b6c <setChipSelect>

	// 4 byte fifo. Respect that and write when free
	LL_SPI_TransmitData8(SPI1, reg_addr);
 8004b98:	79bb      	ldrb	r3, [r7, #6]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	481d      	ldr	r0, [pc, #116]	; (8004c14 <mpu9255_write+0x94>)
 8004b9e:	f7ff ffad 	bl	8004afc <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	e011      	b.n	8004bcc <mpu9255_write+0x4c>
		while (!(SPI1->SR & SPI_SR_TXE)) {
 8004ba8:	bf00      	nop
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <mpu9255_write+0x94>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f9      	beq.n	8004baa <mpu9255_write+0x2a>
		};
		LL_SPI_TransmitData8(SPI1, data[i]);
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4814      	ldr	r0, [pc, #80]	; (8004c14 <mpu9255_write+0x94>)
 8004bc2:	f7ff ff9b 	bl	8004afc <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	797b      	ldrb	r3, [r7, #5]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d3e9      	bcc.n	8004ba8 <mpu9255_write+0x28>
	}

	// wait for completion
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 8004bd4:	bf00      	nop
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <mpu9255_write+0x94>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <mpu9255_write+0x56>
	}; 	//transmit fifo empty?
	while ((SPI1->SR & SPI_SR_BSY)) {
 8004be2:	bf00      	nop
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <mpu9255_write+0x94>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f9      	bne.n	8004be4 <mpu9255_write+0x64>
	}; 	// no longer busy
	clearChipSelect();
 8004bf0:	f7ff ffb2 	bl	8004b58 <clearChipSelect>

	// clear receive fifo. Overrun data will be lost, but we are only sending.
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8004bf4:	e002      	b.n	8004bfc <mpu9255_write+0x7c>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <mpu9255_write+0x94>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	73bb      	strb	r3, [r7, #14]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <mpu9255_write+0x94>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f6      	bne.n	8004bf6 <mpu9255_write+0x76>
		(void) dummy;						// suppress unused variable warning
	};
	return 0;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40013000 	.word	0x40013000

08004c18 <mpu9255_read>:
 * Read assumes that calling function is providing a data location big enough
 * to handle the size of length. Be aware that this can overrun the calling
 * memory location if not sized appropriately!
 */
int mpu9255_read(unsigned char slave_addr, unsigned char reg_addr,
      unsigned char length, unsigned char *data) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4603      	mov	r3, r0
 8004c22:	71fb      	strb	r3, [r7, #7]
 8004c24:	460b      	mov	r3, r1
 8004c26:	71bb      	strb	r3, [r7, #6]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	717b      	strb	r3, [r7, #5]

	(void) slave_addr; // not used, suppress unused variable warning.

	setChipSelect();
 8004c2c:	f7ff ff9e 	bl	8004b6c <setChipSelect>

	// 4 byte fifo not used. Reads need to be captured.
	LL_SPI_TransmitData8(SPI1, (reg_addr | 0x80)); // MSb set signals read.
 8004c30:	79bb      	ldrb	r3, [r7, #6]
 8004c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	481b      	ldr	r0, [pc, #108]	; (8004ca8 <mpu9255_read+0x90>)
 8004c3c:	f7ff ff5e 	bl	8004afc <LL_SPI_TransmitData8>
	while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 8004c40:	bf00      	nop
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <mpu9255_read+0x90>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f9      	beq.n	8004c42 <mpu9255_read+0x2a>
	uint8_t dummy = SPI1->DR; 				// first byte is from cmd transfer. Ignore
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <mpu9255_read+0x90>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	73bb      	strb	r3, [r7, #14]
	(void)dummy; // suppress unused variable warning

	// read the data sequentially
	for (uint8_t i = 0; i < length; i++) {
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
 8004c58:	e014      	b.n	8004c84 <mpu9255_read+0x6c>
		LL_SPI_TransmitData8(SPI1, 0xFF);	// send clocking byte, not used.
 8004c5a:	21ff      	movs	r1, #255	; 0xff
 8004c5c:	4812      	ldr	r0, [pc, #72]	; (8004ca8 <mpu9255_read+0x90>)
 8004c5e:	f7ff ff4d 	bl	8004afc <LL_SPI_TransmitData8>
		while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 8004c62:	bf00      	nop
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <mpu9255_read+0x90>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f9      	beq.n	8004c64 <mpu9255_read+0x4c>
		data[i] = SPI1->DR;
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <mpu9255_read+0x90>)
 8004c72:	68d9      	ldr	r1, [r3, #12]
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	b2ca      	uxtb	r2, r1
 8004c7c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	3301      	adds	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	7bfa      	ldrb	r2, [r7, #15]
 8004c86:	797b      	ldrb	r3, [r7, #5]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3e6      	bcc.n	8004c5a <mpu9255_read+0x42>
	}

	while ((SPI1->SR & SPI_SR_BSY)) {
 8004c8c:	bf00      	nop
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <mpu9255_read+0x90>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f9      	bne.n	8004c8e <mpu9255_read+0x76>
		}; 	// no longer busy
	clearChipSelect();
 8004c9a:	f7ff ff5d 	bl	8004b58 <clearChipSelect>

	return 0;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40013000 	.word	0x40013000

08004cac <mpu9255_delay_ms>:

void mpu9255_delay_ms(unsigned long num_ms) {
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	ms_delay = num_ms;
 8004cb4:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <mpu9255_delay_ms+0x28>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
	while (ms_delay > 0) {
 8004cba:	bf00      	nop
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <mpu9255_delay_ms+0x28>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1fb      	bne.n	8004cbc <mpu9255_delay_ms+0x10>
		// do nothing while we wait.
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	200003c0 	.word	0x200003c0

08004cd8 <delaytimer_event_handler>:

void mpu9255_get_ms(unsigned long *count) {
	*count = g_ul_ms_ticks;
}

void delaytimer_event_handler() {
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <delaytimer_event_handler+0x2c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <delaytimer_event_handler+0x2c>)
 8004ce4:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <delaytimer_event_handler+0x30>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <delaytimer_event_handler+0x20>
		ms_delay--;
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <delaytimer_event_handler+0x30>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <delaytimer_event_handler+0x30>)
 8004cf6:	6013      	str	r3, [r2, #0]
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	200003bc 	.word	0x200003bc
 8004d08:	200003c0 	.word	0x200003c0

08004d0c <readTimer_event_handler>:

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
	updateRequired = true;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <readTimer_event_handler+0x14>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	200003c4 	.word	0x200003c4

08004d24 <android_orient_cb>:

void android_orient_cb(unsigned char orientation) {
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
	// do nothing, not used.
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <tap_cb>:
void tap_cb(unsigned char direction, unsigned char count) {
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4603      	mov	r3, r0
 8004d42:	460a      	mov	r2, r1
 8004d44:	71fb      	strb	r3, [r7, #7]
 8004d46:	4613      	mov	r3, r2
 8004d48:	71bb      	strb	r3, [r7, #6]
	// do nothing, not used.
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f993 3000 	ldrsb.w	r3, [r3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dd02      	ble.n	8004d6e <inv_row_2_scale+0x18>
        b = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	81fb      	strh	r3, [r7, #14]
 8004d6c:	e02d      	b.n	8004dca <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f993 3000 	ldrsb.w	r3, [r3]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da02      	bge.n	8004d7e <inv_row_2_scale+0x28>
        b = 4;
 8004d78:	2304      	movs	r3, #4
 8004d7a:	81fb      	strh	r3, [r7, #14]
 8004d7c:	e025      	b.n	8004dca <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3301      	adds	r3, #1
 8004d82:	f993 3000 	ldrsb.w	r3, [r3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dd02      	ble.n	8004d90 <inv_row_2_scale+0x3a>
        b = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	81fb      	strh	r3, [r7, #14]
 8004d8e:	e01c      	b.n	8004dca <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	f993 3000 	ldrsb.w	r3, [r3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da02      	bge.n	8004da2 <inv_row_2_scale+0x4c>
        b = 5;
 8004d9c:	2305      	movs	r3, #5
 8004d9e:	81fb      	strh	r3, [r7, #14]
 8004da0:	e013      	b.n	8004dca <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3302      	adds	r3, #2
 8004da6:	f993 3000 	ldrsb.w	r3, [r3]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	dd02      	ble.n	8004db4 <inv_row_2_scale+0x5e>
        b = 2;
 8004dae:	2302      	movs	r3, #2
 8004db0:	81fb      	strh	r3, [r7, #14]
 8004db2:	e00a      	b.n	8004dca <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3302      	adds	r3, #2
 8004db8:	f993 3000 	ldrsb.w	r3, [r3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da02      	bge.n	8004dc6 <inv_row_2_scale+0x70>
        b = 6;
 8004dc0:	2306      	movs	r3, #6
 8004dc2:	81fb      	strh	r3, [r7, #14]
 8004dc4:	e001      	b.n	8004dca <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	81fb      	strh	r3, [r7, #14]
    return b;
 8004dca:	89fb      	ldrh	r3, [r7, #14]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ffb8 	bl	8004d56 <inv_row_2_scale>
 8004de6:	4603      	mov	r3, r0
 8004de8:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3303      	adds	r3, #3
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff ffb1 	bl	8004d56 <inv_row_2_scale>
 8004df4:	4603      	mov	r3, r0
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	b21a      	sxth	r2, r3
 8004dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b21b      	sxth	r3, r3
 8004e02:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3306      	adds	r3, #6
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ffa4 	bl	8004d56 <inv_row_2_scale>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	b21a      	sxth	r2, r3
 8004e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <mpu9255_init>:


	}
}

void mpu9255_init(uint32_t readPeriod) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
//	spi1_init(); ??
	clearChipSelect();
 8004e30:	f7ff fe92 	bl	8004b58 <clearChipSelect>
	uint8_t whoami;
	mpu9255_read(0, 0x75, 1, &whoami);
 8004e34:	f107 031f 	add.w	r3, r7, #31
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2175      	movs	r1, #117	; 0x75
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7ff feeb 	bl	8004c18 <mpu9255_read>
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <mpu9255_init+0xc8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	721a      	strb	r2, [r3, #8]
	delayTimer.alarm = 1; // 1ms
 8004e48:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <mpu9255_init+0xc8>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	60da      	str	r2, [r3, #12]
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <mpu9255_init+0xc8>)
 8004e50:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <mpu9255_init+0xcc>)
 8004e52:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&delayTimer);
 8004e54:	4826      	ldr	r0, [pc, #152]	; (8004ef0 <mpu9255_init+0xc8>)
 8004e56:	f7fd fa13 	bl	8002280 <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 8004e5a:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <mpu9255_init+0xc8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fd f9e6 	bl	8002230 <systick_app_timer_channel_start>

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <mpu9255_init+0xd0>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	721a      	strb	r2, [r3, #8]
	readTimer.alarm = readPeriod; // 1ms
 8004e6a:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <mpu9255_init+0xd0>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60d3      	str	r3, [r2, #12]
	readTimer.timerAlarmCallback = readTimer_event_handler;
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <mpu9255_init+0xd0>)
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <mpu9255_init+0xd4>)
 8004e74:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&readTimer);
 8004e76:	4820      	ldr	r0, [pc, #128]	; (8004ef8 <mpu9255_init+0xd0>)
 8004e78:	f7fd fa02 	bl	8002280 <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// reset internal data
	memset(&dmpData, 0, sizeof(dmpData));
 8004e7c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8004e80:	2100      	movs	r1, #0
 8004e82:	481f      	ldr	r0, [pc, #124]	; (8004f00 <mpu9255_init+0xd8>)
 8004e84:	f001 fae2 	bl	800644c <memset>

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 8004e88:	f107 0318 	add.w	r3, r7, #24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd ffa3 	bl	8002dd8 <mpu_init>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8004e92:	2078      	movs	r0, #120	; 0x78
 8004e94:	f7fe fc4a 	bl	800372c <mpu_set_sensors>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 8004e98:	f7ff f8e4 	bl	8004064 <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {1, 0, 0,
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <mpu9255_init+0xdc>)
 8004e9e:	f107 030c 	add.w	r3, r7, #12
 8004ea2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ea4:	c303      	stmia	r3!, {r0, r1}
 8004ea6:	701a      	strb	r2, [r3, #0]
							0, 0, -1,
							0, 1, 0};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ff93 	bl	8004dd8 <inv_orientation_matrix_to_scalar>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f8e5 	bl	8004084 <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 8004eba:	4813      	ldr	r0, [pc, #76]	; (8004f08 <mpu9255_init+0xe0>)
 8004ebc:	f7ff fdfe 	bl	8004abc <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 8004ec0:	4812      	ldr	r0, [pc, #72]	; (8004f0c <mpu9255_init+0xe4>)
 8004ec2:	f7ff fe0b 	bl	8004adc <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
 8004ec6:	20d0      	movs	r0, #208	; 0xd0
 8004ec8:	f7ff fc52 	bl	8004770 <dmp_enable_feature>

	dmp_set_fifo_rate(100);
 8004ecc:	2064      	movs	r0, #100	; 0x64
 8004ece:	f7ff f9c5 	bl	800425c <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	f7fe ff34 	bl	8003d40 <mpu_set_dmp_state>
	mpu_reset_fifo();
 8004ed8:	f7fe f8e0 	bl	800309c <mpu_reset_fifo>
	systick_app_timer_channel_start(readTimer.channel);
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <mpu9255_init+0xd0>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd f9a5 	bl	8002230 <systick_app_timer_channel_start>
}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000394 	.word	0x20000394
 8004ef4:	08004cd9 	.word	0x08004cd9
 8004ef8:	200003a8 	.word	0x200003a8
 8004efc:	08004d0d 	.word	0x08004d0d
 8004f00:	200003c8 	.word	0x200003c8
 8004f04:	080064c0 	.word	0x080064c0
 8004f08:	08004d3b 	.word	0x08004d3b
 8004f0c:	08004d25 	.word	0x08004d25

08004f10 <LL_ADC_REG_SetSequencerLength>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f023 020f 	bic.w	r2, r3, #15
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_ADC_IsEnabled>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <LL_ADC_IsEnabled+0x18>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <LL_ADC_IsEnabled+0x1a>
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004f6a:	481c      	ldr	r0, [pc, #112]	; (8004fdc <LL_ADC_CommonInit+0x80>)
 8004f6c:	f7ff ffe3 	bl	8004f36 <LL_ADC_IsEnabled>
 8004f70:	4604      	mov	r4, r0
 8004f72:	481b      	ldr	r0, [pc, #108]	; (8004fe0 <LL_ADC_CommonInit+0x84>)
 8004f74:	f7ff ffdf 	bl	8004f36 <LL_ADC_IsEnabled>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	431c      	orrs	r4, r3
 8004f7c:	4819      	ldr	r0, [pc, #100]	; (8004fe4 <LL_ADC_CommonInit+0x88>)
 8004f7e:	f7ff ffda 	bl	8004f36 <LL_ADC_IsEnabled>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4323      	orrs	r3, r4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d120      	bne.n	8004fcc <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d012      	beq.n	8004fb8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <LL_ADC_CommonInit+0x8c>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	6811      	ldr	r1, [r2, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	6852      	ldr	r2, [r2, #4]
 8004fa2:	4311      	orrs	r1, r2
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	e00b      	b.n	8004fd0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <LL_ADC_CommonInit+0x8c>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	e001      	b.n	8004fd0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd90      	pop	{r4, r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	50040000 	.word	0x50040000
 8004fe0:	50040100 	.word	0x50040100
 8004fe4:	50040200 	.word	0x50040200
 8004fe8:	ffc030e0 	.word	0xffc030e0

08004fec <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ff9b 	bl	8004f36 <LL_ADC_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d111      	bne.n	800502a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	6852      	ldr	r2, [r2, #4]
 800501a:	4311      	orrs	r1, r2
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	6892      	ldr	r2, [r2, #8]
 8005020:	430a      	orrs	r2, r1
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
 8005028:	e001      	b.n	800502e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff75 	bl	8004f36 <LL_ADC_IsEnabled>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d132      	bne.n	80050b8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d015      	beq.n	8005086 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <LL_ADC_REG_Init+0x90>)
 8005060:	4013      	ands	r3, r2
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	4311      	orrs	r1, r2
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	4311      	orrs	r1, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	6912      	ldr	r2, [r2, #16]
 8005076:	4311      	orrs	r1, r2
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	6952      	ldr	r2, [r2, #20]
 800507c:	430a      	orrs	r2, r1
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e011      	b.n	80050aa <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <LL_ADC_REG_Init+0x90>)
 800508c:	4013      	ands	r3, r2
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	6811      	ldr	r1, [r2, #0]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	68d2      	ldr	r2, [r2, #12]
 8005096:	4311      	orrs	r1, r2
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	6912      	ldr	r2, [r2, #16]
 800509c:	4311      	orrs	r1, r2
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	6952      	ldr	r2, [r2, #20]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ff2d 	bl	8004f10 <LL_ADC_REG_SetSequencerLength>
 80050b6:	e001      	b.n	80050bc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	fff0c03c 	.word	0xfff0c03c

080050cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <LL_EXTI_EnableIT_0_31+0x20>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4904      	ldr	r1, [pc, #16]	; (80050ec <LL_EXTI_EnableIT_0_31+0x20>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	600b      	str	r3, [r1, #0]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010400 	.word	0x40010400

080050f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <LL_EXTI_EnableIT_32_63+0x20>)
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	4904      	ldr	r1, [pc, #16]	; (8005110 <LL_EXTI_EnableIT_32_63+0x20>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4313      	orrs	r3, r2
 8005102:	620b      	str	r3, [r1, #32]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010400 	.word	0x40010400

08005114 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <LL_EXTI_DisableIT_0_31+0x24>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	43db      	mvns	r3, r3
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <LL_EXTI_DisableIT_0_31+0x24>)
 8005126:	4013      	ands	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010400 	.word	0x40010400

0800513c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <LL_EXTI_DisableIT_32_63+0x24>)
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	43db      	mvns	r3, r3
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <LL_EXTI_DisableIT_32_63+0x24>)
 800514e:	4013      	ands	r3, r2
 8005150:	620b      	str	r3, [r1, #32]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010400 	.word	0x40010400

08005164 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <LL_EXTI_EnableEvent_0_31+0x20>)
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]

}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005194:	4904      	ldr	r1, [pc, #16]	; (80051a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4313      	orrs	r3, r2
 800519a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010400 	.word	0x40010400

080051ac <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	4904      	ldr	r1, [pc, #16]	; (80051d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051be:	4013      	ands	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010400 	.word	0x40010400

080051d4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80051de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	4904      	ldr	r1, [pc, #16]	; (80051f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010400 	.word	0x40010400

080051fc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	4904      	ldr	r1, [pc, #16]	; (800521c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]

}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010400 	.word	0x40010400

08005220 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800522a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522c:	4904      	ldr	r1, [pc, #16]	; (8005240 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4313      	orrs	r3, r2
 8005232:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40010400 	.word	0x40010400

08005244 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	43db      	mvns	r3, r3
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005256:	4013      	ands	r3, r2
 8005258:	608b      	str	r3, [r1, #8]

}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010400 	.word	0x40010400

0800526c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	43db      	mvns	r3, r3
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800527e:	4013      	ands	r3, r2
 8005280:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010400 	.word	0x40010400

08005294 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	4904      	ldr	r1, [pc, #16]	; (80052b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60cb      	str	r3, [r1, #12]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40010400 	.word	0x40010400

080052b8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4904      	ldr	r1, [pc, #16]	; (80052d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40010400 	.word	0x40010400

080052dc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	4904      	ldr	r1, [pc, #16]	; (8005300 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	60cb      	str	r3, [r1, #12]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010400 	.word	0x40010400

08005304 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	43db      	mvns	r3, r3
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005316:	4013      	ands	r3, r2
 8005318:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010400 	.word	0x40010400

0800532c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7a1b      	ldrb	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80d1 	beq.w	80054e4 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d063      	beq.n	8005412 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7a5b      	ldrb	r3, [r3, #9]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d01c      	beq.n	800538c <LL_EXTI_Init+0x60>
 8005352:	2b02      	cmp	r3, #2
 8005354:	dc25      	bgt.n	80053a2 <LL_EXTI_Init+0x76>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <LL_EXTI_Init+0x34>
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00b      	beq.n	8005376 <LL_EXTI_Init+0x4a>
 800535e:	e020      	b.n	80053a2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff21 	bl	80051ac <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff feac 	bl	80050cc <LL_EXTI_EnableIT_0_31>
          break;
 8005374:	e018      	b.n	80053a8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff feca 	bl	8005114 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff feed 	bl	8005164 <LL_EXTI_EnableEvent_0_31>
          break;
 800538a:	e00d      	b.n	80053a8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fe9b 	bl	80050cc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fee2 	bl	8005164 <LL_EXTI_EnableEvent_0_31>
          break;
 80053a0:	e002      	b.n	80053a8 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80053a2:	2301      	movs	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
          break;
 80053a6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7a9b      	ldrb	r3, [r3, #10]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d030      	beq.n	8005412 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7a9b      	ldrb	r3, [r3, #10]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d01c      	beq.n	80053f2 <LL_EXTI_Init+0xc6>
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	dc25      	bgt.n	8005408 <LL_EXTI_Init+0xdc>
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d002      	beq.n	80053c6 <LL_EXTI_Init+0x9a>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d00b      	beq.n	80053dc <LL_EXTI_Init+0xb0>
 80053c4:	e020      	b.n	8005408 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ff86 	bl	80052dc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff11 	bl	80051fc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80053da:	e01b      	b.n	8005414 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff ff2f 	bl	8005244 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff ff52 	bl	8005294 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80053f0:	e010      	b.n	8005414 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff00 	bl	80051fc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff47 	bl	8005294 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005406:	e005      	b.n	8005414 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f043 0302 	orr.w	r3, r3, #2
 800540e:	60fb      	str	r3, [r7, #12]
            break;
 8005410:	e000      	b.n	8005414 <LL_EXTI_Init+0xe8>
        }
      }
 8005412:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d078      	beq.n	800550e <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	7a5b      	ldrb	r3, [r3, #9]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d01c      	beq.n	800545e <LL_EXTI_Init+0x132>
 8005424:	2b02      	cmp	r3, #2
 8005426:	dc25      	bgt.n	8005474 <LL_EXTI_Init+0x148>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <LL_EXTI_Init+0x106>
 800542c:	2b01      	cmp	r3, #1
 800542e:	d00b      	beq.n	8005448 <LL_EXTI_Init+0x11c>
 8005430:	e020      	b.n	8005474 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fecc 	bl	80051d4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fe55 	bl	80050f0 <LL_EXTI_EnableIT_32_63>
          break;
 8005446:	e01a      	b.n	800547e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fe75 	bl	800513c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fe96 	bl	8005188 <LL_EXTI_EnableEvent_32_63>
          break;
 800545c:	e00f      	b.n	800547e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe44 	bl	80050f0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fe8b 	bl	8005188 <LL_EXTI_EnableEvent_32_63>
          break;
 8005472:	e004      	b.n	800547e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	60fb      	str	r3, [r7, #12]
          break;
 800547c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7a9b      	ldrb	r3, [r3, #10]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d043      	beq.n	800550e <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	7a9b      	ldrb	r3, [r3, #10]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d01c      	beq.n	80054c8 <LL_EXTI_Init+0x19c>
 800548e:	2b03      	cmp	r3, #3
 8005490:	dc25      	bgt.n	80054de <LL_EXTI_Init+0x1b2>
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <LL_EXTI_Init+0x170>
 8005496:	2b02      	cmp	r3, #2
 8005498:	d00b      	beq.n	80054b2 <LL_EXTI_Init+0x186>
 800549a:	e020      	b.n	80054de <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff2f 	bl	8005304 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff feb8 	bl	8005220 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80054b0:	e02e      	b.n	8005510 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fed8 	bl	800526c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fef9 	bl	80052b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80054c6:	e023      	b.n	8005510 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fea7 	bl	8005220 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff feee 	bl	80052b8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80054dc:	e018      	b.n	8005510 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
            break;
 80054e2:	e015      	b.n	8005510 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fe13 	bl	8005114 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff fe5a 	bl	80051ac <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe1d 	bl	800513c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fe64 	bl	80051d4 <LL_EXTI_DisableEvent_32_63>
 800550c:	e000      	b.n	8005510 <LL_EXTI_Init+0x1e4>
      }
 800550e:	bf00      	nop
  }

  return status;
 8005510:	68fb      	ldr	r3, [r7, #12]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <LL_GPIO_SetPinMode>:
{
 800551a:	b480      	push	{r7}
 800551c:	b08b      	sub	sp, #44	; 0x2c
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	613b      	str	r3, [r7, #16]
  return result;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e003      	b.n	800554c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	2103      	movs	r1, #3
 8005550:	fa01 f303 	lsl.w	r3, r1, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	fa93 f3a3 	rbit	r3, r3
 8005562:	61fb      	str	r3, [r7, #28]
  return result;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800556e:	2320      	movs	r3, #32
 8005570:	e003      	b.n	800557a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	431a      	orrs	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]
}
 8005588:	bf00      	nop
 800558a:	372c      	adds	r7, #44	; 0x2c
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_GPIO_SetPinOutputType>:
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	401a      	ands	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	605a      	str	r2, [r3, #4]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_GPIO_SetPinSpeed>:
{
 80055c4:	b480      	push	{r7}
 80055c6:	b08b      	sub	sp, #44	; 0x2c
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	613b      	str	r3, [r7, #16]
  return result;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80055ea:	2320      	movs	r3, #32
 80055ec:	e003      	b.n	80055f6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	fab3 f383 	clz	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2103      	movs	r1, #3
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	401a      	ands	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	fa93 f3a3 	rbit	r3, r3
 800560c:	61fb      	str	r3, [r7, #28]
  return result;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005618:	2320      	movs	r3, #32
 800561a:	e003      	b.n	8005624 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	609a      	str	r2, [r3, #8]
}
 8005632:	bf00      	nop
 8005634:	372c      	adds	r7, #44	; 0x2c
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <LL_GPIO_SetPinPull>:
{
 800563e:	b480      	push	{r7}
 8005640:	b08b      	sub	sp, #44	; 0x2c
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	613b      	str	r3, [r7, #16]
  return result;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005664:	2320      	movs	r3, #32
 8005666:	e003      	b.n	8005670 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	2103      	movs	r1, #3
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	401a      	ands	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	61fb      	str	r3, [r7, #28]
  return result;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005692:	2320      	movs	r3, #32
 8005694:	e003      	b.n	800569e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
}
 80056ac:	bf00      	nop
 80056ae:	372c      	adds	r7, #44	; 0x2c
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_GPIO_SetAFPin_0_7>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	613b      	str	r3, [r7, #16]
  return result;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80056de:	2320      	movs	r3, #32
 80056e0:	e003      	b.n	80056ea <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	210f      	movs	r1, #15
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	401a      	ands	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	fa93 f3a3 	rbit	r3, r3
 8005700:	61fb      	str	r3, [r7, #28]
  return result;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800570c:	2320      	movs	r3, #32
 800570e:	e003      	b.n	8005718 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	431a      	orrs	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	372c      	adds	r7, #44	; 0x2c
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_GPIO_SetAFPin_8_15>:
{
 8005732:	b480      	push	{r7}
 8005734:	b08b      	sub	sp, #44	; 0x2c
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	613b      	str	r3, [r7, #16]
  return result;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800575a:	2320      	movs	r3, #32
 800575c:	e003      	b.n	8005766 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	210f      	movs	r1, #15
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	401a      	ands	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	61fb      	str	r3, [r7, #28]
  return result;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800578a:	2320      	movs	r3, #32
 800578c:	e003      	b.n	8005796 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	431a      	orrs	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80057a4:	bf00      	nop
 80057a6:	372c      	adds	r7, #44	; 0x2c
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	60fb      	str	r3, [r7, #12]
  return result;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <LL_GPIO_Init+0x26>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e003      	b.n	80057de <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80057e0:	e048      	b.n	8005874 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2101      	movs	r1, #1
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d03a      	beq.n	800586e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d003      	beq.n	8005808 <LL_GPIO_Init+0x58>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d10e      	bne.n	8005826 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	461a      	mov	r2, r3
 800580e:	69b9      	ldr	r1, [r7, #24]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fed7 	bl	80055c4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff feb7 	bl	8005594 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	461a      	mov	r2, r3
 800582c:	69b9      	ldr	r1, [r7, #24]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff05 	bl	800563e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d111      	bne.n	8005860 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	d807      	bhi.n	8005852 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	461a      	mov	r2, r3
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ff34 	bl	80056b8 <LL_GPIO_SetAFPin_0_7>
 8005850:	e006      	b.n	8005860 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	461a      	mov	r2, r3
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff69 	bl	8005732 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	461a      	mov	r2, r3
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fe56 	bl	800551a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1af      	bne.n	80057e2 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <LL_RCC_HSI_IsReady>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <LL_RCC_HSI_IsReady+0x24>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d101      	bne.n	80058a2 <LL_RCC_HSI_IsReady+0x16>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <LL_RCC_HSI_IsReady+0x18>
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000

080058b4 <LL_RCC_LSE_IsReady>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <LL_RCC_LSE_IsReady+0x24>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d101      	bne.n	80058ca <LL_RCC_LSE_IsReady+0x16>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <LL_RCC_LSE_IsReady+0x18>
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d101      	bne.n	80058f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40021000 	.word	0x40021000

08005900 <LL_RCC_MSI_GetRange>:
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <LL_RCC_MSI_GetRange+0x18>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40021000 	.word	0x40021000

0800591c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8005922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005926:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40021000 	.word	0x40021000

08005938 <LL_RCC_GetSysClkSource>:
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <LL_RCC_GetSysClkSource+0x18>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000

08005954 <LL_RCC_GetAHBPrescaler>:
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005958:	4b04      	ldr	r3, [pc, #16]	; (800596c <LL_RCC_GetAHBPrescaler+0x18>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000

08005970 <LL_RCC_GetAPB1Prescaler>:
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000

0800598c <LL_RCC_GetAPB2Prescaler>:
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000

080059a8 <LL_RCC_GetUSARTClockSource>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <LL_RCC_GetUSARTClockSource+0x24>)
 80059b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	401a      	ands	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	4313      	orrs	r3, r2
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40021000 	.word	0x40021000

080059d0 <LL_RCC_GetUARTClockSource>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <LL_RCC_GetUARTClockSource+0x24>)
 80059da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	401a      	ands	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	4313      	orrs	r3, r2
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40021000 	.word	0x40021000

080059f8 <LL_RCC_PLL_GetMainSource>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059fc:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <LL_RCC_PLL_GetMainSource+0x18>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0303 	and.w	r3, r3, #3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000

08005a14 <LL_RCC_PLL_GetN>:
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <LL_RCC_PLL_GetN+0x18>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40021000 	.word	0x40021000

08005a30 <LL_RCC_PLL_GetR>:
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <LL_RCC_PLL_GetR+0x18>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000

08005a4c <LL_RCC_PLL_GetDivider>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <LL_RCC_PLL_GetDivider+0x18>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000

08005a68 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d137      	bne.n	8005aea <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ff94 	bl	80059a8 <LL_RCC_GetUSARTClockSource>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	f200 80b3 	bhi.w	8005bf2 <LL_RCC_GetUSARTClockFreq+0x18a>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005aa5 	.word	0x08005aa5
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abf 	.word	0x08005abf
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005aa4:	f000 f95c 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005aa8:	60f8      	str	r0, [r7, #12]
        break;
 8005aaa:	e0b5      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005aac:	f7ff feee 	bl	800588c <LL_RCC_HSI_IsReady>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 809f 	beq.w	8005bf6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005ab8:	4b5a      	ldr	r3, [pc, #360]	; (8005c24 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005aba:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005abc:	e09b      	b.n	8005bf6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005abe:	f7ff fef9 	bl	80058b4 <LL_RCC_LSE_IsReady>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8098 	beq.w	8005bfa <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ad0:	e093      	b.n	8005bfa <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ad2:	f000 f945 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f9d1 	bl	8005e80 <RCC_GetHCLKClockFreq>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f9f7 	bl	8005ed4 <RCC_GetPCLK2ClockFreq>
 8005ae6:	60f8      	str	r0, [r7, #12]
        break;
 8005ae8:	e096      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d146      	bne.n	8005b7e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff59 	bl	80059a8 <LL_RCC_GetUSARTClockSource>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	d87e      	bhi.n	8005bfe <LL_RCC_GetUSARTClockFreq+0x196>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b67 	.word	0x08005b67
 8005b0c:	08005bff 	.word	0x08005bff
 8005b10:	08005bff 	.word	0x08005bff
 8005b14:	08005bff 	.word	0x08005bff
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005bff 	.word	0x08005bff
 8005b20:	08005bff 	.word	0x08005bff
 8005b24:	08005bff 	.word	0x08005bff
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	08005bff 	.word	0x08005bff
 8005b30:	08005bff 	.word	0x08005bff
 8005b34:	08005bff 	.word	0x08005bff
 8005b38:	08005b55 	.word	0x08005b55
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005b3c:	f000 f910 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005b40:	60f8      	str	r0, [r7, #12]
        break;
 8005b42:	e069      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005b44:	f7ff fea2 	bl	800588c <LL_RCC_HSI_IsReady>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d059      	beq.n	8005c02 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005b4e:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005b50:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b52:	e056      	b.n	8005c02 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005b54:	f7ff feae 	bl	80058b4 <LL_RCC_LSE_IsReady>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d053      	beq.n	8005c06 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b64:	e04f      	b.n	8005c06 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005b66:	f000 f8fb 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 f987 	bl	8005e80 <RCC_GetHCLKClockFreq>
 8005b72:	4603      	mov	r3, r0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f999 	bl	8005eac <RCC_GetPCLK1ClockFreq>
 8005b7a:	60f8      	str	r0, [r7, #12]
        break;
 8005b7c:	e04c      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b30      	cmp	r3, #48	; 0x30
 8005b82:	d142      	bne.n	8005c0a <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff ff0f 	bl	80059a8 <LL_RCC_GetUSARTClockSource>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005b90:	d01a      	beq.n	8005bc8 <LL_RCC_GetUSARTClockFreq+0x160>
 8005b92:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005b96:	d83a      	bhi.n	8005c0e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005b98:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00c      	beq.n	8005bb8 <LL_RCC_GetUSARTClockFreq+0x150>
 8005b9e:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d834      	bhi.n	8005c0e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ba8:	d017      	beq.n	8005bda <LL_RCC_GetUSARTClockFreq+0x172>
 8005baa:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d12e      	bne.n	8005c0e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005bb0:	f000 f8d6 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005bb4:	60f8      	str	r0, [r7, #12]
          break;
 8005bb6:	e02f      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005bb8:	f7ff fe68 	bl	800588c <LL_RCC_HSI_IsReady>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d027      	beq.n	8005c12 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005bc4:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005bc6:	e024      	b.n	8005c12 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005bc8:	f7ff fe74 	bl	80058b4 <LL_RCC_LSE_IsReady>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d021      	beq.n	8005c16 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd6:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005bd8:	e01d      	b.n	8005c16 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005bda:	f000 f8c1 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f94d 	bl	8005e80 <RCC_GetHCLKClockFreq>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f95f 	bl	8005eac <RCC_GetPCLK1ClockFreq>
 8005bee:	60f8      	str	r0, [r7, #12]
          break;
 8005bf0:	e012      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e010      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e00e      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005bfa:	bf00      	nop
 8005bfc:	e00c      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e00a      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c02:	bf00      	nop
 8005c04:	e008      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c06:	bf00      	nop
 8005c08:	e006      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8005c0a:	bf00      	nop
 8005c0c:	e004      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c16:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	00f42400 	.word	0x00f42400
 8005c28:	00300020 	.word	0x00300020
 8005c2c:	00300010 	.word	0x00300010

08005c30 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c40:	d136      	bne.n	8005cb0 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fec4 	bl	80059d0 <LL_RCC_GetUARTClockSource>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c4e:	d01a      	beq.n	8005c86 <LL_RCC_GetUARTClockFreq+0x56>
 8005c50:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c54:	d82e      	bhi.n	8005cb4 <LL_RCC_GetUARTClockFreq+0x84>
 8005c56:	4a3d      	ldr	r2, [pc, #244]	; (8005d4c <LL_RCC_GetUARTClockFreq+0x11c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00c      	beq.n	8005c76 <LL_RCC_GetUARTClockFreq+0x46>
 8005c5c:	4a3b      	ldr	r2, [pc, #236]	; (8005d4c <LL_RCC_GetUARTClockFreq+0x11c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d828      	bhi.n	8005cb4 <LL_RCC_GetUARTClockFreq+0x84>
 8005c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c66:	d017      	beq.n	8005c98 <LL_RCC_GetUARTClockFreq+0x68>
 8005c68:	4a39      	ldr	r2, [pc, #228]	; (8005d50 <LL_RCC_GetUARTClockFreq+0x120>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d122      	bne.n	8005cb4 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005c6e:	f000 f877 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005c72:	60f8      	str	r0, [r7, #12]
        break;
 8005c74:	e023      	b.n	8005cbe <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005c76:	f7ff fe09 	bl	800588c <LL_RCC_HSI_IsReady>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01b      	beq.n	8005cb8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005c80:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <LL_RCC_GetUARTClockFreq+0x124>)
 8005c82:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c84:	e018      	b.n	8005cb8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005c86:	f7ff fe15 	bl	80058b4 <LL_RCC_LSE_IsReady>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c94:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c96:	e011      	b.n	8005cbc <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005c98:	f000 f862 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f8ee 	bl	8005e80 <RCC_GetHCLKClockFreq>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f900 	bl	8005eac <RCC_GetPCLK1ClockFreq>
 8005cac:	60f8      	str	r0, [r7, #12]
        break;
 8005cae:	e006      	b.n	8005cbe <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005cb0:	bf00      	nop
 8005cb2:	e004      	b.n	8005cbe <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005cbc:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc4:	d136      	bne.n	8005d34 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fe82 	bl	80059d0 <LL_RCC_GetUARTClockSource>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005cd2:	d01a      	beq.n	8005d0a <LL_RCC_GetUARTClockFreq+0xda>
 8005cd4:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005cd8:	d82e      	bhi.n	8005d38 <LL_RCC_GetUARTClockFreq+0x108>
 8005cda:	4a1f      	ldr	r2, [pc, #124]	; (8005d58 <LL_RCC_GetUARTClockFreq+0x128>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00c      	beq.n	8005cfa <LL_RCC_GetUARTClockFreq+0xca>
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <LL_RCC_GetUARTClockFreq+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d828      	bhi.n	8005d38 <LL_RCC_GetUARTClockFreq+0x108>
 8005ce6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cea:	d017      	beq.n	8005d1c <LL_RCC_GetUARTClockFreq+0xec>
 8005cec:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <LL_RCC_GetUARTClockFreq+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d122      	bne.n	8005d38 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005cf2:	f000 f835 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005cf6:	60f8      	str	r0, [r7, #12]
        break;
 8005cf8:	e023      	b.n	8005d42 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005cfa:	f7ff fdc7 	bl	800588c <LL_RCC_HSI_IsReady>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01b      	beq.n	8005d3c <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <LL_RCC_GetUARTClockFreq+0x124>)
 8005d06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d08:	e018      	b.n	8005d3c <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005d0a:	f7ff fdd3 	bl	80058b4 <LL_RCC_LSE_IsReady>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d18:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d1a:	e011      	b.n	8005d40 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005d1c:	f000 f820 	bl	8005d60 <RCC_GetSystemClockFreq>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f8ac 	bl	8005e80 <RCC_GetHCLKClockFreq>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f8be 	bl	8005eac <RCC_GetPCLK1ClockFreq>
 8005d30:	60f8      	str	r0, [r7, #12]
        break;
 8005d32:	e006      	b.n	8005d42 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8005d34:	bf00      	nop
 8005d36:	e004      	b.n	8005d42 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d40:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005d42:	68fb      	ldr	r3, [r7, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	00c00080 	.word	0x00c00080
 8005d50:	00c00040 	.word	0x00c00040
 8005d54:	00f42400 	.word	0x00f42400
 8005d58:	03000200 	.word	0x03000200
 8005d5c:	03000100 	.word	0x03000100

08005d60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005d66:	f7ff fde7 	bl	8005938 <LL_RCC_GetSysClkSource>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d851      	bhi.n	8005e14 <RCC_GetSystemClockFreq+0xb4>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <RCC_GetSystemClockFreq+0x18>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005e15 	.word	0x08005e15
 8005d80:	08005e15 	.word	0x08005e15
 8005d84:	08005e15 	.word	0x08005e15
 8005d88:	08005e01 	.word	0x08005e01
 8005d8c:	08005e15 	.word	0x08005e15
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e15 	.word	0x08005e15
 8005d98:	08005e07 	.word	0x08005e07
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005e15 	.word	0x08005e15
 8005da4:	08005e15 	.word	0x08005e15
 8005da8:	08005e0d 	.word	0x08005e0d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005dac:	f7ff fd96 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d111      	bne.n	8005dda <RCC_GetSystemClockFreq+0x7a>
 8005db6:	f7ff fd91 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <RCC_GetSystemClockFreq+0x6a>
 8005dc0:	f7ff fd9e 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	e003      	b.n	8005dd2 <RCC_GetSystemClockFreq+0x72>
 8005dca:	f7ff fda7 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <RCC_GetSystemClockFreq+0x114>)
 8005dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd8:	e010      	b.n	8005dfc <RCC_GetSystemClockFreq+0x9c>
 8005dda:	f7ff fd7f 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <RCC_GetSystemClockFreq+0x8e>
 8005de4:	f7ff fd8c 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005de8:	4603      	mov	r3, r0
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	e003      	b.n	8005df6 <RCC_GetSystemClockFreq+0x96>
 8005dee:	f7ff fd95 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005df2:	4603      	mov	r3, r0
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <RCC_GetSystemClockFreq+0x114>)
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005dfe:	e033      	b.n	8005e68 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <RCC_GetSystemClockFreq+0x118>)
 8005e02:	607b      	str	r3, [r7, #4]
      break;
 8005e04:	e030      	b.n	8005e68 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005e06:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <RCC_GetSystemClockFreq+0x11c>)
 8005e08:	607b      	str	r3, [r7, #4]
      break;
 8005e0a:	e02d      	b.n	8005e68 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005e0c:	f000 f876 	bl	8005efc <RCC_PLL_GetFreqDomain_SYS>
 8005e10:	6078      	str	r0, [r7, #4]
      break;
 8005e12:	e029      	b.n	8005e68 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e14:	f7ff fd62 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d111      	bne.n	8005e42 <RCC_GetSystemClockFreq+0xe2>
 8005e1e:	f7ff fd5d 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <RCC_GetSystemClockFreq+0xd2>
 8005e28:	f7ff fd6a 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	e003      	b.n	8005e3a <RCC_GetSystemClockFreq+0xda>
 8005e32:	f7ff fd73 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005e36:	4603      	mov	r3, r0
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <RCC_GetSystemClockFreq+0x114>)
 8005e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e40:	e010      	b.n	8005e64 <RCC_GetSystemClockFreq+0x104>
 8005e42:	f7ff fd4b 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <RCC_GetSystemClockFreq+0xf6>
 8005e4c:	f7ff fd58 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005e50:	4603      	mov	r3, r0
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	e003      	b.n	8005e5e <RCC_GetSystemClockFreq+0xfe>
 8005e56:	f7ff fd61 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	4a05      	ldr	r2, [pc, #20]	; (8005e74 <RCC_GetSystemClockFreq+0x114>)
 8005e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e64:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005e66:	bf00      	nop
  }

  return frequency;
 8005e68:	687b      	ldr	r3, [r7, #4]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	080064e4 	.word	0x080064e4
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200

08005e80 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e88:	f7ff fd64 	bl	8005954 <LL_RCC_GetAHBPrescaler>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <RCC_GetHCLKClockFreq+0x28>)
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	40d3      	lsrs	r3, r2
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	080064cc 	.word	0x080064cc

08005eac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005eb4:	f7ff fd5c 	bl	8005970 <LL_RCC_GetAPB1Prescaler>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	4a04      	ldr	r2, [pc, #16]	; (8005ed0 <RCC_GetPCLK1ClockFreq+0x24>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	40d3      	lsrs	r3, r2
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	080064dc 	.word	0x080064dc

08005ed4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005edc:	f7ff fd56 	bl	800598c <LL_RCC_GetAPB2Prescaler>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	0adb      	lsrs	r3, r3, #11
 8005ee4:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <RCC_GetPCLK2ClockFreq+0x24>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	40d3      	lsrs	r3, r2
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	080064dc 	.word	0x080064dc

08005efc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f02:	f7ff fd79 	bl	80059f8 <LL_RCC_PLL_GetMainSource>
 8005f06:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d036      	beq.n	8005f7c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d836      	bhi.n	8005f82 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d003      	beq.n	8005f22 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d02a      	beq.n	8005f76 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8005f20:	e02f      	b.n	8005f82 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005f22:	f7ff fcdb 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d111      	bne.n	8005f50 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005f2c:	f7ff fcd6 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8005f36:	f7ff fce3 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	e003      	b.n	8005f48 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005f40:	f7ff fcec 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005f44:	4603      	mov	r3, r0
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	4a2f      	ldr	r2, [pc, #188]	; (8006008 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4e:	e010      	b.n	8005f72 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005f50:	f7ff fcc4 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005f5a:	f7ff fcd1 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	e003      	b.n	8005f6c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005f64:	f7ff fcda 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f72:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005f74:	e02f      	b.n	8005fd6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f76:	4b25      	ldr	r3, [pc, #148]	; (800600c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005f78:	607b      	str	r3, [r7, #4]
      break;
 8005f7a:	e02c      	b.n	8005fd6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005f7c:	4b24      	ldr	r3, [pc, #144]	; (8006010 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8005f7e:	607b      	str	r3, [r7, #4]
      break;
 8005f80:	e029      	b.n	8005fd6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005f82:	f7ff fcab 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d111      	bne.n	8005fb0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005f8c:	f7ff fca6 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005f96:	f7ff fcb3 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	e003      	b.n	8005fa8 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005fa0:	f7ff fcbc 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	4a17      	ldr	r2, [pc, #92]	; (8006008 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fae:	e010      	b.n	8005fd2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005fb0:	f7ff fc94 	bl	80058dc <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005fba:	f7ff fca1 	bl	8005900 <LL_RCC_MSI_GetRange>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	e003      	b.n	8005fcc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005fc4:	f7ff fcaa 	bl	800591c <LL_RCC_MSI_GetRangeAfterStandby>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005fd4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fd6:	f7ff fd39 	bl	8005a4c <LL_RCC_PLL_GetDivider>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	3301      	adds	r3, #1
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	fbb2 f4f3 	udiv	r4, r2, r3
 8005fe6:	f7ff fd15 	bl	8005a14 <LL_RCC_PLL_GetN>
 8005fea:	4603      	mov	r3, r0
 8005fec:	fb03 f404 	mul.w	r4, r3, r4
 8005ff0:	f7ff fd1e 	bl	8005a30 <LL_RCC_PLL_GetR>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	0e5b      	lsrs	r3, r3, #25
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bd90      	pop	{r4, r7, pc}
 8006008:	080064e4 	.word	0x080064e4
 800600c:	00f42400 	.word	0x00f42400
 8006010:	007a1200 	.word	0x007a1200

08006014 <LL_SPI_IsEnabled>:
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d101      	bne.n	800602c <LL_SPI_IsEnabled+0x18>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <LL_SPI_IsEnabled+0x1a>
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <LL_SPI_SetRxFIFOThreshold>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	605a      	str	r2, [r3, #4]
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <LL_SPI_SetCRCPolynomial>:
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ffc0 	bl	8006014 <LL_SPI_IsEnabled>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d145      	bne.n	8006126 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a2:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	6811      	ldr	r1, [r2, #0]
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	6852      	ldr	r2, [r2, #4]
 80060ae:	4311      	orrs	r1, r2
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	68d2      	ldr	r2, [r2, #12]
 80060b4:	4311      	orrs	r1, r2
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	6912      	ldr	r2, [r2, #16]
 80060ba:	4311      	orrs	r1, r2
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	6952      	ldr	r2, [r2, #20]
 80060c0:	4311      	orrs	r1, r2
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	6992      	ldr	r2, [r2, #24]
 80060c6:	4311      	orrs	r1, r2
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	69d2      	ldr	r2, [r2, #28]
 80060cc:	4311      	orrs	r1, r2
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	6a12      	ldr	r2, [r2, #32]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060e2:	f023 0304 	bic.w	r3, r3, #4
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	6891      	ldr	r1, [r2, #8]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6952      	ldr	r2, [r2, #20]
 80060ee:	0c12      	lsrs	r2, r2, #16
 80060f0:	430a      	orrs	r2, r1
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006100:	d204      	bcs.n	800610c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8006102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff97 	bl	800603a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006114:	d105      	bne.n	8006122 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff9f 	bl	8006060 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <LL_USART_IsEnabled>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <LL_USART_IsEnabled+0x18>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <LL_USART_IsEnabled+0x1a>
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <LL_USART_SetStopBitsLength>:
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	605a      	str	r2, [r3, #4]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <LL_USART_SetHWFlowCtrl>:
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	609a      	str	r2, [r3, #8]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_USART_SetBaudRate>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	b087      	sub	sp, #28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b6:	d11a      	bne.n	80061ee <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	005a      	lsls	r2, r3, #1
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	441a      	add	r2, r3
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80061d2:	4013      	ands	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	60da      	str	r2, [r3, #12]
}
 80061ec:	e00a      	b.n	8006204 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	085a      	lsrs	r2, r3, #1
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	441a      	add	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	60da      	str	r2, [r3, #12]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ff84 	bl	8006130 <LL_USART_IsEnabled>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d15b      	bne.n	80062e6 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <LL_USART_Init+0xe0>)
 8006234:	4013      	ands	r3, r2
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	6851      	ldr	r1, [r2, #4]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	68d2      	ldr	r2, [r2, #12]
 800623e:	4311      	orrs	r1, r2
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	6912      	ldr	r2, [r2, #16]
 8006244:	4311      	orrs	r1, r2
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	6992      	ldr	r2, [r2, #24]
 800624a:	430a      	orrs	r2, r1
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff ff7c 	bl	8006156 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ff89 	bl	800617c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <LL_USART_Init+0xe4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d104      	bne.n	800627c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006272:	2003      	movs	r0, #3
 8006274:	f7ff fbf8 	bl	8005a68 <LL_RCC_GetUSARTClockFreq>
 8006278:	60b8      	str	r0, [r7, #8]
 800627a:	e023      	b.n	80062c4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <LL_USART_Init+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d104      	bne.n	800628e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006284:	200c      	movs	r0, #12
 8006286:	f7ff fbef 	bl	8005a68 <LL_RCC_GetUSARTClockFreq>
 800628a:	60b8      	str	r0, [r7, #8]
 800628c:	e01a      	b.n	80062c4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <LL_USART_Init+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d104      	bne.n	80062a0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006296:	2030      	movs	r0, #48	; 0x30
 8006298:	f7ff fbe6 	bl	8005a68 <LL_RCC_GetUSARTClockFreq>
 800629c:	60b8      	str	r0, [r7, #8]
 800629e:	e011      	b.n	80062c4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <LL_USART_Init+0xf0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d104      	bne.n	80062b2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80062a8:	20c0      	movs	r0, #192	; 0xc0
 80062aa:	f7ff fcc1 	bl	8005c30 <LL_RCC_GetUARTClockFreq>
 80062ae:	60b8      	str	r0, [r7, #8]
 80062b0:	e008      	b.n	80062c4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <LL_USART_Init+0xf4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d104      	bne.n	80062c4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80062ba:	f44f 7040 	mov.w	r0, #768	; 0x300
 80062be:	f7ff fcb7 	bl	8005c30 <LL_RCC_GetUARTClockFreq>
 80062c2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff5e 	bl	80061a2 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	efff69f3 	.word	0xefff69f3
 80062f4:	40013800 	.word	0x40013800
 80062f8:	40004400 	.word	0x40004400
 80062fc:	40004800 	.word	0x40004800
 8006300:	40004c00 	.word	0x40004c00
 8006304:	40005000 	.word	0x40005000

08006308 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	fbb2 f3f3 	udiv	r3, r2, r3
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <LL_InitTick+0x30>)
 800631c:	3b01      	subs	r3, #1
 800631e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <LL_InitTick+0x30>)
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006326:	4b04      	ldr	r3, [pc, #16]	; (8006338 <LL_InitTick+0x30>)
 8006328:	2205      	movs	r2, #5
 800632a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	e000e010 	.word	0xe000e010

0800633c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff ffdd 	bl	8006308 <LL_InitTick>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <LL_mDelay+0x4c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800636a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d00c      	beq.n	800638e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800637a:	e008      	b.n	800638e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <LL_mDelay+0x4c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3b01      	subs	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f3      	bne.n	800637c <LL_mDelay+0x24>
    }
  }
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	e000e010 	.word	0xe000e010

080063a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <LL_SetSystemCoreClock+0x1c>)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6013      	str	r3, [r2, #0]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000004 	.word	0x20000004

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	; (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	; (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	; (800640c <__libc_init_array+0x44>)
 80063dc:	f000 f83e 	bl	800645c <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08007178 	.word	0x08007178
 8006404:	08007178 	.word	0x08007178
 8006408:	08007178 	.word	0x08007178
 800640c:	0800717c 	.word	0x0800717c

08006410 <memcmp>:
 8006410:	b510      	push	{r4, lr}
 8006412:	3901      	subs	r1, #1
 8006414:	4402      	add	r2, r0
 8006416:	4290      	cmp	r0, r2
 8006418:	d101      	bne.n	800641e <memcmp+0xe>
 800641a:	2000      	movs	r0, #0
 800641c:	e005      	b.n	800642a <memcmp+0x1a>
 800641e:	7803      	ldrb	r3, [r0, #0]
 8006420:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006424:	42a3      	cmp	r3, r4
 8006426:	d001      	beq.n	800642c <memcmp+0x1c>
 8006428:	1b18      	subs	r0, r3, r4
 800642a:	bd10      	pop	{r4, pc}
 800642c:	3001      	adds	r0, #1
 800642e:	e7f2      	b.n	8006416 <memcmp+0x6>

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <memset>:
 800644c:	4402      	add	r2, r0
 800644e:	4603      	mov	r3, r0
 8006450:	4293      	cmp	r3, r2
 8006452:	d100      	bne.n	8006456 <memset+0xa>
 8006454:	4770      	bx	lr
 8006456:	f803 1b01 	strb.w	r1, [r3], #1
 800645a:	e7f9      	b.n	8006450 <memset+0x4>

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
