
prosthesis_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08008850  08008850  00018850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008918  08008918  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008918  08008918  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008918  08008918  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008920  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000080  0800899c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800899c  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed56  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a4  00000000  00000000  0002ee02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000317a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000326d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025184  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d83a  00000000  00000000  0005862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c972a  00000000  00000000  00065e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  0012f5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008838 	.word	0x08008838

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008838 	.word	0x08008838

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d92:	f005 fd4b 	bl	800682c <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000d96:	2104      	movs	r1, #4
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000db2:	f005 f959 	bl	8006068 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dd6:	f005 f96d 	bl	80060b4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dea:	f005 f8f5 	bl	8005fd8 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000dee:	2100      	movs	r1, #0
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000df2:	f7ff fea5 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000df8:	f7ff ff30 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dfe:	f7ff ff3f 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	099a      	lsrs	r2, r3, #6
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e24:	e002      	b.n	8000e2c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e34:	2106      	movs	r1, #6
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e38:	f7ff fe95 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e42:	f7ff febc 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000e46:	227f      	movs	r2, #127	; 0x7f
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e4c:	f7ff fee2 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	; 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	50040300 	.word	0x50040300
 8000e64:	2000000c 	.word	0x2000000c
 8000e68:	053e2d63 	.word	0x053e2d63
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	0c900008 	.word	0x0c900008

08000e74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eb6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000eba:	f7ff fef5 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec2:	f7ff ff07 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff04 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ede:	f005 fca5 	bl	800682c <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ee6:	f7ff ff0d 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000efe:	f005 f8b3 	bl	8006068 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f22:	f005 f8c7 	bl	80060b4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f32:	f005 f851 	bl	8005fd8 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f36:	2100      	movs	r1, #0
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f3a:	f7ff fe01 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f40:	f7ff fe8c 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f46:	f7ff fe9b 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC2_Init+0x138>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0x13c>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099a      	lsrs	r2, r3, #6
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x140>)
 8000f64:	fba3 2302 	umull	r2, r3, r3, r2
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f6c:	e002      	b.n	8000f74 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	3b01      	subs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f80:	f7ff fdf1 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f84:	2200      	movs	r2, #0
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f8a:	f7ff fe18 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000f8e:	227f      	movs	r2, #127	; 0x7f
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f94:	f7ff fe3e 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	50040100 	.word	0x50040100
 8000fa8:	50040300 	.word	0x50040300
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	053e2d63 	.word	0x053e2d63
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	10c00010 	.word	0x10c00010

08000fbc <LL_AHB2_GRP1_EnableClock>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	43db      	mvns	r3, r3
 8001008:	ea02 0103 	and.w	r1, r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001024:	2320      	movs	r3, #32
 8001026:	e003      	b.n	8001030 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fa03 f202 	lsl.w	r2, r3, r2
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	430a      	orrs	r2, r1
 8001040:	3302      	adds	r3, #2
 8001042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000

08001058 <LL_GPIO_SetPinMode>:
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	613b      	str	r3, [r7, #16]
  return result;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800107e:	2320      	movs	r3, #32
 8001080:	e003      	b.n	800108a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2103      	movs	r1, #3
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	401a      	ands	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	61fb      	str	r3, [r7, #28]
  return result;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80010ac:	2320      	movs	r3, #32
 80010ae:	e003      	b.n	80010b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	; 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_GPIO_SetPinPull>:
{
 80010d2:	b480      	push	{r7}
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	613b      	str	r3, [r7, #16]
  return result;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80010f8:	2320      	movs	r3, #32
 80010fa:	e003      	b.n	8001104 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2103      	movs	r1, #3
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	61fb      	str	r3, [r7, #28]
  return result;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001126:	2320      	movs	r3, #32
 8001128:	e003      	b.n	8001132 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	60da      	str	r2, [r3, #12]
}
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff ff16 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001190:	2080      	movs	r0, #128	; 0x80
 8001192:	f7ff ff13 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff10 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ff0d 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|KNEE_ENCODER_CLK_Pin);
 80011a2:	f241 0184 	movw	r1, #4228	; 0x1084
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <MX_GPIO_Init+0x11c>)
 80011a8:	f7ff ffd0 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(KNEE_ENCODER_CSn_GPIO_Port, KNEE_ENCODER_CSn_Pin);
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4836      	ldr	r0, [pc, #216]	; (8001288 <MX_GPIO_Init+0x120>)
 80011b0:	f7ff ffcc 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff ffc6 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80011c0:	4932      	ldr	r1, [pc, #200]	; (800128c <MX_GPIO_Init+0x124>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff ff12 	bl	8000fec <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011de:	2302      	movs	r3, #2
 80011e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 f8dd 	bl	80063a8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <MX_GPIO_Init+0x120>)
 80011f6:	f7ff ff6c 	bl	80010d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_GPIO_Init+0x120>)
 8001202:	f7ff ff29 	bl	8001058 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|SPI2_CS_Pin|KNEE_ENCODER_CLK_Pin;
 8001206:	f241 0384 	movw	r3, #4228	; 0x1084
 800120a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_GPIO_Init+0x11c>)
 8001222:	f005 fb03 	bl	800682c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KNEE_ENCODER_CSn_Pin;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122a:	2301      	movs	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(KNEE_ENCODER_CSn_GPIO_Port, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0x120>)
 8001240:	f005 faf4 	bl	800682c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KNEE_ENCODER_DO_Pin;
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(KNEE_ENCODER_DO_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_GPIO_Init+0x120>)
 8001256:	f005 fae9 	bl	800682c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f005 fad8 	bl	800682c <LL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	00f00003 	.word	0x00f00003

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f023 0203 	bic.w	r2, r3, #3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	621a      	str	r2, [r3, #32]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 0201 	bic.w	r2, r3, #1
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <LL_RCC_SetLPTIMClockSource>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001510:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001514:	f7ff ffc8 	bl	80014a8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001518:	2020      	movs	r0, #32
 800151a:	f7ff ffdf 	bl	80014dc <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800151e:	f7ff feb7 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001522:	4603      	mov	r3, r0
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff07 	bl	800133c <NVIC_EncodePriority>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	2042      	movs	r0, #66	; 0x42
 8001534:	f7ff fed8 	bl	80012e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001538:	2042      	movs	r0, #66	; 0x42
 800153a:	f7ff feb7 	bl	80012ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800153e:	2100      	movs	r1, #0
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001542:	f7ff ff9d 	bl	8001480 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001546:	2100      	movs	r1, #0
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800154a:	f7ff ff63 	bl	8001414 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001552:	f7ff ff4c 	bl	80013ee <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001556:	2100      	movs	r1, #0
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800155a:	f7ff ff22 	bl	80013a2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800155e:	2100      	movs	r1, #0
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001562:	f7ff ff31 	bl	80013c8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001568:	f7ff ff7a 	bl	8001460 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800156c:	2100      	movs	r1, #0
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001570:	f7ff ff63 	bl	800143a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40009400 	.word	0x40009400

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_LPTIM_Enable>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_LPTIM_StartCounter>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f023 0206 	bic.w	r2, r3, #6
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_LPTIM_SetAutoReload>:
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_RCC_LSE_Enable>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <LL_RCC_LSE_SetDriveCapability>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	f023 0218 	bic.w	r2, r3, #24
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <LL_RCC_LSE_IsReady>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <LL_RCC_LSE_IsReady+0x24>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <LL_RCC_LSE_IsReady+0x16>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_RCC_LSE_IsReady+0x18>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_MSI_Enable>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_MSI_IsReady>:
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <LL_RCC_MSI_IsReady+0x20>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b02      	cmp	r3, #2
 800171e:	d101      	bne.n	8001724 <LL_RCC_MSI_IsReady+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_RCC_MSI_IsReady+0x16>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_MSI_EnablePLLMode>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_MSI_SetRange>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_MSI_SetCalibTrimming>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_SetSysClkSource>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 0203 	bic.w	r2, r3, #3
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_GetSysClkSource>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_GetSysClkSource+0x18>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_SetAHBPrescaler>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetAPB1Prescaler>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_SetAPB2Prescaler>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <LL_RCC_PLL_IsReady+0x24>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b4:	d101      	bne.n	80018ba <LL_RCC_PLL_IsReady+0x16>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_RCC_PLL_IsReady+0x18>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0212      	lsls	r2, r2, #8
 80018ec:	4311      	orrs	r1, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	4904      	ldr	r1, [pc, #16]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	f9ff808c 	.word	0xf9ff808c

0800190c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_APB1_GRP1_EnableClock>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40022000 	.word	0x40022000

080019b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <LL_FLASH_GetLatency+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40007000 	.word	0x40007000

08001a18 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0ae      	sub	sp, #184	; 0xb8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff ff6c 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a88:	f7ff ff50 	bl	800192c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f7ff fd75 	bl	800157c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a92:	f000 f975 	bl	8001d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a96:	f7ff fb67 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a9a:	f002 fc6f 	bl	800437c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a9e:	f002 fa65 	bl	8003f6c <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001aa2:	f7ff fd33 	bl	800150c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001aa6:	f002 fab7 	bl	8004018 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001aaa:	f7ff f9e3 	bl	8000e74 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001aae:	f7ff f93b 	bl	8000d28 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001ab2:	f002 fbc9 	bl	8004248 <MX_TIM6_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_t AnkleEncoder; // add pins??
	AnkleEncoder.DO_GPIOx = KNEE_ENCODER_DO_GPIO_Port;
 8001ab6:	4ba4      	ldr	r3, [pc, #656]	; (8001d48 <main+0x2d0>)
 8001ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	AnkleEncoder.CLK_GPIOx = KNEE_ENCODER_CLK_GPIO_Port;
 8001abc:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <main+0x2d4>)
 8001abe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	AnkleEncoder.CSn_GPIOx = KNEE_ENCODER_CSn_GPIO_Port;
 8001ac2:	4ba1      	ldr	r3, [pc, #644]	; (8001d48 <main+0x2d0>)
 8001ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	AnkleEncoder.DO_Pin = KNEE_ENCODER_DO_Pin;
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	AnkleEncoder.CLK_Pin = KNEE_ENCODER_CLK_Pin;
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	AnkleEncoder.CSn_Pin = KNEE_ENCODER_CSn_Pin;
 8001ad4:	2340      	movs	r3, #64	; 0x40
 8001ad6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

	AS5145B_t KneeEncoder;
	KneeEncoder.DO_GPIOx = KNEE_ENCODER_DO_GPIO_Port;
 8001ada:	4b9b      	ldr	r3, [pc, #620]	; (8001d48 <main+0x2d0>)
 8001adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	KneeEncoder.CLK_GPIOx = KNEE_ENCODER_CLK_GPIO_Port;
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <main+0x2d4>)
 8001ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	KneeEncoder.CSn_GPIOx = KNEE_ENCODER_CSn_GPIO_Port;
 8001ae6:	4b98      	ldr	r3, [pc, #608]	; (8001d48 <main+0x2d0>)
 8001ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	KneeEncoder.DO_Pin = KNEE_ENCODER_DO_Pin;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	KneeEncoder.CLK_Pin = KNEE_ENCODER_CLK_Pin;
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	KneeEncoder.CSn_Pin = KNEE_ENCODER_CSn_Pin;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	EPOS4_t AnkleMotor;
	AnkleMotor.Requirements.isFirstStepRequired = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	AnkleMotor.Requirements.isModeOfOperationRequired = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	AnkleMotor.FirstStep.CAN_BitRate = rate500Kbps;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	AnkleMotor.FirstStep.MotorType = trapezoidalPmBlMotor;
 8001b10:	230b      	movs	r3, #11
 8001b12:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	AnkleMotor.FirstStep.nominalCurrent = 6600;
 8001b16:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8001b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
	AnkleMotor.FirstStep.outputCurrentLimit = 29300;
 8001b1c:	f247 2374 	movw	r3, #29300	; 0x7274
 8001b20:	663b      	str	r3, [r7, #96]	; 0x60
	AnkleMotor.FirstStep.numberOfPolePairs = 21;
 8001b22:	2315      	movs	r3, #21
 8001b24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	AnkleMotor.FirstStep.thermalTimeConstantWinding = 400;
 8001b28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b2c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	AnkleMotor.FirstStep.torqueConstant = 95000;
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <main+0x2d8>)
 8001b32:	66bb      	str	r3, [r7, #104]	; 0x68
	AnkleMotor.FirstStep.maxMotorSpeed = 2384;
 8001b34:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8001b38:	66fb      	str	r3, [r7, #108]	; 0x6c
	AnkleMotor.FirstStep.maxGearInputSpeed = 100000;
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <main+0x2dc>)
 8001b3c:	673b      	str	r3, [r7, #112]	; 0x70
	AnkleMotor.FirstStep.sensorsConfiguration = 0x00100000; // ??
 8001b3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b42:	677b      	str	r3, [r7, #116]	; 0x74
	AnkleMotor.FirstStep.controlStructure = 0x00030111; // ??
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <main+0x2e0>)
 8001b46:	67bb      	str	r3, [r7, #120]	; 0x78
	AnkleMotor.FirstStep.commutationSensors = 0x00000030; // ??
 8001b48:	2330      	movs	r3, #48	; 0x30
 8001b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
	AnkleMotor.FirstStep.axisConfigMiscellaneous = 0x00000000; // ??
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	AnkleMotor.FirstStep.currentControllerP_Gain = 643609;
 8001b52:	4b82      	ldr	r3, [pc, #520]	; (8001d5c <main+0x2e4>)
 8001b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	AnkleMotor.FirstStep.currentControllerI_Gain = 2791837;
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <main+0x2e8>)
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	AnkleMotor.ModeOfOperation = cyclicSynchronousTorqueMode;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	EPOS4_t KneeMotor;
	KneeMotor.Requirements.isFirstStepRequired = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	763b      	strb	r3, [r7, #24]
	KneeMotor.Requirements.isModeOfOperationRequired = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	767b      	strb	r3, [r7, #25]
	KneeMotor.FirstStep.CAN_BitRate = rate500Kbps;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	773b      	strb	r3, [r7, #28]
	KneeMotor.FirstStep.MotorType = trapezoidalPmBlMotor;
 8001b70:	230b      	movs	r3, #11
 8001b72:	777b      	strb	r3, [r7, #29]
	KneeMotor.FirstStep.nominalCurrent = 6600;
 8001b74:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8001b78:	623b      	str	r3, [r7, #32]
	KneeMotor.FirstStep.outputCurrentLimit = 29300;
 8001b7a:	f247 2374 	movw	r3, #29300	; 0x7274
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
	KneeMotor.FirstStep.numberOfPolePairs = 21;
 8001b80:	2315      	movs	r3, #21
 8001b82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	KneeMotor.FirstStep.thermalTimeConstantWinding = 400;
 8001b86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001b8a:	857b      	strh	r3, [r7, #42]	; 0x2a
	KneeMotor.FirstStep.torqueConstant = 95000;
 8001b8c:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <main+0x2d8>)
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	KneeMotor.FirstStep.maxMotorSpeed = 2384;
 8001b90:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
	KneeMotor.FirstStep.maxGearInputSpeed = 100000;
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <main+0x2dc>)
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
	KneeMotor.FirstStep.sensorsConfiguration = 0x00100000; // ??
 8001b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
	KneeMotor.FirstStep.controlStructure = 0x00030111; // ??
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <main+0x2e0>)
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
	KneeMotor.FirstStep.commutationSensors = 0x00000030; // ??
 8001ba4:	2330      	movs	r3, #48	; 0x30
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
	KneeMotor.FirstStep.axisConfigMiscellaneous = 0x00000000; // ??
 8001ba8:	2300      	movs	r3, #0
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
	KneeMotor.FirstStep.currentControllerP_Gain = 643609;
 8001bac:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <main+0x2e4>)
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
	KneeMotor.FirstStep.currentControllerI_Gain = 2791837;
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <main+0x2e8>)
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	KneeMotor.ModeOfOperation = cyclicSynchronousTorqueMode;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

  	MCP25625_t CAN_Controller;
  	memset(&CAN_Controller, 0, sizeof(CAN_Controller));
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 fd3e 	bl	8007644 <memset>
  	CAN_Controller.SPIx = SPI2;
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <main+0x2ec>)
 8001bca:	60bb      	str	r3, [r7, #8]
  	CAN_Controller.CS_Port = SPI2_CS_GPIO_Port;
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <main+0x2d4>)
 8001bce:	60fb      	str	r3, [r7, #12]
  	CAN_Controller.csPin = SPI2_CS_Pin;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	823b      	strh	r3, [r7, #16]
  	CAN_Controller.CANCTRL_Reg.Bits.CLKPRE = clockoutDiv1; // ??
 8001bd6:	7cbb      	ldrb	r3, [r7, #18]
 8001bd8:	f36f 0301 	bfc	r3, #0, #2
 8001bdc:	74bb      	strb	r3, [r7, #18]
  	CAN_Controller.CANCTRL_Reg.Bits.CLKEN = clockoutDisabled;
 8001bde:	7cbb      	ldrb	r3, [r7, #18]
 8001be0:	f36f 0382 	bfc	r3, #2, #1
 8001be4:	74bb      	strb	r3, [r7, #18]
  	CAN_Controller.CANCTRL_Reg.Bits.OSM = oneShotModeEnabled;
 8001be6:	7cbb      	ldrb	r3, [r7, #18]
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	74bb      	strb	r3, [r7, #18]
  	CAN_Controller.CANCTRL_Reg.Bits.ABAT = abortAllTransmissions;
 8001bee:	7cbb      	ldrb	r3, [r7, #18]
 8001bf0:	f36f 1304 	bfc	r3, #4, #1
 8001bf4:	74bb      	strb	r3, [r7, #18]
  	CAN_Controller.CANCTRL_Reg.Bits.REQOP = normalOperationMode;
 8001bf6:	7cbb      	ldrb	r3, [r7, #18]
 8001bf8:	f36f 1347 	bfc	r3, #5, #3
 8001bfc:	74bb      	strb	r3, [r7, #18]
  	CAN_Controller.CNF1_Reg.Bits.BRP = 1;
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f362 0305 	bfi	r3, r2, #0, #6
 8001c06:	74fb      	strb	r3, [r7, #19]
  	CAN_Controller.CNF1_Reg.Bits.SJW = length1xT_Q;
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	f36f 1387 	bfc	r3, #6, #2
 8001c0e:	74fb      	strb	r3, [r7, #19]
  	CAN_Controller.CNF2_Reg.Bits.PRSEG = 4;
 8001c10:	7d3b      	ldrb	r3, [r7, #20]
 8001c12:	2204      	movs	r2, #4
 8001c14:	f362 0302 	bfi	r3, r2, #0, #3
 8001c18:	753b      	strb	r3, [r7, #20]
  	CAN_Controller.CNF2_Reg.Bits.PHSEG1 = 1;
 8001c1a:	7d3b      	ldrb	r3, [r7, #20]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f362 03c5 	bfi	r3, r2, #3, #3
 8001c22:	753b      	strb	r3, [r7, #20]
  	CAN_Controller.CNF2_Reg.Bits.SAM = busSampledOnceAtSamplePoint;
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	f36f 1386 	bfc	r3, #6, #1
 8001c2a:	753b      	strb	r3, [r7, #20]
  	CAN_Controller.CNF2_Reg.Bits.BLTMODE = ps2LengthDeterminedByCNF3;
 8001c2c:	7d3b      	ldrb	r3, [r7, #20]
 8001c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c32:	753b      	strb	r3, [r7, #20]
  	CAN_Controller.CNF3_Reg.Bits.PHSEG2 = 1;
 8001c34:	7d7b      	ldrb	r3, [r7, #21]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f362 0302 	bfi	r3, r2, #0, #3
 8001c3c:	757b      	strb	r3, [r7, #21]
  	CAN_Controller.CNF3_Reg.Bits.WAKFIL = wakeUpFilterIsDisabled;
 8001c3e:	7d7b      	ldrb	r3, [r7, #21]
 8001c40:	f36f 1386 	bfc	r3, #6, #1
 8001c44:	757b      	strb	r3, [r7, #21]
  	CAN_Controller.CNF3_Reg.Bits.SOF = clockoutPinIsEnabledForClockOutFunction;
 8001c46:	7d7b      	ldrb	r3, [r7, #21]
 8001c48:	f36f 13c7 	bfc	r3, #7, #1
 8001c4c:	757b      	strb	r3, [r7, #21]

	Prosthesis_t Prosthesis;
	Prosthesis.Joint = ankle; // remove this??
 8001c4e:	2300      	movs	r3, #0
 8001c50:	717b      	strb	r3, [r7, #5]
	Prosthesis.Side = left;
 8001c52:	2300      	movs	r3, #0
 8001c54:	713b      	strb	r3, [r7, #4]
	Prosthesis.kneeMotorId = 1; // add to epos4_t?? do all this in ProsInit() instead??
 8001c56:	2301      	movs	r3, #1
 8001c58:	71fb      	strb	r3, [r7, #7]
	Prosthesis.ankleMotorId = 2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	71bb      	strb	r3, [r7, #6]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001c5e:	f7ff feb7 	bl	80019d0 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001c62:	4841      	ldr	r0, [pc, #260]	; (8001d68 <main+0x2f0>)
 8001c64:	f7ff fcc2 	bl	80015ec <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001c68:	483f      	ldr	r0, [pc, #252]	; (8001d68 <main+0x2f0>)
 8001c6a:	f7ff fcf5 	bl	8001658 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001c6e:	213f      	movs	r1, #63	; 0x3f
 8001c70:	483d      	ldr	r0, [pc, #244]	; (8001d68 <main+0x2f0>)
 8001c72:	f7ff fcde 	bl	8001632 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001c76:	2104      	movs	r1, #4
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <main+0x2f0>)
 8001c7a:	f7ff fcc7 	bl	800160c <LL_LPTIM_StartCounter>

	LL_TIM_EnableCounter(TIM6);
 8001c7e:	483b      	ldr	r0, [pc, #236]	; (8001d6c <main+0x2f4>)
 8001c80:	f7ff feea 	bl	8001a58 <LL_TIM_EnableCounter>

	LL_SPI_Enable(SPI1);
 8001c84:	483a      	ldr	r0, [pc, #232]	; (8001d70 <main+0x2f8>)
 8001c86:	f7ff fed7 	bl	8001a38 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001c8a:	4836      	ldr	r0, [pc, #216]	; (8001d64 <main+0x2ec>)
 8001c8c:	f7ff fed4 	bl	8001a38 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001c90:	4838      	ldr	r0, [pc, #224]	; (8001d74 <main+0x2fc>)
 8001c92:	f7ff fc97 	bl	80015c4 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001c96:	4838      	ldr	r0, [pc, #224]	; (8001d78 <main+0x300>)
 8001c98:	f7ff fc94 	bl	80015c4 <LL_ADC_Enable>

	LL_mDelay(10);	// Allow startup delays for devices
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f005 fc67 	bl	8007570 <LL_mDelay>

	if(MPU925x_Init(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin))
 8001ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001caa:	4831      	ldr	r0, [pc, #196]	; (8001d70 <main+0x2f8>)
 8001cac:	f003 fec8 	bl	8005a40 <MPU925x_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <main+0x242>
		Error_Handler();
 8001cb6:	f000 f8c1 	bl	8001e3c <Error_Handler>
	MPU925x_SetAccelSensitivity(mpu925x_accelSensitivity_8g);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f003 fee6 	bl	8005a8c <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(mpu925x_gyroSensitivity_1000dps);
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f003 ff5f 	bl	8005b84 <MPU925x_SetGyroSensitivity>

	if(MCP25625_Init(&CAN_Controller))
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fa8e 	bl	80051ec <MCP25625_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <main+0x262>
		Error_Handler();
 8001cd6:	f000 f8b1 	bl	8001e3c <Error_Handler>

	if(Prosthesis.Joint == ankle || Prosthesis.Joint == combined) // check this??
 8001cda:	797b      	ldrb	r3, [r7, #5]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <main+0x26e>
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10c      	bne.n	8001d00 <main+0x288>
	{
		AS5145B_Init(AnkleEncoderIndex, &AnkleEncoder);
 8001ce6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cea:	4619      	mov	r1, r3
 8001cec:	2000      	movs	r0, #0
 8001cee:	f002 fc11 	bl	8004514 <AS5145B_Init>
		EPOS4_Init(Prosthesis.ankleMotorId, &AnkleMotor);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 fda0 	bl	8004840 <EPOS4_Init>
	}
	if((Prosthesis.Joint == knee) || (Prosthesis.Joint == combined))
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d002      	beq.n	8001d0c <main+0x294>
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10c      	bne.n	8001d26 <main+0x2ae>
	{
		AS5145B_Init(KneeEncoderIndex, &KneeEncoder);
 8001d0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d10:	4619      	mov	r1, r3
 8001d12:	2001      	movs	r0, #1
 8001d14:	f002 fbfe 	bl	8004514 <AS5145B_Init>
		EPOS4_Init(Prosthesis.kneeMotorId, &KneeMotor);
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f107 0218 	add.w	r2, r7, #24
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fd8d 	bl	8004840 <EPOS4_Init>
	}

	InitProsthesisControl(&Prosthesis);
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f8cd 	bl	8001ec8 <InitProsthesisControl>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(readOnly);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 f928 	bl	8001f84 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <main+0x304>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0fb      	beq.n	8001d34 <main+0x2bc>
	  {
		  RunProsthesisControl();
 8001d3c:	f000 f936 	bl	8001fac <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <main+0x304>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001d46:	e7f5      	b.n	8001d34 <main+0x2bc>
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	00017318 	.word	0x00017318
 8001d54:	000186a0 	.word	0x000186a0
 8001d58:	00030111 	.word	0x00030111
 8001d5c:	0009d219 	.word	0x0009d219
 8001d60:	002a999d 	.word	0x002a999d
 8001d64:	40003800 	.word	0x40003800
 8001d68:	40009400 	.word	0x40009400
 8001d6c:	40001000 	.word	0x40001000
 8001d70:	40013000 	.word	0x40013000
 8001d74:	50040000 	.word	0x50040000
 8001d78:	50040100 	.word	0x50040100
 8001d7c:	2000009c 	.word	0x2000009c

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001d84:	2004      	movs	r0, #4
 8001d86:	f7ff fe01 	bl	800198c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff fe12 	bl	80019b4 <LL_FLASH_GetLatency>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d1fa      	bne.n	8001d8c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001d96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d9a:	f7ff fe29 	bl	80019f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001d9e:	f7ff fca7 	bl	80016f0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001da2:	bf00      	nop
 8001da4:	f7ff fcb4 	bl	8001710 <LL_RCC_MSI_IsReady>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d1fa      	bne.n	8001da4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001dae:	f7ff fcd1 	bl	8001754 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001db2:	20b0      	movs	r0, #176	; 0xb0
 8001db4:	f7ff fcde 	bl	8001774 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fcef 	bl	800179c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001dbe:	f7ff fe2b 	bl	8001a18 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fc6a 	bl	800169c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001dc8:	f7ff fc56 	bl	8001678 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001dcc:	bf00      	nop
 8001dce:	f7ff fc7b 	bl	80016c8 <LL_RCC_LSE_IsReady>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1fa      	bne.n	8001dce <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001dd8:	f7ff fcac 	bl	8001734 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de0:	2228      	movs	r2, #40	; 0x28
 8001de2:	2150      	movs	r1, #80	; 0x50
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff fd71 	bl	80018cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001dea:	f7ff fd8f 	bl	800190c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001dee:	f7ff fd49 	bl	8001884 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001df2:	bf00      	nop
 8001df4:	f7ff fd56 	bl	80018a4 <LL_RCC_PLL_IsReady>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d1fa      	bne.n	8001df4 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f7ff fce2 	bl	80017c8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e04:	bf00      	nop
 8001e06:	f7ff fcf3 	bl	80017f0 <LL_RCC_GetSysClkSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d1fa      	bne.n	8001e06 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fcfb 	bl	800180c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001e16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e1a:	f7ff fd0b 	bl	8001834 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001e1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e22:	f7ff fd1b 	bl	800185c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <SystemClock_Config+0xb8>)
 8001e28:	f005 fb94 	bl	8007554 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <SystemClock_Config+0xb8>)
 8001e2e:	f005 fbc7 	bl	80075c0 <LL_SetSystemCoreClock>
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	04c4b400 	.word	0x04c4b400

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>

08001e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	b29b      	uxth	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d101      	bne.n	8001ea0 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// Includes variables that are subject to change during testing for convenience
void InitProsthesisControl(Prosthesis_t *Device_Init)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	memcpy(&Device, Device_Init, sizeof(&Device_Init));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <InitProsthesisControl+0x78>)
 8001ed8:	601a      	str	r2, [r3, #0]

	memset(&CM_Ankle, 0, sizeof(CM_Ankle)); // check this??
 8001eda:	2290      	movs	r2, #144	; 0x90
 8001edc:	2100      	movs	r1, #0
 8001ede:	4819      	ldr	r0, [pc, #100]	; (8001f44 <InitProsthesisControl+0x7c>)
 8001ee0:	f005 fbb0 	bl	8007644 <memset>
	memset(&CM_Knee, 0, sizeof(CM_Knee));
 8001ee4:	2290      	movs	r2, #144	; 0x90
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4817      	ldr	r0, [pc, #92]	; (8001f48 <InitProsthesisControl+0x80>)
 8001eea:	f005 fbab 	bl	8007644 <memset>

	CM_Ankle.motorId = Device.ankleMotorId;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <InitProsthesisControl+0x78>)
 8001ef0:	789a      	ldrb	r2, [r3, #2]
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <InitProsthesisControl+0x7c>)
 8001ef4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	CM_Knee.motorId = Device.kneeMotorId;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <InitProsthesisControl+0x78>)
 8001efa:	78da      	ldrb	r2, [r3, #3]
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <InitProsthesisControl+0x80>)
 8001efe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	ankleEncBias = 1325 * AS5145B_RAW2DEG;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <InitProsthesisControl+0x84>)
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <InitProsthesisControl+0x88>)
 8001f06:	601a      	str	r2, [r3, #0]
	kneeEncBias = 2244 * AS5145B_RAW2DEG;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <InitProsthesisControl+0x8c>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <InitProsthesisControl+0x90>)
 8001f0c:	601a      	str	r2, [r3, #0]

	CM_ankleSpeedThreshold = 0.0f;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <InitProsthesisControl+0x94>)
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
	CM_kneeSpeedThreshold = 0.0f;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <InitProsthesisControl+0x98>)
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

	CM_lcBot_lowerBound = 1398.0f;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <InitProsthesisControl+0x9c>)
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <InitProsthesisControl+0xa0>)
 8001f22:	601a      	str	r2, [r3, #0]
	CM_lcBot_upperBound = 1425.0f;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <InitProsthesisControl+0xa4>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <InitProsthesisControl+0xa8>)
 8001f28:	601a      	str	r2, [r3, #0]
	CM_lcTop_lowerBound = 1415.0f;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <InitProsthesisControl+0xac>)
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <InitProsthesisControl+0xb0>)
 8001f2e:	601a      	str	r2, [r3, #0]
	CM_lcTop_upperBound = 1451.0f;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <InitProsthesisControl+0xb4>)
 8001f32:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <InitProsthesisControl+0xb8>)
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200000a8 	.word	0x200000a8
 8001f44:	200001c0 	.word	0x200001c0
 8001f48:	20000250 	.word	0x20000250
 8001f4c:	200000a0 	.word	0x200000a0
 8001f50:	42e8e900 	.word	0x42e8e900
 8001f54:	200000a4 	.word	0x200000a4
 8001f58:	43453a00 	.word	0x43453a00
 8001f5c:	200001b8 	.word	0x200001b8
 8001f60:	200001b4 	.word	0x200001b4
 8001f64:	200001a8 	.word	0x200001a8
 8001f68:	44aec000 	.word	0x44aec000
 8001f6c:	200001a4 	.word	0x200001a4
 8001f70:	44b22000 	.word	0x44b22000
 8001f74:	200001b0 	.word	0x200001b0
 8001f78:	44b0e000 	.word	0x44b0e000
 8001f7c:	200001ac 	.word	0x200001ac
 8001f80:	44b56000 	.word	0x44b56000

08001f84 <RequireTestProgram>:

void RequireTestProgram(TestPrograms_t testProgram)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	if(testProgram != none)
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <RequireTestProgram+0x16>
		isTestProgramRequired = 1;
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <RequireTestProgram+0x24>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200001a1 	.word	0x200001a1

08001fac <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	GetInputs();
 8001fb0:	f000 f828 	bl	8002004 <GetInputs>
	ProcessInputs();
 8001fb4:	f000 f8cc 	bl	8002150 <ProcessInputs>

	if(isTestProgramRequired)
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <RunProsthesisControl+0x4c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <RunProsthesisControl+0x1a>
		RunTestProgram();
 8001fc0:	f001 fe62 	bl	8003c88 <RunTestProgram>
 8001fc4:	e003      	b.n	8001fce <RunProsthesisControl+0x22>
	else
	{
		RunStateMachine();
 8001fc6:	f001 fc4b 	bl	8003860 <RunStateMachine>
		RunImpedanceControl();
 8001fca:	f001 fd75 	bl	8003ab8 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <RunProsthesisControl+0x50>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <RunProsthesisControl+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <RunProsthesisControl+0x54>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001fe2:	e006      	b.n	8001ff2 <RunProsthesisControl+0x46>
	else if(isSecond)
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <RunProsthesisControl+0x54>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <RunProsthesisControl+0x46>
		isSecond = 0;
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <RunProsthesisControl+0x54>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200001a1 	.word	0x200001a1
 8001ffc:	20000008 	.word	0x20000008
 8002000:	200001a0 	.word	0x200001a0

08002004 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b08c      	sub	sp, #48	; 0x30
 8002008:	af00      	add	r7, sp, #0
	if((Device.Joint == ankle) || (Device.Joint == combined))
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <GetInputs+0xe8>)
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <GetInputs+0x16>
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <GetInputs+0xe8>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d121      	bne.n	800205e <GetInputs+0x5a>
	{
		CM_Ankle.jointAngle[0] = AS5145B_ReadPosition(AnkleEncoderIndex) - ankleEncBias;
 800201a:	2000      	movs	r0, #0
 800201c:	f002 fb36 	bl	800468c <AS5145B_ReadPosition>
 8002020:	eeb0 7a40 	vmov.f32	s14, s0
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <GetInputs+0xec>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202e:	ee17 0a90 	vmov	r0, s15
 8002032:	f7fe fa2d 	bl	8000490 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	492e      	ldr	r1, [pc, #184]	; (80020f4 <GetInputs+0xf0>)
 800203c:	e9c1 2300 	strd	r2, r3, [r1]
		AnkleIMUData = MPU925x_ReadIMU();
 8002040:	4c2d      	ldr	r4, [pc, #180]	; (80020f8 <GetInputs+0xf4>)
 8002042:	463b      	mov	r3, r7
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fe1d 	bl	8005c84 <MPU925x_ReadIMU>
 800204a:	4625      	mov	r5, r4
 800204c:	463c      	mov	r4, r7
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800205a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}

	if((Device.Joint == knee) || (Device.Joint == combined))
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <GetInputs+0xe8>)
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <GetInputs+0x6a>
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <GetInputs+0xe8>)
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d121      	bne.n	80020b2 <GetInputs+0xae>
	{
		CM_Knee.jointAngle[0] = AS5145B_ReadPosition(KneeEncoderIndex) - kneeEncBias;
 800206e:	2001      	movs	r0, #1
 8002070:	f002 fb0c 	bl	800468c <AS5145B_ReadPosition>
 8002074:	eeb0 7a40 	vmov.f32	s14, s0
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <GetInputs+0xf8>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002082:	ee17 0a90 	vmov	r0, s15
 8002086:	f7fe fa03 	bl	8000490 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	491c      	ldr	r1, [pc, #112]	; (8002100 <GetInputs+0xfc>)
 8002090:	e9c1 2300 	strd	r2, r3, [r1]
		KneeIMUData = MPU925x_ReadIMU();
 8002094:	4c1b      	ldr	r4, [pc, #108]	; (8002104 <GetInputs+0x100>)
 8002096:	463b      	mov	r3, r7
 8002098:	4618      	mov	r0, r3
 800209a:	f003 fdf3 	bl	8005c84 <MPU925x_ReadIMU>
 800209e:	4625      	mov	r5, r4
 80020a0:	463c      	mov	r4, r7
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}

	LoadCell->bot[0] = ReadLoadCell(ADC1);
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <GetInputs+0x104>)
 80020b4:	f000 f82e 	bl	8002114 <ReadLoadCell>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f9c6 	bl	800044c <__aeabi_ui2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4911      	ldr	r1, [pc, #68]	; (800210c <GetInputs+0x108>)
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
	LoadCell->top[0] = ReadLoadCell(ADC2);
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <GetInputs+0x10c>)
 80020cc:	f000 f822 	bl	8002114 <ReadLoadCell>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe f9ba 	bl	800044c <__aeabi_ui2d>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	490b      	ldr	r1, [pc, #44]	; (800210c <GetInputs+0x108>)
 80020de:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80020e2:	bf00      	nop
 80020e4:	3730      	adds	r7, #48	; 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200000a8 	.word	0x200000a8
 80020f0:	200000a0 	.word	0x200000a0
 80020f4:	200001c0 	.word	0x200001c0
 80020f8:	20000140 	.word	0x20000140
 80020fc:	200000a4 	.word	0x200000a4
 8002100:	20000250 	.word	0x20000250
 8002104:	20000170 	.word	0x20000170
 8002108:	50040000 	.word	0x50040000
 800210c:	200000b0 	.word	0x200000b0
 8002110:	50040100 	.word	0x50040100

08002114 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fe92 	bl	8001e46 <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8002122:	bf00      	nop
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff feaf 	bl	8001e88 <LL_ADC_IsActiveFlag_EOC>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f9      	beq.n	8002124 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff febc 	bl	8001eae <LL_ADC_ClearFlag_EOC>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fe99 	bl	8001e6e <LL_ADC_REG_ReadConversionData12>
 800213c:	4603      	mov	r3, r0
 800213e:	81fb      	strh	r3, [r7, #14]
	return data;
 8002140:	89fb      	ldrh	r3, [r7, #14]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	0000      	movs	r0, r0
 800214c:	0000      	movs	r0, r0
	...

08002150 <ProcessInputs>:

static void ProcessInputs(void)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	double tau = 1.0 / (2 * M_PI * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8002156:	a3a8      	add	r3, pc, #672	; (adr r3, 80023f8 <ProcessInputs+0x2a8>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	e9c7 2300 	strd	r2, r3, [r7]

	// Derivative of joint angle (joint speed) and filtering of load cells
	if(isFirst)
 8002160:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <ProcessInputs+0x288>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d04e      	beq.n	8002206 <ProcessInputs+0xb6>
	{
		if((Device.Joint == ankle) || (Device.Joint == combined))
 8002168:	4b9c      	ldr	r3, [pc, #624]	; (80023dc <ProcessInputs+0x28c>)
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <ProcessInputs+0x28>
 8002170:	4b9a      	ldr	r3, [pc, #616]	; (80023dc <ProcessInputs+0x28c>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10c      	bne.n	8002192 <ProcessInputs+0x42>
		{
			CM_Ankle.jointSpeed = 0.0;
 8002178:	4999      	ldr	r1, [pc, #612]	; (80023e0 <ProcessInputs+0x290>)
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 8002186:	4b96      	ldr	r3, [pc, #600]	; (80023e0 <ProcessInputs+0x290>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	4994      	ldr	r1, [pc, #592]	; (80023e0 <ProcessInputs+0x290>)
 800218e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == knee) || (Device.Joint == combined))
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <ProcessInputs+0x28c>)
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <ProcessInputs+0x52>
 800219a:	4b90      	ldr	r3, [pc, #576]	; (80023dc <ProcessInputs+0x28c>)
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10c      	bne.n	80021bc <ProcessInputs+0x6c>
		{
			CM_Knee.jointSpeed = 0.0;
 80021a2:	4990      	ldr	r1, [pc, #576]	; (80023e4 <ProcessInputs+0x294>)
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <ProcessInputs+0x294>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	498b      	ldr	r1, [pc, #556]	; (80023e4 <ProcessInputs+0x294>)
 80021b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[2] = LoadCell->bot[0];
 80021bc:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <ProcessInputs+0x298>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	4989      	ldr	r1, [pc, #548]	; (80023e8 <ProcessInputs+0x298>)
 80021c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		LoadCell->top[2] = LoadCell->top[0];
 80021c8:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <ProcessInputs+0x298>)
 80021ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ce:	4986      	ldr	r1, [pc, #536]	; (80023e8 <ProcessInputs+0x298>)
 80021d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <ProcessInputs+0x298>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	4984      	ldr	r1, [pc, #528]	; (80023ec <ProcessInputs+0x29c>)
 80021dc:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <ProcessInputs+0x298>)
 80021e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021e6:	4981      	ldr	r1, [pc, #516]	; (80023ec <ProcessInputs+0x29c>)
 80021e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 80021ec:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <ProcessInputs+0x29c>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	497e      	ldr	r1, [pc, #504]	; (80023ec <ProcessInputs+0x29c>)
 80021f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 80021f8:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <ProcessInputs+0x29c>)
 80021fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021fe:	497b      	ldr	r1, [pc, #492]	; (80023ec <ProcessInputs+0x29c>)
 8002200:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002204:	e2b2      	b.n	800276c <ProcessInputs+0x61c>
	}
	else if(isSecond)
 8002206:	4b7a      	ldr	r3, [pc, #488]	; (80023f0 <ProcessInputs+0x2a0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80f8 	beq.w	8002400 <ProcessInputs+0x2b0>
	{
		if((Device.Joint == ankle) || (Device.Joint == combined))
 8002210:	4b72      	ldr	r3, [pc, #456]	; (80023dc <ProcessInputs+0x28c>)
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <ProcessInputs+0xd0>
 8002218:	4b70      	ldr	r3, [pc, #448]	; (80023dc <ProcessInputs+0x28c>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d155      	bne.n	80022cc <ProcessInputs+0x17c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <ProcessInputs+0x290>)
 8002222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002226:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <ProcessInputs+0x290>)
 8002228:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800222c:	f7fd ffd0 	bl	80001d0 <__aeabi_dsub>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	f7fd ffca 	bl	80001d4 <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	f7fd ffc0 	bl	80001d4 <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <ProcessInputs+0x2a4>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fd ffb5 	bl	80001d0 <__aeabi_dsub>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <ProcessInputs+0x290>)
 8002270:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002274:	f7fe f964 	bl	8000540 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fd ffa8 	bl	80001d4 <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4614      	mov	r4, r2
 800228a:	461d      	mov	r5, r3
 800228c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	f7fd ff9e 	bl	80001d4 <__adddf3>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <ProcessInputs+0x2a4>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	f7fd ff95 	bl	80001d4 <__adddf3>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	f7fe fa6f 	bl	8000794 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4949      	ldr	r1, [pc, #292]	; (80023e0 <ProcessInputs+0x290>)
 80022bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80022c0:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <ProcessInputs+0x290>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	4946      	ldr	r1, [pc, #280]	; (80023e0 <ProcessInputs+0x290>)
 80022c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == knee) || (Device.Joint == combined))
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <ProcessInputs+0x28c>)
 80022ce:	785b      	ldrb	r3, [r3, #1]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <ProcessInputs+0x18c>
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <ProcessInputs+0x28c>)
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d155      	bne.n	8002388 <ProcessInputs+0x238>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80022dc:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <ProcessInputs+0x294>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <ProcessInputs+0x294>)
 80022e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e8:	f7fd ff72 	bl	80001d0 <__aeabi_dsub>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	f7fd ff6c 	bl	80001d4 <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f7fd ff62 	bl	80001d4 <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <ProcessInputs+0x2a4>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fd ff57 	bl	80001d0 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <ProcessInputs+0x294>)
 800232c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002330:	f7fe f906 	bl	8000540 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fd ff4a 	bl	80001d4 <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	f7fd ff40 	bl	80001d4 <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <ProcessInputs+0x2a4>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fd ff37 	bl	80001d4 <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fe fa11 	bl	8000794 <__aeabi_ddiv>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	491b      	ldr	r1, [pc, #108]	; (80023e4 <ProcessInputs+0x294>)
 8002378:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <ProcessInputs+0x294>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	4918      	ldr	r1, [pc, #96]	; (80023e4 <ProcessInputs+0x294>)
 8002384:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[1] = LoadCell->bot[0];
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <ProcessInputs+0x298>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	4916      	ldr	r1, [pc, #88]	; (80023e8 <ProcessInputs+0x298>)
 8002390:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[1] = LoadCell->top[0];
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <ProcessInputs+0x298>)
 8002396:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800239a:	4913      	ldr	r1, [pc, #76]	; (80023e8 <ProcessInputs+0x298>)
 800239c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <ProcessInputs+0x298>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	4911      	ldr	r1, [pc, #68]	; (80023ec <ProcessInputs+0x29c>)
 80023a8:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <ProcessInputs+0x298>)
 80023ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023b2:	490e      	ldr	r1, [pc, #56]	; (80023ec <ProcessInputs+0x29c>)
 80023b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <ProcessInputs+0x29c>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	490b      	ldr	r1, [pc, #44]	; (80023ec <ProcessInputs+0x29c>)
 80023c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <ProcessInputs+0x29c>)
 80023c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <ProcessInputs+0x29c>)
 80023cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80023d0:	e1cc      	b.n	800276c <ProcessInputs+0x61c>
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	20000008 	.word	0x20000008
 80023dc:	200000a8 	.word	0x200000a8
 80023e0:	200001c0 	.word	0x200001c0
 80023e4:	20000250 	.word	0x20000250
 80023e8:	200000b0 	.word	0x200000b0
 80023ec:	200002e0 	.word	0x200002e0
 80023f0:	200001a0 	.word	0x200001a0
 80023f4:	20000000 	.word	0x20000000
 80023f8:	be3b06cf 	.word	0xbe3b06cf
 80023fc:	3f904c26 	.word	0x3f904c26
	}
	else
	{
		if((Device.Joint == ankle) || (Device.Joint == combined))
 8002400:	4bbf      	ldr	r3, [pc, #764]	; (8002700 <ProcessInputs+0x5b0>)
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <ProcessInputs+0x2c0>
 8002408:	4bbd      	ldr	r3, [pc, #756]	; (8002700 <ProcessInputs+0x5b0>)
 800240a:	785b      	ldrb	r3, [r3, #1]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d155      	bne.n	80024bc <ProcessInputs+0x36c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 8002410:	4bbc      	ldr	r3, [pc, #752]	; (8002704 <ProcessInputs+0x5b4>)
 8002412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002416:	4bbb      	ldr	r3, [pc, #748]	; (8002704 <ProcessInputs+0x5b4>)
 8002418:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800241c:	f7fd fed8 	bl	80001d0 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	f7fd fed2 	bl	80001d4 <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	f7fd fec8 	bl	80001d4 <__adddf3>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	4bae      	ldr	r3, [pc, #696]	; (8002708 <ProcessInputs+0x5b8>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fd febd 	bl	80001d0 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	4ba9      	ldr	r3, [pc, #676]	; (8002704 <ProcessInputs+0x5b4>)
 8002460:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002464:	f7fe f86c 	bl	8000540 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fd feb0 	bl	80001d4 <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	f7fd fea6 	bl	80001d4 <__adddf3>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	4b9d      	ldr	r3, [pc, #628]	; (8002708 <ProcessInputs+0x5b8>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fd fe9d 	bl	80001d4 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fe f977 	bl	8000794 <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4996      	ldr	r1, [pc, #600]	; (8002704 <ProcessInputs+0x5b4>)
 80024ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80024b0:	4b94      	ldr	r3, [pc, #592]	; (8002704 <ProcessInputs+0x5b4>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	4993      	ldr	r1, [pc, #588]	; (8002704 <ProcessInputs+0x5b4>)
 80024b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == knee) || (Device.Joint == combined))
 80024bc:	4b90      	ldr	r3, [pc, #576]	; (8002700 <ProcessInputs+0x5b0>)
 80024be:	785b      	ldrb	r3, [r3, #1]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d003      	beq.n	80024cc <ProcessInputs+0x37c>
 80024c4:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <ProcessInputs+0x5b0>)
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d155      	bne.n	8002578 <ProcessInputs+0x428>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80024cc:	4b8f      	ldr	r3, [pc, #572]	; (800270c <ProcessInputs+0x5bc>)
 80024ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d2:	4b8e      	ldr	r3, [pc, #568]	; (800270c <ProcessInputs+0x5bc>)
 80024d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024d8:	f7fd fe7a 	bl	80001d0 <__aeabi_dsub>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	f7fd fe74 	bl	80001d4 <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	f7fd fe6a 	bl	80001d4 <__adddf3>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <ProcessInputs+0x5b8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fd fe5f 	bl	80001d0 <__aeabi_dsub>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4b7c      	ldr	r3, [pc, #496]	; (800270c <ProcessInputs+0x5bc>)
 800251c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002520:	f7fe f80e 	bl	8000540 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd fe52 	bl	80001d4 <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4614      	mov	r4, r2
 8002536:	461d      	mov	r5, r3
 8002538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	f7fd fe48 	bl	80001d4 <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <ProcessInputs+0x5b8>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fd fe3f 	bl	80001d4 <__adddf3>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f919 	bl	8000794 <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4969      	ldr	r1, [pc, #420]	; (800270c <ProcessInputs+0x5bc>)
 8002568:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800256c:	4b67      	ldr	r3, [pc, #412]	; (800270c <ProcessInputs+0x5bc>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	4966      	ldr	r1, [pc, #408]	; (800270c <ProcessInputs+0x5bc>)
 8002574:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 8002578:	4b65      	ldr	r3, [pc, #404]	; (8002710 <ProcessInputs+0x5c0>)
 800257a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800257e:	a358      	add	r3, pc, #352	; (adr r3, 80026e0 <ProcessInputs+0x590>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fd ffdc 	bl	8000540 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4614      	mov	r4, r2
 800258e:	461d      	mov	r5, r3
 8002590:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <ProcessInputs+0x5c0>)
 8002592:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002596:	a354      	add	r3, pc, #336	; (adr r3, 80026e8 <ProcessInputs+0x598>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fd ffd0 	bl	8000540 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe12 	bl	80001d0 <__aeabi_dsub>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4614      	mov	r4, r2
 80025b2:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->bot[0] + 0.0256 * LoadCell->bot[1] + 0.0128 * LoadCell->bot[2];
 80025b4:	4b57      	ldr	r3, [pc, #348]	; (8002714 <ProcessInputs+0x5c4>)
 80025b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ba:	a34d      	add	r3, pc, #308	; (adr r3, 80026f0 <ProcessInputs+0x5a0>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd ffbe 	bl	8000540 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fd fe02 	bl	80001d4 <__adddf3>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <ProcessInputs+0x5c4>)
 80025da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025de:	a346      	add	r3, pc, #280	; (adr r3, 80026f8 <ProcessInputs+0x5a8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd ffac 	bl	8000540 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fdf0 	bl	80001d4 <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4614      	mov	r4, r2
 80025fa:	461d      	mov	r5, r3
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <ProcessInputs+0x5c4>)
 80025fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002602:	a33b      	add	r3, pc, #236	; (adr r3, 80026f0 <ProcessInputs+0x5a0>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fd ff9a 	bl	8000540 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4620      	mov	r0, r4
 8002612:	4629      	mov	r1, r5
 8002614:	f7fd fdde 	bl	80001d4 <__adddf3>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 800261c:	493c      	ldr	r1, [pc, #240]	; (8002710 <ProcessInputs+0x5c0>)
 800261e:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <ProcessInputs+0x5c0>)
 8002624:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002628:	a32d      	add	r3, pc, #180	; (adr r3, 80026e0 <ProcessInputs+0x590>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd ff87 	bl	8000540 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <ProcessInputs+0x5c0>)
 800263c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002640:	a329      	add	r3, pc, #164	; (adr r3, 80026e8 <ProcessInputs+0x598>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd ff7b 	bl	8000540 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fd fdbd 	bl	80001d0 <__aeabi_dsub>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4614      	mov	r4, r2
 800265c:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->top[0] + 0.0256 * LoadCell->top[1] + 0.0128 * LoadCell->top[2];
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <ProcessInputs+0x5c4>)
 8002660:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002664:	a322      	add	r3, pc, #136	; (adr r3, 80026f0 <ProcessInputs+0x5a0>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ff69 	bl	8000540 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fdad 	bl	80001d4 <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4614      	mov	r4, r2
 8002680:	461d      	mov	r5, r3
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <ProcessInputs+0x5c4>)
 8002684:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002688:	a31b      	add	r3, pc, #108	; (adr r3, 80026f8 <ProcessInputs+0x5a8>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ff57 	bl	8000540 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd fd9b 	bl	80001d4 <__adddf3>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4614      	mov	r4, r2
 80026a4:	461d      	mov	r5, r3
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <ProcessInputs+0x5c4>)
 80026a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026ac:	a310      	add	r3, pc, #64	; (adr r3, 80026f0 <ProcessInputs+0x5a0>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ff45 	bl	8000540 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4620      	mov	r0, r4
 80026bc:	4629      	mov	r1, r5
 80026be:	f7fd fd89 	bl	80001d4 <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 80026c6:	4912      	ldr	r1, [pc, #72]	; (8002710 <ProcessInputs+0x5c0>)
 80026c8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		LoadCell->bot[2] = LoadCell->bot[1];
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <ProcessInputs+0x5c4>)
 80026ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026d2:	4910      	ldr	r1, [pc, #64]	; (8002714 <ProcessInputs+0x5c4>)
 80026d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026d8:	e01e      	b.n	8002718 <ProcessInputs+0x5c8>
 80026da:	bf00      	nop
 80026dc:	f3af 8000 	nop.w
 80026e0:	6cf41f21 	.word	0x6cf41f21
 80026e4:	3ffa7d56 	.word	0x3ffa7d56
 80026e8:	089a0275 	.word	0x089a0275
 80026ec:	3fe69e1b 	.word	0x3fe69e1b
 80026f0:	eb1c432d 	.word	0xeb1c432d
 80026f4:	3f8a36e2 	.word	0x3f8a36e2
 80026f8:	eb1c432d 	.word	0xeb1c432d
 80026fc:	3f9a36e2 	.word	0x3f9a36e2
 8002700:	200000a8 	.word	0x200000a8
 8002704:	200001c0 	.word	0x200001c0
 8002708:	20000000 	.word	0x20000000
 800270c:	20000250 	.word	0x20000250
 8002710:	200002e0 	.word	0x200002e0
 8002714:	200000b0 	.word	0x200000b0
		LoadCell->bot[1] = LoadCell->bot[0];
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <ProcessInputs+0x62c>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	4917      	ldr	r1, [pc, #92]	; (800277c <ProcessInputs+0x62c>)
 8002720:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[2] = LoadCell->top[1];
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <ProcessInputs+0x62c>)
 8002726:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800272a:	4914      	ldr	r1, [pc, #80]	; (800277c <ProcessInputs+0x62c>)
 800272c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		LoadCell->top[1] = LoadCell->top[0];
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <ProcessInputs+0x62c>)
 8002732:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002736:	4911      	ldr	r1, [pc, #68]	; (800277c <ProcessInputs+0x62c>)
 8002738:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <ProcessInputs+0x630>)
 800273e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002742:	490f      	ldr	r1, [pc, #60]	; (8002780 <ProcessInputs+0x630>)
 8002744:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <ProcessInputs+0x630>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	490c      	ldr	r1, [pc, #48]	; (8002780 <ProcessInputs+0x630>)
 8002750:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <ProcessInputs+0x630>)
 8002756:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800275a:	4909      	ldr	r1, [pc, #36]	; (8002780 <ProcessInputs+0x630>)
 800275c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <ProcessInputs+0x630>)
 8002762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002766:	4906      	ldr	r1, [pc, #24]	; (8002780 <ProcessInputs+0x630>)
 8002768:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}

	CalibrateIMU();
 800276c:	f000 f80a 	bl	8002784 <CalibrateIMU>
	ComputeLimbAngle();
 8002770:	f000 feda 	bl	8003528 <ComputeLimbAngle>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bdb0      	pop	{r4, r5, r7, pc}
 800277c:	200000b0 	.word	0x200000b0
 8002780:	200002e0 	.word	0x200002e0

08002784 <CalibrateIMU>:

static void CalibrateIMU(void)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0aa      	sub	sp, #168	; 0xa8
 800278a:	af00      	add	r7, sp, #0
	double n;

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double c1, c2, c3, s1, s2, s3;

	if((Device.Joint == ankle) || (Device.Joint == combined))
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <CalibrateIMU+0xb8>)
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <CalibrateIMU+0x1a>
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <CalibrateIMU+0xb8>)
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b01      	cmp	r3, #1
 800279a:	f040 8358 	bne.w	8002e4e <CalibrateIMU+0x6ca>
	{
		axBias = 0.0;
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		ayBias = 0.0;
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		azBias = 0.0;
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gxBias = 0.0;
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gyBias = 0.0;
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		gzBias = 0.0;
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		n = 1.0;
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <CalibrateIMU+0xbc>)
 80027ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		if(Device.Side == left)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <CalibrateIMU+0xb8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d127      	bne.n	8002848 <CalibrateIMU+0xc4>
		{
			c1 = -1.0;
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <CalibrateIMU+0xc0>)
 80027fe:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			c2 = -1.0;
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <CalibrateIMU+0xc0>)
 8002808:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			c3 = 1.0;
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <CalibrateIMU+0xbc>)
 8002812:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			s1 = 0.0;
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			s2 = 0.0;
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			s3 = 0.0;
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800283a:	e026      	b.n	800288a <CalibrateIMU+0x106>
 800283c:	200000a8 	.word	0x200000a8
 8002840:	3ff00000 	.word	0x3ff00000
 8002844:	bff00000 	.word	0xbff00000
		}
		else
		{
			c1 = 1.0;
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4bc2      	ldr	r3, [pc, #776]	; (8002b58 <CalibrateIMU+0x3d4>)
 800284e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			c2 = 1.0;
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4bc0      	ldr	r3, [pc, #768]	; (8002b58 <CalibrateIMU+0x3d4>)
 8002858:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			c3 = 1.0;
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	4bbd      	ldr	r3, [pc, #756]	; (8002b58 <CalibrateIMU+0x3d4>)
 8002862:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			s1 = 0.0;
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			s2 = 0.0;
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			s3 = 0.0;
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		}

		CM_Ankle.IMUData.ax = n * (AnkleIMUData.ax*(c1*c3 - c2*s1*s3) + AnkleIMUData.ay*(-c3*s1    - c1*c2*s3) + AnkleIMUData.az*( s2*s3)) - axBias;
 800288a:	4bb4      	ldr	r3, [pc, #720]	; (8002b5c <CalibrateIMU+0x3d8>)
 800288c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002890:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002894:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002898:	f7fd fe52 	bl	8000540 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4690      	mov	r8, r2
 80028a2:	4699      	mov	r9, r3
 80028a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028ac:	f7fd fe48 	bl	8000540 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80028bc:	f7fd fe40 	bl	8000540 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd fc82 	bl	80001d0 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fe34 	bl	8000540 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4692      	mov	sl, r2
 80028de:	469b      	mov	fp, r3
 80028e0:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <CalibrateIMU+0x3d8>)
 80028e2:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80028e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028fe:	f7fd fe1f 	bl	8000540 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4614      	mov	r4, r2
 8002908:	461d      	mov	r5, r3
 800290a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800290e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002912:	f7fd fe15 	bl	8000540 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002922:	f7fd fe0d 	bl	8000540 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd fc4f 	bl	80001d0 <__aeabi_dsub>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4640      	mov	r0, r8
 8002938:	4649      	mov	r1, r9
 800293a:	f7fd fe01 	bl	8000540 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4650      	mov	r0, sl
 8002944:	4659      	mov	r1, fp
 8002946:	f7fd fc45 	bl	80001d4 <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4690      	mov	r8, r2
 8002950:	4699      	mov	r9, r3
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002954:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002958:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800295c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002960:	f7fd fdee 	bl	8000540 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fde8 	bl	8000540 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4640      	mov	r0, r8
 8002976:	4649      	mov	r1, r9
 8002978:	f7fd fc2c 	bl	80001d4 <__adddf3>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002988:	f7fd fdda 	bl	8000540 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002998:	f7fd fc1a 	bl	80001d0 <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <CalibrateIMU+0x3dc>)
 80029a6:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
		CM_Ankle.IMUData.ay = n * (AnkleIMUData.ax*(c1*s3 + c2*c3*s1) + AnkleIMUData.ay*( c1*c2*c3 - s1*s3   ) + AnkleIMUData.az*(-c3*s2)) - ayBias;
 80029aa:	4b6c      	ldr	r3, [pc, #432]	; (8002b5c <CalibrateIMU+0x3d8>)
 80029ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80029b4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80029b8:	f7fd fdc2 	bl	8000540 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4690      	mov	r8, r2
 80029c2:	4699      	mov	r9, r3
 80029c4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80029c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029cc:	f7fd fdb8 	bl	8000540 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029dc:	f7fd fdb0 	bl	8000540 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4640      	mov	r0, r8
 80029e6:	4649      	mov	r1, r9
 80029e8:	f7fd fbf4 	bl	80001d4 <__adddf3>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fda4 	bl	8000540 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4692      	mov	sl, r2
 80029fe:	469b      	mov	fp, r3
 8002a00:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002a02:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8002a06:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002a0a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002a0e:	f7fd fd97 	bl	8000540 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002a1e:	f7fd fd8f 	bl	8000540 <__aeabi_dmul>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	461d      	mov	r5, r3
 8002a2a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002a2e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002a32:	f7fd fd85 	bl	8000540 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f7fd fbc7 	bl	80001d0 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4640      	mov	r0, r8
 8002a48:	4649      	mov	r1, r9
 8002a4a:	f7fd fd79 	bl	8000540 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4650      	mov	r0, sl
 8002a54:	4659      	mov	r1, fp
 8002a56:	f7fd fbbd 	bl	80001d4 <__adddf3>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4690      	mov	r8, r2
 8002a60:	4699      	mov	r9, r3
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002a64:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002a68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
 8002a78:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002a7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a80:	f7fd fd5e 	bl	8000540 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fd58 	bl	8000540 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4640      	mov	r0, r8
 8002a96:	4649      	mov	r1, r9
 8002a98:	f7fd fb9c 	bl	80001d4 <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aa8:	f7fd fd4a 	bl	8000540 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002ab8:	f7fd fb8a 	bl	80001d0 <__aeabi_dsub>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <CalibrateIMU+0x3dc>)
 8002ac6:	e9c3 0118 	strd	r0, r1, [r3, #96]	; 0x60
		CM_Ankle.IMUData.az = n * (AnkleIMUData.ax*(s1*s2           ) + AnkleIMUData.ay*( c1*s2              ) + AnkleIMUData.az*( c2   )) - azBias;
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002acc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ad0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002ad4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002ad8:	f7fd fd32 	bl	8000540 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd fd2c 	bl	8000540 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4690      	mov	r8, r2
 8002aee:	4699      	mov	r9, r3
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002af2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002af6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002afa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002afe:	f7fd fd1f 	bl	8000540 <__aeabi_dmul>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd fd19 	bl	8000540 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4640      	mov	r0, r8
 8002b14:	4649      	mov	r1, r9
 8002b16:	f7fd fb5d 	bl	80001d4 <__adddf3>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4614      	mov	r4, r2
 8002b20:	461d      	mov	r5, r3
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <CalibrateIMU+0x3d8>)
 8002b24:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002b2c:	f7fd fd08 	bl	8000540 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fb4c 	bl	80001d4 <__adddf3>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b48:	f7fd fcfa 	bl	8000540 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	e006      	b.n	8002b64 <CalibrateIMU+0x3e0>
 8002b56:	bf00      	nop
 8002b58:	3ff00000 	.word	0x3ff00000
 8002b5c:	20000140 	.word	0x20000140
 8002b60:	200001c0 	.word	0x200001c0
 8002b64:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b68:	f7fd fb32 	bl	80001d0 <__aeabi_dsub>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	4bbb      	ldr	r3, [pc, #748]	; (8002e64 <CalibrateIMU+0x6e0>)
 8002b76:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
		CM_Ankle.IMUData.gx = n * (AnkleIMUData.gx*(c1*c3 - c2*s1*s3) + AnkleIMUData.gy*(-c3*s1    - c1*c2*s3) + AnkleIMUData.gz*( s2*s3)) - gxBias;
 8002b7a:	4bbb      	ldr	r3, [pc, #748]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002b7c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b80:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002b84:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002b88:	f7fd fcda 	bl	8000540 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4690      	mov	r8, r2
 8002b92:	4699      	mov	r9, r3
 8002b94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b9c:	f7fd fcd0 	bl	8000540 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002bac:	f7fd fcc8 	bl	8000540 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	f7fd fb0a 	bl	80001d0 <__aeabi_dsub>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fcbc 	bl	8000540 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4692      	mov	sl, r2
 8002bce:	469b      	mov	fp, r3
 8002bd0:	4ba5      	ldr	r3, [pc, #660]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002bd2:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002be0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bee:	f7fd fca7 	bl	8000540 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	461d      	mov	r5, r3
 8002bfa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002bfe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002c02:	f7fd fc9d 	bl	8000540 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002c12:	f7fd fc95 	bl	8000540 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fad7 	bl	80001d0 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4640      	mov	r0, r8
 8002c28:	4649      	mov	r1, r9
 8002c2a:	f7fd fc89 	bl	8000540 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4650      	mov	r0, sl
 8002c34:	4659      	mov	r1, fp
 8002c36:	f7fd facd 	bl	80001d4 <__adddf3>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4690      	mov	r8, r2
 8002c40:	4699      	mov	r9, r3
 8002c42:	4b89      	ldr	r3, [pc, #548]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002c44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002c4c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c50:	f7fd fc76 	bl	8000540 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fc70 	bl	8000540 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4640      	mov	r0, r8
 8002c66:	4649      	mov	r1, r9
 8002c68:	f7fd fab4 	bl	80001d4 <__adddf3>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c78:	f7fd fc62 	bl	8000540 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c88:	f7fd faa2 	bl	80001d0 <__aeabi_dsub>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4974      	ldr	r1, [pc, #464]	; (8002e64 <CalibrateIMU+0x6e0>)
 8002c92:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		CM_Ankle.IMUData.gy = n * (AnkleIMUData.gx*(c1*s3 + c2*c3*s1) + AnkleIMUData.gy*( c1*c2*c3 - s1*s3   ) + AnkleIMUData.gz*(-c3*s2)) - gyBias;
 8002c96:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002c98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002ca0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002ca4:	f7fd fc4c 	bl	8000540 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4690      	mov	r8, r2
 8002cae:	4699      	mov	r9, r3
 8002cb0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cb8:	f7fd fc42 	bl	8000540 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002cc8:	f7fd fc3a 	bl	8000540 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	f7fd fa7e 	bl	80001d4 <__adddf3>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f7fd fc2e 	bl	8000540 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4692      	mov	sl, r2
 8002cea:	469b      	mov	fp, r3
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002cee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002cf2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002cf6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002cfa:	f7fd fc21 	bl	8000540 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002d0a:	f7fd fc19 	bl	8000540 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4614      	mov	r4, r2
 8002d14:	461d      	mov	r5, r3
 8002d16:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002d1a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002d1e:	f7fd fc0f 	bl	8000540 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fa51 	bl	80001d0 <__aeabi_dsub>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4640      	mov	r0, r8
 8002d34:	4649      	mov	r1, r9
 8002d36:	f7fd fc03 	bl	8000540 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4650      	mov	r0, sl
 8002d40:	4659      	mov	r1, fp
 8002d42:	f7fd fa47 	bl	80001d4 <__adddf3>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002d50:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002d68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d6c:	f7fd fbe8 	bl	8000540 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd fbe2 	bl	8000540 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4640      	mov	r0, r8
 8002d82:	4649      	mov	r1, r9
 8002d84:	f7fd fa26 	bl	80001d4 <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d94:	f7fd fbd4 	bl	8000540 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002da4:	f7fd fa14 	bl	80001d0 <__aeabi_dsub>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	492d      	ldr	r1, [pc, #180]	; (8002e64 <CalibrateIMU+0x6e0>)
 8002dae:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		CM_Ankle.IMUData.gz = n * (AnkleIMUData.gx*(s1*s2           ) + AnkleIMUData.gy*( c1*s2              ) + AnkleIMUData.gz*( c2   )) - gzBias;
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002db4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002db8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002dbc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002dc0:	f7fd fbbe 	bl	8000540 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fbb8 	bl	8000540 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002dda:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002dde:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002de2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002de6:	f7fd fbab 	bl	8000540 <__aeabi_dmul>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4620      	mov	r0, r4
 8002df0:	4629      	mov	r1, r5
 8002df2:	f7fd fba5 	bl	8000540 <__aeabi_dmul>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f7fd f9e9 	bl	80001d4 <__adddf3>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4614      	mov	r4, r2
 8002e08:	461d      	mov	r5, r3
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <CalibrateIMU+0x6e4>)
 8002e0c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e10:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002e14:	f7fd fb94 	bl	8000540 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	4629      	mov	r1, r5
 8002e20:	f7fd f9d8 	bl	80001d4 <__adddf3>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e30:	f7fd fb86 	bl	8000540 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e40:	f7fd f9c6 	bl	80001d0 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <CalibrateIMU+0x6e0>)
 8002e4a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}

	if((Device.Joint == knee) || (Device.Joint == combined))
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <CalibrateIMU+0x6e8>)
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d00c      	beq.n	8002e70 <CalibrateIMU+0x6ec>
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <CalibrateIMU+0x6e8>)
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	f040 835b 	bne.w	8003516 <CalibrateIMU+0xd92>
 8002e60:	e006      	b.n	8002e70 <CalibrateIMU+0x6ec>
 8002e62:	bf00      	nop
 8002e64:	200001c0 	.word	0x200001c0
 8002e68:	20000140 	.word	0x20000140
 8002e6c:	200000a8 	.word	0x200000a8
	{
		axBias = 0.0;
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		ayBias = 0.0;
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		azBias = 0.0;
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gxBias = 0.0;
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gyBias = 0.0;
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		gzBias = 0.0;
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		n = 1.0;
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <CalibrateIMU+0x78c>)
 8002ebe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		if(Device.Side == left)
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <CalibrateIMU+0x790>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d128      	bne.n	8002f1c <CalibrateIMU+0x798>
		{
			c1 = -1.0;
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <CalibrateIMU+0x794>)
 8002ed0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			c2 = -1.0;
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <CalibrateIMU+0x794>)
 8002eda:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			c3 = 1.0;
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <CalibrateIMU+0x78c>)
 8002ee4:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			s1 = 0.0;
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			s2 = 0.0;
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			s3 = 0.0;
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8002f0c:	e027      	b.n	8002f5e <CalibrateIMU+0x7da>
 8002f0e:	bf00      	nop
 8002f10:	3ff00000 	.word	0x3ff00000
 8002f14:	200000a8 	.word	0x200000a8
 8002f18:	bff00000 	.word	0xbff00000
		}
		else
		{
			c1 = 1.0;
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4bc1      	ldr	r3, [pc, #772]	; (8003228 <CalibrateIMU+0xaa4>)
 8002f22:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			c2 = 1.0;
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	4bbf      	ldr	r3, [pc, #764]	; (8003228 <CalibrateIMU+0xaa4>)
 8002f2c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
			c3 = 1.0;
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	4bbc      	ldr	r3, [pc, #752]	; (8003228 <CalibrateIMU+0xaa4>)
 8002f36:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			s1 = 0.0;
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			s2 = 0.0;
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			s3 = 0.0;
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		}

		CM_Knee.IMUData.ax = n * (KneeIMUData.ax*(c1*c3 - c2*s1*s3) + KneeIMUData.ay*(-c3*s1 - c1*c2*s3) + KneeIMUData.az*( s2*s3)) - axBias;
 8002f5e:	4bb3      	ldr	r3, [pc, #716]	; (800322c <CalibrateIMU+0xaa8>)
 8002f60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002f64:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002f68:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002f6c:	f7fd fae8 	bl	8000540 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4690      	mov	r8, r2
 8002f76:	4699      	mov	r9, r3
 8002f78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f80:	f7fd fade 	bl	8000540 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002f90:	f7fd fad6 	bl	8000540 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4640      	mov	r0, r8
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	f7fd f918 	bl	80001d0 <__aeabi_dsub>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	f7fd faca 	bl	8000540 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4692      	mov	sl, r2
 8002fb2:	469b      	mov	fp, r3
 8002fb4:	4b9d      	ldr	r3, [pc, #628]	; (800322c <CalibrateIMU+0xaa8>)
 8002fb6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fd2:	f7fd fab5 	bl	8000540 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4690      	mov	r8, r2
 8002fdc:	4699      	mov	r9, r3
 8002fde:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002fe2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002fe6:	f7fd faab 	bl	8000540 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002ff6:	f7fd faa3 	bl	8000540 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4640      	mov	r0, r8
 8003000:	4649      	mov	r1, r9
 8003002:	f7fd f8e5 	bl	80001d0 <__aeabi_dsub>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f7fd fa97 	bl	8000540 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4650      	mov	r0, sl
 8003018:	4659      	mov	r1, fp
 800301a:	f7fd f8db 	bl	80001d4 <__adddf3>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4690      	mov	r8, r2
 8003024:	4699      	mov	r9, r3
 8003026:	4b81      	ldr	r3, [pc, #516]	; (800322c <CalibrateIMU+0xaa8>)
 8003028:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800302c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003030:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003034:	f7fd fa84 	bl	8000540 <__aeabi_dmul>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4620      	mov	r0, r4
 800303e:	4629      	mov	r1, r5
 8003040:	f7fd fa7e 	bl	8000540 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4640      	mov	r0, r8
 800304a:	4649      	mov	r1, r9
 800304c:	f7fd f8c2 	bl	80001d4 <__adddf3>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800305c:	f7fd fa70 	bl	8000540 <__aeabi_dmul>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800306c:	f7fd f8b0 	bl	80001d0 <__aeabi_dsub>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	496e      	ldr	r1, [pc, #440]	; (8003230 <CalibrateIMU+0xaac>)
 8003076:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		CM_Knee.IMUData.ay = n * (KneeIMUData.ax*(c1*s3 + c2*c3*s1) + KneeIMUData.ay*( c1*c2*c3 - s1*s3) + KneeIMUData.az*(-c3*s2)) - ayBias;
 800307a:	4b6c      	ldr	r3, [pc, #432]	; (800322c <CalibrateIMU+0xaa8>)
 800307c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003080:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003084:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003088:	f7fd fa5a 	bl	8000540 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4690      	mov	r8, r2
 8003092:	4699      	mov	r9, r3
 8003094:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800309c:	f7fd fa50 	bl	8000540 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80030ac:	f7fd fa48 	bl	8000540 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4640      	mov	r0, r8
 80030b6:	4649      	mov	r1, r9
 80030b8:	f7fd f88c 	bl	80001d4 <__adddf3>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4620      	mov	r0, r4
 80030c2:	4629      	mov	r1, r5
 80030c4:	f7fd fa3c 	bl	8000540 <__aeabi_dmul>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4692      	mov	sl, r2
 80030ce:	469b      	mov	fp, r3
 80030d0:	4b56      	ldr	r3, [pc, #344]	; (800322c <CalibrateIMU+0xaa8>)
 80030d2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80030d6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80030da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80030de:	f7fd fa2f 	bl	8000540 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80030ee:	f7fd fa27 	bl	8000540 <__aeabi_dmul>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80030fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003102:	f7fd fa1d 	bl	8000540 <__aeabi_dmul>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4640      	mov	r0, r8
 800310c:	4649      	mov	r1, r9
 800310e:	f7fd f85f 	bl	80001d0 <__aeabi_dsub>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd fa11 	bl	8000540 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4650      	mov	r0, sl
 8003124:	4659      	mov	r1, fp
 8003126:	f7fd f855 	bl	80001d4 <__adddf3>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4690      	mov	r8, r2
 8003130:	4699      	mov	r9, r3
 8003132:	4b3e      	ldr	r3, [pc, #248]	; (800322c <CalibrateIMU+0xaa8>)
 8003134:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003142:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800314c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003150:	f7fd f9f6 	bl	8000540 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd f9f0 	bl	8000540 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4640      	mov	r0, r8
 8003166:	4649      	mov	r1, r9
 8003168:	f7fd f834 	bl	80001d4 <__adddf3>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003178:	f7fd f9e2 	bl	8000540 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003188:	f7fd f822 	bl	80001d0 <__aeabi_dsub>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4927      	ldr	r1, [pc, #156]	; (8003230 <CalibrateIMU+0xaac>)
 8003192:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		CM_Knee.IMUData.az = n * (KneeIMUData.ax*(s1*s2           ) + KneeIMUData.ay*( c1*s2           ) + KneeIMUData.az*( c2   )) - azBias;
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <CalibrateIMU+0xaa8>)
 8003198:	e9d3 4500 	ldrd	r4, r5, [r3]
 800319c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80031a0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80031a4:	f7fd f9cc 	bl	8000540 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f9c6 	bl	8000540 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4690      	mov	r8, r2
 80031ba:	4699      	mov	r9, r3
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <CalibrateIMU+0xaa8>)
 80031be:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80031c2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80031c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80031ca:	f7fd f9b9 	bl	8000540 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4620      	mov	r0, r4
 80031d4:	4629      	mov	r1, r5
 80031d6:	f7fd f9b3 	bl	8000540 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4640      	mov	r0, r8
 80031e0:	4649      	mov	r1, r9
 80031e2:	f7fc fff7 	bl	80001d4 <__adddf3>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4614      	mov	r4, r2
 80031ec:	461d      	mov	r5, r3
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <CalibrateIMU+0xaa8>)
 80031f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80031f4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80031f8:	f7fd f9a2 	bl	8000540 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f7fc ffe6 	bl	80001d4 <__adddf3>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003214:	f7fd f994 	bl	8000540 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003224:	e006      	b.n	8003234 <CalibrateIMU+0xab0>
 8003226:	bf00      	nop
 8003228:	3ff00000 	.word	0x3ff00000
 800322c:	20000170 	.word	0x20000170
 8003230:	20000250 	.word	0x20000250
 8003234:	f7fc ffcc 	bl	80001d0 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	49b8      	ldr	r1, [pc, #736]	; (8003520 <CalibrateIMU+0xd9c>)
 800323e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		CM_Knee.IMUData.gx = n * (KneeIMUData.gx*(c1*c3 - c2*s1*s3) + KneeIMUData.gy*(-c3*s1 - c1*c2*s3) + KneeIMUData.gz*( s2*s3)) - gxBias;
 8003242:	4bb8      	ldr	r3, [pc, #736]	; (8003524 <CalibrateIMU+0xda0>)
 8003244:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003248:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800324c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003250:	f7fd f976 	bl	8000540 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4690      	mov	r8, r2
 800325a:	4699      	mov	r9, r3
 800325c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003260:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003264:	f7fd f96c 	bl	8000540 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003274:	f7fd f964 	bl	8000540 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fc ffa6 	bl	80001d0 <__aeabi_dsub>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fd f958 	bl	8000540 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4690      	mov	r8, r2
 8003296:	4699      	mov	r9, r3
 8003298:	4ba2      	ldr	r3, [pc, #648]	; (8003524 <CalibrateIMU+0xda0>)
 800329a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800329e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80032b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032b6:	f7fd f943 	bl	8000540 <__aeabi_dmul>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4692      	mov	sl, r2
 80032c0:	469b      	mov	fp, r3
 80032c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80032c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80032ca:	f7fd f939 	bl	8000540 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80032da:	f7fd f931 	bl	8000540 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4650      	mov	r0, sl
 80032e4:	4659      	mov	r1, fp
 80032e6:	f7fc ff73 	bl	80001d0 <__aeabi_dsub>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fd f925 	bl	8000540 <__aeabi_dmul>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fc ff69 	bl	80001d4 <__adddf3>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4690      	mov	r8, r2
 8003308:	4699      	mov	r9, r3
 800330a:	4b86      	ldr	r3, [pc, #536]	; (8003524 <CalibrateIMU+0xda0>)
 800330c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003310:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003314:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003318:	f7fd f912 	bl	8000540 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fd f90c 	bl	8000540 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4640      	mov	r0, r8
 800332e:	4649      	mov	r1, r9
 8003330:	f7fc ff50 	bl	80001d4 <__adddf3>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003340:	f7fd f8fe 	bl	8000540 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003350:	f7fc ff3e 	bl	80001d0 <__aeabi_dsub>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4971      	ldr	r1, [pc, #452]	; (8003520 <CalibrateIMU+0xd9c>)
 800335a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		CM_Knee.IMUData.gy = n * (KneeIMUData.gx*(c1*s3 + c2*c3*s1) + KneeIMUData.gy*( c1*c2*c3 - s1*s3) + KneeIMUData.gz*(-c3*s2)) - gyBias;
 800335e:	4b71      	ldr	r3, [pc, #452]	; (8003524 <CalibrateIMU+0xda0>)
 8003360:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003364:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003368:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800336c:	f7fd f8e8 	bl	8000540 <__aeabi_dmul>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4690      	mov	r8, r2
 8003376:	4699      	mov	r9, r3
 8003378:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800337c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003380:	f7fd f8de 	bl	8000540 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003390:	f7fd f8d6 	bl	8000540 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4640      	mov	r0, r8
 800339a:	4649      	mov	r1, r9
 800339c:	f7fc ff1a 	bl	80001d4 <__adddf3>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd f8ca 	bl	8000540 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4690      	mov	r8, r2
 80033b2:	4699      	mov	r9, r3
 80033b4:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <CalibrateIMU+0xda0>)
 80033b6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80033ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80033be:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80033c2:	f7fd f8bd 	bl	8000540 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80033d2:	f7fd f8b5 	bl	8000540 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4692      	mov	sl, r2
 80033dc:	469b      	mov	fp, r3
 80033de:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80033e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80033e6:	f7fd f8ab 	bl	8000540 <__aeabi_dmul>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4650      	mov	r0, sl
 80033f0:	4659      	mov	r1, fp
 80033f2:	f7fc feed 	bl	80001d0 <__aeabi_dsub>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fd f89f 	bl	8000540 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4640      	mov	r0, r8
 8003408:	4649      	mov	r1, r9
 800340a:	f7fc fee3 	bl	80001d4 <__adddf3>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4690      	mov	r8, r2
 8003414:	4699      	mov	r9, r3
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <CalibrateIMU+0xda0>)
 8003418:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800341c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003426:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003434:	f7fd f884 	bl	8000540 <__aeabi_dmul>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4620      	mov	r0, r4
 800343e:	4629      	mov	r1, r5
 8003440:	f7fd f87e 	bl	8000540 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4640      	mov	r0, r8
 800344a:	4649      	mov	r1, r9
 800344c:	f7fc fec2 	bl	80001d4 <__adddf3>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800345c:	f7fd f870 	bl	8000540 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800346c:	f7fc feb0 	bl	80001d0 <__aeabi_dsub>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	492a      	ldr	r1, [pc, #168]	; (8003520 <CalibrateIMU+0xd9c>)
 8003476:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
		CM_Knee.IMUData.gz = n * (KneeIMUData.gx*(s1*s2           ) + KneeIMUData.gy*( c1*s2           ) + KneeIMUData.gz*( c2   )) - gzBias;
 800347a:	4b2a      	ldr	r3, [pc, #168]	; (8003524 <CalibrateIMU+0xda0>)
 800347c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003480:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003484:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003488:	f7fd f85a 	bl	8000540 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fd f854 	bl	8000540 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4690      	mov	r8, r2
 800349e:	4699      	mov	r9, r3
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <CalibrateIMU+0xda0>)
 80034a2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80034a6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80034aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80034ae:	f7fd f847 	bl	8000540 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fd f841 	bl	8000540 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4640      	mov	r0, r8
 80034c4:	4649      	mov	r1, r9
 80034c6:	f7fc fe85 	bl	80001d4 <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4614      	mov	r4, r2
 80034d0:	461d      	mov	r5, r3
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <CalibrateIMU+0xda0>)
 80034d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034d8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80034dc:	f7fd f830 	bl	8000540 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4620      	mov	r0, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7fc fe74 	bl	80001d4 <__adddf3>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034f8:	f7fd f822 	bl	8000540 <__aeabi_dmul>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003508:	f7fc fe62 	bl	80001d0 <__aeabi_dsub>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <CalibrateIMU+0xd9c>)
 8003512:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	}
}
 8003516:	bf00      	nop
 8003518:	37a8      	adds	r7, #168	; 0xa8
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003520:	20000250 	.word	0x20000250
 8003524:	20000170 	.word	0x20000170

08003528 <ComputeLimbAngle>:

static void ComputeLimbAngle(void)
{
 8003528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800352c:	b088      	sub	sp, #32
 800352e:	af00      	add	r7, sp, #0
	if((Device.Joint == ankle) || (Device.Joint == combined))
 8003530:	4bc1      	ldr	r3, [pc, #772]	; (8003838 <ComputeLimbAngle+0x310>)
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <ComputeLimbAngle+0x1a>
 8003538:	4bbf      	ldr	r3, [pc, #764]	; (8003838 <ComputeLimbAngle+0x310>)
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 80af 	bne.w	80036a0 <ComputeLimbAngle+0x178>
	{
		double accelAngle = (atan(CM_Ankle.IMUData.ax / sqrt(pow(CM_Ankle.IMUData.ay, 2) + pow(CM_Ankle.IMUData.az, 2)))) * 180.0 / M_PI;
 8003542:	4bbe      	ldr	r3, [pc, #760]	; (800383c <ComputeLimbAngle+0x314>)
 8003544:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003548:	4bbc      	ldr	r3, [pc, #752]	; (800383c <ComputeLimbAngle+0x314>)
 800354a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800354e:	ed9f 1bb4 	vldr	d1, [pc, #720]	; 8003820 <ComputeLimbAngle+0x2f8>
 8003552:	eeb0 0a47 	vmov.f32	s0, s14
 8003556:	eef0 0a67 	vmov.f32	s1, s15
 800355a:	f004 fa27 	bl	80079ac <pow>
 800355e:	ec59 8b10 	vmov	r8, r9, d0
 8003562:	4bb6      	ldr	r3, [pc, #728]	; (800383c <ComputeLimbAngle+0x314>)
 8003564:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003568:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8003820 <ComputeLimbAngle+0x2f8>
 800356c:	eeb0 0a47 	vmov.f32	s0, s14
 8003570:	eef0 0a67 	vmov.f32	s1, s15
 8003574:	f004 fa1a 	bl	80079ac <pow>
 8003578:	ec53 2b10 	vmov	r2, r3, d0
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	f7fc fe28 	bl	80001d4 <__adddf3>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	ec43 2b17 	vmov	d7, r2, r3
 800358c:	eeb0 0a47 	vmov.f32	s0, s14
 8003590:	eef0 0a67 	vmov.f32	s1, s15
 8003594:	f004 fa7a 	bl	8007a8c <sqrt>
 8003598:	ec53 2b10 	vmov	r2, r3, d0
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fd f8f8 	bl	8000794 <__aeabi_ddiv>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	ec43 2b17 	vmov	d7, r2, r3
 80035ac:	eeb0 0a47 	vmov.f32	s0, s14
 80035b0:	eef0 0a67 	vmov.f32	s1, s15
 80035b4:	f004 f850 	bl	8007658 <atan>
 80035b8:	ec51 0b10 	vmov	r0, r1, d0
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b9f      	ldr	r3, [pc, #636]	; (8003840 <ComputeLimbAngle+0x318>)
 80035c2:	f7fc ffbd 	bl	8000540 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	a396      	add	r3, pc, #600	; (adr r3, 8003828 <ComputeLimbAngle+0x300>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fd f8de 	bl	8000794 <__aeabi_ddiv>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		static double compFiltAngle = 0.0;
		static double dGyroAngle = 0.0;

		dGyroAngle = dt/2 * (CM_Ankle.IMUData.gz + dGyroAngle);	// Change in angle from gyro (trapezoidal used)
 80035e0:	4b98      	ldr	r3, [pc, #608]	; (8003844 <ComputeLimbAngle+0x31c>)
 80035e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ee:	f7fd f8d1 	bl	8000794 <__aeabi_ddiv>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4614      	mov	r4, r2
 80035f8:	461d      	mov	r5, r3
 80035fa:	4b90      	ldr	r3, [pc, #576]	; (800383c <ComputeLimbAngle+0x314>)
 80035fc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003600:	4b91      	ldr	r3, [pc, #580]	; (8003848 <ComputeLimbAngle+0x320>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fde5 	bl	80001d4 <__adddf3>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc ff95 	bl	8000540 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	498b      	ldr	r1, [pc, #556]	; (8003848 <ComputeLimbAngle+0x320>)
 800361c:	e9c1 2300 	strd	r2, r3, [r1]

		// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
		double alpha = 0.002;
 8003620:	a383      	add	r3, pc, #524	; (adr r3, 8003830 <ComputeLimbAngle+0x308>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	e9c7 2304 	strd	r2, r3, [r7, #16]
		compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 800362a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800362e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003632:	f7fc ff85 	bl	8000540 <__aeabi_dmul>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4614      	mov	r4, r2
 800363c:	461d      	mov	r5, r3
 800363e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	4981      	ldr	r1, [pc, #516]	; (800384c <ComputeLimbAngle+0x324>)
 8003648:	f7fc fdc2 	bl	80001d0 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4690      	mov	r8, r2
 8003652:	4699      	mov	r9, r3
 8003654:	4b7c      	ldr	r3, [pc, #496]	; (8003848 <ComputeLimbAngle+0x320>)
 8003656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800365a:	4b7d      	ldr	r3, [pc, #500]	; (8003850 <ComputeLimbAngle+0x328>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fdb8 	bl	80001d4 <__adddf3>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4640      	mov	r0, r8
 800366a:	4649      	mov	r1, r9
 800366c:	f7fc ff68 	bl	8000540 <__aeabi_dmul>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fc fdac 	bl	80001d4 <__adddf3>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4973      	ldr	r1, [pc, #460]	; (8003850 <ComputeLimbAngle+0x328>)
 8003682:	e9c1 2300 	strd	r2, r3, [r1]

		CM_Ankle.limbAngle = compFiltAngle - CM_Ankle.jointAngle[0];
 8003686:	4b72      	ldr	r3, [pc, #456]	; (8003850 <ComputeLimbAngle+0x328>)
 8003688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800368c:	4b6b      	ldr	r3, [pc, #428]	; (800383c <ComputeLimbAngle+0x314>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc fd9d 	bl	80001d0 <__aeabi_dsub>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4968      	ldr	r1, [pc, #416]	; (800383c <ComputeLimbAngle+0x314>)
 800369c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if((Device.Joint == knee) || (Device.Joint == combined))
 80036a0:	4b65      	ldr	r3, [pc, #404]	; (8003838 <ComputeLimbAngle+0x310>)
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d004      	beq.n	80036b2 <ComputeLimbAngle+0x18a>
 80036a8:	4b63      	ldr	r3, [pc, #396]	; (8003838 <ComputeLimbAngle+0x310>)
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 80af 	bne.w	8003810 <ComputeLimbAngle+0x2e8>
	{
		double accelAngle = (atan(CM_Knee.IMUData.ax / sqrt(pow(CM_Knee.IMUData.ay, 2) + pow(CM_Knee.IMUData.az, 2)))) * 180.0 / M_PI;
 80036b2:	4b68      	ldr	r3, [pc, #416]	; (8003854 <ComputeLimbAngle+0x32c>)
 80036b4:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <ComputeLimbAngle+0x32c>)
 80036ba:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80036be:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8003820 <ComputeLimbAngle+0x2f8>
 80036c2:	eeb0 0a47 	vmov.f32	s0, s14
 80036c6:	eef0 0a67 	vmov.f32	s1, s15
 80036ca:	f004 f96f 	bl	80079ac <pow>
 80036ce:	ec59 8b10 	vmov	r8, r9, d0
 80036d2:	4b60      	ldr	r3, [pc, #384]	; (8003854 <ComputeLimbAngle+0x32c>)
 80036d4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80036d8:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8003820 <ComputeLimbAngle+0x2f8>
 80036dc:	eeb0 0a47 	vmov.f32	s0, s14
 80036e0:	eef0 0a67 	vmov.f32	s1, s15
 80036e4:	f004 f962 	bl	80079ac <pow>
 80036e8:	ec53 2b10 	vmov	r2, r3, d0
 80036ec:	4640      	mov	r0, r8
 80036ee:	4649      	mov	r1, r9
 80036f0:	f7fc fd70 	bl	80001d4 <__adddf3>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	ec43 2b17 	vmov	d7, r2, r3
 80036fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003700:	eef0 0a67 	vmov.f32	s1, s15
 8003704:	f004 f9c2 	bl	8007a8c <sqrt>
 8003708:	ec53 2b10 	vmov	r2, r3, d0
 800370c:	4620      	mov	r0, r4
 800370e:	4629      	mov	r1, r5
 8003710:	f7fd f840 	bl	8000794 <__aeabi_ddiv>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	ec43 2b17 	vmov	d7, r2, r3
 800371c:	eeb0 0a47 	vmov.f32	s0, s14
 8003720:	eef0 0a67 	vmov.f32	s1, s15
 8003724:	f003 ff98 	bl	8007658 <atan>
 8003728:	ec51 0b10 	vmov	r0, r1, d0
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <ComputeLimbAngle+0x318>)
 8003732:	f7fc ff05 	bl	8000540 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	a33a      	add	r3, pc, #232	; (adr r3, 8003828 <ComputeLimbAngle+0x300>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fd f826 	bl	8000794 <__aeabi_ddiv>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		static double compFiltAngle = 0.0;
		static double dGyroAngle = 0.0;

		dGyroAngle = dt/2 * (CM_Knee.IMUData.gz + dGyroAngle);	// Change in angle from gyro (trapezoidal used)
 8003750:	4b3c      	ldr	r3, [pc, #240]	; (8003844 <ComputeLimbAngle+0x31c>)
 8003752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800375e:	f7fd f819 	bl	8000794 <__aeabi_ddiv>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4614      	mov	r4, r2
 8003768:	461d      	mov	r5, r3
 800376a:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <ComputeLimbAngle+0x32c>)
 800376c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <ComputeLimbAngle+0x330>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc fd2d 	bl	80001d4 <__adddf3>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fedd 	bl	8000540 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4933      	ldr	r1, [pc, #204]	; (8003858 <ComputeLimbAngle+0x330>)
 800378c:	e9c1 2300 	strd	r2, r3, [r1]

		// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
		double alpha = 0.002;
 8003790:	a327      	add	r3, pc, #156	; (adr r3, 8003830 <ComputeLimbAngle+0x308>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	e9c7 2300 	strd	r2, r3, [r7]
		compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 800379a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a2:	f7fc fecd 	bl	8000540 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4614      	mov	r4, r2
 80037ac:	461d      	mov	r5, r3
 80037ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	4925      	ldr	r1, [pc, #148]	; (800384c <ComputeLimbAngle+0x324>)
 80037b8:	f7fc fd0a 	bl	80001d0 <__aeabi_dsub>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4690      	mov	r8, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <ComputeLimbAngle+0x330>)
 80037c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <ComputeLimbAngle+0x334>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc fd00 	bl	80001d4 <__adddf3>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4640      	mov	r0, r8
 80037da:	4649      	mov	r1, r9
 80037dc:	f7fc feb0 	bl	8000540 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fc fcf4 	bl	80001d4 <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	491a      	ldr	r1, [pc, #104]	; (800385c <ComputeLimbAngle+0x334>)
 80037f2:	e9c1 2300 	strd	r2, r3, [r1]

		CM_Knee.limbAngle = compFiltAngle - CM_Knee.jointAngle[0];
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <ComputeLimbAngle+0x334>)
 80037f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <ComputeLimbAngle+0x32c>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fce5 	bl	80001d0 <__aeabi_dsub>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4912      	ldr	r1, [pc, #72]	; (8003854 <ComputeLimbAngle+0x32c>)
 800380c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
}
 8003810:	bf00      	nop
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800381a:	bf00      	nop
 800381c:	f3af 8000 	nop.w
 8003820:	00000000 	.word	0x00000000
 8003824:	40000000 	.word	0x40000000
 8003828:	54442d18 	.word	0x54442d18
 800382c:	400921fb 	.word	0x400921fb
 8003830:	d2f1a9fc 	.word	0xd2f1a9fc
 8003834:	3f60624d 	.word	0x3f60624d
 8003838:	200000a8 	.word	0x200000a8
 800383c:	200001c0 	.word	0x200001c0
 8003840:	40668000 	.word	0x40668000
 8003844:	20000000 	.word	0x20000000
 8003848:	20000378 	.word	0x20000378
 800384c:	3ff00000 	.word	0x3ff00000
 8003850:	20000380 	.word	0x20000380
 8003854:	20000250 	.word	0x20000250
 8003858:	20000388 	.word	0x20000388
 800385c:	20000390 	.word	0x20000390

08003860 <RunStateMachine>:

static void RunStateMachine(void)
{
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
	if((Device.Joint == ankle) || (Device.Joint == combined))
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <RunStateMachine+0x228>)
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <RunStateMachine+0x16>
 800386e:	4b86      	ldr	r3, [pc, #536]	; (8003a88 <RunStateMachine+0x228>)
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10b      	bne.n	800388e <RunStateMachine+0x2e>
	{
		CM_Ankle.ProsCtrl.eqPoint = 0.0f;
 8003876:	4b85      	ldr	r3, [pc, #532]	; (8003a8c <RunStateMachine+0x22c>)
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
		CM_Ankle.ProsCtrl.kd = 0.0f;
 800387e:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <RunStateMachine+0x22c>)
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
		CM_Ankle.ProsCtrl.kp = 0.0f;
 8003886:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <RunStateMachine+0x22c>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if((Device.Joint == knee) || (Device.Joint == combined))
 800388e:	4b7e      	ldr	r3, [pc, #504]	; (8003a88 <RunStateMachine+0x228>)
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d004      	beq.n	80038a0 <RunStateMachine+0x40>
 8003896:	4b7c      	ldr	r3, [pc, #496]	; (8003a88 <RunStateMachine+0x228>)
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b01      	cmp	r3, #1
 800389c:	f040 80ed 	bne.w	8003a7a <RunStateMachine+0x21a>
	{
		static StateMachine_t state = stance;
		static uint8_t isCheckBoundsRequired = 0;

		switch(state)
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <RunStateMachine+0x230>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f000 80c2 	beq.w	8003a2e <RunStateMachine+0x1ce>
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	f300 80e8 	bgt.w	8003a80 <RunStateMachine+0x220>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <RunStateMachine+0x5c>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f000 8094 	beq.w	80039e2 <RunStateMachine+0x182>
				state = stance;

			break;
		}
	}
}
 80038ba:	e0e1      	b.n	8003a80 <RunStateMachine+0x220>
			CM_state = 1120;
 80038bc:	4b75      	ldr	r3, [pc, #468]	; (8003a94 <RunStateMachine+0x234>)
 80038be:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80038c2:	801a      	strh	r2, [r3, #0]
			CM_Knee.ProsCtrl.eqPoint = CM_Knee.StanceCtrl.eqPoint;
 80038c4:	4b74      	ldr	r3, [pc, #464]	; (8003a98 <RunStateMachine+0x238>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <RunStateMachine+0x238>)
 80038ca:	6253      	str	r3, [r2, #36]	; 0x24
			CM_Knee.ProsCtrl.kd = CM_Knee.StanceCtrl.kd;
 80038cc:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <RunStateMachine+0x238>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	4a71      	ldr	r2, [pc, #452]	; (8003a98 <RunStateMachine+0x238>)
 80038d2:	6293      	str	r3, [r2, #40]	; 0x28
			CM_Knee.ProsCtrl.kp = CM_Knee.StanceCtrl.kp;
 80038d4:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <RunStateMachine+0x238>)
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4a6f      	ldr	r2, [pc, #444]	; (8003a98 <RunStateMachine+0x238>)
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c
	        if(CM_LoadCell_Filtered->bot[0] < CM_lcBot_lowerBound && CM_LoadCell_Filtered->top[0] > CM_lcTop_upperBound)
 80038dc:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <RunStateMachine+0x23c>)
 80038de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80038e2:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <RunStateMachine+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fdd2 	bl	8000490 <__aeabi_f2d>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4620      	mov	r0, r4
 80038f2:	4629      	mov	r1, r5
 80038f4:	f7fd f896 	bl	8000a24 <__aeabi_dcmplt>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <RunStateMachine+0xc6>
 80038fe:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <RunStateMachine+0x23c>)
 8003900:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003904:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <RunStateMachine+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fdc1 	bl	8000490 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4620      	mov	r0, r4
 8003914:	4629      	mov	r1, r5
 8003916:	f7fd f8a3 	bl	8000a60 <__aeabi_dcmpgt>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <RunStateMachine+0xc6>
	            isCheckBoundsRequired = 1;
 8003920:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <RunStateMachine+0x248>)
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
			if(isCheckBoundsRequired)
 8003926:	4b60      	ldr	r3, [pc, #384]	; (8003aa8 <RunStateMachine+0x248>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80a7 	beq.w	8003a7e <RunStateMachine+0x21e>
				uint8_t lcBotWithinBounds = (CM_LoadCell_Filtered->bot[0] < CM_lcBot_upperBound) && (CM_LoadCell_Filtered->bot[0] > CM_lcBot_lowerBound);
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <RunStateMachine+0x23c>)
 8003932:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <RunStateMachine+0x24c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fda8 	bl	8000490 <__aeabi_f2d>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fd f86c 	bl	8000a24 <__aeabi_dcmplt>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <RunStateMachine+0x118>
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <RunStateMachine+0x23c>)
 8003954:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <RunStateMachine+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fd97 	bl	8000490 <__aeabi_f2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	f7fd f879 	bl	8000a60 <__aeabi_dcmpgt>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <RunStateMachine+0x118>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <RunStateMachine+0x11a>
 8003978:	2300      	movs	r3, #0
 800397a:	71fb      	strb	r3, [r7, #7]
				uint8_t lcTopWithinBounds = (CM_LoadCell_Filtered->top[0] < CM_lcTop_upperBound) && (CM_LoadCell_Filtered->top[0] > CM_lcTop_lowerBound);
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <RunStateMachine+0x23c>)
 800397e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003982:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <RunStateMachine+0x244>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fd82 	bl	8000490 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4620      	mov	r0, r4
 8003992:	4629      	mov	r1, r5
 8003994:	f7fd f846 	bl	8000a24 <__aeabi_dcmplt>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <RunStateMachine+0x164>
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <RunStateMachine+0x23c>)
 80039a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <RunStateMachine+0x250>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fd71 	bl	8000490 <__aeabi_f2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4620      	mov	r0, r4
 80039b4:	4629      	mov	r1, r5
 80039b6:	f7fd f853 	bl	8000a60 <__aeabi_dcmpgt>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <RunStateMachine+0x164>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <RunStateMachine+0x166>
 80039c4:	2300      	movs	r3, #0
 80039c6:	71bb      	strb	r3, [r7, #6]
				if(lcBotWithinBounds && lcTopWithinBounds)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d057      	beq.n	8003a7e <RunStateMachine+0x21e>
 80039ce:	79bb      	ldrb	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d054      	beq.n	8003a7e <RunStateMachine+0x21e>
					isCheckBoundsRequired = 0;
 80039d4:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <RunStateMachine+0x248>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
					state = swingFlexion;
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <RunStateMachine+0x230>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
			break;
 80039e0:	e04d      	b.n	8003a7e <RunStateMachine+0x21e>
			CM_state = 1345;
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <RunStateMachine+0x234>)
 80039e4:	f240 5241 	movw	r2, #1345	; 0x541
 80039e8:	801a      	strh	r2, [r3, #0]
			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingFlexCtrl.eqPoint;
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <RunStateMachine+0x238>)
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <RunStateMachine+0x238>)
 80039f0:	6253      	str	r3, [r2, #36]	; 0x24
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingFlexCtrl.kd;
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <RunStateMachine+0x238>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <RunStateMachine+0x238>)
 80039f8:	6293      	str	r3, [r2, #40]	; 0x28
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingFlexCtrl.kp;
 80039fa:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <RunStateMachine+0x238>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <RunStateMachine+0x238>)
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(CM_Knee.jointSpeed > CM_kneeSpeedThreshold)
 8003a02:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <RunStateMachine+0x238>)
 8003a04:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <RunStateMachine+0x254>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd3f 	bl	8000490 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fd f821 	bl	8000a60 <__aeabi_dcmpgt>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d100      	bne.n	8003a26 <RunStateMachine+0x1c6>
			break;
 8003a24:	e02c      	b.n	8003a80 <RunStateMachine+0x220>
				state = swingExtension;
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <RunStateMachine+0x230>)
 8003a28:	2202      	movs	r2, #2
 8003a2a:	701a      	strb	r2, [r3, #0]
			break;
 8003a2c:	e028      	b.n	8003a80 <RunStateMachine+0x220>
			CM_state = 1570;
 8003a2e:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <RunStateMachine+0x234>)
 8003a30:	f240 6222 	movw	r2, #1570	; 0x622
 8003a34:	801a      	strh	r2, [r3, #0]
			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <RunStateMachine+0x238>)
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <RunStateMachine+0x238>)
 8003a3c:	6253      	str	r3, [r2, #36]	; 0x24
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <RunStateMachine+0x238>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <RunStateMachine+0x238>)
 8003a44:	6293      	str	r3, [r2, #40]	; 0x28
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <RunStateMachine+0x238>)
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <RunStateMachine+0x238>)
 8003a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(CM_LoadCell_Filtered->top[0] < CM_lcBot_lowerBound)
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <RunStateMachine+0x23c>)
 8003a50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <RunStateMachine+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc fd19 	bl	8000490 <__aeabi_f2d>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4620      	mov	r0, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7fc ffdd 	bl	8000a24 <__aeabi_dcmplt>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d100      	bne.n	8003a72 <RunStateMachine+0x212>
			break;
 8003a70:	e006      	b.n	8003a80 <RunStateMachine+0x220>
				state = stance;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <RunStateMachine+0x230>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
			break;
 8003a78:	e002      	b.n	8003a80 <RunStateMachine+0x220>
	}
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <RunStateMachine+0x220>
			break;
 8003a7e:	bf00      	nop
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdb0      	pop	{r4, r5, r7, pc}
 8003a88:	200000a8 	.word	0x200000a8
 8003a8c:	200001c0 	.word	0x200001c0
 8003a90:	20000398 	.word	0x20000398
 8003a94:	20000374 	.word	0x20000374
 8003a98:	20000250 	.word	0x20000250
 8003a9c:	200002e0 	.word	0x200002e0
 8003aa0:	200001a8 	.word	0x200001a8
 8003aa4:	200001ac 	.word	0x200001ac
 8003aa8:	20000399 	.word	0x20000399
 8003aac:	200001a4 	.word	0x200001a4
 8003ab0:	200001b0 	.word	0x200001b0
 8003ab4:	200001b4 	.word	0x200001b4

08003ab8 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <RunImpedanceControl+0x1b8>)
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
	float nomCurrent = 8.0f;						// is this number accurate??
 8003ac2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8003ac6:	623b      	str	r3, [r7, #32]
	float torqueConst = 60.0f / (2 * M_PI * 100);	// Units in N*m/A, for Kv = 100 rpm/V
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <RunImpedanceControl+0x1bc>)
 8003aca:	61fb      	str	r3, [r7, #28]

	if((Device.Joint == ankle) || (Device.Joint == combined))
 8003acc:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <RunImpedanceControl+0x1c0>)
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <RunImpedanceControl+0x24>
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <RunImpedanceControl+0x1c0>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d15e      	bne.n	8003b9a <RunImpedanceControl+0xe2>
	{
		float errorPos = CM_Ankle.ProsCtrl.eqPoint - CM_Ankle.jointAngle[0];
 8003adc:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fcd5 	bl	8000490 <__aeabi_f2d>
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fb70 	bl	80001d0 <__aeabi_dsub>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7fc ffd2 	bl	8000aa0 <__aeabi_d2f>
 8003afc:	4603      	mov	r3, r0
 8003afe:	61bb      	str	r3, [r7, #24]

		CM_Ankle.jointTorque = (CM_Ankle.ProsCtrl.kp*errorPos - CM_Ankle.ProsCtrl.kd*CM_Ankle.jointSpeed);
 8003b00:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b02:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	ee17 0a90 	vmov	r0, s15
 8003b12:	f7fc fcbd 	bl	8000490 <__aeabi_f2d>
 8003b16:	4604      	mov	r4, r0
 8003b18:	460d      	mov	r5, r1
 8003b1a:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fcb6 	bl	8000490 <__aeabi_f2d>
 8003b24:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b2a:	f7fc fd09 	bl	8000540 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4620      	mov	r0, r4
 8003b34:	4629      	mov	r1, r5
 8003b36:	f7fc fb4b 	bl	80001d0 <__aeabi_dsub>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fc ffad 	bl	8000aa0 <__aeabi_d2f>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b4a:	6213      	str	r3, [r2, #32]
		float correctedTorque = -CM_Ankle.jointTorque;														// Ankle motor rotates opposite of coordinate system
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b52:	eef1 7a67 	vneg.f32	s15, s15
 8003b56:	edc7 7a05 	vstr	s15, [r7, #20]

		int16_t motorTorque = correctedTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 8003b5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b66:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b76:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003c80 <RunImpedanceControl+0x1c8>
 8003b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b82:	ee17 3a90 	vmov	r3, s15
 8003b86:	827b      	strh	r3, [r7, #18]
		EPOS4_WriteTargetTorqueValue(CM_Ankle.motorId, motorTorque);
 8003b88:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <RunImpedanceControl+0x1c4>)
 8003b8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003b8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ff0d 	bl	80049b4 <EPOS4_WriteTargetTorqueValue>
	}

	if((Device.Joint == knee) || (Device.Joint == combined))
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <RunImpedanceControl+0x1c0>)
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d003      	beq.n	8003baa <RunImpedanceControl+0xf2>
 8003ba2:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <RunImpedanceControl+0x1c0>)
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d15e      	bne.n	8003c68 <RunImpedanceControl+0x1b0>
	{
		float errorPos = CM_Knee.ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fc6e 	bl	8000490 <__aeabi_f2d>
 8003bb4:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fb09 	bl	80001d0 <__aeabi_dsub>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ff6b 	bl	8000aa0 <__aeabi_d2f>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	60fb      	str	r3, [r7, #12]

		CM_Knee.jointTorque = (CM_Knee.ProsCtrl.kp*errorPos - CM_Knee.ProsCtrl.kd*CM_Knee.jointSpeed);
 8003bce:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003bd0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bdc:	ee17 0a90 	vmov	r0, s15
 8003be0:	f7fc fc56 	bl	8000490 <__aeabi_f2d>
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fc4f 	bl	8000490 <__aeabi_f2d>
 8003bf2:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003bf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003bf8:	f7fc fca2 	bl	8000540 <__aeabi_dmul>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc fae4 	bl	80001d0 <__aeabi_dsub>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fc ff46 	bl	8000aa0 <__aeabi_d2f>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003c18:	6213      	str	r3, [r2, #32]
		float correctedTorque = -CM_Knee.jointTorque;													// Knee motor rotates opposite of coordinate system
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003c1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c20:	eef1 7a67 	vneg.f32	s15, s15
 8003c24:	edc7 7a02 	vstr	s15, [r7, #8]

		int16_t motorTorque = correctedTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 8003c28:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c34:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c3c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003c80 <RunImpedanceControl+0x1c8>
 8003c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c50:	ee17 3a90 	vmov	r3, s15
 8003c54:	80fb      	strh	r3, [r7, #6]
		EPOS4_WriteTargetTorqueValue(CM_Knee.motorId, motorTorque);
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <RunImpedanceControl+0x1cc>)
 8003c58:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003c5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fea6 	bl	80049b4 <EPOS4_WriteTargetTorqueValue>
	}
}
 8003c68:	bf00      	nop
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	42200000 	.word	0x42200000
 8003c74:	3dc391d1 	.word	0x3dc391d1
 8003c78:	200000a8 	.word	0x200000a8
 8003c7c:	200001c0 	.word	0x200001c0
 8003c80:	447a0000 	.word	0x447a0000
 8003c84:	20000250 	.word	0x20000250

08003c88 <RunTestProgram>:

static void RunTestProgram(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
	switch (testProgram)
 8003c8e:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <RunTestProgram+0x1ec>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	f200 80ea 	bhi.w	8003e6c <RunTestProgram+0x1e4>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <RunTestProgram+0x18>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003e63 	.word	0x08003e63
 8003ca4:	08003e63 	.word	0x08003e63
 8003ca8:	08003cb5 	.word	0x08003cb5
 8003cac:	08003cfb 	.word	0x08003cfb
 8003cb0:	08003d8f 	.word	0x08003d8f

	case readOnly:
		break;

	case constantMotorTorque100Nmm:
		if(Device.Joint == ankle || Device.Joint == combined)
 8003cb4:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <RunTestProgram+0x1f0>)
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <RunTestProgram+0x3c>
 8003cbc:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <RunTestProgram+0x1f0>)
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <RunTestProgram+0x4e>
			EPOS4_WriteTargetTorqueValue(CM_Ankle.motorId, -100);	// Ankle motor rotates opposite of coordinate system
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <RunTestProgram+0x1f4>)
 8003cc6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003cca:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe70 	bl	80049b4 <EPOS4_WriteTargetTorqueValue>
		else if(Device.Joint == knee || Device.Joint == combined)
			EPOS4_WriteTargetTorqueValue(CM_Knee.motorId, -100);	// Knee motor rotates opposite of coordinate system

		break;
 8003cd4:	e0c7      	b.n	8003e66 <RunTestProgram+0x1de>
		else if(Device.Joint == knee || Device.Joint == combined)
 8003cd6:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <RunTestProgram+0x1f0>)
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d004      	beq.n	8003ce8 <RunTestProgram+0x60>
 8003cde:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <RunTestProgram+0x1f0>)
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	f040 80bf 	bne.w	8003e66 <RunTestProgram+0x1de>
			EPOS4_WriteTargetTorqueValue(CM_Knee.motorId, -100);	// Knee motor rotates opposite of coordinate system
 8003ce8:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <RunTestProgram+0x1f8>)
 8003cea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003cee:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fe5e 	bl	80049b4 <EPOS4_WriteTargetTorqueValue>
		break;
 8003cf8:	e0b5      	b.n	8003e66 <RunTestProgram+0x1de>

	case magneticEncoderBias:
		if(Device.Joint == ankle || Device.Joint == combined)
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <RunTestProgram+0x1f0>)
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <RunTestProgram+0x82>
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <RunTestProgram+0x1f0>)
 8003d04:	785b      	ldrb	r3, [r3, #1]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d11c      	bne.n	8003d44 <RunTestProgram+0xbc>
		{
			uint16_t i;
			uint32_t sum = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
			for(i = 0; i < 1000; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d12:	e00a      	b.n	8003d2a <RunTestProgram+0xa2>
				sum += AS5145B_ReadPosition_Raw(AnkleEncoderIndex);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f000 fcdd 	bl	80046d4 <AS5145B_ReadPosition_Raw>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	4413      	add	r3, r2
 8003d22:	623b      	str	r3, [r7, #32]
			for(i = 0; i < 1000; i++)
 8003d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d26:	3301      	adds	r3, #1
 8003d28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d30:	d3f0      	bcc.n	8003d14 <RunTestProgram+0x8c>

			CM_ankleEncBias = sum / i;
 8003d32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <RunTestProgram+0x1fc>)
 8003d3e:	801a      	strh	r2, [r3, #0]
		{
 8003d40:	bf00      	nop
				sum += AS5145B_ReadPosition_Raw(KneeEncoderIndex);

			CM_kneeEncBias = sum / i;
		}

		break;
 8003d42:	e092      	b.n	8003e6a <RunTestProgram+0x1e2>
		else if(Device.Joint == knee || Device.Joint == combined)
 8003d44:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <RunTestProgram+0x1f0>)
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d004      	beq.n	8003d56 <RunTestProgram+0xce>
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <RunTestProgram+0x1f0>)
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f040 808a 	bne.w	8003e6a <RunTestProgram+0x1e2>
			uint32_t sum = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
			for(i = 0; i < 1000; i++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	83fb      	strh	r3, [r7, #30]
 8003d5e:	e00a      	b.n	8003d76 <RunTestProgram+0xee>
				sum += AS5145B_ReadPosition_Raw(KneeEncoderIndex);
 8003d60:	2001      	movs	r0, #1
 8003d62:	f000 fcb7 	bl	80046d4 <AS5145B_ReadPosition_Raw>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
			for(i = 0; i < 1000; i++)
 8003d70:	8bfb      	ldrh	r3, [r7, #30]
 8003d72:	3301      	adds	r3, #1
 8003d74:	83fb      	strh	r3, [r7, #30]
 8003d76:	8bfb      	ldrh	r3, [r7, #30]
 8003d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7c:	d3f0      	bcc.n	8003d60 <RunTestProgram+0xd8>
			CM_kneeEncBias = sum / i;
 8003d7e:	8bfb      	ldrh	r3, [r7, #30]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <RunTestProgram+0x200>)
 8003d8a:	801a      	strh	r2, [r3, #0]
		break;
 8003d8c:	e06d      	b.n	8003e6a <RunTestProgram+0x1e2>

	case impedanceControl:
		if(Device.Joint == ankle || Device.Joint == combined)
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <RunTestProgram+0x1f0>)
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <RunTestProgram+0x116>
 8003d96:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <RunTestProgram+0x1f0>)
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d12b      	bne.n	8003df6 <RunTestProgram+0x16e>
		{
			uint16_t i;
			float sum = 0.0f;
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
			for(i = 0; i < 1000; i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	82fb      	strh	r3, [r7, #22]
 8003da8:	e00f      	b.n	8003dca <RunTestProgram+0x142>
			{
				float position = AS5145B_ReadPosition(AnkleEncoderIndex);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f000 fc6e 	bl	800468c <AS5145B_ReadPosition>
 8003db0:	ed87 0a00 	vstr	s0, [r7]
				sum += position;
 8003db4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003db8:	edd7 7a00 	vldr	s15, [r7]
 8003dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc0:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 8003dc4:	8afb      	ldrh	r3, [r7, #22]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	82fb      	strh	r3, [r7, #22]
 8003dca:	8afb      	ldrh	r3, [r7, #22]
 8003dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd0:	d3eb      	bcc.n	8003daa <RunTestProgram+0x122>
			}

			CM_Ankle.ProsCtrl.eqPoint = sum / i - ankleEncBias; // (float)??
 8003dd2:	8afb      	ldrh	r3, [r7, #22]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ddc:	edd7 6a04 	vldr	s13, [r7, #16]
 8003de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <RunTestProgram+0x204>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dee:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <RunTestProgram+0x1f4>)
 8003df0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		{
 8003df4:	e032      	b.n	8003e5c <RunTestProgram+0x1d4>
		}
		else if(Device.Joint == knee || Device.Joint == combined)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <RunTestProgram+0x1f0>)
 8003df8:	785b      	ldrb	r3, [r3, #1]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <RunTestProgram+0x17e>
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <RunTestProgram+0x1f0>)
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d12a      	bne.n	8003e5c <RunTestProgram+0x1d4>
		{
			uint16_t i;
			float sum = 0.0f;
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
			for(i = 0; i < 1000; i++)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	81fb      	strh	r3, [r7, #14]
 8003e10:	e00f      	b.n	8003e32 <RunTestProgram+0x1aa>
			{
				float position = AS5145B_ReadPosition(KneeEncoderIndex);
 8003e12:	2001      	movs	r0, #1
 8003e14:	f000 fc3a 	bl	800468c <AS5145B_ReadPosition>
 8003e18:	ed87 0a01 	vstr	s0, [r7, #4]
				sum += position;
 8003e1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e20:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e28:	edc7 7a02 	vstr	s15, [r7, #8]
			for(i = 0; i < 1000; i++)
 8003e2c:	89fb      	ldrh	r3, [r7, #14]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	81fb      	strh	r3, [r7, #14]
 8003e32:	89fb      	ldrh	r3, [r7, #14]
 8003e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e38:	d3eb      	bcc.n	8003e12 <RunTestProgram+0x18a>
			}

			CM_Knee.ProsCtrl.eqPoint = sum / i - kneeEncBias;
 8003e3a:	89fb      	ldrh	r3, [r7, #14]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e44:	edd7 6a02 	vldr	s13, [r7, #8]
 8003e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <RunTestProgram+0x208>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <RunTestProgram+0x1f8>)
 8003e58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		}

		RunImpedanceControl();
 8003e5c:	f7ff fe2c 	bl	8003ab8 <RunImpedanceControl>

		break;
 8003e60:	e004      	b.n	8003e6c <RunTestProgram+0x1e4>
		break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <RunTestProgram+0x1e4>
		break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <RunTestProgram+0x1e4>
		break;
 8003e6a:	bf00      	nop
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	2000009d 	.word	0x2000009d
 8003e78:	200000a8 	.word	0x200000a8
 8003e7c:	200001c0 	.word	0x200001c0
 8003e80:	20000250 	.word	0x20000250
 8003e84:	20000370 	.word	0x20000370
 8003e88:	20000372 	.word	0x20000372
 8003e8c:	200000a0 	.word	0x200000a0
 8003e90:	200000a4 	.word	0x200000a4

08003e94 <LL_AHB2_GRP1_EnableClock>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea0:	4907      	ldr	r1, [pc, #28]	; (8003ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <LL_APB1_GRP1_EnableClock>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ece:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ed0:	4907      	ldr	r1, [pc, #28]	; (8003ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003eda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <LL_APB2_GRP1_EnableClock>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003efe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000

08003f24 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f023 0208 	bic.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b090      	sub	sp, #64	; 0x40
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003f72:	f107 0318 	add.w	r3, r7, #24
 8003f76:	2228      	movs	r2, #40	; 0x28
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f003 fb62 	bl	8007644 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	463b      	mov	r3, r7
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f94:	f7ff ffae 	bl	8003ef4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7ff ff7b 	bl	8003e94 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003f9e:	23e0      	movs	r3, #224	; 0xe0
 8003fa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003fb2:	2305      	movs	r3, #5
 8003fb4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbe:	f002 fc35 	bl	800682c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003fc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003fca:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003fcc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003fd0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003fec:	2307      	movs	r3, #7
 8003fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003ff0:	f107 0318 	add.w	r3, r7, #24
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4807      	ldr	r0, [pc, #28]	; (8004014 <MX_SPI1_Init+0xa8>)
 8003ff8:	f003 f880 	bl	80070fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <MX_SPI1_Init+0xa8>)
 8004000:	f7ff ff90 	bl	8003f24 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8004004:	4803      	ldr	r0, [pc, #12]	; (8004014 <MX_SPI1_Init+0xa8>)
 8004006:	f7ff ffa0 	bl	8003f4a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800400a:	bf00      	nop
 800400c:	3740      	adds	r7, #64	; 0x40
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40013000 	.word	0x40013000

08004018 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b090      	sub	sp, #64	; 0x40
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800401e:	f107 0318 	add.w	r3, r7, #24
 8004022:	2228      	movs	r2, #40	; 0x28
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f003 fb0c 	bl	8007644 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	463b      	mov	r3, r7
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800403c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004040:	f7ff ff40 	bl	8003ec4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004044:	2002      	movs	r0, #2
 8004046:	f7ff ff25 	bl	8003e94 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 800404a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800404e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004050:	2302      	movs	r3, #2
 8004052:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004060:	2305      	movs	r3, #5
 8004062:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004064:	463b      	mov	r3, r7
 8004066:	4619      	mov	r1, r3
 8004068:	4815      	ldr	r0, [pc, #84]	; (80040c0 <MX_SPI2_Init+0xa8>)
 800406a:	f002 fbdf 	bl	800682c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004072:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004076:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004078:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800407c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800407e:	2302      	movs	r3, #2
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004082:	2301      	movs	r3, #1
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800408c:	2308      	movs	r3, #8
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004090:	2300      	movs	r3, #0
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004094:	2300      	movs	r3, #0
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8004098:	2307      	movs	r3, #7
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800409c:	f107 0318 	add.w	r3, r7, #24
 80040a0:	4619      	mov	r1, r3
 80040a2:	4808      	ldr	r0, [pc, #32]	; (80040c4 <MX_SPI2_Init+0xac>)
 80040a4:	f003 f82a 	bl	80070fc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80040a8:	2100      	movs	r1, #0
 80040aa:	4806      	ldr	r0, [pc, #24]	; (80040c4 <MX_SPI2_Init+0xac>)
 80040ac:	f7ff ff3a 	bl	8003f24 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80040b0:	4804      	ldr	r0, [pc, #16]	; (80040c4 <MX_SPI2_Init+0xac>)
 80040b2:	f7ff ff4a 	bl	8003f4a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040b6:	bf00      	nop
 80040b8:	3740      	adds	r7, #64	; 0x40
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	48000400 	.word	0x48000400
 80040c4:	40003800 	.word	0x40003800

080040c8 <LL_LPTIM_ClearFLAG_ARRM>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d101      	bne.n	8004100 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004112:	e7fe      	b.n	8004112 <NMI_Handler+0x4>

08004114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004118:	e7fe      	b.n	8004118 <HardFault_Handler+0x4>

0800411a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800411e:	e7fe      	b.n	800411e <MemManage_Handler+0x4>

08004120 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004124:	e7fe      	b.n	8004124 <BusFault_Handler+0x4>

08004126 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800412a:	e7fe      	b.n	800412a <UsageFault_Handler+0x4>

0800412c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0

/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8004168:	4806      	ldr	r0, [pc, #24]	; (8004184 <LPTIM2_IRQHandler+0x20>)
 800416a:	f7ff ffbd 	bl	80040e8 <LL_LPTIM_IsActiveFlag_ARRM>
 800416e:	4603      	mov	r3, r0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <LPTIM2_IRQHandler+0x24>)
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 800417a:	4802      	ldr	r0, [pc, #8]	; (8004184 <LPTIM2_IRQHandler+0x20>)
 800417c:	f7ff ffa4 	bl	80040c8 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40009400 	.word	0x40009400
 8004188:	2000009c 	.word	0x2000009c

0800418c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <SystemInit+0x20>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	4a05      	ldr	r2, [pc, #20]	; (80041ac <SystemInit+0x20>)
 8004198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800419c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <LL_APB1_GRP1_EnableClock>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80041b8:	4b08      	ldr	r3, [pc, #32]	; (80041dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041bc:	4907      	ldr	r1, [pc, #28]	; (80041dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4013      	ands	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40021000 	.word	0x40021000

080041e0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800425c:	2010      	movs	r0, #16
 800425e:	f7ff ffa7 	bl	80041b0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 8004262:	2307      	movs	r3, #7
 8004264:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800426a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800426e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4808      	ldr	r0, [pc, #32]	; (8004298 <MX_TIM6_Init+0x50>)
 8004276:	f002 ffd3 	bl	8007220 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800427a:	4807      	ldr	r0, [pc, #28]	; (8004298 <MX_TIM6_Init+0x50>)
 800427c:	f7ff ffb0 	bl	80041e0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8004280:	2100      	movs	r1, #0
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <MX_TIM6_Init+0x50>)
 8004284:	f7ff ffbc 	bl	8004200 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8004288:	4803      	ldr	r0, [pc, #12]	; (8004298 <MX_TIM6_Init+0x50>)
 800428a:	f7ff ffcc 	bl	8004226 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40001000 	.word	0x40001000

0800429c <LL_RCC_SetUSARTClockSource>:
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <LL_RCC_SetUSARTClockSource+0x30>)
 80042a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	43db      	mvns	r3, r3
 80042b0:	401a      	ands	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4905      	ldr	r1, [pc, #20]	; (80042cc <LL_RCC_SetUSARTClockSource+0x30>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000

080042d0 <LL_AHB2_GRP1_EnableClock>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80042da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042dc:	4907      	ldr	r1, [pc, #28]	; (80042fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80042e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4013      	ands	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80042ee:	68fb      	ldr	r3, [r7, #12]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000

08004300 <LL_APB1_GRP1_EnableClock>:
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 800430a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004316:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40021000 	.word	0x40021000

08004330 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f043 0201 	orr.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08e      	sub	sp, #56	; 0x38
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004382:	f107 031c 	add.w	r3, r7, #28
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	611a      	str	r2, [r3, #16]
 8004392:	615a      	str	r2, [r3, #20]
 8004394:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
 80043a4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80043a6:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80043aa:	f7ff ff77 	bl	800429c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80043ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80043b2:	f7ff ffa5 	bl	8004300 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80043b6:	2001      	movs	r0, #1
 80043b8:	f7ff ff8a 	bl	80042d0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043bc:	230c      	movs	r3, #12
 80043be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043c0:	2302      	movs	r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80043d0:	2307      	movs	r3, #7
 80043d2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043dc:	f002 fa26 	bl	800682c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80043e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80043e4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80043f2:	230c      	movs	r3, #12
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80043fe:	f107 031c 	add.w	r3, r7, #28
 8004402:	4619      	mov	r1, r3
 8004404:	4806      	ldr	r0, [pc, #24]	; (8004420 <MX_USART2_UART_Init+0xa4>)
 8004406:	f003 f80f 	bl	8007428 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800440a:	4805      	ldr	r0, [pc, #20]	; (8004420 <MX_USART2_UART_Init+0xa4>)
 800440c:	f7ff ffa0 	bl	8004350 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <MX_USART2_UART_Init+0xa4>)
 8004412:	f7ff ff8d 	bl	8004330 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004416:	bf00      	nop
 8004418:	3738      	adds	r7, #56	; 0x38
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40004400 	.word	0x40004400

08004424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800445c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004428:	f7ff feb0 	bl	800418c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <LoopForever+0x6>)
  ldr r1, =_edata
 800442e:	490d      	ldr	r1, [pc, #52]	; (8004464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <LoopForever+0xe>)
  movs r3, #0
 8004432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004434:	e002      	b.n	800443c <LoopCopyDataInit>

08004436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800443a:	3304      	adds	r3, #4

0800443c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800443c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800443e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004440:	d3f9      	bcc.n	8004436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004444:	4c0a      	ldr	r4, [pc, #40]	; (8004470 <LoopForever+0x16>)
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004448:	e001      	b.n	800444e <LoopFillZerobss>

0800444a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800444a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800444c:	3204      	adds	r2, #4

0800444e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800444e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004450:	d3fb      	bcc.n	800444a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004452:	f003 f8c5 	bl	80075e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004456:	f7fd fb0f 	bl	8001a78 <main>

0800445a <LoopForever>:

LoopForever:
    b LoopForever
 800445a:	e7fe      	b.n	800445a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800445c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004464:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004468:	08008920 	.word	0x08008920
  ldr r2, =_sbss
 800446c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004470:	2000043c 	.word	0x2000043c

08004474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004474:	e7fe      	b.n	8004474 <ADC1_2_IRQHandler>

08004476 <LL_GPIO_IsInputPinSet>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4013      	ands	r3, r2
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d101      	bne.n	8004492 <LL_GPIO_IsInputPinSet+0x1c>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_GPIO_IsInputPinSet+0x1e>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_GPIO_SetOutputPin>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	619a      	str	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_GPIO_ResetOutputPin>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <DelayUs>:
 *  100			~100.6
 *  500			~500.0
 *  1000		~998.0
 */
static inline void DelayUs(TIM_TypeDef *TIMx, uint16_t useconds, uint8_t clockRateMHz)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
 80044e4:	4613      	mov	r3, r2
 80044e6:	707b      	strb	r3, [r7, #1]
	TIMx->CNT = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t duration = useconds * clockRateMHz;
 80044ee:	787b      	ldrb	r3, [r7, #1]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	fb12 f303 	smulbb	r3, r2, r3
 80044f8:	81fb      	strh	r3, [r7, #14]
	while(TIMx->CNT < duration);
 80044fa:	bf00      	nop
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3fa      	bcc.n	80044fc <DelayUs+0x24>
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(uint8_t deviceIndex, AS5145B_t *Device_Init)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	6039      	str	r1, [r7, #0]
 800451e:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex++ > NUMBER_OF_DEVICES)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	71fa      	strb	r2, [r7, #7]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d900      	bls.n	800452c <AS5145B_Init+0x18>
		__NOP(); // add assert??
 800452a:	bf00      	nop

	memcpy(&Device[deviceIndex], &Device_Init[deviceIndex], sizeof(AS5145B_t));
 800452c:	79fa      	ldrb	r2, [r7, #7]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <AS5145B_Init+0x6c>)
 8004538:	1898      	adds	r0, r3, r2
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	461a      	mov	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4413      	add	r3, r2
 800454a:	2214      	movs	r2, #20
 800454c:	4619      	mov	r1, r3
 800454e:	f003 f86b 	bl	8007628 <memcpy>

	ClearChipSelect(deviceIndex);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f8cf 	bl	80046f8 <ClearChipSelect>
	RaiseClockEdge(deviceIndex);
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f90b 	bl	8004778 <RaiseClockEdge>

	Device[deviceIndex].isInit = 1;
 8004562:	79fa      	ldrb	r2, [r7, #7]
 8004564:	4906      	ldr	r1, [pc, #24]	; (8004580 <AS5145B_Init+0x6c>)
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3312      	adds	r3, #18
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	2000039c 	.word	0x2000039c

08004584 <AS5145B_ReadData>:

AS5145B_Data_t AS5145B_ReadData(uint8_t deviceIndex)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f8d1 	bl	8004738 <SetChipSelect>
	DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for t_(CLK FE)
 8004596:	220a      	movs	r2, #10
 8004598:	2101      	movs	r1, #1
 800459a:	483b      	ldr	r0, [pc, #236]	; (8004688 <AS5145B_ReadData+0x104>)
 800459c:	f7ff ff9c 	bl	80044d8 <DelayUs>

	// Read angular position from first 12 bits (MSB first)
	AS5145B_Data_t Data;
	memset(&Data, 0, sizeof(Data)); // debug check this??
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	2204      	movs	r2, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 f84b 	bl	8007644 <memset>
	for(int i = 12-1; i >= 0; i--)
 80045ae:	230b      	movs	r3, #11
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e024      	b.n	80045fe <AS5145B_ReadData+0x7a>
	{
		LowerClockEdge(deviceIndex);
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8fe 	bl	80047b8 <LowerClockEdge>
		DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for T_(CLK/2)
 80045bc:	220a      	movs	r2, #10
 80045be:	2101      	movs	r1, #1
 80045c0:	4831      	ldr	r0, [pc, #196]	; (8004688 <AS5145B_ReadData+0x104>)
 80045c2:	f7ff ff89 	bl	80044d8 <DelayUs>
		RaiseClockEdge(deviceIndex);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 f8d5 	bl	8004778 <RaiseClockEdge>
		DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for T_(CLK/2)
 80045ce:	220a      	movs	r2, #10
 80045d0:	2101      	movs	r1, #1
 80045d2:	482d      	ldr	r0, [pc, #180]	; (8004688 <AS5145B_ReadData+0x104>)
 80045d4:	f7ff ff80 	bl	80044d8 <DelayUs>
		uint8_t temp = ReadDO_Pin(deviceIndex);
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f90c 	bl	80047f8 <ReadDO_Pin>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75bb      	strb	r3, [r7, #22]
		Data.position |= (temp) << i;
 80045e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045e8:	7db9      	ldrb	r1, [r7, #22]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b21b      	sxth	r3, r3
 80045f6:	81bb      	strh	r3, [r7, #12]
	for(int i = 12-1; i >= 0; i--)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	dad7      	bge.n	80045b4 <AS5145B_ReadData+0x30>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 8004604:	2305      	movs	r3, #5
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e025      	b.n	8004656 <AS5145B_ReadData+0xd2>
	{
		LowerClockEdge(deviceIndex);
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f8d3 	bl	80047b8 <LowerClockEdge>
		DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for T_(CLK/2)
 8004612:	220a      	movs	r2, #10
 8004614:	2101      	movs	r1, #1
 8004616:	481c      	ldr	r0, [pc, #112]	; (8004688 <AS5145B_ReadData+0x104>)
 8004618:	f7ff ff5e 	bl	80044d8 <DelayUs>
		RaiseClockEdge(deviceIndex);
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f8aa 	bl	8004778 <RaiseClockEdge>
		DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for T_(CLK/2)
 8004624:	220a      	movs	r2, #10
 8004626:	2101      	movs	r1, #1
 8004628:	4817      	ldr	r0, [pc, #92]	; (8004688 <AS5145B_ReadData+0x104>)
 800462a:	f7ff ff55 	bl	80044d8 <DelayUs>
		uint8_t temp = ReadDO_Pin(deviceIndex);
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f8e1 	bl	80047f8 <ReadDO_Pin>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]
		Data.status  |= (temp) << i;
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	b25a      	sxtb	r2, r3
 800463e:	7df9      	ldrb	r1, [r7, #23]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	b25b      	sxtb	r3, r3
 8004648:	4313      	orrs	r3, r2
 800464a:	b25b      	sxtb	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	73bb      	strb	r3, [r7, #14]
	for(int i = 6-1; i >= 0; i--)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	3b01      	subs	r3, #1
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	dad6      	bge.n	800460a <AS5145B_ReadData+0x86>
	}

	ClearChipSelect(deviceIndex);
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f84a 	bl	80046f8 <ClearChipSelect>
	DelayUs(TIMERX, 1, TIMERX_RATE_MHZ);	// Delay of 500 ns minimum required for t_(CSn)
 8004664:	220a      	movs	r2, #10
 8004666:	2101      	movs	r1, #1
 8004668:	4807      	ldr	r0, [pc, #28]	; (8004688 <AS5145B_ReadData+0x104>)
 800466a:	f7ff ff35 	bl	80044d8 <DelayUs>

	return Data;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	2300      	movs	r3, #0
 8004674:	8a3a      	ldrh	r2, [r7, #16]
 8004676:	f362 030f 	bfi	r3, r2, #0, #16
 800467a:	8a7a      	ldrh	r2, [r7, #18]
 800467c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40001000 	.word	0x40001000

0800468c <AS5145B_ReadPosition>:

float AS5145B_ReadPosition(uint8_t deviceIndex)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
	AS5145B_Data_t Data = AS5145B_ReadData(deviceIndex);
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff73 	bl	8004584 <AS5145B_ReadData>
 800469e:	4603      	mov	r3, r0
 80046a0:	60fb      	str	r3, [r7, #12]
	return (float) Data.position * AS5145B_RAW2DEG; // (float)??
 80046a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80046cc <AS5145B_ReadPosition+0x40>
 80046b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80046d0 <AS5145B_ReadPosition+0x44>
 80046ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046be:	eef0 7a66 	vmov.f32	s15, s13
}
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	43b40000 	.word	0x43b40000
 80046d0:	45800000 	.word	0x45800000

080046d4 <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(uint8_t deviceIndex)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
	AS5145B_Data_t Data = AS5145B_ReadData(deviceIndex);
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff4f 	bl	8004584 <AS5145B_ReadData>
 80046e6:	4603      	mov	r3, r0
 80046e8:	60fb      	str	r3, [r7, #12]
	return Data.position;
 80046ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046ee:	b29b      	uxth	r3, r3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <ClearChipSelect>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 8004702:	79fa      	ldrb	r2, [r7, #7]
 8004704:	490b      	ldr	r1, [pc, #44]	; (8004734 <ClearChipSelect+0x3c>)
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3308      	adds	r3, #8
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	79fa      	ldrb	r2, [r7, #7]
 8004716:	4907      	ldr	r1, [pc, #28]	; (8004734 <ClearChipSelect+0x3c>)
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	3310      	adds	r3, #16
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	f7ff feba 	bl	80044a0 <LL_GPIO_SetOutputPin>
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	2000039c 	.word	0x2000039c

08004738 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 8004742:	79fa      	ldrb	r2, [r7, #7]
 8004744:	490b      	ldr	r1, [pc, #44]	; (8004774 <SetChipSelect+0x3c>)
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3308      	adds	r3, #8
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	79fa      	ldrb	r2, [r7, #7]
 8004756:	4907      	ldr	r1, [pc, #28]	; (8004774 <SetChipSelect+0x3c>)
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3310      	adds	r3, #16
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	f7ff fea8 	bl	80044bc <LL_GPIO_ResetOutputPin>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	2000039c 	.word	0x2000039c

08004778 <RaiseClockEdge>:

static inline void RaiseClockEdge(uint8_t deviceIndex)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 8004782:	79fa      	ldrb	r2, [r7, #7]
 8004784:	490b      	ldr	r1, [pc, #44]	; (80047b4 <RaiseClockEdge+0x3c>)
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3304      	adds	r3, #4
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	79fa      	ldrb	r2, [r7, #7]
 8004796:	4907      	ldr	r1, [pc, #28]	; (80047b4 <RaiseClockEdge+0x3c>)
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	330e      	adds	r3, #14
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7ff fe7a 	bl	80044a0 <LL_GPIO_SetOutputPin>
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2000039c 	.word	0x2000039c

080047b8 <LowerClockEdge>:

static inline void LowerClockEdge(uint8_t deviceIndex)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 80047c2:	79fa      	ldrb	r2, [r7, #7]
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <LowerClockEdge+0x3c>)
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	3304      	adds	r3, #4
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	4907      	ldr	r1, [pc, #28]	; (80047f4 <LowerClockEdge+0x3c>)
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	330e      	adds	r3, #14
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f7ff fe5a 	bl	80044a0 <LL_GPIO_SetOutputPin>
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	2000039c 	.word	0x2000039c

080047f8 <ReadDO_Pin>:

static inline uint8_t ReadDO_Pin(uint8_t deviceIndex)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_IsInputPinSet(Device[deviceIndex].DO_GPIOx, Device[deviceIndex].DO_Pin) & 0x01; // 0x01??
 8004802:	79fa      	ldrb	r2, [r7, #7]
 8004804:	490d      	ldr	r1, [pc, #52]	; (800483c <ReadDO_Pin+0x44>)
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	79fa      	ldrb	r2, [r7, #7]
 8004814:	4909      	ldr	r1, [pc, #36]	; (800483c <ReadDO_Pin+0x44>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	330c      	adds	r3, #12
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	4619      	mov	r1, r3
 8004826:	f7ff fe26 	bl	8004476 <LL_GPIO_IsInputPinSet>
 800482a:	4603      	mov	r3, r0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	2000039c 	.word	0x2000039c

08004840 <EPOS4_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void EPOS4_Init(uint8_t nodeId, EPOS4_t *Device_Init)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b093      	sub	sp, #76	; 0x4c
 8004844:	af0a      	add	r7, sp, #40	; 0x28
 8004846:	4603      	mov	r3, r0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	71fb      	strb	r3, [r7, #7]
	memcpy(&Device, Device_Init, sizeof(EPOS4_t));
 800484c:	223c      	movs	r2, #60	; 0x3c
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	4856      	ldr	r0, [pc, #344]	; (80049ac <EPOS4_Init+0x16c>)
 8004852:	f002 fee9 	bl	8007628 <memcpy>

	uint16_t cobId = nodeId + 0x600;
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800485e:	83bb      	strh	r3, [r7, #28]

	if(ReadObjectValue(cobId, NODE_ID_INDEX, 0) != nodeId)	// timeout if turned off??
 8004860:	8bbb      	ldrh	r3, [r7, #28]
 8004862:	2200      	movs	r2, #0
 8004864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f8c5 	bl	80049f8 <ReadObjectValue>
 800486e:	4602      	mov	r2, r0
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	429a      	cmp	r2, r3
 8004874:	d004      	beq.n	8004880 <EPOS4_Init+0x40>
		ErrorHandler(cobId, nodeIdError);
 8004876:	8bbb      	ldrh	r3, [r7, #28]
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fbd2 	bl	8005024 <ErrorHandler>

	uint8_t epos4ProductCodeError = 1;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
	uint16_t hwVersions[6] = {0x6050, 0x6150, 0x6551, 0x6552, 0x6350, 0x6450};
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <EPOS4_Init+0x170>)
 8004886:	f107 030c 	add.w	r3, r7, #12
 800488a:	ca07      	ldmia	r2, {r0, r1, r2}
 800488c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t productCode = ReadObjectValue(cobId, IDENTITY_OBJECT_INDEX, PRODUCT_CODE_SUBINDEX) >> 16;
 8004890:	8bbb      	ldrh	r3, [r7, #28]
 8004892:	2202      	movs	r2, #2
 8004894:	f241 0118 	movw	r1, #4120	; 0x1018
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f8ad 	bl	80049f8 <ReadObjectValue>
 800489e:	4603      	mov	r3, r0
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	837b      	strh	r3, [r7, #26]
	for(uint8_t i = 0; i < 6; i++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
 80048a8:	e00e      	b.n	80048c8 <EPOS4_Init+0x88>
	{
		if(productCode == hwVersions[i])
 80048aa:	7fbb      	ldrb	r3, [r7, #30]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	3320      	adds	r3, #32
 80048b0:	443b      	add	r3, r7
 80048b2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80048b6:	8b7a      	ldrh	r2, [r7, #26]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d102      	bne.n	80048c2 <EPOS4_Init+0x82>
		{
			epos4ProductCodeError = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
			break;
 80048c0:	e005      	b.n	80048ce <EPOS4_Init+0x8e>
	for(uint8_t i = 0; i < 6; i++)
 80048c2:	7fbb      	ldrb	r3, [r7, #30]
 80048c4:	3301      	adds	r3, #1
 80048c6:	77bb      	strb	r3, [r7, #30]
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d9ed      	bls.n	80048aa <EPOS4_Init+0x6a>
		}
	}
	if(epos4ProductCodeError)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <EPOS4_Init+0x9e>
		ErrorHandler(cobId, productCodeError);
 80048d4:	8bbb      	ldrh	r3, [r7, #28]
 80048d6:	2103      	movs	r1, #3
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fba3 	bl	8005024 <ErrorHandler>

	uint16_t state = ReadObjectValue(cobId, STATUSWORD_INDEX, 0) & STATE_MASK;
 80048de:	8bbb      	ldrh	r3, [r7, #28]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f246 0141 	movw	r1, #24641	; 0x6041
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f886 	bl	80049f8 <ReadObjectValue>
 80048ec:	4603      	mov	r3, r0
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80048f4:	833b      	strh	r3, [r7, #24]
	if((state == STATE_FAULT) || (state == STATE_FAULT_REACTION_ACTIVE))
 80048f6:	8b3b      	ldrh	r3, [r7, #24]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d002      	beq.n	8004902 <EPOS4_Init+0xc2>
 80048fc:	8b3b      	ldrh	r3, [r7, #24]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d104      	bne.n	800490c <EPOS4_Init+0xcc>
		ErrorHandler(cobId, initFaultDetected);
 8004902:	8bbb      	ldrh	r3, [r7, #28]
 8004904:	2104      	movs	r1, #4
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb8c 	bl	8005024 <ErrorHandler>

	WriteObjectValue(cobId, CONTROLWORD_INDEX, 0, CTRLCMD_DISABLE_VOLTAGE);
 800490c:	8bb8      	ldrh	r0, [r7, #28]
 800490e:	2300      	movs	r3, #0
 8004910:	2200      	movs	r2, #0
 8004912:	f246 0140 	movw	r1, #24640	; 0x6040
 8004916:	f000 f8a1 	bl	8004a5c <WriteObjectValue>
	while((ReadObjectValue(cobId, STATUSWORD_INDEX, 0) & STATE_MASK) != STATE_SWITCH_ON_DISABLED); // timeout??
 800491a:	bf00      	nop
 800491c:	8bbb      	ldrh	r3, [r7, #28]
 800491e:	2200      	movs	r2, #0
 8004920:	f246 0141 	movw	r1, #24641	; 0x6041
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f867 	bl	80049f8 <ReadObjectValue>
 800492a:	4603      	mov	r3, r0
 800492c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d1f3      	bne.n	800491c <EPOS4_Init+0xdc>

	if(Device.Requirements.isFirstStepRequired)
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <EPOS4_Init+0x16c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <EPOS4_Init+0x132>
		if(WriteFirstStepObjects(cobId, Device.FirstStep))
 800493c:	4e1b      	ldr	r6, [pc, #108]	; (80049ac <EPOS4_Init+0x16c>)
 800493e:	f8b7 c01c 	ldrh.w	ip, [r7, #28]
 8004942:	466d      	mov	r5, sp
 8004944:	f106 0410 	add.w	r4, r6, #16
 8004948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004950:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004954:	e885 0003 	stmia.w	r5, {r0, r1}
 8004958:	1d33      	adds	r3, r6, #4
 800495a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800495c:	4660      	mov	r0, ip
 800495e:	f000 f9ac 	bl	8004cba <WriteFirstStepObjects>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <EPOS4_Init+0x132>
			ErrorHandler(cobId, firstStepError);
 8004968:	8bbb      	ldrh	r3, [r7, #28]
 800496a:	2106      	movs	r1, #6
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb59 	bl	8005024 <ErrorHandler>

	if(Device.Requirements.isModeOfOperationRequired)
 8004972:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <EPOS4_Init+0x16c>)
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00f      	beq.n	800499a <EPOS4_Init+0x15a>
		if(WriteModeOfOperation(cobId, Device.ModeOfOperation))
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <EPOS4_Init+0x16c>)
 800497c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004980:	8bbb      	ldrh	r3, [r7, #28]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fad9 	bl	8004f3c <WriteModeOfOperation>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <EPOS4_Init+0x15a>
			ErrorHandler(cobId, modeOfOperationError);
 8004990:	8bbb      	ldrh	r3, [r7, #28]
 8004992:	2107      	movs	r1, #7
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fb45 	bl	8005024 <ErrorHandler>

	Device.isInit = 1;
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <EPOS4_Init+0x16c>)
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200003c4 	.word	0x200003c4
 80049b0:	08008850 	.word	0x08008850

080049b4 <EPOS4_WriteTargetTorqueValue>:

	return (int16_t) ReadObjectValue(cobId, TORQUE_ACTUAL_VALUE_INDEX, 0);
}

void EPOS4_WriteTargetTorqueValue(uint8_t nodeId, int16_t torque)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	460a      	mov	r2, r1
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80bb      	strh	r3, [r7, #4]
	if(!Device.isInit)
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <EPOS4_WriteTargetTorqueValue+0x40>)
 80049c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d100      	bne.n	80049d0 <EPOS4_WriteTargetTorqueValue+0x1c>
		__NOP(); // add assert??
 80049ce:	bf00      	nop

	uint16_t cobId = nodeId + 0x600;
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80049d8:	81fb      	strh	r3, [r7, #14]

	WriteObjectValue(cobId, TARGET_TORQUE_INDEX, 0, torque);
 80049da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049de:	89f8      	ldrh	r0, [r7, #14]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f246 0171 	movw	r1, #24689	; 0x6071
 80049e6:	f000 f839 	bl	8004a5c <WriteObjectValue>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200003c4 	.word	0x200003c4

080049f8 <ReadObjectValue>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static uint32_t ReadObjectValue(uint16_t cobId, uint16_t index, uint8_t subindex)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	460b      	mov	r3, r1
 8004a04:	80bb      	strh	r3, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	70fb      	strb	r3, [r7, #3]
	MCP25625_RXBx_t RXBx;
	SDO_Upload(cobId, index, subindex, &RXBx);
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	88b9      	ldrh	r1, [r7, #4]
 8004a12:	88f8      	ldrh	r0, [r7, #6]
 8004a14:	f000 f86c 	bl	8004af0 <SDO_Upload>

	if(!errorHasOccurred)
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <ReadObjectValue+0x60>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d108      	bne.n	8004a32 <ReadObjectValue+0x3a>
	{
		uint8_t nodeId = cobId - 0x600;
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	75fb      	strb	r3, [r7, #23]
		CheckForError(nodeId, &RXBx);
 8004a24:	f107 0208 	add.w	r2, r7, #8
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f8b6 	bl	8004b9e <CheckForError>
	}

	CheckForAbort(cobId, RXBx.Struct.RXBxDn_Reg);
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	1d5a      	adds	r2, r3, #5
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f8d1 	bl	8004be4 <CheckForAbort>

	return ParseValueFromData(RXBx.Struct.RXBxDn_Reg);
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	3305      	adds	r3, #5
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f835 	bl	8004ab8 <ParseValueFromData>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000400 	.word	0x20000400

08004a5c <WriteObjectValue>:

static void WriteObjectValue(uint16_t cobId, uint16_t index, uint8_t subindex, uint32_t value)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	4603      	mov	r3, r0
 8004a66:	81fb      	strh	r3, [r7, #14]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	81bb      	strh	r3, [r7, #12]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	72fb      	strb	r3, [r7, #11]
	MCP25625_RXBx_t	RXBx;
	SDO_Download(cobId, index, subindex, value, &RXBx);
 8004a70:	7afa      	ldrb	r2, [r7, #11]
 8004a72:	89b9      	ldrh	r1, [r7, #12]
 8004a74:	89f8      	ldrh	r0, [r7, #14]
 8004a76:	f107 0310 	add.w	r3, r7, #16
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f000 f862 	bl	8004b46 <SDO_Download>

	if(!errorHasOccurred)
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <WriteObjectValue+0x58>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d108      	bne.n	8004a9c <WriteObjectValue+0x40>
	{
		uint8_t nodeId = cobId - 0x600;
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	77fb      	strb	r3, [r7, #31]
		CheckForError(nodeId, &RXBx);
 8004a8e:	f107 0210 	add.w	r2, r7, #16
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f881 	bl	8004b9e <CheckForError>
	}

	CheckForAbort(cobId, RXBx.Struct.RXBxDn_Reg);
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	1d5a      	adds	r2, r3, #5
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f89c 	bl	8004be4 <CheckForAbort>
}
 8004aac:	bf00      	nop
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000400 	.word	0x20000400

08004ab8 <ParseValueFromData>:

static uint32_t ParseValueFromData(uint8_t *data)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	return (uint32_t) ((data[7] << 24) + (data[6] << 16) + (data[5] << 8) + data[4]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3307      	adds	r3, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	061a      	lsls	r2, r3, #24
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3306      	adds	r3, #6
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	441a      	add	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3305      	adds	r3, #5
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	4413      	add	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	3204      	adds	r2, #4
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	4413      	add	r3, r2
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <SDO_Upload>:

static void SDO_Upload(uint16_t cobId, uint16_t index, uint8_t subindex, MCP25625_RXBx_t *RXBx)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	4603      	mov	r3, r0
 8004afa:	81fb      	strh	r3, [r7, #14]
 8004afc:	460b      	mov	r3, r1
 8004afe:	81bb      	strh	r3, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];
	FrameData(data, CLIENT_UPLOAD, index, subindex, 0);
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	89ba      	ldrh	r2, [r7, #12]
 8004b08:	f107 0010 	add.w	r0, r7, #16
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	9100      	str	r1, [sp, #0]
 8004b10:	2140      	movs	r1, #64	; 0x40
 8004b12:	f000 f895 	bl	8004c40 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(cobId, data, 8));
 8004b16:	bf00      	nop
 8004b18:	f107 0110 	add.w	r1, r7, #16
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fbcb 	bl	80052bc <MCP25625_LoadTxBufferAtSIDH>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f5      	bne.n	8004b18 <SDO_Upload+0x28>
	while(MCP25625_ReadRxBufferAtSIDH(RXBx, 8));
 8004b2c:	bf00      	nop
 8004b2e:	2108      	movs	r1, #8
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fc85 	bl	8005440 <MCP25625_ReadRxBufferAtSIDH>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f8      	bne.n	8004b2e <SDO_Upload+0x3e>
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <SDO_Download>:

static void SDO_Download(uint16_t cobId, uint16_t index, uint8_t subindex, uint32_t value, MCP25625_RXBx_t *RXBx)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b088      	sub	sp, #32
 8004b4a:	af02      	add	r7, sp, #8
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	4603      	mov	r3, r0
 8004b50:	81fb      	strh	r3, [r7, #14]
 8004b52:	460b      	mov	r3, r1
 8004b54:	81bb      	strh	r3, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	72fb      	strb	r3, [r7, #11]
	uint8_t data[8];
	FrameData(data, EXPEDITED_CLIENT_DOWNLOAD, index, subindex, value);
 8004b5a:	7af9      	ldrb	r1, [r7, #11]
 8004b5c:	89ba      	ldrh	r2, [r7, #12]
 8004b5e:	f107 0010 	add.w	r0, r7, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	460b      	mov	r3, r1
 8004b68:	2122      	movs	r1, #34	; 0x22
 8004b6a:	f000 f869 	bl	8004c40 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(cobId, data, 8));
 8004b6e:	bf00      	nop
 8004b70:	f107 0110 	add.w	r1, r7, #16
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	2208      	movs	r2, #8
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fb9f 	bl	80052bc <MCP25625_LoadTxBufferAtSIDH>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f5      	bne.n	8004b70 <SDO_Download+0x2a>
	while(MCP25625_ReadRxBufferAtSIDH(RXBx, 8));
 8004b84:	bf00      	nop
 8004b86:	2108      	movs	r1, #8
 8004b88:	6a38      	ldr	r0, [r7, #32]
 8004b8a:	f000 fc59 	bl	8005440 <MCP25625_ReadRxBufferAtSIDH>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f8      	bne.n	8004b86 <SDO_Download+0x40>
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <CheckForError>:

static void CheckForError(uint8_t nodeId, MCP25625_RXBx_t *RXBx)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	6039      	str	r1, [r7, #0]
 8004ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t cobIdEmcy = nodeId + 0x80;
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	3b80      	subs	r3, #128	; 0x80
 8004bae:	73fb      	strb	r3, [r7, #15]
	uint16_t cobId = (uint16_t) ((RXBx->Struct.RXBxSIDH_Reg << 3) + (RXBx->Struct.RXBxSIDL_Reg.value >> 5));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	81bb      	strh	r3, [r7, #12]
	if(cobId == cobIdEmcy)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	89ba      	ldrh	r2, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d104      	bne.n	8004bdc <CheckForError+0x3e>
		ErrorHandler(cobId, deviceError);
 8004bd2:	89bb      	ldrh	r3, [r7, #12]
 8004bd4:	2108      	movs	r1, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fa24 	bl	8005024 <ErrorHandler>
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <CheckForAbort>:

static void CheckForAbort(uint16_t cobId, uint8_t *data)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	80fb      	strh	r3, [r7, #6]
	if(data[0] >> 7)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da16      	bge.n	8004c28 <CheckForAbort+0x44>
	{
		CM_epos4_abortLowByte = data[1];
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	785a      	ldrb	r2, [r3, #1]
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <CheckForAbort+0x4c>)
 8004c00:	701a      	strb	r2, [r3, #0]
		CM_epos4_abortHighByte = data[2];
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	789a      	ldrb	r2, [r3, #2]
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <CheckForAbort+0x50>)
 8004c08:	701a      	strb	r2, [r3, #0]
		CM_epos4_abortSubindex = data[3];
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	78da      	ldrb	r2, [r3, #3]
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <CheckForAbort+0x54>)
 8004c10:	701a      	strb	r2, [r3, #0]
		CM_epos4_abortCode = ParseValueFromData(data);
 8004c12:	6838      	ldr	r0, [r7, #0]
 8004c14:	f7ff ff50 	bl	8004ab8 <ParseValueFromData>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <CheckForAbort+0x58>)
 8004c1c:	6013      	str	r3, [r2, #0]

		ErrorHandler(cobId, abortError);
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2109      	movs	r1, #9
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f9fe 	bl	8005024 <ErrorHandler>
	}
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000401 	.word	0x20000401
 8004c34:	20000402 	.word	0x20000402
 8004c38:	20000403 	.word	0x20000403
 8004c3c:	20000408 	.word	0x20000408

08004c40 <FrameData>:

static void FrameData(uint8_t *data, uint8_t byte0, uint16_t index, uint8_t subindex, uint32_t value)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	70fb      	strb	r3, [r7, #3]
 8004c52:	460b      	mov	r3, r1
 8004c54:	803b      	strh	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	70bb      	strb	r3, [r7, #2]
	data[0] = byte0;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	701a      	strb	r2, [r3, #0]
	data[1] = (0x00 | index);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3301      	adds	r3, #1
 8004c64:	883a      	ldrh	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
	data[2] = (0x00 | index >> 8);
 8004c6a:	883b      	ldrh	r3, [r7, #0]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3302      	adds	r3, #2
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
	data[3] = subindex;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	78ba      	ldrb	r2, [r7, #2]
 8004c7e:	701a      	strb	r2, [r3, #0]
	data[4] = (0x00 | value);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
	data[5] = (0x00 | value >> 8);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	0a1a      	lsrs	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3305      	adds	r3, #5
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
	data[6] = (0x00 | value >> 16);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	0c1a      	lsrs	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3306      	adds	r3, #6
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
	data[7] = (0x00 | value >> 24);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	0e1a      	lsrs	r2, r3, #24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3307      	adds	r3, #7
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <WriteFirstStepObjects>:

static uint8_t WriteFirstStepObjects(uint16_t cobId, EPOS4_FirstStep_t FirstStep)
{
 8004cba:	b084      	sub	sp, #16
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	f107 001c 	add.w	r0, r7, #28
 8004cc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004ccc:	4623      	mov	r3, r4
 8004cce:	80fb      	strh	r3, [r7, #6]
	WriteObjectValue(cobId, CAN_BITRATE_INDEX, 0, FirstStep.CAN_BitRate);
 8004cd0:	7f3b      	ldrb	r3, [r7, #28]
 8004cd2:	88f8      	ldrh	r0, [r7, #6]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f242 0101 	movw	r1, #8193	; 0x2001
 8004cda:	f7ff febf 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, CAN_BITRATE_INDEX, 0) != FirstStep.CAN_BitRate)
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f242 0101 	movw	r1, #8193	; 0x2001
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fe86 	bl	80049f8 <ReadObjectValue>
 8004cec:	4603      	mov	r3, r0
 8004cee:	7f3a      	ldrb	r2, [r7, #28]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d001      	beq.n	8004cf8 <WriteFirstStepObjects+0x3e>
		return 1;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e11a      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_TYPE_INDEX, 0, FirstStep.MotorType);
 8004cf8:	7f7b      	ldrb	r3, [r7, #29]
 8004cfa:	88f8      	ldrh	r0, [r7, #6]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f246 4102 	movw	r1, #25602	; 0x6402
 8004d02:	f7ff feab 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_TYPE_INDEX, 0) != FirstStep.MotorType)
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f246 4102 	movw	r1, #25602	; 0x6402
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fe72 	bl	80049f8 <ReadObjectValue>
 8004d14:	4603      	mov	r3, r0
 8004d16:	7f7a      	ldrb	r2, [r7, #29]
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d001      	beq.n	8004d20 <WriteFirstStepObjects+0x66>
		return 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e106      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, FirstStep.nominalCurrent);
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	88f8      	ldrh	r0, [r7, #6]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d2a:	f7ff fe97 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX) != FirstStep.nominalCurrent)
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fe5e 	bl	80049f8 <ReadObjectValue>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <WriteFirstStepObjects+0x8e>
		return 1;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0f2      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, FirstStep.outputCurrentLimit);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	88f8      	ldrh	r0, [r7, #6]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d52:	f7ff fe83 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX) != FirstStep.outputCurrentLimit)
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fe4a 	bl	80049f8 <ReadObjectValue>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <WriteFirstStepObjects+0xb6>
		return 1;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0de      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, FirstStep.numberOfPolePairs);
 8004d70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d74:	88f8      	ldrh	r0, [r7, #6]
 8004d76:	2203      	movs	r2, #3
 8004d78:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d7c:	f7ff fe6e 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX) != FirstStep.numberOfPolePairs)
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f243 0101 	movw	r1, #12289	; 0x3001
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fe35 	bl	80049f8 <ReadObjectValue>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d001      	beq.n	8004d9c <WriteFirstStepObjects+0xe2>
		return 1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0c8      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, FirstStep.thermalTimeConstantWinding);
 8004d9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d9e:	88f8      	ldrh	r0, [r7, #6]
 8004da0:	2204      	movs	r2, #4
 8004da2:	f243 0101 	movw	r1, #12289	; 0x3001
 8004da6:	f7ff fe59 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX) != FirstStep.thermalTimeConstantWinding)
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2204      	movs	r2, #4
 8004dae:	f243 0101 	movw	r1, #12289	; 0x3001
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fe20 	bl	80049f8 <ReadObjectValue>
 8004db8:	4603      	mov	r3, r0
 8004dba:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d001      	beq.n	8004dc4 <WriteFirstStepObjects+0x10a>
		return 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b4      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, FirstStep.torqueConstant);
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	88f8      	ldrh	r0, [r7, #6]
 8004dc8:	2205      	movs	r2, #5
 8004dca:	f243 0101 	movw	r1, #12289	; 0x3001
 8004dce:	f7ff fe45 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX) != FirstStep.torqueConstant)
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f243 0101 	movw	r1, #12289	; 0x3001
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fe0c 	bl	80049f8 <ReadObjectValue>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <WriteFirstStepObjects+0x132>
		return 1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0a0      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, MAX_MOTOR_SPEED_INDEX, 0, FirstStep.maxMotorSpeed);
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	88f8      	ldrh	r0, [r7, #6]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8004df6:	f7ff fe31 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, MAX_MOTOR_SPEED_INDEX, 0) != FirstStep.maxMotorSpeed)
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fdf8 	bl	80049f8 <ReadObjectValue>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <WriteFirstStepObjects+0x15a>
		return 1;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e08c      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, FirstStep.maxGearInputSpeed);
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	88f8      	ldrh	r0, [r7, #6]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f243 0103 	movw	r1, #12291	; 0x3003
 8004e1e:	f7ff fe1d 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX) != FirstStep.maxGearInputSpeed)
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2203      	movs	r2, #3
 8004e26:	f243 0103 	movw	r1, #12291	; 0x3003
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fde4 	bl	80049f8 <ReadObjectValue>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <WriteFirstStepObjects+0x182>
		return 1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e078      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, FirstStep.sensorsConfiguration);
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	88f8      	ldrh	r0, [r7, #6]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e46:	f7ff fe09 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX) != FirstStep.sensorsConfiguration)
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fdd0 	bl	80049f8 <ReadObjectValue>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <WriteFirstStepObjects+0x1aa>
		return 1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e064      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, FirstStep.controlStructure);
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	88f8      	ldrh	r0, [r7, #6]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e6e:	f7ff fdf5 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX) != FirstStep.controlStructure)
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fdbc 	bl	80049f8 <ReadObjectValue>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <WriteFirstStepObjects+0x1d2>
		return 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e050      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, FirstStep.commutationSensors);
 8004e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8e:	88f8      	ldrh	r0, [r7, #6]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e96:	f7ff fde1 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX) != FirstStep.commutationSensors)
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fda8 	bl	80049f8 <ReadObjectValue>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <WriteFirstStepObjects+0x1fa>
		return 1;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e03c      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, FirstStep.axisConfigMiscellaneous);
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	88f8      	ldrh	r0, [r7, #6]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ebe:	f7ff fdcd 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX) != FirstStep.axisConfigMiscellaneous)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fd94 	bl	80049f8 <ReadObjectValue>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <WriteFirstStepObjects+0x222>
		return 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e028      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, FirstStep.currentControllerP_Gain);
 8004edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ede:	88f8      	ldrh	r0, [r7, #6]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004ee6:	f7ff fdb9 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX) != FirstStep.currentControllerP_Gain)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fd80 	bl	80049f8 <ReadObjectValue>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <WriteFirstStepObjects+0x24a>
		return 1;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e014      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	WriteObjectValue(cobId, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, FirstStep.currentControllerI_Gain);
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	88f8      	ldrh	r0, [r7, #6]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004f0e:	f7ff fda5 	bl	8004a5c <WriteObjectValue>
	if(ReadObjectValue(cobId, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX) != FirstStep.currentControllerI_Gain)
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd6c 	bl	80049f8 <ReadObjectValue>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <WriteFirstStepObjects+0x272>
		return 1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <WriteFirstStepObjects+0x274>

	return 0;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004f38:	b004      	add	sp, #16
 8004f3a:	4770      	bx	lr

08004f3c <WriteModeOfOperation>:

static uint8_t WriteModeOfOperation(uint16_t cobId, EPOS4_ModeOfOperation_t modeOfOperation)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	460a      	mov	r2, r1
 8004f46:	80fb      	strh	r3, [r7, #6]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	717b      	strb	r3, [r7, #5]
	switch (modeOfOperation)
 8004f4c:	797b      	ldrb	r3, [r7, #5]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d162      	bne.n	8005018 <WriteModeOfOperation+0xdc>
	{
	case cyclicSynchronousTorqueMode:
	{
		WriteObjectValue(cobId, TARGET_TORQUE_INDEX, 0, 0);
 8004f52:	88f8      	ldrh	r0, [r7, #6]
 8004f54:	2300      	movs	r3, #0
 8004f56:	2200      	movs	r2, #0
 8004f58:	f246 0171 	movw	r1, #24689	; 0x6071
 8004f5c:	f7ff fd7e 	bl	8004a5c <WriteObjectValue>
		if(ReadObjectValue(cobId, TARGET_TORQUE_INDEX, 0) != 0)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f246 0171 	movw	r1, #24689	; 0x6071
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fd45 	bl	80049f8 <ReadObjectValue>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <WriteModeOfOperation+0x3c>
			return 1;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e050      	b.n	800501a <WriteModeOfOperation+0xde>

		WriteObjectValue(cobId, MODES_OF_OPERATION_INDEX, 0, CST_MODE);
 8004f78:	88f8      	ldrh	r0, [r7, #6]
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f246 0160 	movw	r1, #24672	; 0x6060
 8004f82:	f7ff fd6b 	bl	8004a5c <WriteObjectValue>
		if(ReadObjectValue(cobId, MODES_OF_OPERATION_INDEX, 0) != CST_MODE)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f246 0160 	movw	r1, #24672	; 0x6060
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fd32 	bl	80049f8 <ReadObjectValue>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b0a      	cmp	r3, #10
 8004f98:	d001      	beq.n	8004f9e <WriteModeOfOperation+0x62>
			return 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e03d      	b.n	800501a <WriteModeOfOperation+0xde>

		WriteObjectValue(cobId, CONTROLWORD_INDEX, 0, CTRLCMD_SHUTDOWN);
 8004f9e:	88f8      	ldrh	r0, [r7, #6]
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f246 0140 	movw	r1, #24640	; 0x6040
 8004fa8:	f7ff fd58 	bl	8004a5c <WriteObjectValue>
		while((ReadObjectValue(cobId, STATUSWORD_INDEX, 0) & STATE_MASK) != STATE_READY_TO_SWITCH_ON); // timeout??
 8004fac:	bf00      	nop
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f246 0141 	movw	r1, #24641	; 0x6041
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd1e 	bl	80049f8 <ReadObjectValue>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004fc2:	2b21      	cmp	r3, #33	; 0x21
 8004fc4:	d1f3      	bne.n	8004fae <WriteModeOfOperation+0x72>

		WriteObjectValue(cobId, CONTROLWORD_INDEX, 0, CTRLCMD_SWITCH_ON_AND_ENABLE);
 8004fc6:	88f8      	ldrh	r0, [r7, #6]
 8004fc8:	230f      	movs	r3, #15
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f246 0140 	movw	r1, #24640	; 0x6040
 8004fd0:	f7ff fd44 	bl	8004a5c <WriteObjectValue>
		while((ReadObjectValue(cobId, STATUSWORD_INDEX, 0) & STATE_MASK) != STATE_OPERATION_ENABLED); // timeout??
 8004fd4:	bf00      	nop
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f246 0141 	movw	r1, #24641	; 0x6041
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fd0a 	bl	80049f8 <ReadObjectValue>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004fea:	2b27      	cmp	r3, #39	; 0x27
 8004fec:	d1f3      	bne.n	8004fd6 <WriteModeOfOperation+0x9a>

		WriteObjectValue(cobId, TORQUE_OFFSET_INDEX, 0, 0);
 8004fee:	88f8      	ldrh	r0, [r7, #6]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8004ff8:	f7ff fd30 	bl	8004a5c <WriteObjectValue>
		if(ReadObjectValue(cobId, TORQUE_OFFSET_INDEX, 0) != 0)
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fcf7 	bl	80049f8 <ReadObjectValue>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <WriteModeOfOperation+0xd8>
			return 1;
 8005010:	2301      	movs	r3, #1
 8005012:	e002      	b.n	800501a <WriteModeOfOperation+0xde>

		return 0;
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <WriteModeOfOperation+0xde>
	}
	}

	return 1;
 8005018:	2301      	movs	r3, #1
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <ErrorHandler>:

// right way to do this??
static void ErrorHandler(uint16_t cobId, Errors_t error)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	460a      	mov	r2, r1
 800502e:	80fb      	strh	r3, [r7, #6]
 8005030:	4613      	mov	r3, r2
 8005032:	717b      	strb	r3, [r7, #5]
	errorHasOccurred = 1;
 8005034:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <ErrorHandler+0xc4>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]

	CM_epos4_error = error;
 800503a:	4a2c      	ldr	r2, [pc, #176]	; (80050ec <ErrorHandler+0xc8>)
 800503c:	797b      	ldrb	r3, [r7, #5]
 800503e:	7013      	strb	r3, [r2, #0]
	CM_epos4_numOfErrors = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, NUMBER_OF_ERRORS_SUBINDEX);
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2200      	movs	r2, #0
 8005044:	f241 0103 	movw	r1, #4099	; 0x1003
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fcd5 	bl	80049f8 <ReadObjectValue>
 800504e:	4603      	mov	r3, r0
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <ErrorHandler+0xcc>)
 8005054:	701a      	strb	r2, [r3, #0]
	CM_epos4_state = ReadObjectValue(cobId, STATUSWORD_INDEX, 0) & STATE_MASK;
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2200      	movs	r2, #0
 800505a:	f246 0141 	movw	r1, #24641	; 0x6041
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fcca 	bl	80049f8 <ReadObjectValue>
 8005064:	4603      	mov	r3, r0
 8005066:	b29b      	uxth	r3, r3
 8005068:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <ErrorHandler+0xd0>)
 8005070:	801a      	strh	r2, [r3, #0]
	CM_epos4_errorHistory1 = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, ERROR_HISTORY_1_SUBINDEX);
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2201      	movs	r2, #1
 8005076:	f241 0103 	movw	r1, #4099	; 0x1003
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fcbc 	bl	80049f8 <ReadObjectValue>
 8005080:	4603      	mov	r3, r0
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <ErrorHandler+0xd4>)
 8005084:	6013      	str	r3, [r2, #0]
	CM_epos4_errorHistory2 = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, ERROR_HISTORY_2_SUBINDEX);
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2202      	movs	r2, #2
 800508a:	f241 0103 	movw	r1, #4099	; 0x1003
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fcb2 	bl	80049f8 <ReadObjectValue>
 8005094:	4603      	mov	r3, r0
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <ErrorHandler+0xd8>)
 8005098:	6013      	str	r3, [r2, #0]
	CM_epos4_errorHistory3 = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, ERROR_HISTORY_3_SUBINDEX);
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2203      	movs	r2, #3
 800509e:	f241 0103 	movw	r1, #4099	; 0x1003
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fca8 	bl	80049f8 <ReadObjectValue>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <ErrorHandler+0xdc>)
 80050ac:	6013      	str	r3, [r2, #0]
	CM_epos4_errorHistory4 = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, ERROR_HISTORY_4_SUBINDEX);
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2204      	movs	r2, #4
 80050b2:	f241 0103 	movw	r1, #4099	; 0x1003
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fc9e 	bl	80049f8 <ReadObjectValue>
 80050bc:	4603      	mov	r3, r0
 80050be:	4a11      	ldr	r2, [pc, #68]	; (8005104 <ErrorHandler+0xe0>)
 80050c0:	6013      	str	r3, [r2, #0]
	CM_epos4_errorHistory5 = ReadObjectValue(cobId, ERROR_HISTORY_INDEX, ERROR_HISTORY_5_SUBINDEX);
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2205      	movs	r2, #5
 80050c6:	f241 0103 	movw	r1, #4099	; 0x1003
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fc94 	bl	80049f8 <ReadObjectValue>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <ErrorHandler+0xe4>)
 80050d4:	6013      	str	r3, [r2, #0]

	while(1)
	{
		WriteObjectValue(cobId, CONTROLWORD_INDEX, 0, CTRLCMD_DISABLE_VOLTAGE);
 80050d6:	88f8      	ldrh	r0, [r7, #6]
 80050d8:	2300      	movs	r3, #0
 80050da:	2200      	movs	r2, #0
 80050dc:	f246 0140 	movw	r1, #24640	; 0x6040
 80050e0:	f7ff fcbc 	bl	8004a5c <WriteObjectValue>
 80050e4:	e7f7      	b.n	80050d6 <ErrorHandler+0xb2>
 80050e6:	bf00      	nop
 80050e8:	20000400 	.word	0x20000400
 80050ec:	20000404 	.word	0x20000404
 80050f0:	20000405 	.word	0x20000405
 80050f4:	20000406 	.word	0x20000406
 80050f8:	2000040c 	.word	0x2000040c
 80050fc:	20000410 	.word	0x20000410
 8005100:	20000414 	.word	0x20000414
 8005104:	20000418 	.word	0x20000418
 8005108:	2000041c 	.word	0x2000041c

0800510c <LL_GPIO_SetOutputPin>:
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	619a      	str	r2, [r3, #24]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_GPIO_ResetOutputPin>:
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d101      	bne.n	8005182 <LL_SPI_IsActiveFlag_TXE+0x18>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	330c      	adds	r3, #12
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	330c      	adds	r3, #12
 80051d8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <MCP25625_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MCP25625_Init(MCP25625_t *Device_Inits)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	memcpy(&Device, Device_Inits, sizeof(MCP25625_t));
 80051f4:	2210      	movs	r2, #16
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	482e      	ldr	r0, [pc, #184]	; (80052b4 <MCP25625_Init+0xc8>)
 80051fa:	f002 fa15 	bl	8007628 <memcpy>

	ClearChipSelect();
 80051fe:	f000 fbaf 	bl	8005960 <ClearChipSelect>

	ResetDevice();
 8005202:	f000 f9a9 	bl	8005558 <ResetDevice>

	uint8_t canCtrlReg;
	ReadRegisterData(CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8005206:	f107 0316 	add.w	r3, r7, #22
 800520a:	2201      	movs	r2, #1
 800520c:	4619      	mov	r1, r3
 800520e:	200f      	movs	r0, #15
 8005210:	f000 f9d6 	bl	80055c0 <ReadRegisterData>
	if(canCtrlReg != CANCTRL_RESET_VALUE)
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	2b87      	cmp	r3, #135	; 0x87
 8005218:	d001      	beq.n	800521e <MCP25625_Init+0x32>
		return mcp25625_resetError;
 800521a:	2301      	movs	r3, #1
 800521c:	e046      	b.n	80052ac <MCP25625_Init+0xc0>

	InitRXBx();
 800521e:	f000 f98d 	bl	800553c <InitRXBx>

	uint8_t configRegs[3];
	uint8_t configRegValues[3] = {Device.CNF3_Reg.value, Device.CNF2_Reg.value, Device.CNF1_Reg.value};
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <MCP25625_Init+0xc8>)
 8005224:	7b5b      	ldrb	r3, [r3, #13]
 8005226:	733b      	strb	r3, [r7, #12]
 8005228:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <MCP25625_Init+0xc8>)
 800522a:	7b1b      	ldrb	r3, [r3, #12]
 800522c:	737b      	strb	r3, [r7, #13]
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <MCP25625_Init+0xc8>)
 8005230:	7adb      	ldrb	r3, [r3, #11]
 8005232:	73bb      	strb	r3, [r7, #14]
	WriteRegisterData(CNF3_REG, configRegValues, sizeof(configRegValues));
 8005234:	f107 030c 	add.w	r3, r7, #12
 8005238:	2203      	movs	r2, #3
 800523a:	4619      	mov	r1, r3
 800523c:	2028      	movs	r0, #40	; 0x28
 800523e:	f000 fa39 	bl	80056b4 <WriteRegisterData>
	ReadRegisterData(CNF3_REG, configRegs, sizeof(configRegs));
 8005242:	f107 0310 	add.w	r3, r7, #16
 8005246:	2203      	movs	r2, #3
 8005248:	4619      	mov	r1, r3
 800524a:	2028      	movs	r0, #40	; 0x28
 800524c:	f000 f9b8 	bl	80055c0 <ReadRegisterData>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8005250:	2300      	movs	r3, #0
 8005252:	75fb      	strb	r3, [r7, #23]
 8005254:	e010      	b.n	8005278 <MCP25625_Init+0x8c>
		if(configRegs[i] != configRegValues[i])
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	3318      	adds	r3, #24
 800525a:	443b      	add	r3, r7
 800525c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	3318      	adds	r3, #24
 8005264:	443b      	add	r3, r7
 8005266:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800526a:	429a      	cmp	r2, r3
 800526c:	d001      	beq.n	8005272 <MCP25625_Init+0x86>
			return mcp25625_configError;
 800526e:	2302      	movs	r3, #2
 8005270:	e01c      	b.n	80052ac <MCP25625_Init+0xc0>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	3301      	adds	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d9eb      	bls.n	8005256 <MCP25625_Init+0x6a>

	WriteRegisterData(CANCTRL_REG, &Device.CANCTRL_Reg.value, sizeof(Device.CANCTRL_Reg.value));
 800527e:	2201      	movs	r2, #1
 8005280:	490d      	ldr	r1, [pc, #52]	; (80052b8 <MCP25625_Init+0xcc>)
 8005282:	200f      	movs	r0, #15
 8005284:	f000 fa16 	bl	80056b4 <WriteRegisterData>
	ReadRegisterData(CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8005288:	f107 0316 	add.w	r3, r7, #22
 800528c:	2201      	movs	r2, #1
 800528e:	4619      	mov	r1, r3
 8005290:	200f      	movs	r0, #15
 8005292:	f000 f995 	bl	80055c0 <ReadRegisterData>
	if(canCtrlReg != Device.CANCTRL_Reg.value)
 8005296:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <MCP25625_Init+0xc8>)
 8005298:	7a9a      	ldrb	r2, [r3, #10]
 800529a:	7dbb      	ldrb	r3, [r7, #22]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <MCP25625_Init+0xb8>
		return mcp25625_canCtrlError;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e003      	b.n	80052ac <MCP25625_Init+0xc0>

	Device.isInit = 1;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <MCP25625_Init+0xc8>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	739a      	strb	r2, [r3, #14]

	return mcp25625_noError;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	20000420 	.word	0x20000420
 80052b8:	2000042a 	.word	0x2000042a

080052bc <MCP25625_LoadTxBufferAtSIDH>:

	return 1;
}

uint8_t MCP25625_LoadTxBufferAtSIDH(uint16_t id, uint8_t *data, uint8_t dataLength)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	80fb      	strh	r3, [r7, #6]
 80052c8:	4613      	mov	r3, r2
 80052ca:	717b      	strb	r3, [r7, #5]
	if(!Device.isInit)
 80052cc:	4b5b      	ldr	r3, [pc, #364]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 80052ce:	7b9b      	ldrb	r3, [r3, #14]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d100      	bne.n	80052d6 <MCP25625_LoadTxBufferAtSIDH+0x1a>
		__NOP(); // add assert??
 80052d4:	bf00      	nop

	uint8_t rtsTx = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	77fb      	strb	r3, [r7, #31]
	uint8_t txbxDataAddress = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	77bb      	strb	r3, [r7, #30]
	uint8_t status = ReadStatus();
 80052de:	f000 fae7 	bl	80058b0 <ReadStatus>
 80052e2:	4603      	mov	r3, r0
 80052e4:	76fb      	strb	r3, [r7, #27]
	if(!(status & TX2REQ_STATUS_MASK))
 80052e6:	7efb      	ldrb	r3, [r7, #27]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <MCP25625_LoadTxBufferAtSIDH+0x3e>
	{
		rtsTx = RTS_T2;
 80052f0:	2384      	movs	r3, #132	; 0x84
 80052f2:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_2_AT_SIDH;
 80052f4:	2344      	movs	r3, #68	; 0x44
 80052f6:	77bb      	strb	r3, [r7, #30]
 80052f8:	e012      	b.n	8005320 <MCP25625_LoadTxBufferAtSIDH+0x64>
	}
	else if(!(status & TX1REQ_STATUS_MASK))
 80052fa:	7efb      	ldrb	r3, [r7, #27]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <MCP25625_LoadTxBufferAtSIDH+0x52>
	{
		rtsTx = RTS_T1;
 8005304:	2382      	movs	r3, #130	; 0x82
 8005306:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_1_AT_SIDH;
 8005308:	2342      	movs	r3, #66	; 0x42
 800530a:	77bb      	strb	r3, [r7, #30]
 800530c:	e008      	b.n	8005320 <MCP25625_LoadTxBufferAtSIDH+0x64>
	}
	else if(!(status & TX0REQ_STATUS_MASK))
 800530e:	7efb      	ldrb	r3, [r7, #27]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <MCP25625_LoadTxBufferAtSIDH+0x64>
	{
		rtsTx = RTS_T0;
 8005318:	2381      	movs	r3, #129	; 0x81
 800531a:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_0_AT_SIDH;
 800531c:	2340      	movs	r3, #64	; 0x40
 800531e:	77bb      	strb	r3, [r7, #30]
	}

	if(txbxDataAddress)
 8005320:	7fbb      	ldrb	r3, [r7, #30]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8085 	beq.w	8005432 <MCP25625_LoadTxBufferAtSIDH+0x176>
	{
		MCP25625_TXBx_t TXBx;
		memset(&TXBx, 0, sizeof(TXBx));
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	220d      	movs	r2, #13
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f002 f987 	bl	8007644 <memset>
		TXBx.Struct.TXBxSIDH_Reg = id >> 3;
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	08db      	lsrs	r3, r3, #3
 800533a:	b29b      	uxth	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	733b      	strb	r3, [r7, #12]
		TXBx.Struct.TXBxSIDL_Reg.Bits.EXIDE = transmitStandardId;
 8005340:	7b7b      	ldrb	r3, [r7, #13]
 8005342:	f36f 03c3 	bfc	r3, #3, #1
 8005346:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxSIDL_Reg.Bits.SID = id & 0x07;
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b2da      	uxtb	r2, r3
 8005350:	7b7b      	ldrb	r3, [r7, #13]
 8005352:	f362 1347 	bfi	r3, r2, #5, #3
 8005356:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxDLC_Reg.Bits.DLC = dataLength;
 8005358:	797b      	ldrb	r3, [r7, #5]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	b2da      	uxtb	r2, r3
 8005360:	7c3b      	ldrb	r3, [r7, #16]
 8005362:	f362 0303 	bfi	r3, r2, #0, #4
 8005366:	743b      	strb	r3, [r7, #16]
		for(uint8_t i = 0; i < dataLength; i++)
 8005368:	2300      	movs	r3, #0
 800536a:	777b      	strb	r3, [r7, #29]
 800536c:	e00b      	b.n	8005386 <MCP25625_LoadTxBufferAtSIDH+0xca>
			TXBx.Struct.TXBxDn_Reg[i] = data[i];
 800536e:	7f7b      	ldrb	r3, [r7, #29]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	441a      	add	r2, r3
 8005374:	7f7b      	ldrb	r3, [r7, #29]
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	3320      	adds	r3, #32
 800537a:	443b      	add	r3, r7
 800537c:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for(uint8_t i = 0; i < dataLength; i++)
 8005380:	7f7b      	ldrb	r3, [r7, #29]
 8005382:	3301      	adds	r3, #1
 8005384:	777b      	strb	r3, [r7, #29]
 8005386:	7f7a      	ldrb	r2, [r7, #29]
 8005388:	797b      	ldrb	r3, [r7, #5]
 800538a:	429a      	cmp	r2, r3
 800538c:	d3ef      	bcc.n	800536e <MCP25625_LoadTxBufferAtSIDH+0xb2>

		SetChipSelect();
 800538e:	f000 fad9 	bl	8005944 <SetChipSelect>

		while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 8005392:	bf00      	nop
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fee6 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f7      	beq.n	8005394 <MCP25625_LoadTxBufferAtSIDH+0xd8>
		LL_SPI_TransmitData8(Device.SPIx, txbxDataAddress);
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	7fba      	ldrb	r2, [r7, #30]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff ff0b 	bl	80051c8 <LL_SPI_TransmitData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 80053b2:	797b      	ldrb	r3, [r7, #5]
 80053b4:	3305      	adds	r3, #5
 80053b6:	76bb      	strb	r3, [r7, #26]
		for(uint8_t i = 0; i < nBytes; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	773b      	strb	r3, [r7, #28]
 80053bc:	e016      	b.n	80053ec <MCP25625_LoadTxBufferAtSIDH+0x130>
		{
			while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80053be:	bf00      	nop
 80053c0:	4b1e      	ldr	r3, [pc, #120]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fed0 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f7      	beq.n	80053c0 <MCP25625_LoadTxBufferAtSIDH+0x104>
			LL_SPI_TransmitData8(Device.SPIx, TXBx.array[i]);
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	7f3b      	ldrb	r3, [r7, #28]
 80053d6:	3320      	adds	r3, #32
 80053d8:	443b      	add	r3, r7
 80053da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f7ff fef1 	bl	80051c8 <LL_SPI_TransmitData8>
		for(uint8_t i = 0; i < nBytes; i++)
 80053e6:	7f3b      	ldrb	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	773b      	strb	r3, [r7, #28]
 80053ec:	7f3a      	ldrb	r2, [r7, #28]
 80053ee:	7ebb      	ldrb	r3, [r7, #26]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d3e4      	bcc.n	80053be <MCP25625_LoadTxBufferAtSIDH+0x102>
		}

		while(LL_SPI_GetTxFIFOLevel(Device.SPIx));
 80053f4:	bf00      	nop
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fec8 	bl	8005190 <LL_SPI_GetTxFIFOLevel>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f7      	bne.n	80053f6 <MCP25625_LoadTxBufferAtSIDH+0x13a>
		ClearChipSelect();
 8005406:	f000 faab 	bl	8005960 <ClearChipSelect>

		while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 800540a:	e004      	b.n	8005416 <MCP25625_LoadTxBufferAtSIDH+0x15a>
			LL_SPI_ReceiveData8(Device.SPIx);
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fecb 	bl	80051ac <LL_SPI_ReceiveData8>
		while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <MCP25625_LoadTxBufferAtSIDH+0x180>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fe92 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f2      	bne.n	800540c <MCP25625_LoadTxBufferAtSIDH+0x150>

		RequestToSend(rtsTx);
 8005426:	7ffb      	ldrb	r3, [r7, #31]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fa09 	bl	8005840 <RequestToSend>

		return 0;
 800542e:	2300      	movs	r3, #0
 8005430:	e000      	b.n	8005434 <MCP25625_LoadTxBufferAtSIDH+0x178>
	}

	return 1;
 8005432:	2301      	movs	r3, #1
}
 8005434:	4618      	mov	r0, r3
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000420 	.word	0x20000420

08005440 <MCP25625_ReadRxBufferAtSIDH>:

	return 1;
}

uint8_t MCP25625_ReadRxBufferAtSIDH(MCP25625_RXBx_t *RXBx, uint8_t dataLength)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
	if(!Device.isInit)
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 800544e:	7b9b      	ldrb	r3, [r3, #14]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d100      	bne.n	8005456 <MCP25625_ReadRxBufferAtSIDH+0x16>
		__NOP(); // add assert??
 8005454:	bf00      	nop

	uint8_t rxbxSIDH_Address = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
	uint8_t status = ReadStatus();
 800545a:	f000 fa29 	bl	80058b0 <ReadStatus>
 800545e:	4603      	mov	r3, r0
 8005460:	737b      	strb	r3, [r7, #13]
	if(status & RX0IF_STATUS_MASK)
 8005462:	7b7b      	ldrb	r3, [r7, #13]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <MCP25625_ReadRxBufferAtSIDH+0x32>
		rxbxSIDH_Address = READ_RX_BUFFER_0_AT_SIDH;
 800546c:	2390      	movs	r3, #144	; 0x90
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e006      	b.n	8005480 <MCP25625_ReadRxBufferAtSIDH+0x40>
	else if(status & RX1IF_STATUS_MASK)
 8005472:	7b7b      	ldrb	r3, [r7, #13]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <MCP25625_ReadRxBufferAtSIDH+0x40>
		rxbxSIDH_Address = READ_RX_BUFFER_1_AT_SIDH;
 800547c:	2394      	movs	r3, #148	; 0x94
 800547e:	73fb      	strb	r3, [r7, #15]

	if(rxbxSIDH_Address)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d052      	beq.n	800552c <MCP25625_ReadRxBufferAtSIDH+0xec>
	{
		SetChipSelect();
 8005486:	f000 fa5d 	bl	8005944 <SetChipSelect>

		while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 800548a:	bf00      	nop
 800548c:	4b2a      	ldr	r3, [pc, #168]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe6a 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f7      	beq.n	800548c <MCP25625_ReadRxBufferAtSIDH+0x4c>
		LL_SPI_TransmitData8(Device.SPIx, rxbxSIDH_Address);
 800549c:	4b26      	ldr	r3, [pc, #152]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fe8f 	bl	80051c8 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 80054aa:	bf00      	nop
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fe47 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f7      	beq.n	80054ac <MCP25625_ReadRxBufferAtSIDH+0x6c>
		LL_SPI_ReceiveData8(Device.SPIx);
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fe73 	bl	80051ac <LL_SPI_ReceiveData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	3305      	adds	r3, #5
 80054ca:	733b      	strb	r3, [r7, #12]
		for(uint8_t i = 0; i < nBytes; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	73bb      	strb	r3, [r7, #14]
 80054d0:	e024      	b.n	800551c <MCP25625_ReadRxBufferAtSIDH+0xdc>
		{
			while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80054d2:	bf00      	nop
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe46 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f7      	beq.n	80054d4 <MCP25625_ReadRxBufferAtSIDH+0x94>
			LL_SPI_TransmitData8(Device.SPIx, 0);
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fe6c 	bl	80051c8 <LL_SPI_TransmitData8>
			while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 80054f0:	bf00      	nop
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fe24 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f7      	beq.n	80054f2 <MCP25625_ReadRxBufferAtSIDH+0xb2>
			RXBx->array[i] = LL_SPI_ReceiveData8(Device.SPIx);
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <MCP25625_ReadRxBufferAtSIDH+0xf8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	7bbc      	ldrb	r4, [r7, #14]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fe4f 	bl	80051ac <LL_SPI_ReceiveData8>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < nBytes; i++)
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	3301      	adds	r3, #1
 800551a:	73bb      	strb	r3, [r7, #14]
 800551c:	7bba      	ldrb	r2, [r7, #14]
 800551e:	7b3b      	ldrb	r3, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d3d6      	bcc.n	80054d2 <MCP25625_ReadRxBufferAtSIDH+0x92>
		}

		ClearChipSelect();
 8005524:	f000 fa1c 	bl	8005960 <ClearChipSelect>

		return 0;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <MCP25625_ReadRxBufferAtSIDH+0xee>
	}

	return 1;
 800552c:	2301      	movs	r3, #1
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	20000420 	.word	0x20000420

0800553c <InitRXBx>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void InitRXBx(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
	// Set RXBx to receive any message
	ModifyRegisterBits(RXB0CTRL_REG, 0b01100000, 0b01100000);
 8005540:	2260      	movs	r2, #96	; 0x60
 8005542:	2160      	movs	r1, #96	; 0x60
 8005544:	2060      	movs	r0, #96	; 0x60
 8005546:	f000 f911 	bl	800576c <ModifyRegisterBits>
	ModifyRegisterBits(RXB1CTRL_REG, 0b01100000, 0b01100000);
 800554a:	2260      	movs	r2, #96	; 0x60
 800554c:	2160      	movs	r1, #96	; 0x60
 800554e:	2070      	movs	r0, #112	; 0x70
 8005550:	f000 f90c 	bl	800576c <ModifyRegisterBits>
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}

08005558 <ResetDevice>:

static void ResetDevice(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	SetChipSelect();
 800555c:	f000 f9f2 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 8005560:	bf00      	nop
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <ResetDevice+0x64>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fdff 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f7      	beq.n	8005562 <ResetDevice+0xa>
	LL_SPI_TransmitData8(Device.SPIx, RESET);
 8005572:	4b12      	ldr	r3, [pc, #72]	; (80055bc <ResetDevice+0x64>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	21c0      	movs	r1, #192	; 0xc0
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fe25 	bl	80051c8 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device.SPIx));
 800557e:	bf00      	nop
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <ResetDevice+0x64>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff fe03 	bl	8005190 <LL_SPI_GetTxFIFOLevel>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f7      	bne.n	8005580 <ResetDevice+0x28>
	ClearChipSelect();
 8005590:	f000 f9e6 	bl	8005960 <ClearChipSelect>

	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005594:	e004      	b.n	80055a0 <ResetDevice+0x48>
		LL_SPI_ReceiveData8(Device.SPIx);
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <ResetDevice+0x64>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fe06 	bl	80051ac <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <ResetDevice+0x64>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fdcd 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f2      	bne.n	8005596 <ResetDevice+0x3e>

	LL_mDelay(1);	// Minimum 2 us required (t_RL), usdelay()??
 80055b0:	2001      	movs	r0, #1
 80055b2:	f001 ffdd 	bl	8007570 <LL_mDelay>
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000420 	.word	0x20000420

080055c0 <ReadRegisterData>:

static void ReadRegisterData(uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
 80055cc:	4613      	mov	r3, r2
 80055ce:	71bb      	strb	r3, [r7, #6]
	SetChipSelect();
 80055d0:	f000 f9b8 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80055d4:	bf00      	nop
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <ReadRegisterData+0xf0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fdc5 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f7      	beq.n	80055d6 <ReadRegisterData+0x16>
	LL_SPI_TransmitData8(Device.SPIx, READ);
 80055e6:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <ReadRegisterData+0xf0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2103      	movs	r1, #3
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fdeb 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 80055f2:	bf00      	nop
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <ReadRegisterData+0xf0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fda3 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f7      	beq.n	80055f4 <ReadRegisterData+0x34>
	LL_SPI_ReceiveData8(Device.SPIx);
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <ReadRegisterData+0xf0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fdcf 	bl	80051ac <LL_SPI_ReceiveData8>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 800560e:	bf00      	nop
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <ReadRegisterData+0xf0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fda8 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f7      	beq.n	8005610 <ReadRegisterData+0x50>
	LL_SPI_TransmitData8(Device.SPIx, startReg);
 8005620:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <ReadRegisterData+0xf0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	79fa      	ldrb	r2, [r7, #7]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fdcd 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 800562e:	bf00      	nop
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <ReadRegisterData+0xf0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fd85 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f7      	beq.n	8005630 <ReadRegisterData+0x70>
	LL_SPI_ReceiveData8(Device.SPIx);
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <ReadRegisterData+0xf0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fdb1 	bl	80051ac <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < nDataBytes; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e024      	b.n	800569a <ReadRegisterData+0xda>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 8005650:	bf00      	nop
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <ReadRegisterData+0xf0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fd87 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f7      	beq.n	8005652 <ReadRegisterData+0x92>
		LL_SPI_TransmitData8(Device.SPIx, 0);
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <ReadRegisterData+0xf0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fdad 	bl	80051c8 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 800566e:	bf00      	nop
 8005670:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <ReadRegisterData+0xf0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fd65 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f7      	beq.n	8005670 <ReadRegisterData+0xb0>
		data[i] = LL_SPI_ReceiveData8(Device.SPIx);
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <ReadRegisterData+0xf0>)
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	18d4      	adds	r4, r2, r3
 800568a:	4608      	mov	r0, r1
 800568c:	f7ff fd8e 	bl	80051ac <LL_SPI_ReceiveData8>
 8005690:	4603      	mov	r3, r0
 8005692:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nDataBytes; i++)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	3301      	adds	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
 800569a:	7bfa      	ldrb	r2, [r7, #15]
 800569c:	79bb      	ldrb	r3, [r7, #6]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3d6      	bcc.n	8005650 <ReadRegisterData+0x90>
	}

	ClearChipSelect();
 80056a2:	f000 f95d 	bl	8005960 <ClearChipSelect>
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000420 	.word	0x20000420

080056b4 <WriteRegisterData>:

static void WriteRegisterData(uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	6039      	str	r1, [r7, #0]
 80056be:	71fb      	strb	r3, [r7, #7]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71bb      	strb	r3, [r7, #6]
	SetChipSelect();
 80056c4:	f000 f93e 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80056c8:	bf00      	nop
 80056ca:	4b27      	ldr	r3, [pc, #156]	; (8005768 <WriteRegisterData+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fd4b 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f7      	beq.n	80056ca <WriteRegisterData+0x16>
	LL_SPI_TransmitData8(Device.SPIx, WRITE);
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <WriteRegisterData+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fd71 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80056e6:	bf00      	nop
 80056e8:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <WriteRegisterData+0xb4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fd3c 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f7      	beq.n	80056e8 <WriteRegisterData+0x34>
	LL_SPI_TransmitData8(Device.SPIx, startReg);
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <WriteRegisterData+0xb4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	79fa      	ldrb	r2, [r7, #7]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fd61 	bl	80051c8 <LL_SPI_TransmitData8>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
 800570a:	e00b      	b.n	8005724 <WriteRegisterData+0x70>
		LL_SPI_TransmitData8(Device.SPIx, data[i]);
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <WriteRegisterData+0xb4>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	4619      	mov	r1, r3
 800571a:	f7ff fd55 	bl	80051c8 <LL_SPI_TransmitData8>
	for(uint8_t i = 0; i < nDataBytes; i++)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	3301      	adds	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	79bb      	ldrb	r3, [r7, #6]
 8005728:	429a      	cmp	r2, r3
 800572a:	d3ef      	bcc.n	800570c <WriteRegisterData+0x58>

	while(LL_SPI_GetTxFIFOLevel(Device.SPIx));
 800572c:	bf00      	nop
 800572e:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <WriteRegisterData+0xb4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fd2c 	bl	8005190 <LL_SPI_GetTxFIFOLevel>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f7      	bne.n	800572e <WriteRegisterData+0x7a>
	ClearChipSelect();
 800573e:	f000 f90f 	bl	8005960 <ClearChipSelect>

	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005742:	e004      	b.n	800574e <WriteRegisterData+0x9a>
		LL_SPI_ReceiveData8(Device.SPIx);
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <WriteRegisterData+0xb4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fd2f 	bl	80051ac <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <WriteRegisterData+0xb4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fcf6 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f2      	bne.n	8005744 <WriteRegisterData+0x90>
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000420 	.word	0x20000420

0800576c <ModifyRegisterBits>:

static void ModifyRegisterBits(uint8_t reg, uint8_t mask, uint8_t data)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
 8005776:	460b      	mov	r3, r1
 8005778:	71bb      	strb	r3, [r7, #6]
 800577a:	4613      	mov	r3, r2
 800577c:	717b      	strb	r3, [r7, #5]
	SetChipSelect();
 800577e:	f000 f8e1 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 8005782:	bf00      	nop
 8005784:	4b2d      	ldr	r3, [pc, #180]	; (800583c <ModifyRegisterBits+0xd0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fcee 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f7      	beq.n	8005784 <ModifyRegisterBits+0x18>
	LL_SPI_TransmitData8(Device.SPIx, BIT_MODIFY);
 8005794:	4b29      	ldr	r3, [pc, #164]	; (800583c <ModifyRegisterBits+0xd0>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2105      	movs	r1, #5
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fd14 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80057a0:	bf00      	nop
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <ModifyRegisterBits+0xd0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fcdf 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f7      	beq.n	80057a2 <ModifyRegisterBits+0x36>
	LL_SPI_TransmitData8(Device.SPIx, reg);
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <ModifyRegisterBits+0xd0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	79fa      	ldrb	r2, [r7, #7]
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fd04 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80057c0:	bf00      	nop
 80057c2:	4b1e      	ldr	r3, [pc, #120]	; (800583c <ModifyRegisterBits+0xd0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fccf 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f7      	beq.n	80057c2 <ModifyRegisterBits+0x56>
	LL_SPI_TransmitData8(Device.SPIx, mask);
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <ModifyRegisterBits+0xd0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	79ba      	ldrb	r2, [r7, #6]
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fcf4 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80057e0:	bf00      	nop
 80057e2:	4b16      	ldr	r3, [pc, #88]	; (800583c <ModifyRegisterBits+0xd0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fcbf 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f7      	beq.n	80057e2 <ModifyRegisterBits+0x76>
	LL_SPI_TransmitData8(Device.SPIx, data);
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <ModifyRegisterBits+0xd0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	797a      	ldrb	r2, [r7, #5]
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fce4 	bl	80051c8 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device.SPIx));
 8005800:	bf00      	nop
 8005802:	4b0e      	ldr	r3, [pc, #56]	; (800583c <ModifyRegisterBits+0xd0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fcc2 	bl	8005190 <LL_SPI_GetTxFIFOLevel>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f7      	bne.n	8005802 <ModifyRegisterBits+0x96>
	ClearChipSelect();
 8005812:	f000 f8a5 	bl	8005960 <ClearChipSelect>

	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005816:	e004      	b.n	8005822 <ModifyRegisterBits+0xb6>
		LL_SPI_ReceiveData8(Device.SPIx);
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <ModifyRegisterBits+0xd0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fcc5 	bl	80051ac <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <ModifyRegisterBits+0xd0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fc8c 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f2      	bne.n	8005818 <ModifyRegisterBits+0xac>
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000420 	.word	0x20000420

08005840 <RequestToSend>:

static void RequestToSend(uint8_t RTS_Tx)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
	SetChipSelect();
 800584a:	f000 f87b 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 800584e:	bf00      	nop
 8005850:	4b16      	ldr	r3, [pc, #88]	; (80058ac <RequestToSend+0x6c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fc88 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f7      	beq.n	8005850 <RequestToSend+0x10>
	LL_SPI_TransmitData8(Device.SPIx, RTS_Tx);
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <RequestToSend+0x6c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	79fa      	ldrb	r2, [r7, #7]
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fcad 	bl	80051c8 <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device.SPIx));
 800586e:	bf00      	nop
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <RequestToSend+0x6c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fc8b 	bl	8005190 <LL_SPI_GetTxFIFOLevel>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f7      	bne.n	8005870 <RequestToSend+0x30>
	ClearChipSelect();
 8005880:	f000 f86e 	bl	8005960 <ClearChipSelect>

	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005884:	e004      	b.n	8005890 <RequestToSend+0x50>
		LL_SPI_ReceiveData8(Device.SPIx);
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <RequestToSend+0x6c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fc8e 	bl	80051ac <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device.SPIx))
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <RequestToSend+0x6c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fc55 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f2      	bne.n	8005886 <RequestToSend+0x46>
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000420 	.word	0x20000420

080058b0 <ReadStatus>:

static uint8_t ReadStatus(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
	SetChipSelect();
 80058b6:	f000 f845 	bl	8005944 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80058ba:	bf00      	nop
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <ReadStatus+0x90>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fc52 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f7      	beq.n	80058bc <ReadStatus+0xc>
	LL_SPI_TransmitData8(Device.SPIx, READ_STATUS);
 80058cc:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <ReadStatus+0x90>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	21a0      	movs	r1, #160	; 0xa0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fc78 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 80058d8:	bf00      	nop
 80058da:	4b19      	ldr	r3, [pc, #100]	; (8005940 <ReadStatus+0x90>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc30 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f7      	beq.n	80058da <ReadStatus+0x2a>
	LL_SPI_ReceiveData8(Device.SPIx);
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <ReadStatus+0x90>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fc5c 	bl	80051ac <LL_SPI_ReceiveData8>

	while(!(LL_SPI_IsActiveFlag_TXE(Device.SPIx)));
 80058f4:	bf00      	nop
 80058f6:	4b12      	ldr	r3, [pc, #72]	; (8005940 <ReadStatus+0x90>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fc35 	bl	800516a <LL_SPI_IsActiveFlag_TXE>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f7      	beq.n	80058f6 <ReadStatus+0x46>
	LL_SPI_TransmitData8(Device.SPIx, 0);
 8005906:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <ReadStatus+0x90>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2100      	movs	r1, #0
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fc5b 	bl	80051c8 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device.SPIx)));
 8005912:	bf00      	nop
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <ReadStatus+0x90>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc13 	bl	8005144 <LL_SPI_IsActiveFlag_RXNE>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f7      	beq.n	8005914 <ReadStatus+0x64>
	uint8_t status = LL_SPI_ReceiveData8(Device.SPIx);
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <ReadStatus+0x90>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fc3f 	bl	80051ac <LL_SPI_ReceiveData8>
 800592e:	4603      	mov	r3, r0
 8005930:	71fb      	strb	r3, [r7, #7]

	ClearChipSelect();
 8005932:	f000 f815 	bl	8005960 <ClearChipSelect>

	return status;
 8005936:	79fb      	ldrb	r3, [r7, #7]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000420 	.word	0x20000420

08005944 <SetChipSelect>:

static inline void SetChipSelect(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(Device.CS_Port, Device.csPin);
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <SetChipSelect+0x18>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <SetChipSelect+0x18>)
 800594e:	8912      	ldrh	r2, [r2, #8]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fbe8 	bl	8005128 <LL_GPIO_ResetOutputPin>
}
 8005958:	bf00      	nop
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000420 	.word	0x20000420

08005960 <ClearChipSelect>:

static inline void ClearChipSelect(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Device.CS_Port, Device.csPin);
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <ClearChipSelect+0x18>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a03      	ldr	r2, [pc, #12]	; (8005978 <ClearChipSelect+0x18>)
 800596a:	8912      	ldrh	r2, [r2, #8]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fbcc 	bl	800510c <LL_GPIO_SetOutputPin>
}
 8005974:	bf00      	nop
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000420 	.word	0x20000420

0800597c <LL_SPI_IsActiveFlag_RXNE>:
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_SPI_IsActiveFlag_TXE>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d101      	bne.n	80059ba <LL_SPI_IsActiveFlag_TXE+0x18>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <LL_SPI_IsActiveFlag_TXE+0x1a>
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_SPI_ReceiveData8>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	330c      	adds	r3, #12
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	b2db      	uxtb	r3, r3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <LL_SPI_TransmitData8>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	330c      	adds	r3, #12
 80059f4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	701a      	strb	r2, [r3, #0]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <LL_GPIO_SetOutputPin>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	619a      	str	r2, [r3, #24]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_GPIO_ResetOutputPin>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(SPI_TypeDef *spix, GPIO_TypeDef *cs_gpiox, uint16_t cs_pinx)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
	uint8_t whoAmI;

	mpu925x.spiHandle = spix;
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <MPU925x_Init+0x48>)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6013      	str	r3, [r2, #0]
	mpu925x.CS_GPIOx = cs_gpiox;
 8005a54:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <MPU925x_Init+0x48>)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6053      	str	r3, [r2, #4]
	mpu925x.CS_Pin = cs_pinx;
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <MPU925x_Init+0x48>)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	8113      	strh	r3, [r2, #8]

	MPU925x_ReadRegs(MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 8005a60:	f107 0317 	add.w	r3, r7, #23
 8005a64:	2201      	movs	r2, #1
 8005a66:	4619      	mov	r1, r3
 8005a68:	2075      	movs	r0, #117	; 0x75
 8005a6a:	f000 fa23 	bl	8005eb4 <MPU925x_ReadRegs>

	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	2b71      	cmp	r3, #113	; 0x71
 8005a72:	d004      	beq.n	8005a7e <MPU925x_Init+0x3e>
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b73      	cmp	r3, #115	; 0x73
 8005a78:	d001      	beq.n	8005a7e <MPU925x_Init+0x3e>
		return 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <MPU925x_Init+0x40>

	return 0;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000430 	.word	0x20000430

08005a8c <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(MPU925x_AccelSensitivity_t option)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d86d      	bhi.n	8005b78 <MPU925x_SetAccelSensitivity+0xec>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <MPU925x_SetAccelSensitivity+0x18>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	08005b17 	.word	0x08005b17
 8005ab0:	08005b4d 	.word	0x08005b4d
	{
	case mpu925x_accelSensitivity_2g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005ab4:	f107 030f 	add.w	r3, r7, #15
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4619      	mov	r1, r3
 8005abc:	201c      	movs	r0, #28
 8005abe:	f000 f9f9 	bl	8005eb4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	f023 0318 	bic.w	r3, r3, #24
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	201c      	movs	r0, #28
 8005ad2:	f000 f999 	bl	8005e08 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <MPU925x_SetAccelSensitivity+0xf4>)
 8005ad8:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005adc:	601a      	str	r2, [r3, #0]
		break;
 8005ade:	e04b      	b.n	8005b78 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_4g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005ae0:	f107 030f 	add.w	r3, r7, #15
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	201c      	movs	r0, #28
 8005aea:	f000 f9e3 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	f023 0318 	bic.w	r3, r3, #24
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	f043 0308 	orr.w	r3, r3, #8
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4619      	mov	r1, r3
 8005b06:	201c      	movs	r0, #28
 8005b08:	f000 f97e 	bl	8005e08 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <MPU925x_SetAccelSensitivity+0xf4>)
 8005b0e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005b12:	601a      	str	r2, [r3, #0]
		break;
 8005b14:	e030      	b.n	8005b78 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_8g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005b16:	f107 030f 	add.w	r3, r7, #15
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	201c      	movs	r0, #28
 8005b20:	f000 f9c8 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f023 0318 	bic.w	r3, r3, #24
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	f043 0310 	orr.w	r3, r3, #16
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	201c      	movs	r0, #28
 8005b3e:	f000 f963 	bl	8005e08 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <MPU925x_SetAccelSensitivity+0xf4>)
 8005b44:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005b48:	601a      	str	r2, [r3, #0]
		break;
 8005b4a:	e015      	b.n	8005b78 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_16g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005b4c:	f107 030f 	add.w	r3, r7, #15
 8005b50:	2201      	movs	r2, #1
 8005b52:	4619      	mov	r1, r3
 8005b54:	201c      	movs	r0, #28
 8005b56:	f000 f9ad 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	f043 0318 	orr.w	r3, r3, #24
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	4619      	mov	r1, r3
 8005b68:	201c      	movs	r0, #28
 8005b6a:	f000 f94d 	bl	8005e08 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <MPU925x_SetAccelSensitivity+0xf4>)
 8005b70:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005b74:	601a      	str	r2, [r3, #0]
		break;
 8005b76:	bf00      	nop
	}
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000010 	.word	0x20000010

08005b84 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(MPU925x_GyroSensitivity_t option)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d869      	bhi.n	8005c68 <MPU925x_SetGyroSensitivity+0xe4>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <MPU925x_SetGyroSensitivity+0x18>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bd7 	.word	0x08005bd7
 8005ba4:	08005c0b 	.word	0x08005c0b
 8005ba8:	08005c3f 	.word	0x08005c3f
	{
	case mpu925x_gyroSensitivity_250dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005bac:	f107 030f 	add.w	r3, r7, #15
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	201b      	movs	r0, #27
 8005bb6:	f000 f97d 	bl	8005eb4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	f023 0318 	bic.w	r3, r3, #24
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	201b      	movs	r0, #27
 8005bca:	f000 f91d 	bl	8005e08 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8005bce:	4b28      	ldr	r3, [pc, #160]	; (8005c70 <MPU925x_SetGyroSensitivity+0xec>)
 8005bd0:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <MPU925x_SetGyroSensitivity+0xf0>)
 8005bd2:	601a      	str	r2, [r3, #0]
		break;
 8005bd4:	e048      	b.n	8005c68 <MPU925x_SetGyroSensitivity+0xe4>

	case mpu925x_gyroSensitivity_500dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005bd6:	f107 030f 	add.w	r3, r7, #15
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4619      	mov	r1, r3
 8005bde:	201b      	movs	r0, #27
 8005be0:	f000 f968 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	f023 0318 	bic.w	r3, r3, #24
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	f043 0308 	orr.w	r3, r3, #8
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	201b      	movs	r0, #27
 8005bfe:	f000 f903 	bl	8005e08 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <MPU925x_SetGyroSensitivity+0xec>)
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <MPU925x_SetGyroSensitivity+0xf4>)
 8005c06:	601a      	str	r2, [r3, #0]
		break;
 8005c08:	e02e      	b.n	8005c68 <MPU925x_SetGyroSensitivity+0xe4>

	case mpu925x_gyroSensitivity_1000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005c0a:	f107 030f 	add.w	r3, r7, #15
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4619      	mov	r1, r3
 8005c12:	201b      	movs	r0, #27
 8005c14:	f000 f94e 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f023 0318 	bic.w	r3, r3, #24
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f043 0310 	orr.w	r3, r3, #16
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	201b      	movs	r0, #27
 8005c32:	f000 f8e9 	bl	8005e08 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <MPU925x_SetGyroSensitivity+0xec>)
 8005c38:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <MPU925x_SetGyroSensitivity+0xf8>)
 8005c3a:	601a      	str	r2, [r3, #0]
		break;
 8005c3c:	e014      	b.n	8005c68 <MPU925x_SetGyroSensitivity+0xe4>

	case mpu925x_gyroSensitivity_2000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005c3e:	f107 030f 	add.w	r3, r7, #15
 8005c42:	2201      	movs	r2, #1
 8005c44:	4619      	mov	r1, r3
 8005c46:	201b      	movs	r0, #27
 8005c48:	f000 f934 	bl	8005eb4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	f043 0318 	orr.w	r3, r3, #24
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	201b      	movs	r0, #27
 8005c5c:	f000 f8d4 	bl	8005e08 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <MPU925x_SetGyroSensitivity+0xec>)
 8005c62:	4a07      	ldr	r2, [pc, #28]	; (8005c80 <MPU925x_SetGyroSensitivity+0xfc>)
 8005c64:	601a      	str	r2, [r3, #0]
		break;
 8005c66:	bf00      	nop
	}
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000014 	.word	0x20000014
 8005c74:	43030000 	.word	0x43030000
 8005c78:	42830000 	.word	0x42830000
 8005c7c:	42033333 	.word	0x42033333
 8005c80:	41833333 	.word	0x41833333

08005c84 <MPU925x_ReadIMU>:
{
	MPU925x_WriteReg(MPU925X_REG_SMPLRT_DIV, divider);
}

MPU925x_IMUData_t MPU925x_ReadIMU(void)
{
 8005c84:	b5b0      	push	{r4, r5, r7, lr}
 8005c86:	b096      	sub	sp, #88	; 0x58
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	MPU925x_IMUData_t IMUData;
	uint8_t data[14];

	MPU925x_ReadRegs(MPU925X_REG_ACCEL_XOUT_H, data, 14);
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	220e      	movs	r2, #14
 8005c92:	4619      	mov	r1, r3
 8005c94:	203b      	movs	r0, #59	; 0x3b
 8005c96:	f000 f90d 	bl	8005eb4 <MPU925x_ReadRegs>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8005c9a:	7a3b      	ldrb	r3, [r7, #8]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b21a      	sxth	r2, r3
 8005ca0:	7a7b      	ldrb	r3, [r7, #9]
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8005caa:	7abb      	ldrb	r3, [r7, #10]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	b21a      	sxth	r2, r3
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	b21b      	sxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8005cba:	7b3b      	ldrb	r3, [r7, #12]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	b21a      	sxth	r2, r3
 8005cc0:	7b7b      	ldrb	r3, [r7, #13]
 8005cc2:	b21b      	sxth	r3, r3
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8005cca:	7c3b      	ldrb	r3, [r7, #16]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	b21a      	sxth	r2, r3
 8005cd0:	7c7b      	ldrb	r3, [r7, #17]
 8005cd2:	b21b      	sxth	r3, r3
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8005cda:	7cbb      	ldrb	r3, [r7, #18]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b21a      	sxth	r2, r3
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8005cea:	7d3b      	ldrb	r3, [r7, #20]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	b21a      	sxth	r2, r3
 8005cf0:	7d7b      	ldrb	r3, [r7, #21]
 8005cf2:	b21b      	sxth	r3, r3
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMUData.ax = ax / accelSensitivity;
 8005cfa:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <MPU925x_ReadIMU+0x17c>)
 8005d08:	edd3 7a00 	vldr	s15, [r3]
 8005d0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d10:	ee16 0a90 	vmov	r0, s13
 8005d14:	f7fa fbbc 	bl	8000490 <__aeabi_f2d>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMUData.ay = ay / accelSensitivity;
 8005d20:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2c:	4b34      	ldr	r3, [pc, #208]	; (8005e00 <MPU925x_ReadIMU+0x17c>)
 8005d2e:	edd3 7a00 	vldr	s15, [r3]
 8005d32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d36:	ee16 0a90 	vmov	r0, s13
 8005d3a:	f7fa fba9 	bl	8000490 <__aeabi_f2d>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMUData.az = az / accelSensitivity;
 8005d46:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d52:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <MPU925x_ReadIMU+0x17c>)
 8005d54:	edd3 7a00 	vldr	s15, [r3]
 8005d58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d5c:	ee16 0a90 	vmov	r0, s13
 8005d60:	f7fa fb96 	bl	8000490 <__aeabi_f2d>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMUData.gx = gx / gyroSensitivity;
 8005d6c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8005d70:	ee07 3a90 	vmov	s15, r3
 8005d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d78:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <MPU925x_ReadIMU+0x180>)
 8005d7a:	edd3 7a00 	vldr	s15, [r3]
 8005d7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d82:	ee16 0a90 	vmov	r0, s13
 8005d86:	f7fa fb83 	bl	8000490 <__aeabi_f2d>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMUData.gy = gy / gyroSensitivity;
 8005d92:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d9e:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <MPU925x_ReadIMU+0x180>)
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005da8:	ee16 0a90 	vmov	r0, s13
 8005dac:	f7fa fb70 	bl	8000490 <__aeabi_f2d>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMUData.gz = gz / gyroSensitivity;
 8005db8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <MPU925x_ReadIMU+0x180>)
 8005dc6:	edd3 7a00 	vldr	s15, [r3]
 8005dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005dce:	ee16 0a90 	vmov	r0, s13
 8005dd2:	f7fa fb5d 	bl	8000490 <__aeabi_f2d>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMUData;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	461d      	mov	r5, r3
 8005de2:	f107 0418 	add.w	r4, r7, #24
 8005de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005df2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	3758      	adds	r7, #88	; 0x58
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000010 	.word	0x20000010
 8005e04:	20000014 	.word	0x20000014

08005e08 <MPU925x_WriteReg>:

void MPU925x_WriteReg(uint8_t adress, uint8_t data)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460a      	mov	r2, r1
 8005e12:	71fb      	strb	r3, [r7, #7]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e1e:	8912      	ldrh	r2, [r2, #8]
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fdfe 	bl	8005a24 <LL_GPIO_ResetOutputPin>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8005e28:	bf00      	nop
 8005e2a:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f8      	beq.n	8005e2a <MPU925x_WriteReg+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, adress);
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	79fa      	ldrb	r2, [r7, #7]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fdcf 	bl	80059e4 <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8005e46:	bf00      	nop
 8005e48:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f8      	beq.n	8005e48 <MPU925x_WriteReg+0x40>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8005e56:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fdb4 	bl	80059c8 <LL_SPI_ReceiveData8>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8005e60:	bf00      	nop
 8005e62:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f8      	beq.n	8005e62 <MPU925x_WriteReg+0x5a>
	LL_SPI_TransmitData8(mpu925x.spiHandle, data);
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	79ba      	ldrb	r2, [r7, #6]
 8005e76:	4611      	mov	r1, r2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff fdb3 	bl	80059e4 <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8005e7e:	bf00      	nop
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f8      	beq.n	8005e80 <MPU925x_WriteReg+0x78>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fd98 	bl	80059c8 <LL_SPI_ReceiveData8>

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <MPU925x_WriteReg+0xa8>)
 8005e9e:	8912      	ldrh	r2, [r2, #8]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fdb0 	bl	8005a08 <LL_GPIO_SetOutputPin>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000430 	.word	0x20000430

08005eb4 <MPU925x_ReadRegs>:

void MPU925x_ReadRegs(uint8_t address, uint8_t *data, uint8_t bytes)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8005ec4:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005eca:	8912      	ldrh	r2, [r2, #8]
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fda8 	bl	8005a24 <LL_GPIO_ResetOutputPin>

	while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 8005ed4:	bf00      	nop
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fd61 	bl	80059a2 <LL_SPI_IsActiveFlag_TXE>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f7      	beq.n	8005ed6 <MPU925x_ReadRegs+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, (address | 0x80));
 8005ee6:	4b28      	ldr	r3, [pc, #160]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7ff fd75 	bl	80059e4 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 8005efa:	bf00      	nop
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fd3b 	bl	800597c <LL_SPI_IsActiveFlag_RXNE>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f7      	beq.n	8005efc <MPU925x_ReadRegs+0x48>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);							// Read out bogus data
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fd59 	bl	80059c8 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < bytes; i++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
 8005f1a:	e024      	b.n	8005f66 <MPU925x_ReadRegs+0xb2>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 8005f1c:	bf00      	nop
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fd3d 	bl	80059a2 <LL_SPI_IsActiveFlag_TXE>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f7      	beq.n	8005f1e <MPU925x_ReadRegs+0x6a>
		LL_SPI_TransmitData8(mpu925x.spiHandle, 0x00);				// Send out 8 bits to read 8 more bits
 8005f2e:	4b16      	ldr	r3, [pc, #88]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fd55 	bl	80059e4 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 8005f3a:	bf00      	nop
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fd1b 	bl	800597c <LL_SPI_IsActiveFlag_RXNE>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f7      	beq.n	8005f3c <MPU925x_ReadRegs+0x88>
		data[i] = LL_SPI_ReceiveData8(mpu925x.spiHandle);
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	18d4      	adds	r4, r2, r3
 8005f56:	4608      	mov	r0, r1
 8005f58:	f7ff fd36 	bl	80059c8 <LL_SPI_ReceiveData8>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < bytes; i++)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	3301      	adds	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	79bb      	ldrb	r3, [r7, #6]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d3d6      	bcc.n	8005f1c <MPU925x_ReadRegs+0x68>
	}

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <MPU925x_ReadRegs+0xd4>)
 8005f74:	8912      	ldrh	r2, [r2, #8]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fd45 	bl	8005a08 <LL_GPIO_SetOutputPin>
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd90      	pop	{r4, r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000430 	.word	0x20000430

08005f8c <LL_ADC_REG_SetSequencerLength>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f023 020f 	bic.w	r2, r3, #15
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_ADC_IsEnabled>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <LL_ADC_IsEnabled+0x18>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <LL_ADC_IsEnabled+0x1a>
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005fe6:	481c      	ldr	r0, [pc, #112]	; (8006058 <LL_ADC_CommonInit+0x80>)
 8005fe8:	f7ff ffe3 	bl	8005fb2 <LL_ADC_IsEnabled>
 8005fec:	4604      	mov	r4, r0
 8005fee:	481b      	ldr	r0, [pc, #108]	; (800605c <LL_ADC_CommonInit+0x84>)
 8005ff0:	f7ff ffdf 	bl	8005fb2 <LL_ADC_IsEnabled>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	431c      	orrs	r4, r3
 8005ff8:	4819      	ldr	r0, [pc, #100]	; (8006060 <LL_ADC_CommonInit+0x88>)
 8005ffa:	f7ff ffda 	bl	8005fb2 <LL_ADC_IsEnabled>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4323      	orrs	r3, r4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d120      	bne.n	8006048 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	4b14      	ldr	r3, [pc, #80]	; (8006064 <LL_ADC_CommonInit+0x8c>)
 8006014:	4013      	ands	r3, r2
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6852      	ldr	r2, [r2, #4]
 800601e:	4311      	orrs	r1, r2
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	6892      	ldr	r2, [r2, #8]
 8006024:	4311      	orrs	r1, r2
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	68d2      	ldr	r2, [r2, #12]
 800602a:	430a      	orrs	r2, r1
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	e00b      	b.n	800604c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <LL_ADC_CommonInit+0x8c>)
 800603a:	4013      	ands	r3, r2
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]
 8006046:	e001      	b.n	800604c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}
 8006056:	bf00      	nop
 8006058:	50040000 	.word	0x50040000
 800605c:	50040100 	.word	0x50040100
 8006060:	50040200 	.word	0x50040200
 8006064:	ffc030e0 	.word	0xffc030e0

08006068 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ff9b 	bl	8005fb2 <LL_ADC_IsEnabled>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d111      	bne.n	80060a6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	6811      	ldr	r1, [r2, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	6852      	ldr	r2, [r2, #4]
 8006096:	4311      	orrs	r1, r2
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	6892      	ldr	r2, [r2, #8]
 800609c:	430a      	orrs	r2, r1
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	e001      	b.n	80060aa <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff75 	bl	8005fb2 <LL_ADC_IsEnabled>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d132      	bne.n	8006134 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d015      	beq.n	8006102 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <LL_ADC_REG_Init+0x90>)
 80060dc:	4013      	ands	r3, r2
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	6811      	ldr	r1, [r2, #0]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	6892      	ldr	r2, [r2, #8]
 80060e6:	4311      	orrs	r1, r2
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	68d2      	ldr	r2, [r2, #12]
 80060ec:	4311      	orrs	r1, r2
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	6912      	ldr	r2, [r2, #16]
 80060f2:	4311      	orrs	r1, r2
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	6952      	ldr	r2, [r2, #20]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e011      	b.n	8006126 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <LL_ADC_REG_Init+0x90>)
 8006108:	4013      	ands	r3, r2
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	6811      	ldr	r1, [r2, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	4311      	orrs	r1, r2
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	6912      	ldr	r2, [r2, #16]
 8006118:	4311      	orrs	r1, r2
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	6952      	ldr	r2, [r2, #20]
 800611e:	430a      	orrs	r2, r1
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff2d 	bl	8005f8c <LL_ADC_REG_SetSequencerLength>
 8006132:	e001      	b.n	8006138 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	fff0c03c 	.word	0xfff0c03c

08006148 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <LL_EXTI_EnableIT_0_31+0x20>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <LL_EXTI_EnableIT_0_31+0x20>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40010400 	.word	0x40010400

0800616c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <LL_EXTI_EnableIT_32_63+0x20>)
 8006176:	6a1a      	ldr	r2, [r3, #32]
 8006178:	4904      	ldr	r1, [pc, #16]	; (800618c <LL_EXTI_EnableIT_32_63+0x20>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4313      	orrs	r3, r2
 800617e:	620b      	str	r3, [r1, #32]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	40010400 	.word	0x40010400

08006190 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	43db      	mvns	r3, r3
 80061a0:	4904      	ldr	r1, [pc, #16]	; (80061b4 <LL_EXTI_DisableIT_0_31+0x24>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010400 	.word	0x40010400

080061b8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <LL_EXTI_DisableIT_32_63+0x24>)
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	43db      	mvns	r3, r3
 80061c8:	4904      	ldr	r1, [pc, #16]	; (80061dc <LL_EXTI_DisableIT_32_63+0x24>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	620b      	str	r3, [r1, #32]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010400 	.word	0x40010400

080061e0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <LL_EXTI_EnableEvent_0_31+0x20>)
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4904      	ldr	r1, [pc, #16]	; (8006200 <LL_EXTI_EnableEvent_0_31+0x20>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]

}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40010400 	.word	0x40010400

08006204 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <LL_EXTI_EnableEvent_32_63+0x20>)
 800620e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006210:	4904      	ldr	r1, [pc, #16]	; (8006224 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4313      	orrs	r3, r2
 8006216:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40010400 	.word	0x40010400

08006228 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	43db      	mvns	r3, r3
 8006238:	4904      	ldr	r1, [pc, #16]	; (800624c <LL_EXTI_DisableEvent_0_31+0x24>)
 800623a:	4013      	ands	r3, r2
 800623c:	604b      	str	r3, [r1, #4]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010400 	.word	0x40010400

08006250 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <LL_EXTI_DisableEvent_32_63+0x24>)
 800625a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	43db      	mvns	r3, r3
 8006260:	4904      	ldr	r1, [pc, #16]	; (8006274 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006262:	4013      	ands	r3, r2
 8006264:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010400 	.word	0x40010400

08006278 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	4904      	ldr	r1, [pc, #16]	; (8006298 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]

}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40010400 	.word	0x40010400

0800629c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80062a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a8:	4904      	ldr	r1, [pc, #16]	; (80062bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	628b      	str	r3, [r1, #40]	; 0x28
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40010400 	.word	0x40010400

080062c0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	43db      	mvns	r3, r3
 80062d0:	4904      	ldr	r1, [pc, #16]	; (80062e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]

}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010400 	.word	0x40010400

080062e8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80062f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	4904      	ldr	r1, [pc, #16]	; (800630c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010400 	.word	0x40010400

08006310 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	4904      	ldr	r1, [pc, #16]	; (8006330 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4313      	orrs	r3, r2
 8006322:	60cb      	str	r3, [r1, #12]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40010400 	.word	0x40010400

08006334 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4904      	ldr	r1, [pc, #16]	; (8006354 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4313      	orrs	r3, r2
 8006346:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40010400 	.word	0x40010400

08006358 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	43db      	mvns	r3, r3
 8006368:	4904      	ldr	r1, [pc, #16]	; (800637c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800636a:	4013      	ands	r3, r2
 800636c:	60cb      	str	r3, [r1, #12]
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010400 	.word	0x40010400

08006380 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	43db      	mvns	r3, r3
 8006390:	4904      	ldr	r1, [pc, #16]	; (80063a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006392:	4013      	ands	r3, r2
 8006394:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010400 	.word	0x40010400

080063a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7a1b      	ldrb	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80d1 	beq.w	8006560 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d063      	beq.n	800648e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7a5b      	ldrb	r3, [r3, #9]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d01c      	beq.n	8006408 <LL_EXTI_Init+0x60>
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	dc25      	bgt.n	800641e <LL_EXTI_Init+0x76>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <LL_EXTI_Init+0x34>
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d00b      	beq.n	80063f2 <LL_EXTI_Init+0x4a>
 80063da:	e020      	b.n	800641e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff ff21 	bl	8006228 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff feac 	bl	8006148 <LL_EXTI_EnableIT_0_31>
          break;
 80063f0:	e018      	b.n	8006424 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff feca 	bl	8006190 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff feed 	bl	80061e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8006406:	e00d      	b.n	8006424 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fe9b 	bl	8006148 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fee2 	bl	80061e0 <LL_EXTI_EnableEvent_0_31>
          break;
 800641c:	e002      	b.n	8006424 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800641e:	2301      	movs	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
          break;
 8006422:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7a9b      	ldrb	r3, [r3, #10]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d030      	beq.n	800648e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7a9b      	ldrb	r3, [r3, #10]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d01c      	beq.n	800646e <LL_EXTI_Init+0xc6>
 8006434:	2b03      	cmp	r3, #3
 8006436:	dc25      	bgt.n	8006484 <LL_EXTI_Init+0xdc>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d002      	beq.n	8006442 <LL_EXTI_Init+0x9a>
 800643c:	2b02      	cmp	r3, #2
 800643e:	d00b      	beq.n	8006458 <LL_EXTI_Init+0xb0>
 8006440:	e020      	b.n	8006484 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff86 	bl	8006358 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff ff11 	bl	8006278 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006456:	e01b      	b.n	8006490 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ff2f 	bl	80062c0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff52 	bl	8006310 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800646c:	e010      	b.n	8006490 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff ff00 	bl	8006278 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff ff47 	bl	8006310 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006482:	e005      	b.n	8006490 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	60fb      	str	r3, [r7, #12]
            break;
 800648c:	e000      	b.n	8006490 <LL_EXTI_Init+0xe8>
        }
      }
 800648e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d078      	beq.n	800658a <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7a5b      	ldrb	r3, [r3, #9]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d01c      	beq.n	80064da <LL_EXTI_Init+0x132>
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	dc25      	bgt.n	80064f0 <LL_EXTI_Init+0x148>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <LL_EXTI_Init+0x106>
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d00b      	beq.n	80064c4 <LL_EXTI_Init+0x11c>
 80064ac:	e020      	b.n	80064f0 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fecc 	bl	8006250 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fe55 	bl	800616c <LL_EXTI_EnableIT_32_63>
          break;
 80064c2:	e01a      	b.n	80064fa <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fe75 	bl	80061b8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe96 	bl	8006204 <LL_EXTI_EnableEvent_32_63>
          break;
 80064d8:	e00f      	b.n	80064fa <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fe44 	bl	800616c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fe8b 	bl	8006204 <LL_EXTI_EnableEvent_32_63>
          break;
 80064ee:	e004      	b.n	80064fa <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f043 0304 	orr.w	r3, r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
          break;
 80064f8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7a9b      	ldrb	r3, [r3, #10]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d043      	beq.n	800658a <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	7a9b      	ldrb	r3, [r3, #10]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d01c      	beq.n	8006544 <LL_EXTI_Init+0x19c>
 800650a:	2b03      	cmp	r3, #3
 800650c:	dc25      	bgt.n	800655a <LL_EXTI_Init+0x1b2>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <LL_EXTI_Init+0x170>
 8006512:	2b02      	cmp	r3, #2
 8006514:	d00b      	beq.n	800652e <LL_EXTI_Init+0x186>
 8006516:	e020      	b.n	800655a <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff ff2f 	bl	8006380 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff feb8 	bl	800629c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800652c:	e02e      	b.n	800658c <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fed8 	bl	80062e8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fef9 	bl	8006334 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006542:	e023      	b.n	800658c <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fea7 	bl	800629c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff feee 	bl	8006334 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006558:	e018      	b.n	800658c <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
            break;
 800655e:	e015      	b.n	800658c <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fe13 	bl	8006190 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fe5a 	bl	8006228 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fe1d 	bl	80061b8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fe64 	bl	8006250 <LL_EXTI_DisableEvent_32_63>
 8006588:	e000      	b.n	800658c <LL_EXTI_Init+0x1e4>
      }
 800658a:	bf00      	nop
  }

  return status;
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <LL_GPIO_SetPinMode>:
{
 8006596:	b480      	push	{r7}
 8006598:	b08b      	sub	sp, #44	; 0x2c
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	fa93 f3a3 	rbit	r3, r3
 80065b0:	613b      	str	r3, [r7, #16]
  return result;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80065bc:	2320      	movs	r3, #32
 80065be:	e003      	b.n	80065c8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	fab3 f383 	clz	r3, r3
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	2103      	movs	r1, #3
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	fa93 f3a3 	rbit	r3, r3
 80065de:	61fb      	str	r3, [r7, #28]
  return result;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80065ea:	2320      	movs	r3, #32
 80065ec:	e003      	b.n	80065f6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	fab3 f383 	clz	r3, r3
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	431a      	orrs	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	372c      	adds	r7, #44	; 0x2c
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <LL_GPIO_SetPinOutputType>:
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	43db      	mvns	r3, r3
 8006624:	401a      	ands	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	431a      	orrs	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	605a      	str	r2, [r3, #4]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <LL_GPIO_SetPinSpeed>:
{
 8006640:	b480      	push	{r7}
 8006642:	b08b      	sub	sp, #44	; 0x2c
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	fa93 f3a3 	rbit	r3, r3
 800665a:	613b      	str	r3, [r7, #16]
  return result;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006666:	2320      	movs	r3, #32
 8006668:	e003      	b.n	8006672 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	fab3 f383 	clz	r3, r3
 8006670:	b2db      	uxtb	r3, r3
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	2103      	movs	r1, #3
 8006676:	fa01 f303 	lsl.w	r3, r1, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	401a      	ands	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	fa93 f3a3 	rbit	r3, r3
 8006688:	61fb      	str	r3, [r7, #28]
  return result;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006694:	2320      	movs	r3, #32
 8006696:	e003      	b.n	80066a0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	fab3 f383 	clz	r3, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	bf00      	nop
 80066b0:	372c      	adds	r7, #44	; 0x2c
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <LL_GPIO_SetPinPull>:
{
 80066ba:	b480      	push	{r7}
 80066bc:	b08b      	sub	sp, #44	; 0x2c
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	fa93 f3a3 	rbit	r3, r3
 80066d4:	613b      	str	r3, [r7, #16]
  return result;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80066e0:	2320      	movs	r3, #32
 80066e2:	e003      	b.n	80066ec <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	fab3 f383 	clz	r3, r3
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	2103      	movs	r1, #3
 80066f0:	fa01 f303 	lsl.w	r3, r1, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	401a      	ands	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	fa93 f3a3 	rbit	r3, r3
 8006702:	61fb      	str	r3, [r7, #28]
  return result;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800670e:	2320      	movs	r3, #32
 8006710:	e003      	b.n	800671a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	fab3 f383 	clz	r3, r3
 8006718:	b2db      	uxtb	r3, r3
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	fa01 f303 	lsl.w	r3, r1, r3
 8006722:	431a      	orrs	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	60da      	str	r2, [r3, #12]
}
 8006728:	bf00      	nop
 800672a:	372c      	adds	r7, #44	; 0x2c
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <LL_GPIO_SetAFPin_0_7>:
{
 8006734:	b480      	push	{r7}
 8006736:	b08b      	sub	sp, #44	; 0x2c
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	fa93 f3a3 	rbit	r3, r3
 800674e:	613b      	str	r3, [r7, #16]
  return result;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800675a:	2320      	movs	r3, #32
 800675c:	e003      	b.n	8006766 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	fab3 f383 	clz	r3, r3
 8006764:	b2db      	uxtb	r3, r3
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	210f      	movs	r1, #15
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	43db      	mvns	r3, r3
 8006770:	401a      	ands	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	fa93 f3a3 	rbit	r3, r3
 800677c:	61fb      	str	r3, [r7, #28]
  return result;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006788:	2320      	movs	r3, #32
 800678a:	e003      	b.n	8006794 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	fab3 f383 	clz	r3, r3
 8006792:	b2db      	uxtb	r3, r3
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	fa01 f303 	lsl.w	r3, r1, r3
 800679c:	431a      	orrs	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	372c      	adds	r7, #44	; 0x2c
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <LL_GPIO_SetAFPin_8_15>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	b08b      	sub	sp, #44	; 0x2c
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	fa93 f3a3 	rbit	r3, r3
 80067ca:	613b      	str	r3, [r7, #16]
  return result;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80067d6:	2320      	movs	r3, #32
 80067d8:	e003      	b.n	80067e2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	fab3 f383 	clz	r3, r3
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	210f      	movs	r1, #15
 80067e6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	401a      	ands	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0a1b      	lsrs	r3, r3, #8
 80067f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	fa93 f3a3 	rbit	r3, r3
 80067fa:	61fb      	str	r3, [r7, #28]
  return result;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006806:	2320      	movs	r3, #32
 8006808:	e003      	b.n	8006812 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	fab3 f383 	clz	r3, r3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	fa01 f303 	lsl.w	r3, r1, r3
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006820:	bf00      	nop
 8006822:	372c      	adds	r7, #44	; 0x2c
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	60fb      	str	r3, [r7, #12]
  return result;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <LL_GPIO_Init+0x26>
    return 32U;
 800684e:	2320      	movs	r3, #32
 8006850:	e003      	b.n	800685a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	fab3 f383 	clz	r3, r3
 8006858:	b2db      	uxtb	r3, r3
 800685a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800685c:	e048      	b.n	80068f0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2101      	movs	r1, #1
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	4013      	ands	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d03a      	beq.n	80068ea <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d003      	beq.n	8006884 <LL_GPIO_Init+0x58>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d10e      	bne.n	80068a2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	461a      	mov	r2, r3
 800688a:	69b9      	ldr	r1, [r7, #24]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fed7 	bl	8006640 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6819      	ldr	r1, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff feb7 	bl	8006610 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	461a      	mov	r2, r3
 80068a8:	69b9      	ldr	r1, [r7, #24]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ff05 	bl	80066ba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d111      	bne.n	80068dc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2bff      	cmp	r3, #255	; 0xff
 80068bc:	d807      	bhi.n	80068ce <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	461a      	mov	r2, r3
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff ff34 	bl	8006734 <LL_GPIO_SetAFPin_0_7>
 80068cc:	e006      	b.n	80068dc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	461a      	mov	r2, r3
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ff69 	bl	80067ae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	461a      	mov	r2, r3
 80068e2:	69b9      	ldr	r1, [r7, #24]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe56 	bl	8006596 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3301      	adds	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1af      	bne.n	800685e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <LL_RCC_HSI_IsReady>:
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800690c:	4b07      	ldr	r3, [pc, #28]	; (800692c <LL_RCC_HSI_IsReady+0x24>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006918:	d101      	bne.n	800691e <LL_RCC_HSI_IsReady+0x16>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <LL_RCC_HSI_IsReady+0x18>
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000

08006930 <LL_RCC_LSE_IsReady>:
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <LL_RCC_LSE_IsReady+0x24>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b02      	cmp	r3, #2
 8006940:	d101      	bne.n	8006946 <LL_RCC_LSE_IsReady+0x16>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <LL_RCC_LSE_IsReady+0x18>
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000

08006958 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b08      	cmp	r3, #8
 8006966:	d101      	bne.n	800696c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40021000 	.word	0x40021000

0800697c <LL_RCC_MSI_GetRange>:
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <LL_RCC_MSI_GetRange+0x18>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000

08006998 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800699e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	40021000 	.word	0x40021000

080069b4 <LL_RCC_GetSysClkSource>:
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <LL_RCC_GetSysClkSource+0x18>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 030c 	and.w	r3, r3, #12
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000

080069d0 <LL_RCC_GetAHBPrescaler>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000

080069ec <LL_RCC_GetAPB1Prescaler>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <LL_RCC_GetAPB1Prescaler+0x18>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40021000 	.word	0x40021000

08006a08 <LL_RCC_GetAPB2Prescaler>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000

08006a24 <LL_RCC_GetUSARTClockSource>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <LL_RCC_GetUSARTClockSource+0x24>)
 8006a2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	401a      	ands	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	4313      	orrs	r3, r2
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40021000 	.word	0x40021000

08006a4c <LL_RCC_GetUARTClockSource>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <LL_RCC_GetUARTClockSource+0x24>)
 8006a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	4313      	orrs	r3, r2
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40021000 	.word	0x40021000

08006a74 <LL_RCC_PLL_GetMainSource>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <LL_RCC_PLL_GetMainSource+0x18>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40021000 	.word	0x40021000

08006a90 <LL_RCC_PLL_GetN>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <LL_RCC_PLL_GetN+0x18>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	0a1b      	lsrs	r3, r3, #8
 8006a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40021000 	.word	0x40021000

08006aac <LL_RCC_PLL_GetR>:
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <LL_RCC_PLL_GetR+0x18>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <LL_RCC_PLL_GetDivider>:
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <LL_RCC_PLL_GetDivider+0x18>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d137      	bne.n	8006b66 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff94 	bl	8006a24 <LL_RCC_GetUSARTClockSource>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	f200 80b3 	bhi.w	8006c6e <LL_RCC_GetUSARTClockFreq+0x18a>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b4f 	.word	0x08006b4f
 8006b14:	08006b21 	.word	0x08006b21
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b3b 	.word	0x08006b3b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006b20:	f000 f95c 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006b24:	60f8      	str	r0, [r7, #12]
        break;
 8006b26:	e0b5      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006b28:	f7ff feee 	bl	8006908 <LL_RCC_HSI_IsReady>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 809f 	beq.w	8006c72 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006b34:	4b5a      	ldr	r3, [pc, #360]	; (8006ca0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006b36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b38:	e09b      	b.n	8006c72 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006b3a:	f7ff fef9 	bl	8006930 <LL_RCC_LSE_IsReady>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8098 	beq.w	8006c76 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b4c:	e093      	b.n	8006c76 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006b4e:	f000 f945 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006b52:	4603      	mov	r3, r0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 f9d1 	bl	8006efc <RCC_GetHCLKClockFreq>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f9f7 	bl	8006f50 <RCC_GetPCLK2ClockFreq>
 8006b62:	60f8      	str	r0, [r7, #12]
        break;
 8006b64:	e096      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b0c      	cmp	r3, #12
 8006b6a:	d146      	bne.n	8006bfa <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff ff59 	bl	8006a24 <LL_RCC_GetUSARTClockSource>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d87e      	bhi.n	8006c7a <LL_RCC_GetUSARTClockFreq+0x196>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006be3 	.word	0x08006be3
 8006b88:	08006c7b 	.word	0x08006c7b
 8006b8c:	08006c7b 	.word	0x08006c7b
 8006b90:	08006c7b 	.word	0x08006c7b
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006c7b 	.word	0x08006c7b
 8006b9c:	08006c7b 	.word	0x08006c7b
 8006ba0:	08006c7b 	.word	0x08006c7b
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	08006c7b 	.word	0x08006c7b
 8006bac:	08006c7b 	.word	0x08006c7b
 8006bb0:	08006c7b 	.word	0x08006c7b
 8006bb4:	08006bd1 	.word	0x08006bd1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006bb8:	f000 f910 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006bbc:	60f8      	str	r0, [r7, #12]
        break;
 8006bbe:	e069      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006bc0:	f7ff fea2 	bl	8006908 <LL_RCC_HSI_IsReady>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d059      	beq.n	8006c7e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006bca:	4b35      	ldr	r3, [pc, #212]	; (8006ca0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006bcc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006bce:	e056      	b.n	8006c7e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006bd0:	f7ff feae 	bl	8006930 <LL_RCC_LSE_IsReady>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d053      	beq.n	8006c82 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bde:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006be0:	e04f      	b.n	8006c82 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006be2:	f000 f8fb 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 f987 	bl	8006efc <RCC_GetHCLKClockFreq>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f999 	bl	8006f28 <RCC_GetPCLK1ClockFreq>
 8006bf6:	60f8      	str	r0, [r7, #12]
        break;
 8006bf8:	e04c      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b30      	cmp	r3, #48	; 0x30
 8006bfe:	d142      	bne.n	8006c86 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff0f 	bl	8006a24 <LL_RCC_GetUSARTClockSource>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006c0c:	d01a      	beq.n	8006c44 <LL_RCC_GetUSARTClockFreq+0x160>
 8006c0e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006c12:	d83a      	bhi.n	8006c8a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006c14:	4a23      	ldr	r2, [pc, #140]	; (8006ca4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00c      	beq.n	8006c34 <LL_RCC_GetUSARTClockFreq+0x150>
 8006c1a:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d834      	bhi.n	8006c8a <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006c20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c24:	d017      	beq.n	8006c56 <LL_RCC_GetUSARTClockFreq+0x172>
 8006c26:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d12e      	bne.n	8006c8a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006c2c:	f000 f8d6 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006c30:	60f8      	str	r0, [r7, #12]
          break;
 8006c32:	e02f      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006c34:	f7ff fe68 	bl	8006908 <LL_RCC_HSI_IsReady>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d027      	beq.n	8006c8e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006c40:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006c42:	e024      	b.n	8006c8e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006c44:	f7ff fe74 	bl	8006930 <LL_RCC_LSE_IsReady>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d021      	beq.n	8006c92 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006c54:	e01d      	b.n	8006c92 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c56:	f000 f8c1 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f94d 	bl	8006efc <RCC_GetHCLKClockFreq>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f95f 	bl	8006f28 <RCC_GetPCLK1ClockFreq>
 8006c6a:	60f8      	str	r0, [r7, #12]
          break;
 8006c6c:	e012      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e010      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c72:	bf00      	nop
 8006c74:	e00e      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c76:	bf00      	nop
 8006c78:	e00c      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c7a:	bf00      	nop
 8006c7c:	e00a      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c7e:	bf00      	nop
 8006c80:	e008      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006c82:	bf00      	nop
 8006c84:	e006      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006c86:	bf00      	nop
 8006c88:	e004      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006c92:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006c94:	68fb      	ldr	r3, [r7, #12]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	00f42400 	.word	0x00f42400
 8006ca4:	00300020 	.word	0x00300020
 8006ca8:	00300010 	.word	0x00300010

08006cac <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2bc0      	cmp	r3, #192	; 0xc0
 8006cbc:	d136      	bne.n	8006d2c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fec4 	bl	8006a4c <LL_RCC_GetUARTClockSource>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006cca:	d01a      	beq.n	8006d02 <LL_RCC_GetUARTClockFreq+0x56>
 8006ccc:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006cd0:	d82e      	bhi.n	8006d30 <LL_RCC_GetUARTClockFreq+0x84>
 8006cd2:	4a3d      	ldr	r2, [pc, #244]	; (8006dc8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00c      	beq.n	8006cf2 <LL_RCC_GetUARTClockFreq+0x46>
 8006cd8:	4a3b      	ldr	r2, [pc, #236]	; (8006dc8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d828      	bhi.n	8006d30 <LL_RCC_GetUARTClockFreq+0x84>
 8006cde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ce2:	d017      	beq.n	8006d14 <LL_RCC_GetUARTClockFreq+0x68>
 8006ce4:	4a39      	ldr	r2, [pc, #228]	; (8006dcc <LL_RCC_GetUARTClockFreq+0x120>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d122      	bne.n	8006d30 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006cea:	f000 f877 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006cee:	60f8      	str	r0, [r7, #12]
        break;
 8006cf0:	e023      	b.n	8006d3a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006cf2:	f7ff fe09 	bl	8006908 <LL_RCC_HSI_IsReady>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01b      	beq.n	8006d34 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006cfc:	4b34      	ldr	r3, [pc, #208]	; (8006dd0 <LL_RCC_GetUARTClockFreq+0x124>)
 8006cfe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d00:	e018      	b.n	8006d34 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006d02:	f7ff fe15 	bl	8006930 <LL_RCC_LSE_IsReady>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d015      	beq.n	8006d38 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d12:	e011      	b.n	8006d38 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d14:	f000 f862 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f8ee 	bl	8006efc <RCC_GetHCLKClockFreq>
 8006d20:	4603      	mov	r3, r0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f900 	bl	8006f28 <RCC_GetPCLK1ClockFreq>
 8006d28:	60f8      	str	r0, [r7, #12]
        break;
 8006d2a:	e006      	b.n	8006d3a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006d2c:	bf00      	nop
 8006d2e:	e004      	b.n	8006d3a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006d38:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d40:	d136      	bne.n	8006db0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fe82 	bl	8006a4c <LL_RCC_GetUARTClockSource>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006d4e:	d01a      	beq.n	8006d86 <LL_RCC_GetUARTClockFreq+0xda>
 8006d50:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006d54:	d82e      	bhi.n	8006db4 <LL_RCC_GetUARTClockFreq+0x108>
 8006d56:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <LL_RCC_GetUARTClockFreq+0x128>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00c      	beq.n	8006d76 <LL_RCC_GetUARTClockFreq+0xca>
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <LL_RCC_GetUARTClockFreq+0x128>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d828      	bhi.n	8006db4 <LL_RCC_GetUARTClockFreq+0x108>
 8006d62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d66:	d017      	beq.n	8006d98 <LL_RCC_GetUARTClockFreq+0xec>
 8006d68:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <LL_RCC_GetUARTClockFreq+0x12c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d122      	bne.n	8006db4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006d6e:	f000 f835 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006d72:	60f8      	str	r0, [r7, #12]
        break;
 8006d74:	e023      	b.n	8006dbe <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006d76:	f7ff fdc7 	bl	8006908 <LL_RCC_HSI_IsReady>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01b      	beq.n	8006db8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006d80:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <LL_RCC_GetUARTClockFreq+0x124>)
 8006d82:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d84:	e018      	b.n	8006db8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006d86:	f7ff fdd3 	bl	8006930 <LL_RCC_LSE_IsReady>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d94:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d96:	e011      	b.n	8006dbc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d98:	f000 f820 	bl	8006ddc <RCC_GetSystemClockFreq>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f8ac 	bl	8006efc <RCC_GetHCLKClockFreq>
 8006da4:	4603      	mov	r3, r0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f8be 	bl	8006f28 <RCC_GetPCLK1ClockFreq>
 8006dac:	60f8      	str	r0, [r7, #12]
        break;
 8006dae:	e006      	b.n	8006dbe <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006db0:	bf00      	nop
 8006db2:	e004      	b.n	8006dbe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006db4:	bf00      	nop
 8006db6:	e002      	b.n	8006dbe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006dbc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	00c00080 	.word	0x00c00080
 8006dcc:	00c00040 	.word	0x00c00040
 8006dd0:	00f42400 	.word	0x00f42400
 8006dd4:	03000200 	.word	0x03000200
 8006dd8:	03000100 	.word	0x03000100

08006ddc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006de2:	f7ff fde7 	bl	80069b4 <LL_RCC_GetSysClkSource>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d851      	bhi.n	8006e90 <RCC_GetSystemClockFreq+0xb4>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <RCC_GetSystemClockFreq+0x18>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e29 	.word	0x08006e29
 8006df8:	08006e91 	.word	0x08006e91
 8006dfc:	08006e91 	.word	0x08006e91
 8006e00:	08006e91 	.word	0x08006e91
 8006e04:	08006e7d 	.word	0x08006e7d
 8006e08:	08006e91 	.word	0x08006e91
 8006e0c:	08006e91 	.word	0x08006e91
 8006e10:	08006e91 	.word	0x08006e91
 8006e14:	08006e83 	.word	0x08006e83
 8006e18:	08006e91 	.word	0x08006e91
 8006e1c:	08006e91 	.word	0x08006e91
 8006e20:	08006e91 	.word	0x08006e91
 8006e24:	08006e89 	.word	0x08006e89
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006e28:	f7ff fd96 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d111      	bne.n	8006e56 <RCC_GetSystemClockFreq+0x7a>
 8006e32:	f7ff fd91 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <RCC_GetSystemClockFreq+0x6a>
 8006e3c:	f7ff fd9e 	bl	800697c <LL_RCC_MSI_GetRange>
 8006e40:	4603      	mov	r3, r0
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	e003      	b.n	8006e4e <RCC_GetSystemClockFreq+0x72>
 8006e46:	f7ff fda7 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	4a28      	ldr	r2, [pc, #160]	; (8006ef0 <RCC_GetSystemClockFreq+0x114>)
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	e010      	b.n	8006e78 <RCC_GetSystemClockFreq+0x9c>
 8006e56:	f7ff fd7f 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <RCC_GetSystemClockFreq+0x8e>
 8006e60:	f7ff fd8c 	bl	800697c <LL_RCC_MSI_GetRange>
 8006e64:	4603      	mov	r3, r0
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	e003      	b.n	8006e72 <RCC_GetSystemClockFreq+0x96>
 8006e6a:	f7ff fd95 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <RCC_GetSystemClockFreq+0x114>)
 8006e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e78:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006e7a:	e033      	b.n	8006ee4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <RCC_GetSystemClockFreq+0x118>)
 8006e7e:	607b      	str	r3, [r7, #4]
      break;
 8006e80:	e030      	b.n	8006ee4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <RCC_GetSystemClockFreq+0x11c>)
 8006e84:	607b      	str	r3, [r7, #4]
      break;
 8006e86:	e02d      	b.n	8006ee4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006e88:	f000 f876 	bl	8006f78 <RCC_PLL_GetFreqDomain_SYS>
 8006e8c:	6078      	str	r0, [r7, #4]
      break;
 8006e8e:	e029      	b.n	8006ee4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006e90:	f7ff fd62 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d111      	bne.n	8006ebe <RCC_GetSystemClockFreq+0xe2>
 8006e9a:	f7ff fd5d 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <RCC_GetSystemClockFreq+0xd2>
 8006ea4:	f7ff fd6a 	bl	800697c <LL_RCC_MSI_GetRange>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	e003      	b.n	8006eb6 <RCC_GetSystemClockFreq+0xda>
 8006eae:	f7ff fd73 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	0a1b      	lsrs	r3, r3, #8
 8006eb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <RCC_GetSystemClockFreq+0x114>)
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	e010      	b.n	8006ee0 <RCC_GetSystemClockFreq+0x104>
 8006ebe:	f7ff fd4b 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <RCC_GetSystemClockFreq+0xf6>
 8006ec8:	f7ff fd58 	bl	800697c <LL_RCC_MSI_GetRange>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	e003      	b.n	8006eda <RCC_GetSystemClockFreq+0xfe>
 8006ed2:	f7ff fd61 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	4a05      	ldr	r2, [pc, #20]	; (8006ef0 <RCC_GetSystemClockFreq+0x114>)
 8006edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006ee2:	bf00      	nop
  }

  return frequency;
 8006ee4:	687b      	ldr	r3, [r7, #4]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	08008874 	.word	0x08008874
 8006ef4:	00f42400 	.word	0x00f42400
 8006ef8:	007a1200 	.word	0x007a1200

08006efc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006f04:	f7ff fd64 	bl	80069d0 <LL_RCC_GetAHBPrescaler>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	4a04      	ldr	r2, [pc, #16]	; (8006f24 <RCC_GetHCLKClockFreq+0x28>)
 8006f12:	5cd3      	ldrb	r3, [r2, r3]
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	40d3      	lsrs	r3, r2
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	0800885c 	.word	0x0800885c

08006f28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006f30:	f7ff fd5c 	bl	80069ec <LL_RCC_GetAPB1Prescaler>
 8006f34:	4603      	mov	r3, r0
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <RCC_GetPCLK1ClockFreq+0x24>)
 8006f3a:	5cd3      	ldrb	r3, [r2, r3]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	40d3      	lsrs	r3, r2
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	0800886c 	.word	0x0800886c

08006f50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006f58:	f7ff fd56 	bl	8006a08 <LL_RCC_GetAPB2Prescaler>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	0adb      	lsrs	r3, r3, #11
 8006f60:	4a04      	ldr	r2, [pc, #16]	; (8006f74 <RCC_GetPCLK2ClockFreq+0x24>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	40d3      	lsrs	r3, r2
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	0800886c 	.word	0x0800886c

08006f78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006f7e:	f7ff fd79 	bl	8006a74 <LL_RCC_PLL_GetMainSource>
 8006f82:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d036      	beq.n	8006ff8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d836      	bhi.n	8006ffe <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d003      	beq.n	8006f9e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d02a      	beq.n	8006ff2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006f9c:	e02f      	b.n	8006ffe <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006f9e:	f7ff fcdb 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d111      	bne.n	8006fcc <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006fa8:	f7ff fcd6 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006fb2:	f7ff fce3 	bl	800697c <LL_RCC_MSI_GetRange>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	e003      	b.n	8006fc4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006fbc:	f7ff fcec 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	4a2f      	ldr	r2, [pc, #188]	; (8007084 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fca:	e010      	b.n	8006fee <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006fcc:	f7ff fcc4 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006fd6:	f7ff fcd1 	bl	800697c <LL_RCC_MSI_GetRange>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	e003      	b.n	8006fe8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006fe0:	f7ff fcda 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	091b      	lsrs	r3, r3, #4
 8006fe8:	4a26      	ldr	r2, [pc, #152]	; (8007084 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006ff0:	e02f      	b.n	8007052 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006ff2:	4b25      	ldr	r3, [pc, #148]	; (8007088 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006ff4:	607b      	str	r3, [r7, #4]
      break;
 8006ff6:	e02c      	b.n	8007052 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006ff8:	4b24      	ldr	r3, [pc, #144]	; (800708c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006ffa:	607b      	str	r3, [r7, #4]
      break;
 8006ffc:	e029      	b.n	8007052 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006ffe:	f7ff fcab 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d111      	bne.n	800702c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8007008:	f7ff fca6 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8007012:	f7ff fcb3 	bl	800697c <LL_RCC_MSI_GetRange>
 8007016:	4603      	mov	r3, r0
 8007018:	0a1b      	lsrs	r3, r3, #8
 800701a:	e003      	b.n	8007024 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800701c:	f7ff fcbc 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8007020:	4603      	mov	r3, r0
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702a:	e010      	b.n	800704e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800702c:	f7ff fc94 	bl	8006958 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8007036:	f7ff fca1 	bl	800697c <LL_RCC_MSI_GetRange>
 800703a:	4603      	mov	r3, r0
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	e003      	b.n	8007048 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8007040:	f7ff fcaa 	bl	8006998 <LL_RCC_MSI_GetRangeAfterStandby>
 8007044:	4603      	mov	r3, r0
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	4a0e      	ldr	r2, [pc, #56]	; (8007084 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800704a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007050:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007052:	f7ff fd39 	bl	8006ac8 <LL_RCC_PLL_GetDivider>
 8007056:	4603      	mov	r3, r0
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	3301      	adds	r3, #1
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	fbb2 f4f3 	udiv	r4, r2, r3
 8007062:	f7ff fd15 	bl	8006a90 <LL_RCC_PLL_GetN>
 8007066:	4603      	mov	r3, r0
 8007068:	fb03 f404 	mul.w	r4, r3, r4
 800706c:	f7ff fd1e 	bl	8006aac <LL_RCC_PLL_GetR>
 8007070:	4603      	mov	r3, r0
 8007072:	0e5b      	lsrs	r3, r3, #25
 8007074:	3301      	adds	r3, #1
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	bd90      	pop	{r4, r7, pc}
 8007084:	08008874 	.word	0x08008874
 8007088:	00f42400 	.word	0x00f42400
 800708c:	007a1200 	.word	0x007a1200

08007090 <LL_SPI_IsEnabled>:
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d101      	bne.n	80070a8 <LL_SPI_IsEnabled+0x18>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <LL_SPI_IsEnabled+0x1a>
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <LL_SPI_SetRxFIFOThreshold>:
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	605a      	str	r2, [r3, #4]
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <LL_SPI_SetCRCPolynomial>:
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff ffc0 	bl	8007090 <LL_SPI_IsEnabled>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d145      	bne.n	80071a2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800711e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	6811      	ldr	r1, [r2, #0]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	6852      	ldr	r2, [r2, #4]
 800712a:	4311      	orrs	r1, r2
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	68d2      	ldr	r2, [r2, #12]
 8007130:	4311      	orrs	r1, r2
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	6912      	ldr	r2, [r2, #16]
 8007136:	4311      	orrs	r1, r2
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	6952      	ldr	r2, [r2, #20]
 800713c:	4311      	orrs	r1, r2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	6992      	ldr	r2, [r2, #24]
 8007142:	4311      	orrs	r1, r2
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	69d2      	ldr	r2, [r2, #28]
 8007148:	4311      	orrs	r1, r2
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	6a12      	ldr	r2, [r2, #32]
 800714e:	430a      	orrs	r2, r1
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800715e:	f023 0304 	bic.w	r3, r3, #4
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	6891      	ldr	r1, [r2, #8]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	6952      	ldr	r2, [r2, #20]
 800716a:	0c12      	lsrs	r2, r2, #16
 800716c:	430a      	orrs	r2, r1
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717c:	d204      	bcs.n	8007188 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800717e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff97 	bl	80070b6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007190:	d105      	bne.n	800719e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff9f 	bl	80070dc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <LL_TIM_SetPrescaler>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <LL_TIM_SetAutoReload>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <LL_TIM_SetRepetitionCounter>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f043 0201 	orr.w	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	615a      	str	r2, [r3, #20]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a3d      	ldr	r2, [pc, #244]	; (8007328 <LL_TIM_Init+0x108>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d013      	beq.n	8007260 <LL_TIM_Init+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723e:	d00f      	beq.n	8007260 <LL_TIM_Init+0x40>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a3a      	ldr	r2, [pc, #232]	; (800732c <LL_TIM_Init+0x10c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00b      	beq.n	8007260 <LL_TIM_Init+0x40>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a39      	ldr	r2, [pc, #228]	; (8007330 <LL_TIM_Init+0x110>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <LL_TIM_Init+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a38      	ldr	r2, [pc, #224]	; (8007334 <LL_TIM_Init+0x114>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <LL_TIM_Init+0x40>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a37      	ldr	r2, [pc, #220]	; (8007338 <LL_TIM_Init+0x118>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d106      	bne.n	800726e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a2d      	ldr	r2, [pc, #180]	; (8007328 <LL_TIM_Init+0x108>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01f      	beq.n	80072b6 <LL_TIM_Init+0x96>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d01b      	beq.n	80072b6 <LL_TIM_Init+0x96>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a2a      	ldr	r2, [pc, #168]	; (800732c <LL_TIM_Init+0x10c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d017      	beq.n	80072b6 <LL_TIM_Init+0x96>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a29      	ldr	r2, [pc, #164]	; (8007330 <LL_TIM_Init+0x110>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <LL_TIM_Init+0x96>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a28      	ldr	r2, [pc, #160]	; (8007334 <LL_TIM_Init+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <LL_TIM_Init+0x96>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a27      	ldr	r2, [pc, #156]	; (8007338 <LL_TIM_Init+0x118>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <LL_TIM_Init+0x96>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a26      	ldr	r2, [pc, #152]	; (800733c <LL_TIM_Init+0x11c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <LL_TIM_Init+0x96>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a25      	ldr	r2, [pc, #148]	; (8007340 <LL_TIM_Init+0x120>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <LL_TIM_Init+0x96>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a24      	ldr	r2, [pc, #144]	; (8007344 <LL_TIM_Init+0x124>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d106      	bne.n	80072c4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ff79 	bl	80071c8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff65 	bl	80071ac <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a10      	ldr	r2, [pc, #64]	; (8007328 <LL_TIM_Init+0x108>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <LL_TIM_Init+0xea>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a12      	ldr	r2, [pc, #72]	; (8007338 <LL_TIM_Init+0x118>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00b      	beq.n	800730a <LL_TIM_Init+0xea>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <LL_TIM_Init+0x11c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <LL_TIM_Init+0xea>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a10      	ldr	r2, [pc, #64]	; (8007340 <LL_TIM_Init+0x120>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <LL_TIM_Init+0xea>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a0f      	ldr	r2, [pc, #60]	; (8007344 <LL_TIM_Init+0x124>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d105      	bne.n	8007316 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff67 	bl	80071e4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ff72 	bl	8007200 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40012c00 	.word	0x40012c00
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800

08007348 <LL_USART_IsEnabled>:
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <LL_USART_IsEnabled+0x18>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <LL_USART_IsEnabled+0x1a>
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <LL_USART_SetStopBitsLength>:
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <LL_USART_SetHWFlowCtrl>:
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <LL_USART_SetBaudRate>:
{
 80073ba:	b480      	push	{r7}
 80073bc:	b087      	sub	sp, #28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ce:	d11a      	bne.n	8007406 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	005a      	lsls	r2, r3, #1
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	441a      	add	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80073ea:	4013      	ands	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	60da      	str	r2, [r3, #12]
}
 8007404:	e00a      	b.n	800741c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	085a      	lsrs	r2, r3, #1
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	441a      	add	r2, r3
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
}
 800741c:	bf00      	nop
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007436:	2300      	movs	r3, #0
 8007438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff ff84 	bl	8007348 <LL_USART_IsEnabled>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d15b      	bne.n	80074fe <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b2f      	ldr	r3, [pc, #188]	; (8007508 <LL_USART_Init+0xe0>)
 800744c:	4013      	ands	r3, r2
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	6851      	ldr	r1, [r2, #4]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68d2      	ldr	r2, [r2, #12]
 8007456:	4311      	orrs	r1, r2
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	6912      	ldr	r2, [r2, #16]
 800745c:	4311      	orrs	r1, r2
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	6992      	ldr	r2, [r2, #24]
 8007462:	430a      	orrs	r2, r1
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff7c 	bl	800736e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ff89 	bl	8007394 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a21      	ldr	r2, [pc, #132]	; (800750c <LL_USART_Init+0xe4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d104      	bne.n	8007494 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800748a:	2003      	movs	r0, #3
 800748c:	f7ff fb2a 	bl	8006ae4 <LL_RCC_GetUSARTClockFreq>
 8007490:	60b8      	str	r0, [r7, #8]
 8007492:	e023      	b.n	80074dc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <LL_USART_Init+0xe8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d104      	bne.n	80074a6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800749c:	200c      	movs	r0, #12
 800749e:	f7ff fb21 	bl	8006ae4 <LL_RCC_GetUSARTClockFreq>
 80074a2:	60b8      	str	r0, [r7, #8]
 80074a4:	e01a      	b.n	80074dc <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <LL_USART_Init+0xec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d104      	bne.n	80074b8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80074ae:	2030      	movs	r0, #48	; 0x30
 80074b0:	f7ff fb18 	bl	8006ae4 <LL_RCC_GetUSARTClockFreq>
 80074b4:	60b8      	str	r0, [r7, #8]
 80074b6:	e011      	b.n	80074dc <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a17      	ldr	r2, [pc, #92]	; (8007518 <LL_USART_Init+0xf0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d104      	bne.n	80074ca <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80074c0:	20c0      	movs	r0, #192	; 0xc0
 80074c2:	f7ff fbf3 	bl	8006cac <LL_RCC_GetUARTClockFreq>
 80074c6:	60b8      	str	r0, [r7, #8]
 80074c8:	e008      	b.n	80074dc <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a13      	ldr	r2, [pc, #76]	; (800751c <LL_USART_Init+0xf4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d104      	bne.n	80074dc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80074d2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80074d6:	f7ff fbe9 	bl	8006cac <LL_RCC_GetUARTClockFreq>
 80074da:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ff5e 	bl	80073ba <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	efff69f3 	.word	0xefff69f3
 800750c:	40013800 	.word	0x40013800
 8007510:	40004400 	.word	0x40004400
 8007514:	40004800 	.word	0x40004800
 8007518:	40004c00 	.word	0x40004c00
 800751c:	40005000 	.word	0x40005000

08007520 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007532:	4a07      	ldr	r2, [pc, #28]	; (8007550 <LL_InitTick+0x30>)
 8007534:	3b01      	subs	r3, #1
 8007536:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <LL_InitTick+0x30>)
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800753e:	4b04      	ldr	r3, [pc, #16]	; (8007550 <LL_InitTick+0x30>)
 8007540:	2205      	movs	r2, #5
 8007542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	e000e010 	.word	0xe000e010

08007554 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800755c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ffdd 	bl	8007520 <LL_InitTick>
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <LL_mDelay+0x4c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007582:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d00c      	beq.n	80075a6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8007592:	e008      	b.n	80075a6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <LL_mDelay+0x4c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f3      	bne.n	8007594 <LL_mDelay+0x24>
    }
  }
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	e000e010 	.word	0xe000e010

080075c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80075c8:	4a04      	ldr	r2, [pc, #16]	; (80075dc <LL_SetSystemCoreClock+0x1c>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6013      	str	r3, [r2, #0]
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	2000000c 	.word	0x2000000c

080075e0 <__libc_init_array>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4d0d      	ldr	r5, [pc, #52]	; (8007618 <__libc_init_array+0x38>)
 80075e4:	4c0d      	ldr	r4, [pc, #52]	; (800761c <__libc_init_array+0x3c>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	2600      	movs	r6, #0
 80075ec:	42a6      	cmp	r6, r4
 80075ee:	d109      	bne.n	8007604 <__libc_init_array+0x24>
 80075f0:	4d0b      	ldr	r5, [pc, #44]	; (8007620 <__libc_init_array+0x40>)
 80075f2:	4c0c      	ldr	r4, [pc, #48]	; (8007624 <__libc_init_array+0x44>)
 80075f4:	f001 f920 	bl	8008838 <_init>
 80075f8:	1b64      	subs	r4, r4, r5
 80075fa:	10a4      	asrs	r4, r4, #2
 80075fc:	2600      	movs	r6, #0
 80075fe:	42a6      	cmp	r6, r4
 8007600:	d105      	bne.n	800760e <__libc_init_array+0x2e>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f855 3b04 	ldr.w	r3, [r5], #4
 8007608:	4798      	blx	r3
 800760a:	3601      	adds	r6, #1
 800760c:	e7ee      	b.n	80075ec <__libc_init_array+0xc>
 800760e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007612:	4798      	blx	r3
 8007614:	3601      	adds	r6, #1
 8007616:	e7f2      	b.n	80075fe <__libc_init_array+0x1e>
 8007618:	08008918 	.word	0x08008918
 800761c:	08008918 	.word	0x08008918
 8007620:	08008918 	.word	0x08008918
 8007624:	0800891c 	.word	0x0800891c

08007628 <memcpy>:
 8007628:	440a      	add	r2, r1
 800762a:	4291      	cmp	r1, r2
 800762c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007630:	d100      	bne.n	8007634 <memcpy+0xc>
 8007632:	4770      	bx	lr
 8007634:	b510      	push	{r4, lr}
 8007636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800763a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763e:	4291      	cmp	r1, r2
 8007640:	d1f9      	bne.n	8007636 <memcpy+0xe>
 8007642:	bd10      	pop	{r4, pc}

08007644 <memset>:
 8007644:	4402      	add	r2, r0
 8007646:	4603      	mov	r3, r0
 8007648:	4293      	cmp	r3, r2
 800764a:	d100      	bne.n	800764e <memset+0xa>
 800764c:	4770      	bx	lr
 800764e:	f803 1b01 	strb.w	r1, [r3], #1
 8007652:	e7f9      	b.n	8007648 <memset+0x4>
 8007654:	0000      	movs	r0, r0
	...

08007658 <atan>:
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	ec55 4b10 	vmov	r4, r5, d0
 8007660:	4bc3      	ldr	r3, [pc, #780]	; (8007970 <atan+0x318>)
 8007662:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007666:	429e      	cmp	r6, r3
 8007668:	46ab      	mov	fp, r5
 800766a:	dd18      	ble.n	800769e <atan+0x46>
 800766c:	4bc1      	ldr	r3, [pc, #772]	; (8007974 <atan+0x31c>)
 800766e:	429e      	cmp	r6, r3
 8007670:	dc01      	bgt.n	8007676 <atan+0x1e>
 8007672:	d109      	bne.n	8007688 <atan+0x30>
 8007674:	b144      	cbz	r4, 8007688 <atan+0x30>
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	f7f8 fda9 	bl	80001d4 <__adddf3>
 8007682:	4604      	mov	r4, r0
 8007684:	460d      	mov	r5, r1
 8007686:	e006      	b.n	8007696 <atan+0x3e>
 8007688:	f1bb 0f00 	cmp.w	fp, #0
 800768c:	f300 8131 	bgt.w	80078f2 <atan+0x29a>
 8007690:	a59b      	add	r5, pc, #620	; (adr r5, 8007900 <atan+0x2a8>)
 8007692:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007696:	ec45 4b10 	vmov	d0, r4, r5
 800769a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	4bb6      	ldr	r3, [pc, #728]	; (8007978 <atan+0x320>)
 80076a0:	429e      	cmp	r6, r3
 80076a2:	dc14      	bgt.n	80076ce <atan+0x76>
 80076a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80076a8:	429e      	cmp	r6, r3
 80076aa:	dc0d      	bgt.n	80076c8 <atan+0x70>
 80076ac:	a396      	add	r3, pc, #600	; (adr r3, 8007908 <atan+0x2b0>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	ee10 0a10 	vmov	r0, s0
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f8 fd8c 	bl	80001d4 <__adddf3>
 80076bc:	4baf      	ldr	r3, [pc, #700]	; (800797c <atan+0x324>)
 80076be:	2200      	movs	r2, #0
 80076c0:	f7f9 f9ce 	bl	8000a60 <__aeabi_dcmpgt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d1e6      	bne.n	8007696 <atan+0x3e>
 80076c8:	f04f 3aff 	mov.w	sl, #4294967295
 80076cc:	e02b      	b.n	8007726 <atan+0xce>
 80076ce:	f000 f963 	bl	8007998 <fabs>
 80076d2:	4bab      	ldr	r3, [pc, #684]	; (8007980 <atan+0x328>)
 80076d4:	429e      	cmp	r6, r3
 80076d6:	ec55 4b10 	vmov	r4, r5, d0
 80076da:	f300 80bf 	bgt.w	800785c <atan+0x204>
 80076de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80076e2:	429e      	cmp	r6, r3
 80076e4:	f300 80a0 	bgt.w	8007828 <atan+0x1d0>
 80076e8:	ee10 2a10 	vmov	r2, s0
 80076ec:	ee10 0a10 	vmov	r0, s0
 80076f0:	462b      	mov	r3, r5
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f8 fd6e 	bl	80001d4 <__adddf3>
 80076f8:	4ba0      	ldr	r3, [pc, #640]	; (800797c <atan+0x324>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	f7f8 fd68 	bl	80001d0 <__aeabi_dsub>
 8007700:	2200      	movs	r2, #0
 8007702:	4606      	mov	r6, r0
 8007704:	460f      	mov	r7, r1
 8007706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	f7f8 fd61 	bl	80001d4 <__adddf3>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f9 f83b 	bl	8000794 <__aeabi_ddiv>
 800771e:	f04f 0a00 	mov.w	sl, #0
 8007722:	4604      	mov	r4, r0
 8007724:	460d      	mov	r5, r1
 8007726:	4622      	mov	r2, r4
 8007728:	462b      	mov	r3, r5
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff07 	bl	8000540 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4680      	mov	r8, r0
 8007738:	4689      	mov	r9, r1
 800773a:	f7f8 ff01 	bl	8000540 <__aeabi_dmul>
 800773e:	a374      	add	r3, pc, #464	; (adr r3, 8007910 <atan+0x2b8>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	f7f8 fefa 	bl	8000540 <__aeabi_dmul>
 800774c:	a372      	add	r3, pc, #456	; (adr r3, 8007918 <atan+0x2c0>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fd3f 	bl	80001d4 <__adddf3>
 8007756:	4632      	mov	r2, r6
 8007758:	463b      	mov	r3, r7
 800775a:	f7f8 fef1 	bl	8000540 <__aeabi_dmul>
 800775e:	a370      	add	r3, pc, #448	; (adr r3, 8007920 <atan+0x2c8>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 fd36 	bl	80001d4 <__adddf3>
 8007768:	4632      	mov	r2, r6
 800776a:	463b      	mov	r3, r7
 800776c:	f7f8 fee8 	bl	8000540 <__aeabi_dmul>
 8007770:	a36d      	add	r3, pc, #436	; (adr r3, 8007928 <atan+0x2d0>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 fd2d 	bl	80001d4 <__adddf3>
 800777a:	4632      	mov	r2, r6
 800777c:	463b      	mov	r3, r7
 800777e:	f7f8 fedf 	bl	8000540 <__aeabi_dmul>
 8007782:	a36b      	add	r3, pc, #428	; (adr r3, 8007930 <atan+0x2d8>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 fd24 	bl	80001d4 <__adddf3>
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	f7f8 fed6 	bl	8000540 <__aeabi_dmul>
 8007794:	a368      	add	r3, pc, #416	; (adr r3, 8007938 <atan+0x2e0>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd1b 	bl	80001d4 <__adddf3>
 800779e:	4642      	mov	r2, r8
 80077a0:	464b      	mov	r3, r9
 80077a2:	f7f8 fecd 	bl	8000540 <__aeabi_dmul>
 80077a6:	a366      	add	r3, pc, #408	; (adr r3, 8007940 <atan+0x2e8>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	4680      	mov	r8, r0
 80077ae:	4689      	mov	r9, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fec4 	bl	8000540 <__aeabi_dmul>
 80077b8:	a363      	add	r3, pc, #396	; (adr r3, 8007948 <atan+0x2f0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd07 	bl	80001d0 <__aeabi_dsub>
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	f7f8 febb 	bl	8000540 <__aeabi_dmul>
 80077ca:	a361      	add	r3, pc, #388	; (adr r3, 8007950 <atan+0x2f8>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fcfe 	bl	80001d0 <__aeabi_dsub>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 feb2 	bl	8000540 <__aeabi_dmul>
 80077dc:	a35e      	add	r3, pc, #376	; (adr r3, 8007958 <atan+0x300>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fcf5 	bl	80001d0 <__aeabi_dsub>
 80077e6:	4632      	mov	r2, r6
 80077e8:	463b      	mov	r3, r7
 80077ea:	f7f8 fea9 	bl	8000540 <__aeabi_dmul>
 80077ee:	a35c      	add	r3, pc, #368	; (adr r3, 8007960 <atan+0x308>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fcec 	bl	80001d0 <__aeabi_dsub>
 80077f8:	4632      	mov	r2, r6
 80077fa:	463b      	mov	r3, r7
 80077fc:	f7f8 fea0 	bl	8000540 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4640      	mov	r0, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7f8 fce4 	bl	80001d4 <__adddf3>
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 fe96 	bl	8000540 <__aeabi_dmul>
 8007814:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	d14b      	bne.n	80078b6 <atan+0x25e>
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fcd5 	bl	80001d0 <__aeabi_dsub>
 8007826:	e72c      	b.n	8007682 <atan+0x2a>
 8007828:	ee10 0a10 	vmov	r0, s0
 800782c:	4b53      	ldr	r3, [pc, #332]	; (800797c <atan+0x324>)
 800782e:	2200      	movs	r2, #0
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fccd 	bl	80001d0 <__aeabi_dsub>
 8007836:	4b51      	ldr	r3, [pc, #324]	; (800797c <atan+0x324>)
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	2200      	movs	r2, #0
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 fcc7 	bl	80001d4 <__adddf3>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4630      	mov	r0, r6
 800784c:	4639      	mov	r1, r7
 800784e:	f7f8 ffa1 	bl	8000794 <__aeabi_ddiv>
 8007852:	f04f 0a01 	mov.w	sl, #1
 8007856:	4604      	mov	r4, r0
 8007858:	460d      	mov	r5, r1
 800785a:	e764      	b.n	8007726 <atan+0xce>
 800785c:	4b49      	ldr	r3, [pc, #292]	; (8007984 <atan+0x32c>)
 800785e:	429e      	cmp	r6, r3
 8007860:	da1d      	bge.n	800789e <atan+0x246>
 8007862:	ee10 0a10 	vmov	r0, s0
 8007866:	4b48      	ldr	r3, [pc, #288]	; (8007988 <atan+0x330>)
 8007868:	2200      	movs	r2, #0
 800786a:	4629      	mov	r1, r5
 800786c:	f7f8 fcb0 	bl	80001d0 <__aeabi_dsub>
 8007870:	4b45      	ldr	r3, [pc, #276]	; (8007988 <atan+0x330>)
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	2200      	movs	r2, #0
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fe60 	bl	8000540 <__aeabi_dmul>
 8007880:	4b3e      	ldr	r3, [pc, #248]	; (800797c <atan+0x324>)
 8007882:	2200      	movs	r2, #0
 8007884:	f7f8 fca6 	bl	80001d4 <__adddf3>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 ff80 	bl	8000794 <__aeabi_ddiv>
 8007894:	f04f 0a02 	mov.w	sl, #2
 8007898:	4604      	mov	r4, r0
 800789a:	460d      	mov	r5, r1
 800789c:	e743      	b.n	8007726 <atan+0xce>
 800789e:	462b      	mov	r3, r5
 80078a0:	ee10 2a10 	vmov	r2, s0
 80078a4:	4939      	ldr	r1, [pc, #228]	; (800798c <atan+0x334>)
 80078a6:	2000      	movs	r0, #0
 80078a8:	f7f8 ff74 	bl	8000794 <__aeabi_ddiv>
 80078ac:	f04f 0a03 	mov.w	sl, #3
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	e737      	b.n	8007726 <atan+0xce>
 80078b6:	4b36      	ldr	r3, [pc, #216]	; (8007990 <atan+0x338>)
 80078b8:	4e36      	ldr	r6, [pc, #216]	; (8007994 <atan+0x33c>)
 80078ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80078be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80078c2:	e9da 2300 	ldrd	r2, r3, [sl]
 80078c6:	f7f8 fc83 	bl	80001d0 <__aeabi_dsub>
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	f7f8 fc7f 	bl	80001d0 <__aeabi_dsub>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80078da:	f7f8 fc79 	bl	80001d0 <__aeabi_dsub>
 80078de:	f1bb 0f00 	cmp.w	fp, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	460d      	mov	r5, r1
 80078e6:	f6bf aed6 	bge.w	8007696 <atan+0x3e>
 80078ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ee:	461d      	mov	r5, r3
 80078f0:	e6d1      	b.n	8007696 <atan+0x3e>
 80078f2:	a51d      	add	r5, pc, #116	; (adr r5, 8007968 <atan+0x310>)
 80078f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078f8:	e6cd      	b.n	8007696 <atan+0x3e>
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w
 8007900:	54442d18 	.word	0x54442d18
 8007904:	bff921fb 	.word	0xbff921fb
 8007908:	8800759c 	.word	0x8800759c
 800790c:	7e37e43c 	.word	0x7e37e43c
 8007910:	e322da11 	.word	0xe322da11
 8007914:	3f90ad3a 	.word	0x3f90ad3a
 8007918:	24760deb 	.word	0x24760deb
 800791c:	3fa97b4b 	.word	0x3fa97b4b
 8007920:	a0d03d51 	.word	0xa0d03d51
 8007924:	3fb10d66 	.word	0x3fb10d66
 8007928:	c54c206e 	.word	0xc54c206e
 800792c:	3fb745cd 	.word	0x3fb745cd
 8007930:	920083ff 	.word	0x920083ff
 8007934:	3fc24924 	.word	0x3fc24924
 8007938:	5555550d 	.word	0x5555550d
 800793c:	3fd55555 	.word	0x3fd55555
 8007940:	2c6a6c2f 	.word	0x2c6a6c2f
 8007944:	bfa2b444 	.word	0xbfa2b444
 8007948:	52defd9a 	.word	0x52defd9a
 800794c:	3fadde2d 	.word	0x3fadde2d
 8007950:	af749a6d 	.word	0xaf749a6d
 8007954:	3fb3b0f2 	.word	0x3fb3b0f2
 8007958:	fe231671 	.word	0xfe231671
 800795c:	3fbc71c6 	.word	0x3fbc71c6
 8007960:	9998ebc4 	.word	0x9998ebc4
 8007964:	3fc99999 	.word	0x3fc99999
 8007968:	54442d18 	.word	0x54442d18
 800796c:	3ff921fb 	.word	0x3ff921fb
 8007970:	440fffff 	.word	0x440fffff
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	3fdbffff 	.word	0x3fdbffff
 800797c:	3ff00000 	.word	0x3ff00000
 8007980:	3ff2ffff 	.word	0x3ff2ffff
 8007984:	40038000 	.word	0x40038000
 8007988:	3ff80000 	.word	0x3ff80000
 800798c:	bff00000 	.word	0xbff00000
 8007990:	080088c8 	.word	0x080088c8
 8007994:	080088a8 	.word	0x080088a8

08007998 <fabs>:
 8007998:	ec51 0b10 	vmov	r0, r1, d0
 800799c:	ee10 2a10 	vmov	r2, s0
 80079a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079a4:	ec43 2b10 	vmov	d0, r2, r3
 80079a8:	4770      	bx	lr
	...

080079ac <pow>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	ed2d 8b02 	vpush	{d8}
 80079b2:	eeb0 8a40 	vmov.f32	s16, s0
 80079b6:	eef0 8a60 	vmov.f32	s17, s1
 80079ba:	ec55 4b11 	vmov	r4, r5, d1
 80079be:	f000 f893 	bl	8007ae8 <__ieee754_pow>
 80079c2:	4622      	mov	r2, r4
 80079c4:	462b      	mov	r3, r5
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	ec57 6b10 	vmov	r6, r7, d0
 80079ce:	f7f9 f851 	bl	8000a74 <__aeabi_dcmpun>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d13b      	bne.n	8007a4e <pow+0xa2>
 80079d6:	ec51 0b18 	vmov	r0, r1, d8
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	f7f9 f817 	bl	8000a10 <__aeabi_dcmpeq>
 80079e2:	b1b8      	cbz	r0, 8007a14 <pow+0x68>
 80079e4:	2200      	movs	r2, #0
 80079e6:	2300      	movs	r3, #0
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f9 f810 	bl	8000a10 <__aeabi_dcmpeq>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d146      	bne.n	8007a82 <pow+0xd6>
 80079f4:	ec45 4b10 	vmov	d0, r4, r5
 80079f8:	f000 fe86 	bl	8008708 <finite>
 80079fc:	b338      	cbz	r0, 8007a4e <pow+0xa2>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4620      	mov	r0, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	f7f9 f80d 	bl	8000a24 <__aeabi_dcmplt>
 8007a0a:	b300      	cbz	r0, 8007a4e <pow+0xa2>
 8007a0c:	f000 ff0e 	bl	800882c <__errno>
 8007a10:	2322      	movs	r3, #34	; 0x22
 8007a12:	e01b      	b.n	8007a4c <pow+0xa0>
 8007a14:	ec47 6b10 	vmov	d0, r6, r7
 8007a18:	f000 fe76 	bl	8008708 <finite>
 8007a1c:	b9e0      	cbnz	r0, 8007a58 <pow+0xac>
 8007a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8007a22:	eef0 0a68 	vmov.f32	s1, s17
 8007a26:	f000 fe6f 	bl	8008708 <finite>
 8007a2a:	b1a8      	cbz	r0, 8007a58 <pow+0xac>
 8007a2c:	ec45 4b10 	vmov	d0, r4, r5
 8007a30:	f000 fe6a 	bl	8008708 <finite>
 8007a34:	b180      	cbz	r0, 8007a58 <pow+0xac>
 8007a36:	4632      	mov	r2, r6
 8007a38:	463b      	mov	r3, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f7f9 f819 	bl	8000a74 <__aeabi_dcmpun>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d0e2      	beq.n	8007a0c <pow+0x60>
 8007a46:	f000 fef1 	bl	800882c <__errno>
 8007a4a:	2321      	movs	r3, #33	; 0x21
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	ecbd 8b02 	vpop	{d8}
 8007a52:	ec47 6b10 	vmov	d0, r6, r7
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	4639      	mov	r1, r7
 8007a60:	f7f8 ffd6 	bl	8000a10 <__aeabi_dcmpeq>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0f2      	beq.n	8007a4e <pow+0xa2>
 8007a68:	eeb0 0a48 	vmov.f32	s0, s16
 8007a6c:	eef0 0a68 	vmov.f32	s1, s17
 8007a70:	f000 fe4a 	bl	8008708 <finite>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d0ea      	beq.n	8007a4e <pow+0xa2>
 8007a78:	ec45 4b10 	vmov	d0, r4, r5
 8007a7c:	f000 fe44 	bl	8008708 <finite>
 8007a80:	e7c3      	b.n	8007a0a <pow+0x5e>
 8007a82:	4f01      	ldr	r7, [pc, #4]	; (8007a88 <pow+0xdc>)
 8007a84:	2600      	movs	r6, #0
 8007a86:	e7e2      	b.n	8007a4e <pow+0xa2>
 8007a88:	3ff00000 	.word	0x3ff00000

08007a8c <sqrt>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	ed2d 8b02 	vpush	{d8}
 8007a92:	ec55 4b10 	vmov	r4, r5, d0
 8007a96:	f000 fd55 	bl	8008544 <__ieee754_sqrt>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8007aa6:	eef0 8a60 	vmov.f32	s17, s1
 8007aaa:	f7f8 ffe3 	bl	8000a74 <__aeabi_dcmpun>
 8007aae:	b990      	cbnz	r0, 8007ad6 <sqrt+0x4a>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7f8 ffb4 	bl	8000a24 <__aeabi_dcmplt>
 8007abc:	b158      	cbz	r0, 8007ad6 <sqrt+0x4a>
 8007abe:	f000 feb5 	bl	800882c <__errno>
 8007ac2:	2321      	movs	r3, #33	; 0x21
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4610      	mov	r0, r2
 8007acc:	4619      	mov	r1, r3
 8007ace:	f7f8 fe61 	bl	8000794 <__aeabi_ddiv>
 8007ad2:	ec41 0b18 	vmov	d8, r0, r1
 8007ad6:	eeb0 0a48 	vmov.f32	s0, s16
 8007ada:	eef0 0a68 	vmov.f32	s1, s17
 8007ade:	ecbd 8b02 	vpop	{d8}
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	0000      	movs	r0, r0
	...

08007ae8 <__ieee754_pow>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	ed2d 8b06 	vpush	{d8-d10}
 8007af0:	b089      	sub	sp, #36	; 0x24
 8007af2:	ed8d 1b00 	vstr	d1, [sp]
 8007af6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007afa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007afe:	ea58 0102 	orrs.w	r1, r8, r2
 8007b02:	ec57 6b10 	vmov	r6, r7, d0
 8007b06:	d115      	bne.n	8007b34 <__ieee754_pow+0x4c>
 8007b08:	19b3      	adds	r3, r6, r6
 8007b0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007b0e:	4152      	adcs	r2, r2
 8007b10:	4299      	cmp	r1, r3
 8007b12:	4b89      	ldr	r3, [pc, #548]	; (8007d38 <__ieee754_pow+0x250>)
 8007b14:	4193      	sbcs	r3, r2
 8007b16:	f080 84d2 	bcs.w	80084be <__ieee754_pow+0x9d6>
 8007b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4639      	mov	r1, r7
 8007b22:	f7f8 fb57 	bl	80001d4 <__adddf3>
 8007b26:	ec41 0b10 	vmov	d0, r0, r1
 8007b2a:	b009      	add	sp, #36	; 0x24
 8007b2c:	ecbd 8b06 	vpop	{d8-d10}
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	4b81      	ldr	r3, [pc, #516]	; (8007d3c <__ieee754_pow+0x254>)
 8007b36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	ee10 aa10 	vmov	sl, s0
 8007b40:	463d      	mov	r5, r7
 8007b42:	dc06      	bgt.n	8007b52 <__ieee754_pow+0x6a>
 8007b44:	d101      	bne.n	8007b4a <__ieee754_pow+0x62>
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d1e7      	bne.n	8007b1a <__ieee754_pow+0x32>
 8007b4a:	4598      	cmp	r8, r3
 8007b4c:	dc01      	bgt.n	8007b52 <__ieee754_pow+0x6a>
 8007b4e:	d10f      	bne.n	8007b70 <__ieee754_pow+0x88>
 8007b50:	b172      	cbz	r2, 8007b70 <__ieee754_pow+0x88>
 8007b52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007b56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007b5a:	ea55 050a 	orrs.w	r5, r5, sl
 8007b5e:	d1dc      	bne.n	8007b1a <__ieee754_pow+0x32>
 8007b60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b64:	18db      	adds	r3, r3, r3
 8007b66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007b6a:	4152      	adcs	r2, r2
 8007b6c:	429d      	cmp	r5, r3
 8007b6e:	e7d0      	b.n	8007b12 <__ieee754_pow+0x2a>
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	da3b      	bge.n	8007bec <__ieee754_pow+0x104>
 8007b74:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <__ieee754_pow+0x258>)
 8007b76:	4598      	cmp	r8, r3
 8007b78:	dc51      	bgt.n	8007c1e <__ieee754_pow+0x136>
 8007b7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b7e:	4598      	cmp	r8, r3
 8007b80:	f340 84ac 	ble.w	80084dc <__ieee754_pow+0x9f4>
 8007b84:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b8c:	2b14      	cmp	r3, #20
 8007b8e:	dd0f      	ble.n	8007bb0 <__ieee754_pow+0xc8>
 8007b90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007b94:	fa22 f103 	lsr.w	r1, r2, r3
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	f040 849d 	bne.w	80084dc <__ieee754_pow+0x9f4>
 8007ba2:	f001 0101 	and.w	r1, r1, #1
 8007ba6:	f1c1 0302 	rsb	r3, r1, #2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	b182      	cbz	r2, 8007bd0 <__ieee754_pow+0xe8>
 8007bae:	e05f      	b.n	8007c70 <__ieee754_pow+0x188>
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d15b      	bne.n	8007c6c <__ieee754_pow+0x184>
 8007bb4:	f1c3 0314 	rsb	r3, r3, #20
 8007bb8:	fa48 f103 	asr.w	r1, r8, r3
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	4543      	cmp	r3, r8
 8007bc2:	f040 8488 	bne.w	80084d6 <__ieee754_pow+0x9ee>
 8007bc6:	f001 0101 	and.w	r1, r1, #1
 8007bca:	f1c1 0302 	rsb	r3, r1, #2
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	4b5c      	ldr	r3, [pc, #368]	; (8007d44 <__ieee754_pow+0x25c>)
 8007bd2:	4598      	cmp	r8, r3
 8007bd4:	d132      	bne.n	8007c3c <__ieee754_pow+0x154>
 8007bd6:	f1b9 0f00 	cmp.w	r9, #0
 8007bda:	f280 8478 	bge.w	80084ce <__ieee754_pow+0x9e6>
 8007bde:	4959      	ldr	r1, [pc, #356]	; (8007d44 <__ieee754_pow+0x25c>)
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	2000      	movs	r0, #0
 8007be6:	f7f8 fdd5 	bl	8000794 <__aeabi_ddiv>
 8007bea:	e79c      	b.n	8007b26 <__ieee754_pow+0x3e>
 8007bec:	2300      	movs	r3, #0
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d13d      	bne.n	8007c70 <__ieee754_pow+0x188>
 8007bf4:	4b51      	ldr	r3, [pc, #324]	; (8007d3c <__ieee754_pow+0x254>)
 8007bf6:	4598      	cmp	r8, r3
 8007bf8:	d1ea      	bne.n	8007bd0 <__ieee754_pow+0xe8>
 8007bfa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007bfe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007c02:	ea53 030a 	orrs.w	r3, r3, sl
 8007c06:	f000 845a 	beq.w	80084be <__ieee754_pow+0x9d6>
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	; (8007d48 <__ieee754_pow+0x260>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	dd08      	ble.n	8007c22 <__ieee754_pow+0x13a>
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	f2c0 8457 	blt.w	80084c6 <__ieee754_pow+0x9de>
 8007c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c1c:	e783      	b.n	8007b26 <__ieee754_pow+0x3e>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e7e5      	b.n	8007bee <__ieee754_pow+0x106>
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	f04f 0000 	mov.w	r0, #0
 8007c2a:	f04f 0100 	mov.w	r1, #0
 8007c2e:	f6bf af7a 	bge.w	8007b26 <__ieee754_pow+0x3e>
 8007c32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007c36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c3a:	e774      	b.n	8007b26 <__ieee754_pow+0x3e>
 8007c3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007c40:	d106      	bne.n	8007c50 <__ieee754_pow+0x168>
 8007c42:	4632      	mov	r2, r6
 8007c44:	463b      	mov	r3, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	4639      	mov	r1, r7
 8007c4a:	f7f8 fc79 	bl	8000540 <__aeabi_dmul>
 8007c4e:	e76a      	b.n	8007b26 <__ieee754_pow+0x3e>
 8007c50:	4b3e      	ldr	r3, [pc, #248]	; (8007d4c <__ieee754_pow+0x264>)
 8007c52:	4599      	cmp	r9, r3
 8007c54:	d10c      	bne.n	8007c70 <__ieee754_pow+0x188>
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	db0a      	blt.n	8007c70 <__ieee754_pow+0x188>
 8007c5a:	ec47 6b10 	vmov	d0, r6, r7
 8007c5e:	b009      	add	sp, #36	; 0x24
 8007c60:	ecbd 8b06 	vpop	{d8-d10}
 8007c64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	f000 bc6c 	b.w	8008544 <__ieee754_sqrt>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	ec47 6b10 	vmov	d0, r6, r7
 8007c74:	f7ff fe90 	bl	8007998 <fabs>
 8007c78:	ec51 0b10 	vmov	r0, r1, d0
 8007c7c:	f1ba 0f00 	cmp.w	sl, #0
 8007c80:	d129      	bne.n	8007cd6 <__ieee754_pow+0x1ee>
 8007c82:	b124      	cbz	r4, 8007c8e <__ieee754_pow+0x1a6>
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <__ieee754_pow+0x25c>)
 8007c86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d123      	bne.n	8007cd6 <__ieee754_pow+0x1ee>
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	da05      	bge.n	8007ca0 <__ieee754_pow+0x1b8>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	2000      	movs	r0, #0
 8007c9a:	492a      	ldr	r1, [pc, #168]	; (8007d44 <__ieee754_pow+0x25c>)
 8007c9c:	f7f8 fd7a 	bl	8000794 <__aeabi_ddiv>
 8007ca0:	2d00      	cmp	r5, #0
 8007ca2:	f6bf af40 	bge.w	8007b26 <__ieee754_pow+0x3e>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007cac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007cb0:	4323      	orrs	r3, r4
 8007cb2:	d108      	bne.n	8007cc6 <__ieee754_pow+0x1de>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f7f8 fa88 	bl	80001d0 <__aeabi_dsub>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	e78f      	b.n	8007be6 <__ieee754_pow+0xfe>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	f47f af2c 	bne.w	8007b26 <__ieee754_pow+0x3e>
 8007cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	e727      	b.n	8007b26 <__ieee754_pow+0x3e>
 8007cd6:	0feb      	lsrs	r3, r5, #31
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	9a06      	ldr	r2, [sp, #24]
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d102      	bne.n	8007cea <__ieee754_pow+0x202>
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	e7e6      	b.n	8007cb8 <__ieee754_pow+0x1d0>
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <__ieee754_pow+0x268>)
 8007cec:	4598      	cmp	r8, r3
 8007cee:	f340 80fb 	ble.w	8007ee8 <__ieee754_pow+0x400>
 8007cf2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007cf6:	4598      	cmp	r8, r3
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <__ieee754_pow+0x260>)
 8007cfa:	dd0c      	ble.n	8007d16 <__ieee754_pow+0x22e>
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	dc0f      	bgt.n	8007d20 <__ieee754_pow+0x238>
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	da0f      	bge.n	8007d26 <__ieee754_pow+0x23e>
 8007d06:	2000      	movs	r0, #0
 8007d08:	b009      	add	sp, #36	; 0x24
 8007d0a:	ecbd 8b06 	vpop	{d8-d10}
 8007d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d12:	f000 bcf0 	b.w	80086f6 <__math_oflow>
 8007d16:	429c      	cmp	r4, r3
 8007d18:	dbf2      	blt.n	8007d00 <__ieee754_pow+0x218>
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <__ieee754_pow+0x25c>)
 8007d1c:	429c      	cmp	r4, r3
 8007d1e:	dd19      	ble.n	8007d54 <__ieee754_pow+0x26c>
 8007d20:	f1b9 0f00 	cmp.w	r9, #0
 8007d24:	dcef      	bgt.n	8007d06 <__ieee754_pow+0x21e>
 8007d26:	2000      	movs	r0, #0
 8007d28:	b009      	add	sp, #36	; 0x24
 8007d2a:	ecbd 8b06 	vpop	{d8-d10}
 8007d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d32:	f000 bcd7 	b.w	80086e4 <__math_uflow>
 8007d36:	bf00      	nop
 8007d38:	fff00000 	.word	0xfff00000
 8007d3c:	7ff00000 	.word	0x7ff00000
 8007d40:	433fffff 	.word	0x433fffff
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	3fefffff 	.word	0x3fefffff
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	41e00000 	.word	0x41e00000
 8007d54:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <__ieee754_pow+0x3f0>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	f7f8 fa3a 	bl	80001d0 <__aeabi_dsub>
 8007d5c:	a354      	add	r3, pc, #336	; (adr r3, 8007eb0 <__ieee754_pow+0x3c8>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	f7f8 fbeb 	bl	8000540 <__aeabi_dmul>
 8007d6a:	a353      	add	r3, pc, #332	; (adr r3, 8007eb8 <__ieee754_pow+0x3d0>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	4606      	mov	r6, r0
 8007d72:	460f      	mov	r7, r1
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fbe2 	bl	8000540 <__aeabi_dmul>
 8007d7c:	4b57      	ldr	r3, [pc, #348]	; (8007edc <__ieee754_pow+0x3f4>)
 8007d7e:	4682      	mov	sl, r0
 8007d80:	468b      	mov	fp, r1
 8007d82:	2200      	movs	r2, #0
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 fbda 	bl	8000540 <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	a14b      	add	r1, pc, #300	; (adr r1, 8007ec0 <__ieee754_pow+0x3d8>)
 8007d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d96:	f7f8 fa1b 	bl	80001d0 <__aeabi_dsub>
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	f7f8 fbcf 	bl	8000540 <__aeabi_dmul>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	2000      	movs	r0, #0
 8007da8:	494d      	ldr	r1, [pc, #308]	; (8007ee0 <__ieee754_pow+0x3f8>)
 8007daa:	f7f8 fa11 	bl	80001d0 <__aeabi_dsub>
 8007dae:	4622      	mov	r2, r4
 8007db0:	4680      	mov	r8, r0
 8007db2:	4689      	mov	r9, r1
 8007db4:	462b      	mov	r3, r5
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fbc1 	bl	8000540 <__aeabi_dmul>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fbbb 	bl	8000540 <__aeabi_dmul>
 8007dca:	a33f      	add	r3, pc, #252	; (adr r3, 8007ec8 <__ieee754_pow+0x3e0>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fbb6 	bl	8000540 <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4650      	mov	r0, sl
 8007dda:	4659      	mov	r1, fp
 8007ddc:	f7f8 f9f8 	bl	80001d0 <__aeabi_dsub>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 f9f2 	bl	80001d4 <__adddf3>
 8007df0:	2000      	movs	r0, #0
 8007df2:	4632      	mov	r2, r6
 8007df4:	463b      	mov	r3, r7
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	f7f8 f9e9 	bl	80001d0 <__aeabi_dsub>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4640      	mov	r0, r8
 8007e04:	4649      	mov	r1, r9
 8007e06:	f7f8 f9e3 	bl	80001d0 <__aeabi_dsub>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	9a06      	ldr	r2, [sp, #24]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	4682      	mov	sl, r0
 8007e14:	468b      	mov	fp, r1
 8007e16:	f040 81e7 	bne.w	80081e8 <__ieee754_pow+0x700>
 8007e1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ed0 <__ieee754_pow+0x3e8>
 8007e1e:	eeb0 8a47 	vmov.f32	s16, s14
 8007e22:	eef0 8a67 	vmov.f32	s17, s15
 8007e26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e34:	f7f8 f9cc 	bl	80001d0 <__aeabi_dsub>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f7f8 fb80 	bl	8000540 <__aeabi_dmul>
 8007e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fb78 	bl	8000540 <__aeabi_dmul>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 f9bc 	bl	80001d4 <__adddf3>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	4680      	mov	r8, r0
 8007e62:	4689      	mov	r9, r1
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fb6a 	bl	8000540 <__aeabi_dmul>
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	4602      	mov	r2, r0
 8007e74:	4649      	mov	r1, r9
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7f8 f9ac 	bl	80001d4 <__adddf3>
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <__ieee754_pow+0x3fc>)
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	ec45 4b19 	vmov	d9, r4, r5
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	468b      	mov	fp, r1
 8007e8a:	f340 82f1 	ble.w	8008470 <__ieee754_pow+0x988>
 8007e8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e96:	4303      	orrs	r3, r0
 8007e98:	f000 81e4 	beq.w	8008264 <__ieee754_pow+0x77c>
 8007e9c:	ec51 0b18 	vmov	r0, r1, d8
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f7f8 fdbe 	bl	8000a24 <__aeabi_dcmplt>
 8007ea8:	3800      	subs	r0, #0
 8007eaa:	bf18      	it	ne
 8007eac:	2001      	movne	r0, #1
 8007eae:	e72b      	b.n	8007d08 <__ieee754_pow+0x220>
 8007eb0:	60000000 	.word	0x60000000
 8007eb4:	3ff71547 	.word	0x3ff71547
 8007eb8:	f85ddf44 	.word	0xf85ddf44
 8007ebc:	3e54ae0b 	.word	0x3e54ae0b
 8007ec0:	55555555 	.word	0x55555555
 8007ec4:	3fd55555 	.word	0x3fd55555
 8007ec8:	652b82fe 	.word	0x652b82fe
 8007ecc:	3ff71547 	.word	0x3ff71547
 8007ed0:	00000000 	.word	0x00000000
 8007ed4:	bff00000 	.word	0xbff00000
 8007ed8:	3ff00000 	.word	0x3ff00000
 8007edc:	3fd00000 	.word	0x3fd00000
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	408fffff 	.word	0x408fffff
 8007ee8:	4bd5      	ldr	r3, [pc, #852]	; (8008240 <__ieee754_pow+0x758>)
 8007eea:	402b      	ands	r3, r5
 8007eec:	2200      	movs	r2, #0
 8007eee:	b92b      	cbnz	r3, 8007efc <__ieee754_pow+0x414>
 8007ef0:	4bd4      	ldr	r3, [pc, #848]	; (8008244 <__ieee754_pow+0x75c>)
 8007ef2:	f7f8 fb25 	bl	8000540 <__aeabi_dmul>
 8007ef6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007efa:	460c      	mov	r4, r1
 8007efc:	1523      	asrs	r3, r4, #20
 8007efe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f02:	4413      	add	r3, r2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	4bd0      	ldr	r3, [pc, #832]	; (8008248 <__ieee754_pow+0x760>)
 8007f08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007f10:	429c      	cmp	r4, r3
 8007f12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f16:	dd08      	ble.n	8007f2a <__ieee754_pow+0x442>
 8007f18:	4bcc      	ldr	r3, [pc, #816]	; (800824c <__ieee754_pow+0x764>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	f340 8162 	ble.w	80081e4 <__ieee754_pow+0x6fc>
 8007f20:	9b05      	ldr	r3, [sp, #20]
 8007f22:	3301      	adds	r3, #1
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007f2a:	2400      	movs	r4, #0
 8007f2c:	00e3      	lsls	r3, r4, #3
 8007f2e:	9307      	str	r3, [sp, #28]
 8007f30:	4bc7      	ldr	r3, [pc, #796]	; (8008250 <__ieee754_pow+0x768>)
 8007f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f36:	ed93 7b00 	vldr	d7, [r3]
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	ec53 2b17 	vmov	r2, r3, d7
 8007f40:	eeb0 9a47 	vmov.f32	s18, s14
 8007f44:	eef0 9a67 	vmov.f32	s19, s15
 8007f48:	4682      	mov	sl, r0
 8007f4a:	f7f8 f941 	bl	80001d0 <__aeabi_dsub>
 8007f4e:	4652      	mov	r2, sl
 8007f50:	4606      	mov	r6, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	462b      	mov	r3, r5
 8007f56:	ec51 0b19 	vmov	r0, r1, d9
 8007f5a:	f7f8 f93b 	bl	80001d4 <__adddf3>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	2000      	movs	r0, #0
 8007f64:	49bb      	ldr	r1, [pc, #748]	; (8008254 <__ieee754_pow+0x76c>)
 8007f66:	f7f8 fc15 	bl	8000794 <__aeabi_ddiv>
 8007f6a:	ec41 0b1a 	vmov	d10, r0, r1
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4630      	mov	r0, r6
 8007f74:	4639      	mov	r1, r7
 8007f76:	f7f8 fae3 	bl	8000540 <__aeabi_dmul>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f80:	9302      	str	r3, [sp, #8]
 8007f82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f86:	46ab      	mov	fp, r5
 8007f88:	106d      	asrs	r5, r5, #1
 8007f8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f92:	ec41 0b18 	vmov	d8, r0, r1
 8007f96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	461d      	mov	r5, r3
 8007fa4:	f7f8 facc 	bl	8000540 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f90e 	bl	80001d0 <__aeabi_dsub>
 8007fb4:	ec53 2b19 	vmov	r2, r3, d9
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 f906 	bl	80001d0 <__aeabi_dsub>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4650      	mov	r0, sl
 8007fca:	4659      	mov	r1, fp
 8007fcc:	f7f8 f900 	bl	80001d0 <__aeabi_dsub>
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	f7f8 fab4 	bl	8000540 <__aeabi_dmul>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 f8f6 	bl	80001d0 <__aeabi_dsub>
 8007fe4:	ec53 2b1a 	vmov	r2, r3, d10
 8007fe8:	f7f8 faaa 	bl	8000540 <__aeabi_dmul>
 8007fec:	ec53 2b18 	vmov	r2, r3, d8
 8007ff0:	ec41 0b19 	vmov	d9, r0, r1
 8007ff4:	ec51 0b18 	vmov	r0, r1, d8
 8007ff8:	f7f8 faa2 	bl	8000540 <__aeabi_dmul>
 8007ffc:	a37c      	add	r3, pc, #496	; (adr r3, 80081f0 <__ieee754_pow+0x708>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	4604      	mov	r4, r0
 8008004:	460d      	mov	r5, r1
 8008006:	f7f8 fa9b 	bl	8000540 <__aeabi_dmul>
 800800a:	a37b      	add	r3, pc, #492	; (adr r3, 80081f8 <__ieee754_pow+0x710>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f8e0 	bl	80001d4 <__adddf3>
 8008014:	4622      	mov	r2, r4
 8008016:	462b      	mov	r3, r5
 8008018:	f7f8 fa92 	bl	8000540 <__aeabi_dmul>
 800801c:	a378      	add	r3, pc, #480	; (adr r3, 8008200 <__ieee754_pow+0x718>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f8d7 	bl	80001d4 <__adddf3>
 8008026:	4622      	mov	r2, r4
 8008028:	462b      	mov	r3, r5
 800802a:	f7f8 fa89 	bl	8000540 <__aeabi_dmul>
 800802e:	a376      	add	r3, pc, #472	; (adr r3, 8008208 <__ieee754_pow+0x720>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f8ce 	bl	80001d4 <__adddf3>
 8008038:	4622      	mov	r2, r4
 800803a:	462b      	mov	r3, r5
 800803c:	f7f8 fa80 	bl	8000540 <__aeabi_dmul>
 8008040:	a373      	add	r3, pc, #460	; (adr r3, 8008210 <__ieee754_pow+0x728>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f8c5 	bl	80001d4 <__adddf3>
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	f7f8 fa77 	bl	8000540 <__aeabi_dmul>
 8008052:	a371      	add	r3, pc, #452	; (adr r3, 8008218 <__ieee754_pow+0x730>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f8bc 	bl	80001d4 <__adddf3>
 800805c:	4622      	mov	r2, r4
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	462b      	mov	r3, r5
 8008064:	4620      	mov	r0, r4
 8008066:	4629      	mov	r1, r5
 8008068:	f7f8 fa6a 	bl	8000540 <__aeabi_dmul>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fa64 	bl	8000540 <__aeabi_dmul>
 8008078:	4642      	mov	r2, r8
 800807a:	4604      	mov	r4, r0
 800807c:	460d      	mov	r5, r1
 800807e:	464b      	mov	r3, r9
 8008080:	ec51 0b18 	vmov	r0, r1, d8
 8008084:	f7f8 f8a6 	bl	80001d4 <__adddf3>
 8008088:	ec53 2b19 	vmov	r2, r3, d9
 800808c:	f7f8 fa58 	bl	8000540 <__aeabi_dmul>
 8008090:	4622      	mov	r2, r4
 8008092:	462b      	mov	r3, r5
 8008094:	f7f8 f89e 	bl	80001d4 <__adddf3>
 8008098:	4642      	mov	r2, r8
 800809a:	4682      	mov	sl, r0
 800809c:	468b      	mov	fp, r1
 800809e:	464b      	mov	r3, r9
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 fa4c 	bl	8000540 <__aeabi_dmul>
 80080a8:	4b6b      	ldr	r3, [pc, #428]	; (8008258 <__ieee754_pow+0x770>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	4606      	mov	r6, r0
 80080ae:	460f      	mov	r7, r1
 80080b0:	f7f8 f890 	bl	80001d4 <__adddf3>
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	f7f8 f88c 	bl	80001d4 <__adddf3>
 80080bc:	2000      	movs	r0, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	460d      	mov	r5, r1
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 fa39 	bl	8000540 <__aeabi_dmul>
 80080ce:	4b62      	ldr	r3, [pc, #392]	; (8008258 <__ieee754_pow+0x770>)
 80080d0:	4680      	mov	r8, r0
 80080d2:	4689      	mov	r9, r1
 80080d4:	2200      	movs	r2, #0
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 f879 	bl	80001d0 <__aeabi_dsub>
 80080de:	4632      	mov	r2, r6
 80080e0:	463b      	mov	r3, r7
 80080e2:	f7f8 f875 	bl	80001d0 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4650      	mov	r0, sl
 80080ec:	4659      	mov	r1, fp
 80080ee:	f7f8 f86f 	bl	80001d0 <__aeabi_dsub>
 80080f2:	ec53 2b18 	vmov	r2, r3, d8
 80080f6:	f7f8 fa23 	bl	8000540 <__aeabi_dmul>
 80080fa:	4622      	mov	r2, r4
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	462b      	mov	r3, r5
 8008102:	ec51 0b19 	vmov	r0, r1, d9
 8008106:	f7f8 fa1b 	bl	8000540 <__aeabi_dmul>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 f85f 	bl	80001d4 <__adddf3>
 8008116:	4606      	mov	r6, r0
 8008118:	460f      	mov	r7, r1
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f7f8 f857 	bl	80001d4 <__adddf3>
 8008126:	a33e      	add	r3, pc, #248	; (adr r3, 8008220 <__ieee754_pow+0x738>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	2000      	movs	r0, #0
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	f7f8 fa05 	bl	8000540 <__aeabi_dmul>
 8008136:	4642      	mov	r2, r8
 8008138:	ec41 0b18 	vmov	d8, r0, r1
 800813c:	464b      	mov	r3, r9
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 f845 	bl	80001d0 <__aeabi_dsub>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	f7f8 f83f 	bl	80001d0 <__aeabi_dsub>
 8008152:	a335      	add	r3, pc, #212	; (adr r3, 8008228 <__ieee754_pow+0x740>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 f9f2 	bl	8000540 <__aeabi_dmul>
 800815c:	a334      	add	r3, pc, #208	; (adr r3, 8008230 <__ieee754_pow+0x748>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	4606      	mov	r6, r0
 8008164:	460f      	mov	r7, r1
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 f9e9 	bl	8000540 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4630      	mov	r0, r6
 8008174:	4639      	mov	r1, r7
 8008176:	f7f8 f82d 	bl	80001d4 <__adddf3>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4b37      	ldr	r3, [pc, #220]	; (800825c <__ieee754_pow+0x774>)
 800817e:	4413      	add	r3, r2
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 f826 	bl	80001d4 <__adddf3>
 8008188:	4682      	mov	sl, r0
 800818a:	9805      	ldr	r0, [sp, #20]
 800818c:	468b      	mov	fp, r1
 800818e:	f7f8 f96d 	bl	800046c <__aeabi_i2d>
 8008192:	9a07      	ldr	r2, [sp, #28]
 8008194:	4b32      	ldr	r3, [pc, #200]	; (8008260 <__ieee754_pow+0x778>)
 8008196:	4413      	add	r3, r2
 8008198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	4652      	mov	r2, sl
 80081a2:	465b      	mov	r3, fp
 80081a4:	ec51 0b18 	vmov	r0, r1, d8
 80081a8:	f7f8 f814 	bl	80001d4 <__adddf3>
 80081ac:	4642      	mov	r2, r8
 80081ae:	464b      	mov	r3, r9
 80081b0:	f7f8 f810 	bl	80001d4 <__adddf3>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 f80c 	bl	80001d4 <__adddf3>
 80081bc:	2000      	movs	r0, #0
 80081be:	4632      	mov	r2, r6
 80081c0:	463b      	mov	r3, r7
 80081c2:	4604      	mov	r4, r0
 80081c4:	460d      	mov	r5, r1
 80081c6:	f7f8 f803 	bl	80001d0 <__aeabi_dsub>
 80081ca:	4642      	mov	r2, r8
 80081cc:	464b      	mov	r3, r9
 80081ce:	f7f7 ffff 	bl	80001d0 <__aeabi_dsub>
 80081d2:	ec53 2b18 	vmov	r2, r3, d8
 80081d6:	f7f7 fffb 	bl	80001d0 <__aeabi_dsub>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4650      	mov	r0, sl
 80081e0:	4659      	mov	r1, fp
 80081e2:	e610      	b.n	8007e06 <__ieee754_pow+0x31e>
 80081e4:	2401      	movs	r4, #1
 80081e6:	e6a1      	b.n	8007f2c <__ieee754_pow+0x444>
 80081e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008238 <__ieee754_pow+0x750>
 80081ec:	e617      	b.n	8007e1e <__ieee754_pow+0x336>
 80081ee:	bf00      	nop
 80081f0:	4a454eef 	.word	0x4a454eef
 80081f4:	3fca7e28 	.word	0x3fca7e28
 80081f8:	93c9db65 	.word	0x93c9db65
 80081fc:	3fcd864a 	.word	0x3fcd864a
 8008200:	a91d4101 	.word	0xa91d4101
 8008204:	3fd17460 	.word	0x3fd17460
 8008208:	518f264d 	.word	0x518f264d
 800820c:	3fd55555 	.word	0x3fd55555
 8008210:	db6fabff 	.word	0xdb6fabff
 8008214:	3fdb6db6 	.word	0x3fdb6db6
 8008218:	33333303 	.word	0x33333303
 800821c:	3fe33333 	.word	0x3fe33333
 8008220:	e0000000 	.word	0xe0000000
 8008224:	3feec709 	.word	0x3feec709
 8008228:	dc3a03fd 	.word	0xdc3a03fd
 800822c:	3feec709 	.word	0x3feec709
 8008230:	145b01f5 	.word	0x145b01f5
 8008234:	be3e2fe0 	.word	0xbe3e2fe0
 8008238:	00000000 	.word	0x00000000
 800823c:	3ff00000 	.word	0x3ff00000
 8008240:	7ff00000 	.word	0x7ff00000
 8008244:	43400000 	.word	0x43400000
 8008248:	0003988e 	.word	0x0003988e
 800824c:	000bb679 	.word	0x000bb679
 8008250:	080088e8 	.word	0x080088e8
 8008254:	3ff00000 	.word	0x3ff00000
 8008258:	40080000 	.word	0x40080000
 800825c:	08008908 	.word	0x08008908
 8008260:	080088f8 	.word	0x080088f8
 8008264:	a3b5      	add	r3, pc, #724	; (adr r3, 800853c <__ieee754_pow+0xa54>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	4640      	mov	r0, r8
 800826c:	4649      	mov	r1, r9
 800826e:	f7f7 ffb1 	bl	80001d4 <__adddf3>
 8008272:	4622      	mov	r2, r4
 8008274:	ec41 0b1a 	vmov	d10, r0, r1
 8008278:	462b      	mov	r3, r5
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f7 ffa7 	bl	80001d0 <__aeabi_dsub>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	ec51 0b1a 	vmov	r0, r1, d10
 800828a:	f7f8 fbe9 	bl	8000a60 <__aeabi_dcmpgt>
 800828e:	2800      	cmp	r0, #0
 8008290:	f47f ae04 	bne.w	8007e9c <__ieee754_pow+0x3b4>
 8008294:	4aa4      	ldr	r2, [pc, #656]	; (8008528 <__ieee754_pow+0xa40>)
 8008296:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800829a:	4293      	cmp	r3, r2
 800829c:	f340 8108 	ble.w	80084b0 <__ieee754_pow+0x9c8>
 80082a0:	151b      	asrs	r3, r3, #20
 80082a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80082a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80082aa:	fa4a f303 	asr.w	r3, sl, r3
 80082ae:	445b      	add	r3, fp
 80082b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80082b4:	4e9d      	ldr	r6, [pc, #628]	; (800852c <__ieee754_pow+0xa44>)
 80082b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80082ba:	4116      	asrs	r6, r2
 80082bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80082c0:	2000      	movs	r0, #0
 80082c2:	ea23 0106 	bic.w	r1, r3, r6
 80082c6:	f1c2 0214 	rsb	r2, r2, #20
 80082ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80082ce:	fa4a fa02 	asr.w	sl, sl, r2
 80082d2:	f1bb 0f00 	cmp.w	fp, #0
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	bfb8      	it	lt
 80082e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80082e4:	f7f7 ff74 	bl	80001d0 <__aeabi_dsub>
 80082e8:	ec41 0b19 	vmov	d9, r0, r1
 80082ec:	4642      	mov	r2, r8
 80082ee:	464b      	mov	r3, r9
 80082f0:	ec51 0b19 	vmov	r0, r1, d9
 80082f4:	f7f7 ff6e 	bl	80001d4 <__adddf3>
 80082f8:	a37b      	add	r3, pc, #492	; (adr r3, 80084e8 <__ieee754_pow+0xa00>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	2000      	movs	r0, #0
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	f7f8 f91c 	bl	8000540 <__aeabi_dmul>
 8008308:	ec53 2b19 	vmov	r2, r3, d9
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	f7f7 ff5c 	bl	80001d0 <__aeabi_dsub>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f7 ff56 	bl	80001d0 <__aeabi_dsub>
 8008324:	a372      	add	r3, pc, #456	; (adr r3, 80084f0 <__ieee754_pow+0xa08>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f7f8 f909 	bl	8000540 <__aeabi_dmul>
 800832e:	a372      	add	r3, pc, #456	; (adr r3, 80084f8 <__ieee754_pow+0xa10>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	4680      	mov	r8, r0
 8008336:	4689      	mov	r9, r1
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f8 f900 	bl	8000540 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f7 ff44 	bl	80001d4 <__adddf3>
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f7 ff3c 	bl	80001d4 <__adddf3>
 800835c:	4632      	mov	r2, r6
 800835e:	463b      	mov	r3, r7
 8008360:	4680      	mov	r8, r0
 8008362:	4689      	mov	r9, r1
 8008364:	f7f7 ff34 	bl	80001d0 <__aeabi_dsub>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f7 ff2e 	bl	80001d0 <__aeabi_dsub>
 8008374:	4642      	mov	r2, r8
 8008376:	4606      	mov	r6, r0
 8008378:	460f      	mov	r7, r1
 800837a:	464b      	mov	r3, r9
 800837c:	4640      	mov	r0, r8
 800837e:	4649      	mov	r1, r9
 8008380:	f7f8 f8de 	bl	8000540 <__aeabi_dmul>
 8008384:	a35e      	add	r3, pc, #376	; (adr r3, 8008500 <__ieee754_pow+0xa18>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	4604      	mov	r4, r0
 800838c:	460d      	mov	r5, r1
 800838e:	f7f8 f8d7 	bl	8000540 <__aeabi_dmul>
 8008392:	a35d      	add	r3, pc, #372	; (adr r3, 8008508 <__ieee754_pow+0xa20>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f7 ff1a 	bl	80001d0 <__aeabi_dsub>
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 f8ce 	bl	8000540 <__aeabi_dmul>
 80083a4:	a35a      	add	r3, pc, #360	; (adr r3, 8008510 <__ieee754_pow+0xa28>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff13 	bl	80001d4 <__adddf3>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f8 f8c5 	bl	8000540 <__aeabi_dmul>
 80083b6:	a358      	add	r3, pc, #352	; (adr r3, 8008518 <__ieee754_pow+0xa30>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f7 ff08 	bl	80001d0 <__aeabi_dsub>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	f7f8 f8bc 	bl	8000540 <__aeabi_dmul>
 80083c8:	a355      	add	r3, pc, #340	; (adr r3, 8008520 <__ieee754_pow+0xa38>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff01 	bl	80001d4 <__adddf3>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f8 f8b3 	bl	8000540 <__aeabi_dmul>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f7 fef5 	bl	80001d0 <__aeabi_dsub>
 80083e6:	4604      	mov	r4, r0
 80083e8:	460d      	mov	r5, r1
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f8 f8a5 	bl	8000540 <__aeabi_dmul>
 80083f6:	2200      	movs	r2, #0
 80083f8:	ec41 0b19 	vmov	d9, r0, r1
 80083fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f7 fee4 	bl	80001d0 <__aeabi_dsub>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	ec51 0b19 	vmov	r0, r1, d9
 8008410:	f7f8 f9c0 	bl	8000794 <__aeabi_ddiv>
 8008414:	4632      	mov	r2, r6
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	463b      	mov	r3, r7
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 f88e 	bl	8000540 <__aeabi_dmul>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	f7f7 fed4 	bl	80001d4 <__adddf3>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4620      	mov	r0, r4
 8008432:	4629      	mov	r1, r5
 8008434:	f7f7 fecc 	bl	80001d0 <__aeabi_dsub>
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	f7f7 fec8 	bl	80001d0 <__aeabi_dsub>
 8008440:	460b      	mov	r3, r1
 8008442:	4602      	mov	r2, r0
 8008444:	493a      	ldr	r1, [pc, #232]	; (8008530 <__ieee754_pow+0xa48>)
 8008446:	2000      	movs	r0, #0
 8008448:	f7f7 fec2 	bl	80001d0 <__aeabi_dsub>
 800844c:	ec41 0b10 	vmov	d0, r0, r1
 8008450:	ee10 3a90 	vmov	r3, s1
 8008454:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800845c:	da2b      	bge.n	80084b6 <__ieee754_pow+0x9ce>
 800845e:	4650      	mov	r0, sl
 8008460:	f000 f95e 	bl	8008720 <scalbn>
 8008464:	ec51 0b10 	vmov	r0, r1, d0
 8008468:	ec53 2b18 	vmov	r2, r3, d8
 800846c:	f7ff bbed 	b.w	8007c4a <__ieee754_pow+0x162>
 8008470:	4b30      	ldr	r3, [pc, #192]	; (8008534 <__ieee754_pow+0xa4c>)
 8008472:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008476:	429e      	cmp	r6, r3
 8008478:	f77f af0c 	ble.w	8008294 <__ieee754_pow+0x7ac>
 800847c:	4b2e      	ldr	r3, [pc, #184]	; (8008538 <__ieee754_pow+0xa50>)
 800847e:	440b      	add	r3, r1
 8008480:	4303      	orrs	r3, r0
 8008482:	d009      	beq.n	8008498 <__ieee754_pow+0x9b0>
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	f7f8 faca 	bl	8000a24 <__aeabi_dcmplt>
 8008490:	3800      	subs	r0, #0
 8008492:	bf18      	it	ne
 8008494:	2001      	movne	r0, #1
 8008496:	e447      	b.n	8007d28 <__ieee754_pow+0x240>
 8008498:	4622      	mov	r2, r4
 800849a:	462b      	mov	r3, r5
 800849c:	f7f7 fe98 	bl	80001d0 <__aeabi_dsub>
 80084a0:	4642      	mov	r2, r8
 80084a2:	464b      	mov	r3, r9
 80084a4:	f7f8 fad2 	bl	8000a4c <__aeabi_dcmpge>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	f43f aef3 	beq.w	8008294 <__ieee754_pow+0x7ac>
 80084ae:	e7e9      	b.n	8008484 <__ieee754_pow+0x99c>
 80084b0:	f04f 0a00 	mov.w	sl, #0
 80084b4:	e71a      	b.n	80082ec <__ieee754_pow+0x804>
 80084b6:	ec51 0b10 	vmov	r0, r1, d0
 80084ba:	4619      	mov	r1, r3
 80084bc:	e7d4      	b.n	8008468 <__ieee754_pow+0x980>
 80084be:	491c      	ldr	r1, [pc, #112]	; (8008530 <__ieee754_pow+0xa48>)
 80084c0:	2000      	movs	r0, #0
 80084c2:	f7ff bb30 	b.w	8007b26 <__ieee754_pow+0x3e>
 80084c6:	2000      	movs	r0, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	f7ff bb2c 	b.w	8007b26 <__ieee754_pow+0x3e>
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7ff bb28 	b.w	8007b26 <__ieee754_pow+0x3e>
 80084d6:	9204      	str	r2, [sp, #16]
 80084d8:	f7ff bb7a 	b.w	8007bd0 <__ieee754_pow+0xe8>
 80084dc:	2300      	movs	r3, #0
 80084de:	f7ff bb64 	b.w	8007baa <__ieee754_pow+0xc2>
 80084e2:	bf00      	nop
 80084e4:	f3af 8000 	nop.w
 80084e8:	00000000 	.word	0x00000000
 80084ec:	3fe62e43 	.word	0x3fe62e43
 80084f0:	fefa39ef 	.word	0xfefa39ef
 80084f4:	3fe62e42 	.word	0x3fe62e42
 80084f8:	0ca86c39 	.word	0x0ca86c39
 80084fc:	be205c61 	.word	0xbe205c61
 8008500:	72bea4d0 	.word	0x72bea4d0
 8008504:	3e663769 	.word	0x3e663769
 8008508:	c5d26bf1 	.word	0xc5d26bf1
 800850c:	3ebbbd41 	.word	0x3ebbbd41
 8008510:	af25de2c 	.word	0xaf25de2c
 8008514:	3f11566a 	.word	0x3f11566a
 8008518:	16bebd93 	.word	0x16bebd93
 800851c:	3f66c16c 	.word	0x3f66c16c
 8008520:	5555553e 	.word	0x5555553e
 8008524:	3fc55555 	.word	0x3fc55555
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	000fffff 	.word	0x000fffff
 8008530:	3ff00000 	.word	0x3ff00000
 8008534:	4090cbff 	.word	0x4090cbff
 8008538:	3f6f3400 	.word	0x3f6f3400
 800853c:	652b82fe 	.word	0x652b82fe
 8008540:	3c971547 	.word	0x3c971547

08008544 <__ieee754_sqrt>:
 8008544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008548:	ec55 4b10 	vmov	r4, r5, d0
 800854c:	4e55      	ldr	r6, [pc, #340]	; (80086a4 <__ieee754_sqrt+0x160>)
 800854e:	43ae      	bics	r6, r5
 8008550:	ee10 0a10 	vmov	r0, s0
 8008554:	ee10 3a10 	vmov	r3, s0
 8008558:	462a      	mov	r2, r5
 800855a:	4629      	mov	r1, r5
 800855c:	d110      	bne.n	8008580 <__ieee754_sqrt+0x3c>
 800855e:	ee10 2a10 	vmov	r2, s0
 8008562:	462b      	mov	r3, r5
 8008564:	f7f7 ffec 	bl	8000540 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 fe30 	bl	80001d4 <__adddf3>
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	ec45 4b10 	vmov	d0, r4, r5
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	2d00      	cmp	r5, #0
 8008582:	dc10      	bgt.n	80085a6 <__ieee754_sqrt+0x62>
 8008584:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008588:	4330      	orrs	r0, r6
 800858a:	d0f5      	beq.n	8008578 <__ieee754_sqrt+0x34>
 800858c:	b15d      	cbz	r5, 80085a6 <__ieee754_sqrt+0x62>
 800858e:	ee10 2a10 	vmov	r2, s0
 8008592:	462b      	mov	r3, r5
 8008594:	ee10 0a10 	vmov	r0, s0
 8008598:	f7f7 fe1a 	bl	80001d0 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	f7f8 f8f8 	bl	8000794 <__aeabi_ddiv>
 80085a4:	e7e6      	b.n	8008574 <__ieee754_sqrt+0x30>
 80085a6:	1512      	asrs	r2, r2, #20
 80085a8:	d074      	beq.n	8008694 <__ieee754_sqrt+0x150>
 80085aa:	07d4      	lsls	r4, r2, #31
 80085ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80085b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80085b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085b8:	bf5e      	ittt	pl
 80085ba:	0fda      	lsrpl	r2, r3, #31
 80085bc:	005b      	lslpl	r3, r3, #1
 80085be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80085c2:	2400      	movs	r4, #0
 80085c4:	0fda      	lsrs	r2, r3, #31
 80085c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80085ca:	107f      	asrs	r7, r7, #1
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	2516      	movs	r5, #22
 80085d0:	4620      	mov	r0, r4
 80085d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80085d6:	1886      	adds	r6, r0, r2
 80085d8:	428e      	cmp	r6, r1
 80085da:	bfde      	ittt	le
 80085dc:	1b89      	suble	r1, r1, r6
 80085de:	18b0      	addle	r0, r6, r2
 80085e0:	18a4      	addle	r4, r4, r2
 80085e2:	0049      	lsls	r1, r1, #1
 80085e4:	3d01      	subs	r5, #1
 80085e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80085ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80085ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085f2:	d1f0      	bne.n	80085d6 <__ieee754_sqrt+0x92>
 80085f4:	462a      	mov	r2, r5
 80085f6:	f04f 0e20 	mov.w	lr, #32
 80085fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085fe:	4281      	cmp	r1, r0
 8008600:	eb06 0c05 	add.w	ip, r6, r5
 8008604:	dc02      	bgt.n	800860c <__ieee754_sqrt+0xc8>
 8008606:	d113      	bne.n	8008630 <__ieee754_sqrt+0xec>
 8008608:	459c      	cmp	ip, r3
 800860a:	d811      	bhi.n	8008630 <__ieee754_sqrt+0xec>
 800860c:	f1bc 0f00 	cmp.w	ip, #0
 8008610:	eb0c 0506 	add.w	r5, ip, r6
 8008614:	da43      	bge.n	800869e <__ieee754_sqrt+0x15a>
 8008616:	2d00      	cmp	r5, #0
 8008618:	db41      	blt.n	800869e <__ieee754_sqrt+0x15a>
 800861a:	f100 0801 	add.w	r8, r0, #1
 800861e:	1a09      	subs	r1, r1, r0
 8008620:	459c      	cmp	ip, r3
 8008622:	bf88      	it	hi
 8008624:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008628:	eba3 030c 	sub.w	r3, r3, ip
 800862c:	4432      	add	r2, r6
 800862e:	4640      	mov	r0, r8
 8008630:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008634:	f1be 0e01 	subs.w	lr, lr, #1
 8008638:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800863c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008640:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008644:	d1db      	bne.n	80085fe <__ieee754_sqrt+0xba>
 8008646:	430b      	orrs	r3, r1
 8008648:	d006      	beq.n	8008658 <__ieee754_sqrt+0x114>
 800864a:	1c50      	adds	r0, r2, #1
 800864c:	bf13      	iteet	ne
 800864e:	3201      	addne	r2, #1
 8008650:	3401      	addeq	r4, #1
 8008652:	4672      	moveq	r2, lr
 8008654:	f022 0201 	bicne.w	r2, r2, #1
 8008658:	1063      	asrs	r3, r4, #1
 800865a:	0852      	lsrs	r2, r2, #1
 800865c:	07e1      	lsls	r1, r4, #31
 800865e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008662:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008666:	bf48      	it	mi
 8008668:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800866c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008670:	4614      	mov	r4, r2
 8008672:	e781      	b.n	8008578 <__ieee754_sqrt+0x34>
 8008674:	0ad9      	lsrs	r1, r3, #11
 8008676:	3815      	subs	r0, #21
 8008678:	055b      	lsls	r3, r3, #21
 800867a:	2900      	cmp	r1, #0
 800867c:	d0fa      	beq.n	8008674 <__ieee754_sqrt+0x130>
 800867e:	02cd      	lsls	r5, r1, #11
 8008680:	d50a      	bpl.n	8008698 <__ieee754_sqrt+0x154>
 8008682:	f1c2 0420 	rsb	r4, r2, #32
 8008686:	fa23 f404 	lsr.w	r4, r3, r4
 800868a:	1e55      	subs	r5, r2, #1
 800868c:	4093      	lsls	r3, r2
 800868e:	4321      	orrs	r1, r4
 8008690:	1b42      	subs	r2, r0, r5
 8008692:	e78a      	b.n	80085aa <__ieee754_sqrt+0x66>
 8008694:	4610      	mov	r0, r2
 8008696:	e7f0      	b.n	800867a <__ieee754_sqrt+0x136>
 8008698:	0049      	lsls	r1, r1, #1
 800869a:	3201      	adds	r2, #1
 800869c:	e7ef      	b.n	800867e <__ieee754_sqrt+0x13a>
 800869e:	4680      	mov	r8, r0
 80086a0:	e7bd      	b.n	800861e <__ieee754_sqrt+0xda>
 80086a2:	bf00      	nop
 80086a4:	7ff00000 	.word	0x7ff00000

080086a8 <with_errno>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	4616      	mov	r6, r2
 80086b0:	f000 f8bc 	bl	800882c <__errno>
 80086b4:	4629      	mov	r1, r5
 80086b6:	6006      	str	r6, [r0, #0]
 80086b8:	4620      	mov	r0, r4
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <xflow>:
 80086bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086be:	4614      	mov	r4, r2
 80086c0:	461d      	mov	r5, r3
 80086c2:	b108      	cbz	r0, 80086c8 <xflow+0xc>
 80086c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80086c8:	e9cd 2300 	strd	r2, r3, [sp]
 80086cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f7 ff34 	bl	8000540 <__aeabi_dmul>
 80086d8:	2222      	movs	r2, #34	; 0x22
 80086da:	b003      	add	sp, #12
 80086dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086e0:	f7ff bfe2 	b.w	80086a8 <with_errno>

080086e4 <__math_uflow>:
 80086e4:	b508      	push	{r3, lr}
 80086e6:	2200      	movs	r2, #0
 80086e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086ec:	f7ff ffe6 	bl	80086bc <xflow>
 80086f0:	ec41 0b10 	vmov	d0, r0, r1
 80086f4:	bd08      	pop	{r3, pc}

080086f6 <__math_oflow>:
 80086f6:	b508      	push	{r3, lr}
 80086f8:	2200      	movs	r2, #0
 80086fa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80086fe:	f7ff ffdd 	bl	80086bc <xflow>
 8008702:	ec41 0b10 	vmov	d0, r0, r1
 8008706:	bd08      	pop	{r3, pc}

08008708 <finite>:
 8008708:	b082      	sub	sp, #8
 800870a:	ed8d 0b00 	vstr	d0, [sp]
 800870e:	9801      	ldr	r0, [sp, #4]
 8008710:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008714:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008718:	0fc0      	lsrs	r0, r0, #31
 800871a:	b002      	add	sp, #8
 800871c:	4770      	bx	lr
	...

08008720 <scalbn>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	ec55 4b10 	vmov	r4, r5, d0
 8008726:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800872a:	4606      	mov	r6, r0
 800872c:	462b      	mov	r3, r5
 800872e:	b99a      	cbnz	r2, 8008758 <scalbn+0x38>
 8008730:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008734:	4323      	orrs	r3, r4
 8008736:	d036      	beq.n	80087a6 <scalbn+0x86>
 8008738:	4b39      	ldr	r3, [pc, #228]	; (8008820 <scalbn+0x100>)
 800873a:	4629      	mov	r1, r5
 800873c:	ee10 0a10 	vmov	r0, s0
 8008740:	2200      	movs	r2, #0
 8008742:	f7f7 fefd 	bl	8000540 <__aeabi_dmul>
 8008746:	4b37      	ldr	r3, [pc, #220]	; (8008824 <scalbn+0x104>)
 8008748:	429e      	cmp	r6, r3
 800874a:	4604      	mov	r4, r0
 800874c:	460d      	mov	r5, r1
 800874e:	da10      	bge.n	8008772 <scalbn+0x52>
 8008750:	a32b      	add	r3, pc, #172	; (adr r3, 8008800 <scalbn+0xe0>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	e03a      	b.n	80087ce <scalbn+0xae>
 8008758:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800875c:	428a      	cmp	r2, r1
 800875e:	d10c      	bne.n	800877a <scalbn+0x5a>
 8008760:	ee10 2a10 	vmov	r2, s0
 8008764:	4620      	mov	r0, r4
 8008766:	4629      	mov	r1, r5
 8008768:	f7f7 fd34 	bl	80001d4 <__adddf3>
 800876c:	4604      	mov	r4, r0
 800876e:	460d      	mov	r5, r1
 8008770:	e019      	b.n	80087a6 <scalbn+0x86>
 8008772:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008776:	460b      	mov	r3, r1
 8008778:	3a36      	subs	r2, #54	; 0x36
 800877a:	4432      	add	r2, r6
 800877c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008780:	428a      	cmp	r2, r1
 8008782:	dd08      	ble.n	8008796 <scalbn+0x76>
 8008784:	2d00      	cmp	r5, #0
 8008786:	a120      	add	r1, pc, #128	; (adr r1, 8008808 <scalbn+0xe8>)
 8008788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878c:	da1c      	bge.n	80087c8 <scalbn+0xa8>
 800878e:	a120      	add	r1, pc, #128	; (adr r1, 8008810 <scalbn+0xf0>)
 8008790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008794:	e018      	b.n	80087c8 <scalbn+0xa8>
 8008796:	2a00      	cmp	r2, #0
 8008798:	dd08      	ble.n	80087ac <scalbn+0x8c>
 800879a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800879e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80087a6:	ec45 4b10 	vmov	d0, r4, r5
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80087b0:	da19      	bge.n	80087e6 <scalbn+0xc6>
 80087b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80087b6:	429e      	cmp	r6, r3
 80087b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80087bc:	dd0a      	ble.n	80087d4 <scalbn+0xb4>
 80087be:	a112      	add	r1, pc, #72	; (adr r1, 8008808 <scalbn+0xe8>)
 80087c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e2      	bne.n	800878e <scalbn+0x6e>
 80087c8:	a30f      	add	r3, pc, #60	; (adr r3, 8008808 <scalbn+0xe8>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 feb7 	bl	8000540 <__aeabi_dmul>
 80087d2:	e7cb      	b.n	800876c <scalbn+0x4c>
 80087d4:	a10a      	add	r1, pc, #40	; (adr r1, 8008800 <scalbn+0xe0>)
 80087d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0b8      	beq.n	8008750 <scalbn+0x30>
 80087de:	a10e      	add	r1, pc, #56	; (adr r1, 8008818 <scalbn+0xf8>)
 80087e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e4:	e7b4      	b.n	8008750 <scalbn+0x30>
 80087e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087ea:	3236      	adds	r2, #54	; 0x36
 80087ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087f4:	4620      	mov	r0, r4
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <scalbn+0x108>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	e7e8      	b.n	80087ce <scalbn+0xae>
 80087fc:	f3af 8000 	nop.w
 8008800:	c2f8f359 	.word	0xc2f8f359
 8008804:	01a56e1f 	.word	0x01a56e1f
 8008808:	8800759c 	.word	0x8800759c
 800880c:	7e37e43c 	.word	0x7e37e43c
 8008810:	8800759c 	.word	0x8800759c
 8008814:	fe37e43c 	.word	0xfe37e43c
 8008818:	c2f8f359 	.word	0xc2f8f359
 800881c:	81a56e1f 	.word	0x81a56e1f
 8008820:	43500000 	.word	0x43500000
 8008824:	ffff3cb0 	.word	0xffff3cb0
 8008828:	3c900000 	.word	0x3c900000

0800882c <__errno>:
 800882c:	4b01      	ldr	r3, [pc, #4]	; (8008834 <__errno+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000018 	.word	0x20000018

08008838 <_init>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr

08008844 <_fini>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr
