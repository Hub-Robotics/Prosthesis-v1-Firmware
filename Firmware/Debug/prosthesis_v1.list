
prosthesis_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008120  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080082a8  080082a8  000182a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008370  08008370  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008370  08008370  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008370  08008370  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008374  08008374  00018374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008378  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000080  080083f4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080083f4  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecd6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002913  00000000  00000000  0002ed82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025231  00000000  00000000  00033220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6fb  00000000  00000000  00058451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9270  00000000  00000000  00065b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012edbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004000  00000000  00000000  0012ee0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008290 	.word	0x08008290

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008290 	.word	0x08008290

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d92:	f005 fa76 	bl	8006282 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000d96:	2104      	movs	r1, #4
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000db2:	f005 f8ab 	bl	8005f0c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dd6:	f005 f8bf 	bl	8005f58 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dea:	f005 f847 	bl	8005e7c <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000dee:	2100      	movs	r1, #0
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000df2:	f7ff fea5 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000df8:	f7ff ff30 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dfe:	f7ff ff3f 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	099a      	lsrs	r2, r3, #6
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e24:	e002      	b.n	8000e2c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e34:	2106      	movs	r1, #6
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e38:	f7ff fe95 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e42:	f7ff febc 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000e46:	227f      	movs	r2, #127	; 0x7f
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e4c:	f7ff fee2 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	; 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	50040300 	.word	0x50040300
 8000e64:	2000000c 	.word	0x2000000c
 8000e68:	053e2d63 	.word	0x053e2d63
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	0c900008 	.word	0x0c900008

08000e74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eb6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000eba:	f7ff fef5 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec2:	f7ff ff07 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff04 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ede:	f005 f9d0 	bl	8006282 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ee6:	f7ff ff0d 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000efe:	f005 f805 	bl	8005f0c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f22:	f005 f819 	bl	8005f58 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f32:	f004 ffa3 	bl	8005e7c <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f36:	2100      	movs	r1, #0
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f3a:	f7ff fe01 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f40:	f7ff fe8c 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f46:	f7ff fe9b 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC2_Init+0x138>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0x13c>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099a      	lsrs	r2, r3, #6
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x140>)
 8000f64:	fba3 2302 	umull	r2, r3, r3, r2
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f6c:	e002      	b.n	8000f74 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	3b01      	subs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f80:	f7ff fdf1 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f84:	2200      	movs	r2, #0
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f8a:	f7ff fe18 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000f8e:	227f      	movs	r2, #127	; 0x7f
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f94:	f7ff fe3e 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	50040100 	.word	0x50040100
 8000fa8:	50040300 	.word	0x50040300
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	053e2d63 	.word	0x053e2d63
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	10c00010 	.word	0x10c00010

08000fbc <ErrorHandler_AS5145B>:

static LED_Color_e CM_ledColor = Green;
static LED_Code_e CM_ledCode = NoError;

void ErrorHandler_AS5145B(uint8_t deviceIndex, AS5145B_Error_e error)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	CM_ledColor = Yellow;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <ErrorHandler_AS5145B+0x20>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	CM_ledCode = AS5145B__InitError;
 8000fd2:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <ErrorHandler_AS5145B+0x24>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
	while(1);
 8000fd8:	e7fe      	b.n	8000fd8 <ErrorHandler_AS5145B+0x1c>
 8000fda:	bf00      	nop
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	2000009d 	.word	0x2000009d

08000fe4 <ErrorHandler_EPOS4>:
}

void ErrorHandler_EPOS4(uint8_t deviceIndex, EPOS4_Error_e error)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	if(error == EPOS4_FaultError)
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	d11c      	bne.n	8001034 <ErrorHandler_EPOS4+0x50>
	{
		CM_ledColor = Red;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <ErrorHandler_EPOS4+0xa0>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	701a      	strb	r2, [r3, #0]
		CM_ledCode = EPOS4__FaultError;
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <ErrorHandler_EPOS4+0xa4>)
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]

		if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <ErrorHandler_EPOS4+0x32>
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <ErrorHandler_EPOS4+0x38>
			EPOS4_DisableVoltage(AnkleMotorControllerIndex);
 8001016:	2000      	movs	r0, #0
 8001018:	f003 fa8c 	bl	8004534 <EPOS4_DisableVoltage>

		if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <ErrorHandler_EPOS4+0x48>
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d129      	bne.n	8001080 <ErrorHandler_EPOS4+0x9c>
			EPOS4_DisableVoltage(KneeMotorControllerIndex);
 800102c:	2001      	movs	r0, #1
 800102e:	f003 fa81 	bl	8004534 <EPOS4_DisableVoltage>
 8001032:	e025      	b.n	8001080 <ErrorHandler_EPOS4+0x9c>
	}
	else if(error == EPOS4_AbortError)
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2b08      	cmp	r3, #8
 8001038:	d11c      	bne.n	8001074 <ErrorHandler_EPOS4+0x90>
	{
		CM_ledColor = Orange;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <ErrorHandler_EPOS4+0xa0>)
 800103c:	2202      	movs	r2, #2
 800103e:	701a      	strb	r2, [r3, #0]
		CM_ledCode = EPOS4__AbortError;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <ErrorHandler_EPOS4+0xa4>)
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]

		if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <ErrorHandler_EPOS4+0x72>
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <ErrorHandler_EPOS4+0x78>
			EPOS4_DisableVoltage(AnkleMotorControllerIndex);
 8001056:	2000      	movs	r0, #0
 8001058:	f003 fa6c 	bl	8004534 <EPOS4_DisableVoltage>

		if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <ErrorHandler_EPOS4+0x88>
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <ErrorHandler_EPOS4+0xa8>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d109      	bne.n	8001080 <ErrorHandler_EPOS4+0x9c>
			EPOS4_DisableVoltage(KneeMotorControllerIndex);
 800106c:	2001      	movs	r0, #1
 800106e:	f003 fa61 	bl	8004534 <EPOS4_DisableVoltage>
 8001072:	e005      	b.n	8001080 <ErrorHandler_EPOS4+0x9c>
	}
	else
	{
		CM_ledColor = Yellow;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <ErrorHandler_EPOS4+0xa0>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
		CM_ledCode = EPOS4__InitError;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <ErrorHandler_EPOS4+0xa4>)
 800107c:	2204      	movs	r2, #4
 800107e:	701a      	strb	r2, [r3, #0]
	}

	while(1);
 8001080:	e7fe      	b.n	8001080 <ErrorHandler_EPOS4+0x9c>
 8001082:	bf00      	nop
 8001084:	2000009c 	.word	0x2000009c
 8001088:	2000009d 	.word	0x2000009d
 800108c:	200000a0 	.word	0x200000a0

08001090 <ErrorHandler_MCP25625>:
}

void ErrorHandler_MCP25625(uint8_t deviceIndex, MCP25625_Error_e error)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	CM_ledColor = Yellow;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <ErrorHandler_MCP25625+0x20>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	CM_ledCode = MCP25625__InitError;
 80010a6:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <ErrorHandler_MCP25625+0x24>)
 80010a8:	2205      	movs	r2, #5
 80010aa:	701a      	strb	r2, [r3, #0]
	while(1);
 80010ac:	e7fe      	b.n	80010ac <ErrorHandler_MCP25625+0x1c>
 80010ae:	bf00      	nop
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	2000009d 	.word	0x2000009d

080010b8 <ErrorHandler_MPU925x>:
}

void ErrorHandler_MPU925x(uint8_t deviceIndex, MPU925x_Error_e error)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
	CM_ledColor = Yellow;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <ErrorHandler_MPU925x+0x20>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	CM_ledCode = MPU925x__InitError;
 80010ce:	4b03      	ldr	r3, [pc, #12]	; (80010dc <ErrorHandler_MPU925x+0x24>)
 80010d0:	2206      	movs	r2, #6
 80010d2:	701a      	strb	r2, [r3, #0]
	while(1);
 80010d4:	e7fe      	b.n	80010d4 <ErrorHandler_MPU925x+0x1c>
 80010d6:	bf00      	nop
 80010d8:	2000009c 	.word	0x2000009c
 80010dc:	2000009d 	.word	0x2000009d

080010e0 <LL_AHB2_GRP1_EnableClock>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000

08001110 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff ffcc 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff ffc9 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff ffc6 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin);
 8001154:	f242 0150 	movw	r1, #8272	; 0x2050
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <MX_GPIO_Init+0xc8>)
 800115a:	f7ff ffd9 	bl	8001110 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|ENCODER_CLK_Pin);
 800115e:	f241 0184 	movw	r1, #4228	; 0x1084
 8001162:	4825      	ldr	r0, [pc, #148]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001164:	f7ff ffd4 	bl	8001110 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f7ff ffce 	bl	8001110 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ANKLE_ENCODER_CSn_Pin|ANKLE_CAN_CONTROLLER_CS_Pin|KNEE_ENCODER_CSn_Pin;
 8001174:	f242 0350 	movw	r3, #8272	; 0x2050
 8001178:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <MX_GPIO_Init+0xc8>)
 8001190:	f005 f877 	bl	8006282 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|KNEE_CAN_CONTROLLER_CS_Pin|ENCODER_CLK_Pin;
 8001194:	f241 0384 	movw	r3, #4228	; 0x1084
 8001198:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <MX_GPIO_Init+0xcc>)
 80011b0:	f005 f867 	bl	8006282 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENCODER_DO_Pin;
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENCODER_DO_GPIO_Port, &GPIO_InitStruct);
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0xc8>)
 80011c6:	f005 f85c 	bl	8006282 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011d0:	2301      	movs	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f005 f84b 	bl	8006282 <LL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000400 	.word	0x48000400

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60da      	str	r2, [r3, #12]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f023 0203 	bic.w	r2, r3, #3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	621a      	str	r2, [r3, #32]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f023 0201 	bic.w	r2, r3, #1
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <LL_RCC_SetLPTIMClockSource>:
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <LL_RCC_SetLPTIMClockSource+0x30>)
 800141e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	4904      	ldr	r1, [pc, #16]	; (8001444 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001432:	4313      	orrs	r3, r2
 8001434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000

08001448 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <LL_APB1_GRP2_EnableClock+0x2c>)
 800145e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 800147c:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001480:	f7ff ffc8 	bl	8001414 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001484:	2020      	movs	r0, #32
 8001486:	f7ff ffdf 	bl	8001448 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800148a:	f7ff feb7 	bl	80011fc <__NVIC_GetPriorityGrouping>
 800148e:	4603      	mov	r3, r0
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff07 	bl	80012a8 <NVIC_EncodePriority>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	2042      	movs	r0, #66	; 0x42
 80014a0:	f7ff fed8 	bl	8001254 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80014a4:	2042      	movs	r0, #66	; 0x42
 80014a6:	f7ff feb7 	bl	8001218 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80014aa:	2100      	movs	r1, #0
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014ae:	f7ff ff9d 	bl	80013ec <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014b2:	2100      	movs	r1, #0
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014b6:	f7ff ff63 	bl	8001380 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014be:	f7ff ff4c 	bl	800135a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014c2:	2100      	movs	r1, #0
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014c6:	f7ff ff22 	bl	800130e <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014ca:	2100      	movs	r1, #0
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014ce:	f7ff ff31 	bl	8001334 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014d4:	f7ff ff7a 	bl	80013cc <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80014d8:	2100      	movs	r1, #0
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <MX_LPTIM2_Init+0x6c>)
 80014dc:	f7ff ff63 	bl	80013a6 <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40009400 	.word	0x40009400

080014e8 <__NVIC_SetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_LPTIM_Enable>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_LPTIM_StartCounter>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f023 0206 	bic.w	r2, r3, #6
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_LPTIM_SetAutoReload>:
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f043 0202 	orr.w	r2, r3, #2
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_LSE_Enable>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <LL_RCC_LSE_Enable+0x20>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <LL_RCC_LSE_Enable+0x20>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <LL_RCC_LSE_SetDriveCapability>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f023 0218 	bic.w	r2, r3, #24
 800161a:	4905      	ldr	r1, [pc, #20]	; (8001630 <LL_RCC_LSE_SetDriveCapability+0x28>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000

08001634 <LL_RCC_LSE_IsReady>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <LL_RCC_LSE_IsReady+0x24>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d101      	bne.n	800164a <LL_RCC_LSE_IsReady+0x16>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_RCC_LSE_IsReady+0x18>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_MSI_Enable>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <LL_RCC_MSI_Enable+0x1c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <LL_RCC_MSI_Enable+0x1c>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_MSI_IsReady>:
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <LL_RCC_MSI_IsReady+0x20>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d101      	bne.n	8001690 <LL_RCC_MSI_IsReady+0x14>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <LL_RCC_MSI_IsReady+0x16>
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000

080016a0 <LL_RCC_MSI_EnablePLLMode>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <LL_RCC_MSI_EnableRangeSelection>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <LL_RCC_MSI_SetRange>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <LL_RCC_MSI_SetRange+0x24>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	4904      	ldr	r1, [pc, #16]	; (8001704 <LL_RCC_MSI_SetRange+0x24>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000

08001708 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4904      	ldr	r1, [pc, #16]	; (8001730 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_SetSysClkSource>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <LL_RCC_SetSysClkSource+0x24>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 0203 	bic.w	r2, r3, #3
 8001744:	4904      	ldr	r1, [pc, #16]	; (8001758 <LL_RCC_SetSysClkSource+0x24>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000

0800175c <LL_RCC_GetSysClkSource>:
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <LL_RCC_GetSysClkSource+0x18>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <LL_RCC_SetAHBPrescaler>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <LL_RCC_SetAHBPrescaler+0x24>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	4904      	ldr	r1, [pc, #16]	; (800179c <LL_RCC_SetAHBPrescaler+0x24>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_SetAPB1Prescaler>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_SetAPB2Prescaler>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_RCC_PLL_Enable+0x1c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <LL_RCC_PLL_Enable+0x1c>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <LL_RCC_PLL_IsReady+0x24>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001820:	d101      	bne.n	8001826 <LL_RCC_PLL_IsReady+0x16>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <LL_RCC_PLL_IsReady+0x18>
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800184c:	4013      	ands	r3, r2
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4311      	orrs	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	0212      	lsls	r2, r2, #8
 8001858:	4311      	orrs	r1, r2
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001860:	4313      	orrs	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	f9ff808c 	.word	0xf9ff808c

08001878 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <LL_APB1_GRP1_EnableClock>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <LL_FLASH_SetLatency+0x24>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 0207 	bic.w	r2, r3, #7
 8001908:	4904      	ldr	r1, [pc, #16]	; (800191c <LL_FLASH_SetLatency+0x24>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40022000 	.word	0x40022000

08001920 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <LL_FLASH_GetLatency+0x18>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_SYSTICK_EnableIT+0x1c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <LL_SYSTICK_EnableIT+0x1c>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40007000 	.word	0x40007000

08001984 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <LL_PWR_EnableBkUpAccess+0x1c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <LL_PWR_EnableBkUpAccess+0x1c>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000

080019a4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b0ba      	sub	sp, #232	; 0xe8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff6c 	bl	80018c8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019f4:	f7ff ff50 	bl	8001898 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7ff fd75 	bl	80014e8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fe:	f000 f9df 	bl	8001dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a02:	f7ff fb93 	bl	800112c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a06:	f002 f997 	bl	8003d38 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a0a:	f001 ff37 	bl	800387c <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001a0e:	f7ff fd33 	bl	8001478 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001a12:	f001 ff89 	bl	8003928 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001a16:	f7ff fa2d 	bl	8000e74 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a1a:	f7ff f985 	bl	8000d28 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001a1e:	f002 f8f1 	bl	8003c04 <MX_TIM6_Init>
  MX_SPI3_Init();
 8001a22:	f001 ffd9 	bl	80039d8 <MX_SPI3_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t Encoder_Init[AS5145B_NUMBER_OF_DEVICES];
	Encoder_Init[AnkleEncoderIndex].DO_GPIOx = ENCODER_DO_GPIO_Port;
 8001a26:	4bd1      	ldr	r3, [pc, #836]	; (8001d6c <main+0x388>)
 8001a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	Encoder_Init[AnkleEncoderIndex].CLK_GPIOx = ENCODER_CLK_GPIO_Port;
 8001a2c:	4bd0      	ldr	r3, [pc, #832]	; (8001d70 <main+0x38c>)
 8001a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	Encoder_Init[AnkleEncoderIndex].CSn_GPIOx = ANKLE_ENCODER_CSn_GPIO_Port;
 8001a32:	4bce      	ldr	r3, [pc, #824]	; (8001d6c <main+0x388>)
 8001a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	Encoder_Init[AnkleEncoderIndex].DO_Pin = ENCODER_DO_Pin;
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	Encoder_Init[AnkleEncoderIndex].CLK_Pin = ENCODER_CLK_Pin;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	Encoder_Init[AnkleEncoderIndex].CSn_Pin = ANKLE_ENCODER_CSn_Pin;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	Encoder_Init[AnkleEncoderIndex].TIMx = TIM6;
 8001a4c:	4bc9      	ldr	r3, [pc, #804]	; (8001d74 <main+0x390>)
 8001a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	Encoder_Init[AnkleEncoderIndex].timerRateMHz = 10;
 8001a52:	230a      	movs	r3, #10
 8001a54:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc

	memcpy(&Encoder_Init[KneeEncoderIndex], &Encoder_Init[AnkleEncoderIndex], sizeof(Encoder_Init[AnkleEncoderIndex]));
 8001a58:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001a5c:	f107 05a4 	add.w	r5, r7, #164	; 0xa4
 8001a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Encoder_Init[KneeEncoderIndex].CSn_GPIOx = KNEE_ENCODER_CSn_GPIO_Port;
 8001a6c:	4bbf      	ldr	r3, [pc, #764]	; (8001d6c <main+0x388>)
 8001a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	Encoder_Init[KneeEncoderIndex].CSn_Pin = KNEE_ENCODER_CSn_Pin;
 8001a72:	2340      	movs	r3, #64	; 0x40
 8001a74:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

	EPOS4_Init_t MotorController_Init[EPOS4_NUMBER_OF_DEVICES];
	MotorController_Init[AnkleMotorControllerIndex].nodeId = 2; // switch??
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	MotorController_Init[AnkleMotorControllerIndex].mcpIndex = AnkleCAN_ControllerIndex;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isFirstStepRequired = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	MotorController_Init[AnkleMotorControllerIndex].Requirements.isModeOfOperationRequired = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.CAN_BitRate = Rate1000Kbps;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.MotorType = TrapezoidalPmBlMotor;
 8001a96:	230b      	movs	r3, #11
 8001a98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.nominalCurrent = 6600;
 8001a9c:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.outputCurrentLimit = 29300;
 8001aa2:	f247 2374 	movw	r3, #29300	; 0x7274
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.numberOfPolePairs = 21;
 8001aa8:	2315      	movs	r3, #21
 8001aaa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.thermalTimeConstantWinding = 400;
 8001aae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ab2:	87fb      	strh	r3, [r7, #62]	; 0x3e
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.torqueConstant = 95000;
 8001ab4:	4bb0      	ldr	r3, [pc, #704]	; (8001d78 <main+0x394>)
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxMotorSpeed = 2384;
 8001ab8:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.maxGearInputSpeed = 100000;
 8001abe:	4baf      	ldr	r3, [pc, #700]	; (8001d7c <main+0x398>)
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.sensorsConfiguration = 0x00100000;
 8001ac2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.controlStructure = 0x00030111;
 8001ac8:	4bad      	ldr	r3, [pc, #692]	; (8001d80 <main+0x39c>)
 8001aca:	653b      	str	r3, [r7, #80]	; 0x50
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.commutationSensors = 0x00000030;
 8001acc:	2330      	movs	r3, #48	; 0x30
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.axisConfigMiscellaneous = 0x00000000;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65bb      	str	r3, [r7, #88]	; 0x58
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerP_Gain = 643609;
 8001ad4:	4bab      	ldr	r3, [pc, #684]	; (8001d84 <main+0x3a0>)
 8001ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
	MotorController_Init[AnkleMotorControllerIndex].FirstStep.currentControllerI_Gain = 2791837;
 8001ad8:	4bab      	ldr	r3, [pc, #684]	; (8001d88 <main+0x3a4>)
 8001ada:	663b      	str	r3, [r7, #96]	; 0x60
	MotorController_Init[AnkleMotorControllerIndex].ModeOfOperation = CyclicSynchronousTorqueMode;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	memcpy(&MotorController_Init[KneeMotorControllerIndex], &MotorController_Init[AnkleMotorControllerIndex], sizeof(MotorController_Init[AnkleMotorControllerIndex]));
 8001ae2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001ae6:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MotorController_Init[KneeMotorControllerIndex].nodeId = 1; // switch??
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	MotorController_Init[KneeMotorControllerIndex].mcpIndex = KneeCAN_ControllerIndex;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	MotorController_Init[KneeMotorControllerIndex].Requirements.isFirstStepRequired = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

  	MCP25625_Init_t CAN_Controller_Init[MCP25625_NUMBER_OF_DEVICES];
  	memset(&CAN_Controller_Init, 0, sizeof(CAN_Controller_Init));
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2220      	movs	r2, #32
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fabf 	bl	800709c <memset>
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].SPIx = SPI3;
 8001b1e:	4b9b      	ldr	r3, [pc, #620]	; (8001d8c <main+0x3a8>)
 8001b20:	60fb      	str	r3, [r7, #12]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CS_Port = ANKLE_CAN_CONTROLLER_CS_GPIO_Port;
 8001b22:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <main+0x388>)
 8001b24:	613b      	str	r3, [r7, #16]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].csPin = ANKLE_CAN_CONTROLLER_CS_Pin;
 8001b26:	2310      	movs	r3, #16
 8001b28:	82bb      	strh	r3, [r7, #20]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.CLKEN = ClockoutDisabled;
 8001b2a:	7dbb      	ldrb	r3, [r7, #22]
 8001b2c:	f36f 0382 	bfc	r3, #2, #1
 8001b30:	75bb      	strb	r3, [r7, #22]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.OSM = OneShotModeEnabled;
 8001b32:	7dbb      	ldrb	r3, [r7, #22]
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	75bb      	strb	r3, [r7, #22]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.ABAT = AbortAllTransmissions;
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	f36f 1304 	bfc	r3, #4, #1
 8001b40:	75bb      	strb	r3, [r7, #22]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CANCTRL_Reg.Bits.REQOP = NormalOperationMode;
 8001b42:	7dbb      	ldrb	r3, [r7, #22]
 8001b44:	f36f 1347 	bfc	r3, #5, #3
 8001b48:	75bb      	strb	r3, [r7, #22]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.BRP = 0;
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	f36f 0305 	bfc	r3, #0, #6
 8001b50:	75fb      	strb	r3, [r7, #23]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF1_Reg.Bits.SJW = Length1xT_Q;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	f36f 1387 	bfc	r3, #6, #2
 8001b58:	75fb      	strb	r3, [r7, #23]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PRSEG = 4;
 8001b5a:	7e3b      	ldrb	r3, [r7, #24]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	f362 0302 	bfi	r3, r2, #0, #3
 8001b62:	763b      	strb	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.PHSEG1 = 1;
 8001b64:	7e3b      	ldrb	r3, [r7, #24]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f362 03c5 	bfi	r3, r2, #3, #3
 8001b6c:	763b      	strb	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.SAM = BusSampledOnceAtSamplePoint;
 8001b6e:	7e3b      	ldrb	r3, [r7, #24]
 8001b70:	f36f 1386 	bfc	r3, #6, #1
 8001b74:	763b      	strb	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF2_Reg.Bits.BLTMODE = PS2LengthDeterminedByCNF3;
 8001b76:	7e3b      	ldrb	r3, [r7, #24]
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	763b      	strb	r3, [r7, #24]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.PHSEG2 = 1;
 8001b7e:	7e7b      	ldrb	r3, [r7, #25]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f362 0302 	bfi	r3, r2, #0, #3
 8001b86:	767b      	strb	r3, [r7, #25]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.WAKFIL = WakeUpFilterIsDisabled;
 8001b88:	7e7b      	ldrb	r3, [r7, #25]
 8001b8a:	f36f 1386 	bfc	r3, #6, #1
 8001b8e:	767b      	strb	r3, [r7, #25]
  	CAN_Controller_Init[AnkleCAN_ControllerIndex].CNF3_Reg.Bits.SOF = ClockoutPinIsEnabledForClockOutFunction;
 8001b90:	7e7b      	ldrb	r3, [r7, #25]
 8001b92:	f36f 13c7 	bfc	r3, #7, #1
 8001b96:	767b      	strb	r3, [r7, #25]

  	memcpy(&CAN_Controller_Init[KneeCAN_ControllerIndex], &CAN_Controller_Init[AnkleCAN_ControllerIndex], sizeof(CAN_Controller_Init[AnkleCAN_ControllerIndex]));
 8001b98:	f107 041c 	add.w	r4, r7, #28
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	CAN_Controller_Init[KneeCAN_ControllerIndex].SPIx = SPI2;
 8001ba6:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <main+0x3ac>)
 8001ba8:	61fb      	str	r3, [r7, #28]
  	CAN_Controller_Init[KneeCAN_ControllerIndex].CS_Port = KNEE_CAN_CONTROLLER_CS_GPIO_Port;
 8001baa:	4b71      	ldr	r3, [pc, #452]	; (8001d70 <main+0x38c>)
 8001bac:	623b      	str	r3, [r7, #32]
  	CAN_Controller_Init[KneeCAN_ControllerIndex].csPin = KNEE_CAN_CONTROLLER_CS_Pin;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	84bb      	strh	r3, [r7, #36]	; 0x24

  	MPU925x_Init_t IMU_Init;
  	IMU_Init.SPI_Handle = SPI1;
 8001bb4:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <main+0x3b0>)
 8001bb6:	603b      	str	r3, [r7, #0]
  	IMU_Init.CS_GPIOx = IMU_CS_GPIO_Port;
 8001bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bbc:	607b      	str	r3, [r7, #4]
  	IMU_Init.csPin = IMU_CS_Pin;
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	813b      	strh	r3, [r7, #8]

  	Prosthesis_Init.Joint = Ankle;
 8001bc4:	4b74      	ldr	r3, [pc, #464]	; (8001d98 <main+0x3b4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	705a      	strb	r2, [r3, #1]
  	Prosthesis_Init.Side = Left;
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <main+0x3b4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001bd0:	f7ff feb4 	bl	800193c <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001bd4:	4871      	ldr	r0, [pc, #452]	; (8001d9c <main+0x3b8>)
 8001bd6:	f7ff fcbf 	bl	8001558 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001bda:	4870      	ldr	r0, [pc, #448]	; (8001d9c <main+0x3b8>)
 8001bdc:	f7ff fcf2 	bl	80015c4 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001be0:	213f      	movs	r1, #63	; 0x3f
 8001be2:	486e      	ldr	r0, [pc, #440]	; (8001d9c <main+0x3b8>)
 8001be4:	f7ff fcdb 	bl	800159e <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001be8:	2104      	movs	r1, #4
 8001bea:	486c      	ldr	r0, [pc, #432]	; (8001d9c <main+0x3b8>)
 8001bec:	f7ff fcc4 	bl	8001578 <LL_LPTIM_StartCounter>

	LL_TIM_EnableCounter(TIM6);
 8001bf0:	4860      	ldr	r0, [pc, #384]	; (8001d74 <main+0x390>)
 8001bf2:	f7ff fee7 	bl	80019c4 <LL_TIM_EnableCounter>

	LL_SPI_Enable(SPI1);
 8001bf6:	4867      	ldr	r0, [pc, #412]	; (8001d94 <main+0x3b0>)
 8001bf8:	f7ff fed4 	bl	80019a4 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001bfc:	4864      	ldr	r0, [pc, #400]	; (8001d90 <main+0x3ac>)
 8001bfe:	f7ff fed1 	bl	80019a4 <LL_SPI_Enable>
	LL_SPI_Enable(SPI3);
 8001c02:	4862      	ldr	r0, [pc, #392]	; (8001d8c <main+0x3a8>)
 8001c04:	f7ff fece 	bl	80019a4 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001c08:	4865      	ldr	r0, [pc, #404]	; (8001da0 <main+0x3bc>)
 8001c0a:	f7ff fc91 	bl	8001530 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001c0e:	4865      	ldr	r0, [pc, #404]	; (8001da4 <main+0x3c0>)
 8001c10:	f7ff fc8e 	bl	8001530 <LL_ADC_Enable>

	LL_mDelay(10);	// Allow startup delays for devices
 8001c14:	200a      	movs	r0, #10
 8001c16:	f005 f9d7 	bl	8006fc8 <LL_mDelay>

	MPU925x_Error_e imuError = MPU925x_Init(0, &IMU_Init);
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f003 fd68 	bl	80056f4 <MPU925x_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if(imuError)
 8001c2a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <main+0x25a>
		ErrorHandler_MPU925x(0, imuError);
 8001c32:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001c36:	4619      	mov	r1, r3
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff fa3d 	bl	80010b8 <ErrorHandler_MPU925x>
	MPU925x_SetAccelSensitivity(0, MPU925x_AccelSensitivity_8g);
 8001c3e:	2102      	movs	r1, #2
 8001c40:	2000      	movs	r0, #0
 8001c42:	f003 fd91 	bl	8005768 <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(0, MPU925x_GyroSensitivity_1000dps);
 8001c46:	2102      	movs	r1, #2
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f003 fe1d 	bl	8005888 <MPU925x_SetGyroSensitivity>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001c4e:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <main+0x3b4>)
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <main+0x27a>
 8001c56:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <main+0x3b4>)
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d138      	bne.n	8001cd0 <main+0x2ec>
	{
		AS5145B_Error_e encoderError = AS5145B_Init(AnkleEncoderIndex, &Encoder_Init[AnkleEncoderIndex]);
 8001c5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c62:	4619      	mov	r1, r3
 8001c64:	2000      	movs	r0, #0
 8001c66:	f002 f933 	bl	8003ed0 <AS5145B_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		if(encoderError)
 8001c70:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <main+0x2a0>
			ErrorHandler_AS5145B(AnkleEncoderIndex, encoderError);
 8001c78:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff f99c 	bl	8000fbc <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(AnkleCAN_ControllerIndex, &CAN_Controller_Init[AnkleCAN_ControllerIndex]);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f003 f850 	bl	8004d30 <MCP25625_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		if(canControllerError)
 8001c96:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <main+0x2c6>
			ErrorHandler_MCP25625(AnkleCAN_ControllerIndex, canControllerError);
 8001c9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff f9f3 	bl	8001090 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(AnkleMotorControllerIndex, &MotorController_Init[AnkleMotorControllerIndex]);
 8001caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f002 fb53 	bl	800435c <EPOS4_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
		if(motorControllerError)
 8001cbc:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <main+0x2ec>
			ErrorHandler_EPOS4(AnkleMotorControllerIndex, motorControllerError);
 8001cc4:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff f98a 	bl	8000fe4 <ErrorHandler_EPOS4>
	}

	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <main+0x3b4>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d003      	beq.n	8001ce0 <main+0x2fc>
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <main+0x3b4>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d13b      	bne.n	8001d58 <main+0x374>
	{
		AS5145B_Error_e encoderError = AS5145B_Init(KneeEncoderIndex, &Encoder_Init[KneeEncoderIndex]);
 8001ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce4:	331c      	adds	r3, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f002 f8f1 	bl	8003ed0 <AS5145B_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		if(encoderError)
 8001cf4:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <main+0x324>
			ErrorHandler_AS5145B(KneeEncoderIndex, encoderError);
 8001cfc:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001d00:	4619      	mov	r1, r3
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff f95a 	bl	8000fbc <ErrorHandler_AS5145B>

		MCP25625_Error_e canControllerError = MCP25625_Init(KneeCAN_ControllerIndex, &CAN_Controller_Init[KneeCAN_ControllerIndex]);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2001      	movs	r0, #1
 8001d12:	f003 f80d 	bl	8004d30 <MCP25625_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		if(canControllerError)
 8001d1c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <main+0x34c>
			ErrorHandler_MCP25625(KneeCAN_ControllerIndex, canControllerError);
 8001d24:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff f9b0 	bl	8001090 <ErrorHandler_MCP25625>

		EPOS4_Error_e motorControllerError = EPOS4_Init(KneeMotorControllerIndex, &MotorController_Init[KneeMotorControllerIndex]);
 8001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d34:	333c      	adds	r3, #60	; 0x3c
 8001d36:	4619      	mov	r1, r3
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f002 fb0f 	bl	800435c <EPOS4_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
		if(motorControllerError)
 8001d44:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <main+0x374>
			ErrorHandler_EPOS4(KneeMotorControllerIndex, motorControllerError);
 8001d4c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001d50:	4619      	mov	r1, r3
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff f946 	bl	8000fe4 <ErrorHandler_EPOS4>
	}

	InitProsthesisControl(&Prosthesis_Init);
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <main+0x3b4>)
 8001d5a:	f000 f8c3 	bl	8001ee4 <InitProsthesisControl>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f000 f914 	bl	8001f8c <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <main+0x3c4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	e01f      	b.n	8001dac <main+0x3c8>
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	48000400 	.word	0x48000400
 8001d74:	40001000 	.word	0x40001000
 8001d78:	00017318 	.word	0x00017318
 8001d7c:	000186a0 	.word	0x000186a0
 8001d80:	00030111 	.word	0x00030111
 8001d84:	0009d219 	.word	0x0009d219
 8001d88:	002a999d 	.word	0x002a999d
 8001d8c:	40003c00 	.word	0x40003c00
 8001d90:	40003800 	.word	0x40003800
 8001d94:	40013000 	.word	0x40013000
 8001d98:	200000a0 	.word	0x200000a0
 8001d9c:	40009400 	.word	0x40009400
 8001da0:	50040000 	.word	0x50040000
 8001da4:	50040100 	.word	0x50040100
 8001da8:	200000a2 	.word	0x200000a2
 8001dac:	d0da      	beq.n	8001d64 <main+0x380>
	  {
		  RunProsthesisControl();
 8001dae:	f000 f907 	bl	8001fc0 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001db2:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <main+0x3d8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001db8:	e7d4      	b.n	8001d64 <main+0x380>
 8001dba:	bf00      	nop
 8001dbc:	200000a2 	.word	0x200000a2

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001dc4:	2004      	movs	r0, #4
 8001dc6:	f7ff fd97 	bl	80018f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001dca:	bf00      	nop
 8001dcc:	f7ff fda8 	bl	8001920 <LL_FLASH_GetLatency>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d1fa      	bne.n	8001dcc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001dd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dda:	f7ff fdbf 	bl	800195c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001dde:	f7ff fc3d 	bl	800165c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001de2:	bf00      	nop
 8001de4:	f7ff fc4a 	bl	800167c <LL_RCC_MSI_IsReady>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d1fa      	bne.n	8001de4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001dee:	f7ff fc67 	bl	80016c0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001df2:	20b0      	movs	r0, #176	; 0xb0
 8001df4:	f7ff fc74 	bl	80016e0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fc85 	bl	8001708 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001dfe:	f7ff fdc1 	bl	8001984 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fc00 	bl	8001608 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001e08:	f7ff fbec 	bl	80015e4 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001e0c:	bf00      	nop
 8001e0e:	f7ff fc11 	bl	8001634 <LL_RCC_LSE_IsReady>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d1fa      	bne.n	8001e0e <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001e18:	f7ff fc42 	bl	80016a0 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e20:	2228      	movs	r2, #40	; 0x28
 8001e22:	2150      	movs	r1, #80	; 0x50
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff fd07 	bl	8001838 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001e2a:	f7ff fd25 	bl	8001878 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001e2e:	f7ff fcdf 	bl	80017f0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001e32:	bf00      	nop
 8001e34:	f7ff fcec 	bl	8001810 <LL_RCC_PLL_IsReady>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d1fa      	bne.n	8001e34 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f7ff fc78 	bl	8001734 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e44:	bf00      	nop
 8001e46:	f7ff fc89 	bl	800175c <LL_RCC_GetSysClkSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d1fa      	bne.n	8001e46 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fc91 	bl	8001778 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001e56:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e5a:	f7ff fca1 	bl	80017a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001e5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e62:	f7ff fcb1 	bl	80017c8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <SystemClock_Config+0xb8>)
 8001e68:	f005 f8a0 	bl	8006fac <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <SystemClock_Config+0xb8>)
 8001e6e:	f005 f8d3 	bl	8007018 <LL_SetSystemCoreClock>
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	04c4b400 	.word	0x04c4b400

08001e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0204 	orr.w	r2, r3, #4
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	b29b      	uxth	r3, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// Includes variables that are subject to change during testing for convenience
void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	memcpy(&Device, Device_Init, sizeof(&Device_Init));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4815      	ldr	r0, [pc, #84]	; (8001f48 <InitProsthesisControl+0x64>)
 8001ef4:	f005 f8c4 	bl	8007080 <memcpy>

	memset(&CM_Ankle, 0, sizeof(CM_Ankle));
 8001ef8:	2260      	movs	r2, #96	; 0x60
 8001efa:	2100      	movs	r1, #0
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <InitProsthesisControl+0x68>)
 8001efe:	f005 f8cd 	bl	800709c <memset>
	memset(&CM_Knee, 0, sizeof(CM_Knee));
 8001f02:	2260      	movs	r2, #96	; 0x60
 8001f04:	2100      	movs	r1, #0
 8001f06:	4812      	ldr	r0, [pc, #72]	; (8001f50 <InitProsthesisControl+0x6c>)
 8001f08:	f005 f8c8 	bl	800709c <memset>

	ankleEncBias = 1325 * AS5145B_RAW2DEG;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <InitProsthesisControl+0x70>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <InitProsthesisControl+0x74>)
 8001f10:	601a      	str	r2, [r3, #0]
	kneeEncBias = 2244 * AS5145B_RAW2DEG;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <InitProsthesisControl+0x78>)
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <InitProsthesisControl+0x7c>)
 8001f16:	601a      	str	r2, [r3, #0]

	CM_ankleSpeedThreshold = 0.0f;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <InitProsthesisControl+0x80>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
	CM_kneeSpeedThreshold = 0.0f;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <InitProsthesisControl+0x84>)
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

	CM_lcBot_lowerBound = 1398.0f;
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <InitProsthesisControl+0x88>)
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <InitProsthesisControl+0x8c>)
 8001f2c:	601a      	str	r2, [r3, #0]
	CM_lcBot_upperBound = 1425.0f;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <InitProsthesisControl+0x90>)
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <InitProsthesisControl+0x94>)
 8001f32:	601a      	str	r2, [r3, #0]
	CM_lcTop_lowerBound = 1415.0f;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <InitProsthesisControl+0x98>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <InitProsthesisControl+0x9c>)
 8001f38:	601a      	str	r2, [r3, #0]
	CM_lcTop_upperBound = 1451.0f;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <InitProsthesisControl+0xa0>)
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <InitProsthesisControl+0xa4>)
 8001f3e:	601a      	str	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200000ac 	.word	0x200000ac
 8001f4c:	20000190 	.word	0x20000190
 8001f50:	200001f0 	.word	0x200001f0
 8001f54:	200000a4 	.word	0x200000a4
 8001f58:	42e8e900 	.word	0x42e8e900
 8001f5c:	200000a8 	.word	0x200000a8
 8001f60:	43453a00 	.word	0x43453a00
 8001f64:	20000188 	.word	0x20000188
 8001f68:	20000184 	.word	0x20000184
 8001f6c:	20000178 	.word	0x20000178
 8001f70:	44aec000 	.word	0x44aec000
 8001f74:	20000174 	.word	0x20000174
 8001f78:	44b22000 	.word	0x44b22000
 8001f7c:	20000180 	.word	0x20000180
 8001f80:	44b0e000 	.word	0x44b0e000
 8001f84:	2000017c 	.word	0x2000017c
 8001f88:	44b56000 	.word	0x44b56000

08001f8c <RequireTestProgram>:

void RequireTestProgram(TestPrograms_e option)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <RequireTestProgram+0x2c>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <RequireTestProgram+0x2c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <RequireTestProgram+0x30>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200000a3 	.word	0x200000a3
 8001fbc:	20000171 	.word	0x20000171

08001fc0 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	GetInputs();
 8001fc4:	f000 f828 	bl	8002018 <GetInputs>
	ProcessInputs();
 8001fc8:	f000 f8b6 	bl	8002138 <ProcessInputs>

	if(isTestProgramRequired)
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <RunProsthesisControl+0x4c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <RunProsthesisControl+0x1a>
		RunTestProgram();
 8001fd4:	f001 fae4 	bl	80035a0 <RunTestProgram>
 8001fd8:	e003      	b.n	8001fe2 <RunProsthesisControl+0x22>
	else
	{
		RunStateMachine();
 8001fda:	f001 f8bb 	bl	8003154 <RunStateMachine>
		RunImpedanceControl();
 8001fde:	f001 f9f3 	bl	80033c8 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <RunProsthesisControl+0x50>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <RunProsthesisControl+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <RunProsthesisControl+0x54>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001ff6:	e006      	b.n	8002006 <RunProsthesisControl+0x46>
	else if(isSecond)
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <RunProsthesisControl+0x54>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <RunProsthesisControl+0x46>
		isSecond = 0;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <RunProsthesisControl+0x54>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000171 	.word	0x20000171
 8002010:	20000008 	.word	0x20000008
 8002014:	20000170 	.word	0x20000170

08002018 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <GetInputs+0xcc>)
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <GetInputs+0x16>
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <GetInputs+0xcc>)
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d112      	bne.n	8002054 <GetInputs+0x3c>
	{
		CM_Ankle.jointAngle[0] = AS5145B_ReadPosition(AnkleEncoderIndex) - ankleEncBias;
 800202e:	2000      	movs	r0, #0
 8002030:	f002 f880 	bl	8004134 <AS5145B_ReadPosition>
 8002034:	eeb0 7a40 	vmov.f32	s14, s0
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <GetInputs+0xd0>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002042:	ee17 0a90 	vmov	r0, s15
 8002046:	f7fe fa23 	bl	8000490 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4927      	ldr	r1, [pc, #156]	; (80020ec <GetInputs+0xd4>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <GetInputs+0xcc>)
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d003      	beq.n	8002064 <GetInputs+0x4c>
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <GetInputs+0xcc>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d112      	bne.n	800208a <GetInputs+0x72>
	{
		CM_Knee.jointAngle[0] = AS5145B_ReadPosition(KneeEncoderIndex) - kneeEncBias;
 8002064:	2001      	movs	r0, #1
 8002066:	f002 f865 	bl	8004134 <AS5145B_ReadPosition>
 800206a:	eeb0 7a40 	vmov.f32	s14, s0
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <GetInputs+0xd8>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	ee17 0a90 	vmov	r0, s15
 800207c:	f7fe fa08 	bl	8000490 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	491b      	ldr	r1, [pc, #108]	; (80020f4 <GetInputs+0xdc>)
 8002086:	e9c1 2300 	strd	r2, r3, [r1]
	}

	LoadCell->bot[0] = ReadLoadCell(ADC1);
 800208a:	481b      	ldr	r0, [pc, #108]	; (80020f8 <GetInputs+0xe0>)
 800208c:	f000 f83c 	bl	8002108 <ReadLoadCell>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9da 	bl	800044c <__aeabi_ui2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4917      	ldr	r1, [pc, #92]	; (80020fc <GetInputs+0xe4>)
 800209e:	e9c1 2300 	strd	r2, r3, [r1]
	LoadCell->top[0] = ReadLoadCell(ADC2);
 80020a2:	4817      	ldr	r0, [pc, #92]	; (8002100 <GetInputs+0xe8>)
 80020a4:	f000 f830 	bl	8002108 <ReadLoadCell>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f9ce 	bl	800044c <__aeabi_ui2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4911      	ldr	r1, [pc, #68]	; (80020fc <GetInputs+0xe4>)
 80020b6:	e9c1 2306 	strd	r2, r3, [r1, #24]

	IMU_Data = MPU925x_ReadIMU(0);
 80020ba:	4c12      	ldr	r4, [pc, #72]	; (8002104 <GetInputs+0xec>)
 80020bc:	463b      	mov	r3, r7
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fc75 	bl	80059b0 <MPU925x_ReadIMU>
 80020c6:	4625      	mov	r5, r4
 80020c8:	463c      	mov	r4, r7
 80020ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200000ac 	.word	0x200000ac
 80020e8:	200000a4 	.word	0x200000a4
 80020ec:	20000190 	.word	0x20000190
 80020f0:	200000a8 	.word	0x200000a8
 80020f4:	200001f0 	.word	0x200001f0
 80020f8:	50040000 	.word	0x50040000
 80020fc:	200000b0 	.word	0x200000b0
 8002100:	50040100 	.word	0x50040100
 8002104:	20000140 	.word	0x20000140

08002108 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff feb3 	bl	8001e7c <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8002116:	bf00      	nop
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fed0 	bl	8001ebe <LL_ADC_IsActiveFlag_EOC>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f9      	beq.n	8002118 <ReadLoadCell+0x10>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff febd 	bl	8001ea4 <LL_ADC_REG_ReadConversionData12>
 800212a:	4603      	mov	r3, r0
 800212c:	81fb      	strh	r3, [r7, #14]
	return data;
 800212e:	89fb      	ldrh	r3, [r7, #14]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <ProcessInputs>:

static void ProcessInputs(void)
{
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	double tau = 1.0 / (2 * M_PI * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 800213e:	a3a8      	add	r3, pc, #672	; (adr r3, 80023e0 <ProcessInputs+0x2a8>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	e9c7 2300 	strd	r2, r3, [r7]

	// Derivative of joint angle (joint speed) and filtering of load cells
	if(isFirst)
 8002148:	4b9d      	ldr	r3, [pc, #628]	; (80023c0 <ProcessInputs+0x288>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d04e      	beq.n	80021ee <ProcessInputs+0xb6>
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002150:	4b9c      	ldr	r3, [pc, #624]	; (80023c4 <ProcessInputs+0x28c>)
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <ProcessInputs+0x28>
 8002158:	4b9a      	ldr	r3, [pc, #616]	; (80023c4 <ProcessInputs+0x28c>)
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10c      	bne.n	800217a <ProcessInputs+0x42>
		{
			CM_Ankle.jointSpeed = 0.0;
 8002160:	4999      	ldr	r1, [pc, #612]	; (80023c8 <ProcessInputs+0x290>)
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 800216e:	4b96      	ldr	r3, [pc, #600]	; (80023c8 <ProcessInputs+0x290>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	4994      	ldr	r1, [pc, #592]	; (80023c8 <ProcessInputs+0x290>)
 8002176:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == Knee) || (Device.Joint == Combined))
 800217a:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <ProcessInputs+0x28c>)
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <ProcessInputs+0x52>
 8002182:	4b90      	ldr	r3, [pc, #576]	; (80023c4 <ProcessInputs+0x28c>)
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10c      	bne.n	80021a4 <ProcessInputs+0x6c>
		{
			CM_Knee.jointSpeed = 0.0;
 800218a:	4990      	ldr	r1, [pc, #576]	; (80023cc <ProcessInputs+0x294>)
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002198:	4b8c      	ldr	r3, [pc, #560]	; (80023cc <ProcessInputs+0x294>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	498b      	ldr	r1, [pc, #556]	; (80023cc <ProcessInputs+0x294>)
 80021a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[2] = LoadCell->bot[0];
 80021a4:	4b8a      	ldr	r3, [pc, #552]	; (80023d0 <ProcessInputs+0x298>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	4989      	ldr	r1, [pc, #548]	; (80023d0 <ProcessInputs+0x298>)
 80021ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		LoadCell->top[2] = LoadCell->top[0];
 80021b0:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <ProcessInputs+0x298>)
 80021b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021b6:	4986      	ldr	r1, [pc, #536]	; (80023d0 <ProcessInputs+0x298>)
 80021b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 80021bc:	4b84      	ldr	r3, [pc, #528]	; (80023d0 <ProcessInputs+0x298>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	4984      	ldr	r1, [pc, #528]	; (80023d4 <ProcessInputs+0x29c>)
 80021c4:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 80021c8:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <ProcessInputs+0x298>)
 80021ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ce:	4981      	ldr	r1, [pc, #516]	; (80023d4 <ProcessInputs+0x29c>)
 80021d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 80021d4:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <ProcessInputs+0x29c>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	497e      	ldr	r1, [pc, #504]	; (80023d4 <ProcessInputs+0x29c>)
 80021dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 80021e0:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <ProcessInputs+0x29c>)
 80021e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021e6:	497b      	ldr	r1, [pc, #492]	; (80023d4 <ProcessInputs+0x29c>)
 80021e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80021ec:	e2b2      	b.n	8002754 <ProcessInputs+0x61c>
	}
	else if(isSecond)
 80021ee:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <ProcessInputs+0x2a0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80f8 	beq.w	80023e8 <ProcessInputs+0x2b0>
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <ProcessInputs+0x28c>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <ProcessInputs+0xd0>
 8002200:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <ProcessInputs+0x28c>)
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d155      	bne.n	80022b4 <ProcessInputs+0x17c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 8002208:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <ProcessInputs+0x290>)
 800220a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220e:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <ProcessInputs+0x290>)
 8002210:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002214:	f7fd ffdc 	bl	80001d0 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	f7fd ffd6 	bl	80001d4 <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4614      	mov	r4, r2
 800222e:	461d      	mov	r5, r3
 8002230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	f7fd ffcc 	bl	80001d4 <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <ProcessInputs+0x2a4>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fd ffc1 	bl	80001d0 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <ProcessInputs+0x290>)
 8002258:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800225c:	f7fe f970 	bl	8000540 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fd ffb4 	bl	80001d4 <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
 8002274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	f7fd ffaa 	bl	80001d4 <__adddf3>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <ProcessInputs+0x2a4>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fd ffa1 	bl	80001d4 <__adddf3>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fe fa7b 	bl	8000794 <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4949      	ldr	r1, [pc, #292]	; (80023c8 <ProcessInputs+0x290>)
 80022a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 80022a8:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <ProcessInputs+0x290>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	4946      	ldr	r1, [pc, #280]	; (80023c8 <ProcessInputs+0x290>)
 80022b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == Knee) || (Device.Joint == Combined))
 80022b4:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <ProcessInputs+0x28c>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d003      	beq.n	80022c4 <ProcessInputs+0x18c>
 80022bc:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <ProcessInputs+0x28c>)
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d155      	bne.n	8002370 <ProcessInputs+0x238>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <ProcessInputs+0x294>)
 80022c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <ProcessInputs+0x294>)
 80022cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022d0:	f7fd ff7e 	bl	80001d0 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	f7fd ff78 	bl	80001d4 <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	461d      	mov	r5, r3
 80022ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	f7fd ff6e 	bl	80001d4 <__adddf3>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <ProcessInputs+0x2a4>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ff63 	bl	80001d0 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <ProcessInputs+0x294>)
 8002314:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002318:	f7fe f912 	bl	8000540 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4620      	mov	r0, r4
 8002322:	4629      	mov	r1, r5
 8002324:	f7fd ff56 	bl	80001d4 <__adddf3>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4614      	mov	r4, r2
 800232e:	461d      	mov	r5, r3
 8002330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	f7fd ff4c 	bl	80001d4 <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <ProcessInputs+0x2a4>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fd ff43 	bl	80001d4 <__adddf3>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fe fa1d 	bl	8000794 <__aeabi_ddiv>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	491b      	ldr	r1, [pc, #108]	; (80023cc <ProcessInputs+0x294>)
 8002360:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <ProcessInputs+0x294>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	4918      	ldr	r1, [pc, #96]	; (80023cc <ProcessInputs+0x294>)
 800236c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[1] = LoadCell->bot[0];
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <ProcessInputs+0x298>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	4916      	ldr	r1, [pc, #88]	; (80023d0 <ProcessInputs+0x298>)
 8002378:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[1] = LoadCell->top[0];
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <ProcessInputs+0x298>)
 800237e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002382:	4913      	ldr	r1, [pc, #76]	; (80023d0 <ProcessInputs+0x298>)
 8002384:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <ProcessInputs+0x298>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	4911      	ldr	r1, [pc, #68]	; (80023d4 <ProcessInputs+0x29c>)
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <ProcessInputs+0x298>)
 8002396:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800239a:	490e      	ldr	r1, [pc, #56]	; (80023d4 <ProcessInputs+0x29c>)
 800239c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <ProcessInputs+0x29c>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	490b      	ldr	r1, [pc, #44]	; (80023d4 <ProcessInputs+0x29c>)
 80023a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <ProcessInputs+0x29c>)
 80023ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <ProcessInputs+0x29c>)
 80023b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80023b8:	e1cc      	b.n	8002754 <ProcessInputs+0x61c>
 80023ba:	bf00      	nop
 80023bc:	f3af 8000 	nop.w
 80023c0:	20000008 	.word	0x20000008
 80023c4:	200000ac 	.word	0x200000ac
 80023c8:	20000190 	.word	0x20000190
 80023cc:	200001f0 	.word	0x200001f0
 80023d0:	200000b0 	.word	0x200000b0
 80023d4:	20000280 	.word	0x20000280
 80023d8:	20000170 	.word	0x20000170
 80023dc:	20000000 	.word	0x20000000
 80023e0:	be3b06cf 	.word	0xbe3b06cf
 80023e4:	3f904c26 	.word	0x3f904c26
	}
	else
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80023e8:	4bbf      	ldr	r3, [pc, #764]	; (80026e8 <ProcessInputs+0x5b0>)
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <ProcessInputs+0x2c0>
 80023f0:	4bbd      	ldr	r3, [pc, #756]	; (80026e8 <ProcessInputs+0x5b0>)
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d155      	bne.n	80024a4 <ProcessInputs+0x36c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 80023f8:	4bbc      	ldr	r3, [pc, #752]	; (80026ec <ProcessInputs+0x5b4>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	4bbb      	ldr	r3, [pc, #748]	; (80026ec <ProcessInputs+0x5b4>)
 8002400:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002404:	f7fd fee4 	bl	80001d0 <__aeabi_dsub>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	f7fd fede 	bl	80001d4 <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4614      	mov	r4, r2
 800241e:	461d      	mov	r5, r3
 8002420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	f7fd fed4 	bl	80001d4 <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	4bae      	ldr	r3, [pc, #696]	; (80026f0 <ProcessInputs+0x5b8>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fd fec9 	bl	80001d0 <__aeabi_dsub>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	4ba9      	ldr	r3, [pc, #676]	; (80026ec <ProcessInputs+0x5b4>)
 8002448:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800244c:	f7fe f878 	bl	8000540 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fd febc 	bl	80001d4 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	f7fd feb2 	bl	80001d4 <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	4b9d      	ldr	r3, [pc, #628]	; (80026f0 <ProcessInputs+0x5b8>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fd fea9 	bl	80001d4 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f7fe f983 	bl	8000794 <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4996      	ldr	r1, [pc, #600]	; (80026ec <ProcessInputs+0x5b4>)
 8002494:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 8002498:	4b94      	ldr	r3, [pc, #592]	; (80026ec <ProcessInputs+0x5b4>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	4993      	ldr	r1, [pc, #588]	; (80026ec <ProcessInputs+0x5b4>)
 80024a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if((Device.Joint == Knee) || (Device.Joint == Combined))
 80024a4:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <ProcessInputs+0x5b0>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d003      	beq.n	80024b4 <ProcessInputs+0x37c>
 80024ac:	4b8e      	ldr	r3, [pc, #568]	; (80026e8 <ProcessInputs+0x5b0>)
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d155      	bne.n	8002560 <ProcessInputs+0x428>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80024b4:	4b8f      	ldr	r3, [pc, #572]	; (80026f4 <ProcessInputs+0x5bc>)
 80024b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ba:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <ProcessInputs+0x5bc>)
 80024bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024c0:	f7fd fe86 	bl	80001d0 <__aeabi_dsub>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	f7fd fe80 	bl	80001d4 <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	461d      	mov	r5, r3
 80024dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	f7fd fe76 	bl	80001d4 <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <ProcessInputs+0x5b8>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fd fe6b 	bl	80001d0 <__aeabi_dsub>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <ProcessInputs+0x5bc>)
 8002504:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002508:	f7fe f81a 	bl	8000540 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe5e 	bl	80001d4 <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	f7fd fe54 	bl	80001d4 <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <ProcessInputs+0x5b8>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fd fe4b 	bl	80001d4 <__adddf3>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fe f925 	bl	8000794 <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4969      	ldr	r1, [pc, #420]	; (80026f4 <ProcessInputs+0x5bc>)
 8002550:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <ProcessInputs+0x5bc>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	4966      	ldr	r1, [pc, #408]	; (80026f4 <ProcessInputs+0x5bc>)
 800255c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <ProcessInputs+0x5c0>)
 8002562:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002566:	a358      	add	r3, pc, #352	; (adr r3, 80026c8 <ProcessInputs+0x590>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fd ffe8 	bl	8000540 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <ProcessInputs+0x5c0>)
 800257a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800257e:	a354      	add	r3, pc, #336	; (adr r3, 80026d0 <ProcessInputs+0x598>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fd ffdc 	bl	8000540 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd fe1e 	bl	80001d0 <__aeabi_dsub>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->bot[0] + 0.0256 * LoadCell->bot[1] + 0.0128 * LoadCell->bot[2];
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <ProcessInputs+0x5c4>)
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	a34d      	add	r3, pc, #308	; (adr r3, 80026d8 <ProcessInputs+0x5a0>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fd ffca 	bl	8000540 <__aeabi_dmul>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe0e 	bl	80001d4 <__adddf3>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <ProcessInputs+0x5c4>)
 80025c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025c6:	a346      	add	r3, pc, #280	; (adr r3, 80026e0 <ProcessInputs+0x5a8>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ffb8 	bl	8000540 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fd fdfc 	bl	80001d4 <__adddf3>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4b45      	ldr	r3, [pc, #276]	; (80026fc <ProcessInputs+0x5c4>)
 80025e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80025ea:	a33b      	add	r3, pc, #236	; (adr r3, 80026d8 <ProcessInputs+0x5a0>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fd ffa6 	bl	8000540 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd fdea 	bl	80001d4 <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 8002604:	493c      	ldr	r1, [pc, #240]	; (80026f8 <ProcessInputs+0x5c0>)
 8002606:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <ProcessInputs+0x5c0>)
 800260c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002610:	a32d      	add	r3, pc, #180	; (adr r3, 80026c8 <ProcessInputs+0x590>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ff93 	bl	8000540 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <ProcessInputs+0x5c0>)
 8002624:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002628:	a329      	add	r3, pc, #164	; (adr r3, 80026d0 <ProcessInputs+0x598>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd ff87 	bl	8000540 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	f7fd fdc9 	bl	80001d0 <__aeabi_dsub>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4614      	mov	r4, r2
 8002644:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->top[0] + 0.0256 * LoadCell->top[1] + 0.0128 * LoadCell->top[2];
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <ProcessInputs+0x5c4>)
 8002648:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800264c:	a322      	add	r3, pc, #136	; (adr r3, 80026d8 <ProcessInputs+0x5a0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd ff75 	bl	8000540 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4620      	mov	r0, r4
 800265c:	4629      	mov	r1, r5
 800265e:	f7fd fdb9 	bl	80001d4 <__adddf3>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4614      	mov	r4, r2
 8002668:	461d      	mov	r5, r3
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <ProcessInputs+0x5c4>)
 800266c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002670:	a31b      	add	r3, pc, #108	; (adr r3, 80026e0 <ProcessInputs+0x5a8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ff63 	bl	8000540 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4620      	mov	r0, r4
 8002680:	4629      	mov	r1, r5
 8002682:	f7fd fda7 	bl	80001d4 <__adddf3>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4614      	mov	r4, r2
 800268c:	461d      	mov	r5, r3
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <ProcessInputs+0x5c4>)
 8002690:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002694:	a310      	add	r3, pc, #64	; (adr r3, 80026d8 <ProcessInputs+0x5a0>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fd ff51 	bl	8000540 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4620      	mov	r0, r4
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7fd fd95 	bl	80001d4 <__adddf3>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 80026ae:	4912      	ldr	r1, [pc, #72]	; (80026f8 <ProcessInputs+0x5c0>)
 80026b0:	e9c1 2306 	strd	r2, r3, [r1, #24]

		LoadCell->bot[2] = LoadCell->bot[1];
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <ProcessInputs+0x5c4>)
 80026b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026ba:	4910      	ldr	r1, [pc, #64]	; (80026fc <ProcessInputs+0x5c4>)
 80026bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026c0:	e01e      	b.n	8002700 <ProcessInputs+0x5c8>
 80026c2:	bf00      	nop
 80026c4:	f3af 8000 	nop.w
 80026c8:	6cf41f21 	.word	0x6cf41f21
 80026cc:	3ffa7d56 	.word	0x3ffa7d56
 80026d0:	089a0275 	.word	0x089a0275
 80026d4:	3fe69e1b 	.word	0x3fe69e1b
 80026d8:	eb1c432d 	.word	0xeb1c432d
 80026dc:	3f8a36e2 	.word	0x3f8a36e2
 80026e0:	eb1c432d 	.word	0xeb1c432d
 80026e4:	3f9a36e2 	.word	0x3f9a36e2
 80026e8:	200000ac 	.word	0x200000ac
 80026ec:	20000190 	.word	0x20000190
 80026f0:	20000000 	.word	0x20000000
 80026f4:	200001f0 	.word	0x200001f0
 80026f8:	20000280 	.word	0x20000280
 80026fc:	200000b0 	.word	0x200000b0
		LoadCell->bot[1] = LoadCell->bot[0];
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <ProcessInputs+0x62c>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	4917      	ldr	r1, [pc, #92]	; (8002764 <ProcessInputs+0x62c>)
 8002708:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[2] = LoadCell->top[1];
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <ProcessInputs+0x62c>)
 800270e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002712:	4914      	ldr	r1, [pc, #80]	; (8002764 <ProcessInputs+0x62c>)
 8002714:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		LoadCell->top[1] = LoadCell->top[0];
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <ProcessInputs+0x62c>)
 800271a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800271e:	4911      	ldr	r1, [pc, #68]	; (8002764 <ProcessInputs+0x62c>)
 8002720:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <ProcessInputs+0x630>)
 8002726:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800272a:	490f      	ldr	r1, [pc, #60]	; (8002768 <ProcessInputs+0x630>)
 800272c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <ProcessInputs+0x630>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	490c      	ldr	r1, [pc, #48]	; (8002768 <ProcessInputs+0x630>)
 8002738:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <ProcessInputs+0x630>)
 800273e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002742:	4909      	ldr	r1, [pc, #36]	; (8002768 <ProcessInputs+0x630>)
 8002744:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <ProcessInputs+0x630>)
 800274a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800274e:	4906      	ldr	r1, [pc, #24]	; (8002768 <ProcessInputs+0x630>)
 8002750:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}

	CalibrateIMU();
 8002754:	f000 f80a 	bl	800276c <CalibrateIMU>
	ComputeLimbAngle();
 8002758:	f000 fb5e 	bl	8002e18 <ComputeLimbAngle>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bdb0      	pop	{r4, r5, r7, pc}
 8002764:	200000b0 	.word	0x200000b0
 8002768:	20000280 	.word	0x20000280

0800276c <CalibrateIMU>:

static void CalibrateIMU(void)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b0a0      	sub	sp, #128	; 0x80
 8002772:	af00      	add	r7, sp, #0
	double axBias = 0.0;
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double ayBias = 0.0;
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double azBias = 0.0;
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double gxBias = 0.0;
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double gyBias = 0.0;
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double gzBias = 0.0;
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double n = 1.0;
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <CalibrateIMU+0xa8>)
 80027c2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double c1, c2, c3, s1, s2, s3;
	if(Device.Side == Left)
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <CalibrateIMU+0xac>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d128      	bne.n	8002820 <CalibrateIMU+0xb4>
	{
		c1 = -1.0;
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <CalibrateIMU+0xb0>)
 80027d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		c2 = -1.0;
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <CalibrateIMU+0xb0>)
 80027de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		c3 = 1.0;
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <CalibrateIMU+0xa8>)
 80027e8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		s1 = 0.0;
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		s2 = 0.0;
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		s3 = 0.0;
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002810:	e027      	b.n	8002862 <CalibrateIMU+0xf6>
 8002812:	bf00      	nop
 8002814:	3ff00000 	.word	0x3ff00000
 8002818:	200000ac 	.word	0x200000ac
 800281c:	bff00000 	.word	0xbff00000
	}
	else
	{
		c1 = 1.0;
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4bc0      	ldr	r3, [pc, #768]	; (8002b28 <CalibrateIMU+0x3bc>)
 8002826:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		c2 = 1.0;
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	4bbe      	ldr	r3, [pc, #760]	; (8002b28 <CalibrateIMU+0x3bc>)
 8002830:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		c3 = 1.0;
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	4bbb      	ldr	r3, [pc, #748]	; (8002b28 <CalibrateIMU+0x3bc>)
 800283a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		s1 = 0.0;
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		s2 = 0.0;
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		s3 = 0.0;
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	}

	CM_IMU_Data.ax = n * (IMU_Data.ax*(c1*c3 - c2*s1*s3) + IMU_Data.ay*(-c3*s1    - c1*c2*s3) + IMU_Data.az*( s2*s3)) - axBias;
 8002862:	4bb2      	ldr	r3, [pc, #712]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002868:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800286c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002870:	f7fd fe66 	bl	8000540 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4692      	mov	sl, r2
 800287a:	469b      	mov	fp, r3
 800287c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002880:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002884:	f7fd fe5c 	bl	8000540 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002894:	f7fd fe54 	bl	8000540 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4650      	mov	r0, sl
 800289e:	4659      	mov	r1, fp
 80028a0:	f7fd fc96 	bl	80001d0 <__aeabi_dsub>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4640      	mov	r0, r8
 80028aa:	4649      	mov	r1, r9
 80028ac:	f7fd fe48 	bl	8000540 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4692      	mov	sl, r2
 80028b6:	469b      	mov	fp, r3
 80028b8:	4b9c      	ldr	r3, [pc, #624]	; (8002b2c <CalibrateIMU+0x3c0>)
 80028ba:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80028be:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd fe37 	bl	8000540 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4614      	mov	r4, r2
 80028d8:	461d      	mov	r5, r3
 80028da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028e2:	f7fd fe2d 	bl	8000540 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028f2:	f7fd fe25 	bl	8000540 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4620      	mov	r0, r4
 80028fc:	4629      	mov	r1, r5
 80028fe:	f7fd fc67 	bl	80001d0 <__aeabi_dsub>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4640      	mov	r0, r8
 8002908:	4649      	mov	r1, r9
 800290a:	f7fd fe19 	bl	8000540 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4650      	mov	r0, sl
 8002914:	4659      	mov	r1, fp
 8002916:	f7fd fc5d 	bl	80001d4 <__adddf3>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002924:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800292c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002930:	f7fd fe06 	bl	8000540 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fe00 	bl	8000540 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4640      	mov	r0, r8
 8002946:	4649      	mov	r1, r9
 8002948:	f7fd fc44 	bl	80001d4 <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002958:	f7fd fdf2 	bl	8000540 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002968:	f7fd fc32 	bl	80001d0 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	496f      	ldr	r1, [pc, #444]	; (8002b30 <CalibrateIMU+0x3c4>)
 8002972:	e9c1 2300 	strd	r2, r3, [r1]
	CM_IMU_Data.ay = n * (IMU_Data.ax*(c1*s3 + c2*c3*s1) + IMU_Data.ay*( c1*c2*c3 - s1*s3   ) + IMU_Data.az*(-c3*s2)) - ayBias;
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002978:	e9d3 4500 	ldrd	r4, r5, [r3]
 800297c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002980:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002984:	f7fd fddc 	bl	8000540 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4690      	mov	r8, r2
 800298e:	4699      	mov	r9, r3
 8002990:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002994:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002998:	f7fd fdd2 	bl	8000540 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80029a8:	f7fd fdca 	bl	8000540 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4640      	mov	r0, r8
 80029b2:	4649      	mov	r1, r9
 80029b4:	f7fd fc0e 	bl	80001d4 <__adddf3>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fd fdbe 	bl	8000540 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4692      	mov	sl, r2
 80029ca:	469b      	mov	fp, r3
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <CalibrateIMU+0x3c0>)
 80029ce:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80029d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80029da:	f7fd fdb1 	bl	8000540 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80029ea:	f7fd fda9 	bl	8000540 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4690      	mov	r8, r2
 80029f4:	4699      	mov	r9, r3
 80029f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029fe:	f7fd fd9f 	bl	8000540 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4640      	mov	r0, r8
 8002a08:	4649      	mov	r1, r9
 8002a0a:	f7fd fbe1 	bl	80001d0 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fd93 	bl	8000540 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4650      	mov	r0, sl
 8002a20:	4659      	mov	r1, fp
 8002a22:	f7fd fbd7 	bl	80001d4 <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4690      	mov	r8, r2
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002a30:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a48:	f7fd fd7a 	bl	8000540 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f7fd fd74 	bl	8000540 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	4649      	mov	r1, r9
 8002a60:	f7fd fbb8 	bl	80001d4 <__adddf3>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd fd66 	bl	8000540 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a80:	f7fd fba6 	bl	80001d0 <__aeabi_dsub>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4929      	ldr	r1, [pc, #164]	; (8002b30 <CalibrateIMU+0x3c4>)
 8002a8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	CM_IMU_Data.az = n * (IMU_Data.ax*(s1*s2           ) + IMU_Data.ay*( c1*s2              ) + IMU_Data.az*( c2   )) - azBias;
 8002a8e:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002a90:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a9c:	f7fd fd50 	bl	8000540 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fd4a 	bl	8000540 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4690      	mov	r8, r2
 8002ab2:	4699      	mov	r9, r3
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002ab6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002abe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ac2:	f7fd fd3d 	bl	8000540 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4620      	mov	r0, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7fd fd37 	bl	8000540 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4649      	mov	r1, r9
 8002ada:	f7fd fb7b 	bl	80001d4 <__adddf3>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <CalibrateIMU+0x3c0>)
 8002ae8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002aec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002af0:	f7fd fd26 	bl	8000540 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fb6a 	bl	80001d4 <__adddf3>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0c:	f7fd fd18 	bl	8000540 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b1c:	f7fd fb58 	bl	80001d0 <__aeabi_dsub>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	e006      	b.n	8002b34 <CalibrateIMU+0x3c8>
 8002b26:	bf00      	nop
 8002b28:	3ff00000 	.word	0x3ff00000
 8002b2c:	20000140 	.word	0x20000140
 8002b30:	20000250 	.word	0x20000250
 8002b34:	49b6      	ldr	r1, [pc, #728]	; (8002e10 <CalibrateIMU+0x6a4>)
 8002b36:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CM_IMU_Data.gx = n * (IMU_Data.gx*(c1*c3 - c2*s1*s3) + IMU_Data.gy*(-c3*s1    - c1*c2*s3) + IMU_Data.gz*( s2*s3)) - gxBias;
 8002b3a:	4bb6      	ldr	r3, [pc, #728]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002b3c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002b44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b48:	f7fd fcfa 	bl	8000540 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4690      	mov	r8, r2
 8002b52:	4699      	mov	r9, r3
 8002b54:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002b5c:	f7fd fcf0 	bl	8000540 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b6c:	f7fd fce8 	bl	8000540 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4640      	mov	r0, r8
 8002b76:	4649      	mov	r1, r9
 8002b78:	f7fd fb2a 	bl	80001d0 <__aeabi_dsub>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4620      	mov	r0, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7fd fcdc 	bl	8000540 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4690      	mov	r8, r2
 8002b8e:	4699      	mov	r9, r3
 8002b90:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002b92:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002baa:	f7fd fcc9 	bl	8000540 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4692      	mov	sl, r2
 8002bb4:	469b      	mov	fp, r3
 8002bb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002bbe:	f7fd fcbf 	bl	8000540 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bce:	f7fd fcb7 	bl	8000540 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4650      	mov	r0, sl
 8002bd8:	4659      	mov	r1, fp
 8002bda:	f7fd faf9 	bl	80001d0 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fcab 	bl	8000540 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4640      	mov	r0, r8
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	f7fd faef 	bl	80001d4 <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002c00:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c0c:	f7fd fc98 	bl	8000540 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fc92 	bl	8000540 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4640      	mov	r0, r8
 8002c22:	4649      	mov	r1, r9
 8002c24:	f7fd fad6 	bl	80001d4 <__adddf3>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c34:	f7fd fc84 	bl	8000540 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c44:	f7fd fac4 	bl	80001d0 <__aeabi_dsub>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4970      	ldr	r1, [pc, #448]	; (8002e10 <CalibrateIMU+0x6a4>)
 8002c4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CM_IMU_Data.gy = n * (IMU_Data.gx*(c1*s3 + c2*c3*s1) + IMU_Data.gy*( c1*c2*c3 - s1*s3   ) + IMU_Data.gz*(-c3*s2)) - gyBias;
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002c54:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c5c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c60:	f7fd fc6e 	bl	8000540 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4690      	mov	r8, r2
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002c70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c74:	f7fd fc64 	bl	8000540 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c84:	f7fd fc5c 	bl	8000540 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	4649      	mov	r1, r9
 8002c90:	f7fd faa0 	bl	80001d4 <__adddf3>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4620      	mov	r0, r4
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f7fd fc50 	bl	8000540 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002caa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002cae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cb2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002cb6:	f7fd fc43 	bl	8000540 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002cc6:	f7fd fc3b 	bl	8000540 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4692      	mov	sl, r2
 8002cd0:	469b      	mov	fp, r3
 8002cd2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cd6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002cda:	f7fd fc31 	bl	8000540 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4650      	mov	r0, sl
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	f7fd fa73 	bl	80001d0 <__aeabi_dsub>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fc25 	bl	8000540 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	f7fd fa69 	bl	80001d4 <__adddf3>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002d0c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d24:	f7fd fc0c 	bl	8000540 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f7fd fc06 	bl	8000540 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4640      	mov	r0, r8
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	f7fd fa4a 	bl	80001d4 <__adddf3>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4c:	f7fd fbf8 	bl	8000540 <__aeabi_dmul>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5c:	f7fd fa38 	bl	80001d0 <__aeabi_dsub>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	492a      	ldr	r1, [pc, #168]	; (8002e10 <CalibrateIMU+0x6a4>)
 8002d66:	e9c1 2308 	strd	r2, r3, [r1, #32]
	CM_IMU_Data.gz = n * (IMU_Data.gx*(s1*s2           ) + IMU_Data.gy*( c1*s2              ) + IMU_Data.gz*( c2   )) - gzBias;
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002d6c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d78:	f7fd fbe2 	bl	8000540 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fbdc 	bl	8000540 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4690      	mov	r8, r2
 8002d8e:	4699      	mov	r9, r3
 8002d90:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002d92:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d9a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002d9e:	f7fd fbcf 	bl	8000540 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fbc9 	bl	8000540 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4640      	mov	r0, r8
 8002db4:	4649      	mov	r1, r9
 8002db6:	f7fd fa0d 	bl	80001d4 <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4614      	mov	r4, r2
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <CalibrateIMU+0x6a8>)
 8002dc4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002dcc:	f7fd fbb8 	bl	8000540 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f7fd f9fc 	bl	80001d4 <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	f7fd fbaa 	bl	8000540 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df8:	f7fd f9ea 	bl	80001d0 <__aeabi_dsub>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <CalibrateIMU+0x6a4>)
 8002e02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002e06:	bf00      	nop
 8002e08:	3780      	adds	r7, #128	; 0x80
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e10:	20000250 	.word	0x20000250
 8002e14:	20000140 	.word	0x20000140

08002e18 <ComputeLimbAngle>:

static void ComputeLimbAngle(void)
{
 8002e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e1c:	b088      	sub	sp, #32
 8002e1e:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002e20:	4bc1      	ldr	r3, [pc, #772]	; (8003128 <ComputeLimbAngle+0x310>)
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <ComputeLimbAngle+0x1a>
 8002e28:	4bbf      	ldr	r3, [pc, #764]	; (8003128 <ComputeLimbAngle+0x310>)
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 80af 	bne.w	8002f90 <ComputeLimbAngle+0x178>
	{
		double accelAngle = (atan(CM_IMU_Data.ax / sqrt(pow(CM_IMU_Data.ay, 2) + pow(CM_IMU_Data.az, 2)))) * 180.0 / M_PI;
 8002e32:	4bbe      	ldr	r3, [pc, #760]	; (800312c <ComputeLimbAngle+0x314>)
 8002e34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e38:	4bbc      	ldr	r3, [pc, #752]	; (800312c <ComputeLimbAngle+0x314>)
 8002e3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e3e:	ed9f 1bb4 	vldr	d1, [pc, #720]	; 8003110 <ComputeLimbAngle+0x2f8>
 8002e42:	eeb0 0a47 	vmov.f32	s0, s14
 8002e46:	eef0 0a67 	vmov.f32	s1, s15
 8002e4a:	f004 fadb 	bl	8007404 <pow>
 8002e4e:	ec59 8b10 	vmov	r8, r9, d0
 8002e52:	4bb6      	ldr	r3, [pc, #728]	; (800312c <ComputeLimbAngle+0x314>)
 8002e54:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e58:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8003110 <ComputeLimbAngle+0x2f8>
 8002e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e60:	eef0 0a67 	vmov.f32	s1, s15
 8002e64:	f004 face 	bl	8007404 <pow>
 8002e68:	ec53 2b10 	vmov	r2, r3, d0
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd f9b0 	bl	80001d4 <__adddf3>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	ec43 2b17 	vmov	d7, r2, r3
 8002e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e80:	eef0 0a67 	vmov.f32	s1, s15
 8002e84:	f004 fb2e 	bl	80074e4 <sqrt>
 8002e88:	ec53 2b10 	vmov	r2, r3, d0
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd fc80 	bl	8000794 <__aeabi_ddiv>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	ec43 2b17 	vmov	d7, r2, r3
 8002e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea0:	eef0 0a67 	vmov.f32	s1, s15
 8002ea4:	f004 f904 	bl	80070b0 <atan>
 8002ea8:	ec51 0b10 	vmov	r0, r1, d0
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b9f      	ldr	r3, [pc, #636]	; (8003130 <ComputeLimbAngle+0x318>)
 8002eb2:	f7fd fb45 	bl	8000540 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	a396      	add	r3, pc, #600	; (adr r3, 8003118 <ComputeLimbAngle+0x300>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fc66 	bl	8000794 <__aeabi_ddiv>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		static double compFiltAngle = 0.0;
		static double dGyroAngle = 0.0;

		dGyroAngle = dt/2 * (CM_IMU_Data.gz + dGyroAngle);	// Change in angle from gyro (trapezoidal used)
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <ComputeLimbAngle+0x31c>)
 8002ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ede:	f7fd fc59 	bl	8000794 <__aeabi_ddiv>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4614      	mov	r4, r2
 8002ee8:	461d      	mov	r5, r3
 8002eea:	4b90      	ldr	r3, [pc, #576]	; (800312c <ComputeLimbAngle+0x314>)
 8002eec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ef0:	4b91      	ldr	r3, [pc, #580]	; (8003138 <ComputeLimbAngle+0x320>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd f96d 	bl	80001d4 <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd fb1d 	bl	8000540 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	498b      	ldr	r1, [pc, #556]	; (8003138 <ComputeLimbAngle+0x320>)
 8002f0c:	e9c1 2300 	strd	r2, r3, [r1]

		// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
		double alpha = 0.002;
 8002f10:	a383      	add	r3, pc, #524	; (adr r3, 8003120 <ComputeLimbAngle+0x308>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
		compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 8002f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f22:	f7fd fb0d 	bl	8000540 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	4981      	ldr	r1, [pc, #516]	; (800313c <ComputeLimbAngle+0x324>)
 8002f38:	f7fd f94a 	bl	80001d0 <__aeabi_dsub>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4690      	mov	r8, r2
 8002f42:	4699      	mov	r9, r3
 8002f44:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <ComputeLimbAngle+0x320>)
 8002f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <ComputeLimbAngle+0x328>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd f940 	bl	80001d4 <__adddf3>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4640      	mov	r0, r8
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	f7fd faf0 	bl	8000540 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd f934 	bl	80001d4 <__adddf3>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4973      	ldr	r1, [pc, #460]	; (8003140 <ComputeLimbAngle+0x328>)
 8002f72:	e9c1 2300 	strd	r2, r3, [r1]

		CM_Ankle.limbAngle = compFiltAngle - CM_Ankle.jointAngle[0];
 8002f76:	4b72      	ldr	r3, [pc, #456]	; (8003140 <ComputeLimbAngle+0x328>)
 8002f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7c:	4b71      	ldr	r3, [pc, #452]	; (8003144 <ComputeLimbAngle+0x32c>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd f925 	bl	80001d0 <__aeabi_dsub>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	496e      	ldr	r1, [pc, #440]	; (8003144 <ComputeLimbAngle+0x32c>)
 8002f8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <ComputeLimbAngle+0x310>)
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d004      	beq.n	8002fa2 <ComputeLimbAngle+0x18a>
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <ComputeLimbAngle+0x310>)
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 80af 	bne.w	8003100 <ComputeLimbAngle+0x2e8>
	{
		double accelAngle = (atan(CM_IMU_Data.ax / sqrt(pow(CM_IMU_Data.ay, 2) + pow(CM_IMU_Data.az, 2)))) * 180.0 / M_PI;
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <ComputeLimbAngle+0x314>)
 8002fa4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <ComputeLimbAngle+0x314>)
 8002faa:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fae:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8003110 <ComputeLimbAngle+0x2f8>
 8002fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb6:	eef0 0a67 	vmov.f32	s1, s15
 8002fba:	f004 fa23 	bl	8007404 <pow>
 8002fbe:	ec59 8b10 	vmov	r8, r9, d0
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	; (800312c <ComputeLimbAngle+0x314>)
 8002fc4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002fc8:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8003110 <ComputeLimbAngle+0x2f8>
 8002fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd0:	eef0 0a67 	vmov.f32	s1, s15
 8002fd4:	f004 fa16 	bl	8007404 <pow>
 8002fd8:	ec53 2b10 	vmov	r2, r3, d0
 8002fdc:	4640      	mov	r0, r8
 8002fde:	4649      	mov	r1, r9
 8002fe0:	f7fd f8f8 	bl	80001d4 <__adddf3>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	ec43 2b17 	vmov	d7, r2, r3
 8002fec:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff0:	eef0 0a67 	vmov.f32	s1, s15
 8002ff4:	f004 fa76 	bl	80074e4 <sqrt>
 8002ff8:	ec53 2b10 	vmov	r2, r3, d0
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd fbc8 	bl	8000794 <__aeabi_ddiv>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	ec43 2b17 	vmov	d7, r2, r3
 800300c:	eeb0 0a47 	vmov.f32	s0, s14
 8003010:	eef0 0a67 	vmov.f32	s1, s15
 8003014:	f004 f84c 	bl	80070b0 <atan>
 8003018:	ec51 0b10 	vmov	r0, r1, d0
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <ComputeLimbAngle+0x318>)
 8003022:	f7fd fa8d 	bl	8000540 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	a33a      	add	r3, pc, #232	; (adr r3, 8003118 <ComputeLimbAngle+0x300>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f7fd fbae 	bl	8000794 <__aeabi_ddiv>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		static double compFiltAngle = 0.0;
		static double dGyroAngle = 0.0;

		dGyroAngle = dt/2 * (CM_IMU_Data.gz + dGyroAngle);	// Change in angle from gyro (trapezoidal used)
 8003040:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <ComputeLimbAngle+0x31c>)
 8003042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800304e:	f7fd fba1 	bl	8000794 <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	461d      	mov	r5, r3
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <ComputeLimbAngle+0x314>)
 800305c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <ComputeLimbAngle+0x330>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd f8b5 	bl	80001d4 <__adddf3>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd fa65 	bl	8000540 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4933      	ldr	r1, [pc, #204]	; (8003148 <ComputeLimbAngle+0x330>)
 800307c:	e9c1 2300 	strd	r2, r3, [r1]

		// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
		double alpha = 0.002;
 8003080:	a327      	add	r3, pc, #156	; (adr r3, 8003120 <ComputeLimbAngle+0x308>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	e9c7 2300 	strd	r2, r3, [r7]
		compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 800308a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800308e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003092:	f7fd fa55 	bl	8000540 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	461d      	mov	r5, r3
 800309e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	4925      	ldr	r1, [pc, #148]	; (800313c <ComputeLimbAngle+0x324>)
 80030a8:	f7fd f892 	bl	80001d0 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4690      	mov	r8, r2
 80030b2:	4699      	mov	r9, r3
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <ComputeLimbAngle+0x330>)
 80030b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <ComputeLimbAngle+0x334>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd f888 	bl	80001d4 <__adddf3>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4640      	mov	r0, r8
 80030ca:	4649      	mov	r1, r9
 80030cc:	f7fd fa38 	bl	8000540 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd f87c 	bl	80001d4 <__adddf3>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	491a      	ldr	r1, [pc, #104]	; (800314c <ComputeLimbAngle+0x334>)
 80030e2:	e9c1 2300 	strd	r2, r3, [r1]

		CM_Knee.limbAngle = compFiltAngle - CM_Knee.jointAngle[0];
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <ComputeLimbAngle+0x334>)
 80030e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <ComputeLimbAngle+0x338>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd f86d 	bl	80001d0 <__aeabi_dsub>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4915      	ldr	r1, [pc, #84]	; (8003150 <ComputeLimbAngle+0x338>)
 80030fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
}
 8003100:	bf00      	nop
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800310a:	bf00      	nop
 800310c:	f3af 8000 	nop.w
 8003110:	00000000 	.word	0x00000000
 8003114:	40000000 	.word	0x40000000
 8003118:	54442d18 	.word	0x54442d18
 800311c:	400921fb 	.word	0x400921fb
 8003120:	d2f1a9fc 	.word	0xd2f1a9fc
 8003124:	3f60624d 	.word	0x3f60624d
 8003128:	200000ac 	.word	0x200000ac
 800312c:	20000250 	.word	0x20000250
 8003130:	40668000 	.word	0x40668000
 8003134:	20000000 	.word	0x20000000
 8003138:	20000318 	.word	0x20000318
 800313c:	3ff00000 	.word	0x3ff00000
 8003140:	20000320 	.word	0x20000320
 8003144:	20000190 	.word	0x20000190
 8003148:	20000328 	.word	0x20000328
 800314c:	20000330 	.word	0x20000330
 8003150:	200001f0 	.word	0x200001f0

08003154 <RunStateMachine>:

static void RunStateMachine(void)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 800315a:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <RunStateMachine+0x244>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <RunStateMachine+0x16>
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <RunStateMachine+0x244>)
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10b      	bne.n	8003182 <RunStateMachine+0x2e>
	{
		CM_Ankle.ProsCtrl.eqPoint = 0.0f;
 800316a:	4b8c      	ldr	r3, [pc, #560]	; (800339c <RunStateMachine+0x248>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
		CM_Ankle.ProsCtrl.kd = 0.0f;
 8003172:	4b8a      	ldr	r3, [pc, #552]	; (800339c <RunStateMachine+0x248>)
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
		CM_Ankle.ProsCtrl.kp = 0.0f;
 800317a:	4b88      	ldr	r3, [pc, #544]	; (800339c <RunStateMachine+0x248>)
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8003182:	4b85      	ldr	r3, [pc, #532]	; (8003398 <RunStateMachine+0x244>)
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d004      	beq.n	8003194 <RunStateMachine+0x40>
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <RunStateMachine+0x244>)
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 80fb 	bne.w	800338a <RunStateMachine+0x236>
	{
		static StateMachine_e State = EarlyStance;
		static uint8_t isCheckBoundsRequired = 0;

		switch(State)
 8003194:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <RunStateMachine+0x24c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	f200 80f9 	bhi.w	8003390 <RunStateMachine+0x23c>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <RunStateMachine+0x50>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031b9 	.word	0x080031b9
 80031a8:	080032df 	.word	0x080032df
 80031ac:	080032e9 	.word	0x080032e9
 80031b0:	080032f3 	.word	0x080032f3
 80031b4:	0800333f 	.word	0x0800333f
		{
		case EarlyStance:
			CM_state = 1200;
 80031b8:	4b7a      	ldr	r3, [pc, #488]	; (80033a4 <RunStateMachine+0x250>)
 80031ba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80031be:	801a      	strh	r2, [r3, #0]

			CM_Knee.ProsCtrl.eqPoint = CM_Knee.StanceCtrl.eqPoint;
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <RunStateMachine+0x254>)
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	4a78      	ldr	r2, [pc, #480]	; (80033a8 <RunStateMachine+0x254>)
 80031c6:	62d3      	str	r3, [r2, #44]	; 0x2c
			CM_Knee.ProsCtrl.kd = CM_Knee.StanceCtrl.kd;
 80031c8:	4b77      	ldr	r3, [pc, #476]	; (80033a8 <RunStateMachine+0x254>)
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	4a76      	ldr	r2, [pc, #472]	; (80033a8 <RunStateMachine+0x254>)
 80031ce:	6313      	str	r3, [r2, #48]	; 0x30
			CM_Knee.ProsCtrl.kp = CM_Knee.StanceCtrl.kp;
 80031d0:	4b75      	ldr	r3, [pc, #468]	; (80033a8 <RunStateMachine+0x254>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	4a74      	ldr	r2, [pc, #464]	; (80033a8 <RunStateMachine+0x254>)
 80031d6:	6353      	str	r3, [r2, #52]	; 0x34

	        if(CM_LoadCell_Filtered->bot[0] < CM_lcBot_lowerBound && CM_LoadCell_Filtered->top[0] > CM_lcTop_upperBound)
 80031d8:	4b74      	ldr	r3, [pc, #464]	; (80033ac <RunStateMachine+0x258>)
 80031da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031de:	4b74      	ldr	r3, [pc, #464]	; (80033b0 <RunStateMachine+0x25c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f954 	bl	8000490 <__aeabi_f2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fd fc18 	bl	8000a24 <__aeabi_dcmplt>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <RunStateMachine+0xce>
 80031fa:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <RunStateMachine+0x258>)
 80031fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <RunStateMachine+0x260>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f943 	bl	8000490 <__aeabi_f2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4620      	mov	r0, r4
 8003210:	4629      	mov	r1, r5
 8003212:	f7fd fc25 	bl	8000a60 <__aeabi_dcmpgt>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <RunStateMachine+0xce>
	            isCheckBoundsRequired = 1;
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <RunStateMachine+0x264>)
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]

			if(isCheckBoundsRequired)
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <RunStateMachine+0x264>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80b1 	beq.w	800338e <RunStateMachine+0x23a>
			{
				uint8_t lcBotWithinBounds = (CM_LoadCell_Filtered->bot[0] < CM_lcBot_upperBound) && (CM_LoadCell_Filtered->bot[0] > CM_lcBot_lowerBound);
 800322c:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <RunStateMachine+0x258>)
 800322e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003232:	4b62      	ldr	r3, [pc, #392]	; (80033bc <RunStateMachine+0x268>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f92a 	bl	8000490 <__aeabi_f2d>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4620      	mov	r0, r4
 8003242:	4629      	mov	r1, r5
 8003244:	f7fd fbee 	bl	8000a24 <__aeabi_dcmplt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <RunStateMachine+0x120>
 800324e:	4b57      	ldr	r3, [pc, #348]	; (80033ac <RunStateMachine+0x258>)
 8003250:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003254:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <RunStateMachine+0x25c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f919 	bl	8000490 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fd fbfb 	bl	8000a60 <__aeabi_dcmpgt>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <RunStateMachine+0x120>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <RunStateMachine+0x122>
 8003274:	2300      	movs	r3, #0
 8003276:	71fb      	strb	r3, [r7, #7]
				uint8_t lcTopWithinBounds = (CM_LoadCell_Filtered->top[0] < CM_lcTop_upperBound) && (CM_LoadCell_Filtered->top[0] > CM_lcTop_lowerBound);
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <RunStateMachine+0x258>)
 800327a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800327e:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <RunStateMachine+0x260>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f904 	bl	8000490 <__aeabi_f2d>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	f7fd fbc8 	bl	8000a24 <__aeabi_dcmplt>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d012      	beq.n	80032c0 <RunStateMachine+0x16c>
 800329a:	4b44      	ldr	r3, [pc, #272]	; (80033ac <RunStateMachine+0x258>)
 800329c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <RunStateMachine+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f8f3 	bl	8000490 <__aeabi_f2d>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f7fd fbd5 	bl	8000a60 <__aeabi_dcmpgt>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <RunStateMachine+0x16c>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <RunStateMachine+0x16e>
 80032c0:	2300      	movs	r3, #0
 80032c2:	71bb      	strb	r3, [r7, #6]
				if(lcBotWithinBounds && lcTopWithinBounds)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d061      	beq.n	800338e <RunStateMachine+0x23a>
 80032ca:	79bb      	ldrb	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05e      	beq.n	800338e <RunStateMachine+0x23a>
				{
					isCheckBoundsRequired = 0;
 80032d0:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <RunStateMachine+0x264>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
					State = SwingFlexion;
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <RunStateMachine+0x24c>)
 80032d8:	2203      	movs	r2, #3
 80032da:	701a      	strb	r2, [r3, #0]
				}
			}

			break;
 80032dc:	e057      	b.n	800338e <RunStateMachine+0x23a>

		case MidStance:
			CM_state = 1300;
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <RunStateMachine+0x250>)
 80032e0:	f240 5214 	movw	r2, #1300	; 0x514
 80032e4:	801a      	strh	r2, [r3, #0]

			break;
 80032e6:	e053      	b.n	8003390 <RunStateMachine+0x23c>

		case LateStance:
			CM_state = 1400;
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <RunStateMachine+0x250>)
 80032ea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80032ee:	801a      	strh	r2, [r3, #0]

			break;
 80032f0:	e04e      	b.n	8003390 <RunStateMachine+0x23c>

		case SwingFlexion:
			CM_state = 1500;
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <RunStateMachine+0x250>)
 80032f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80032f8:	801a      	strh	r2, [r3, #0]
			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingFlexCtrl.eqPoint;
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <RunStateMachine+0x254>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <RunStateMachine+0x254>)
 8003300:	62d3      	str	r3, [r2, #44]	; 0x2c
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingFlexCtrl.kd;
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <RunStateMachine+0x254>)
 8003304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003306:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <RunStateMachine+0x254>)
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingFlexCtrl.kp;
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <RunStateMachine+0x254>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <RunStateMachine+0x254>)
 8003310:	6353      	str	r3, [r2, #52]	; 0x34

			if(CM_Knee.jointSpeed > CM_kneeSpeedThreshold)
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <RunStateMachine+0x254>)
 8003314:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <RunStateMachine+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f8b7 	bl	8000490 <__aeabi_f2d>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fd fb99 	bl	8000a60 <__aeabi_dcmpgt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d100      	bne.n	8003336 <RunStateMachine+0x1e2>
				State = SwingExtension;

			break;
 8003334:	e02c      	b.n	8003390 <RunStateMachine+0x23c>
				State = SwingExtension;
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <RunStateMachine+0x24c>)
 8003338:	2204      	movs	r2, #4
 800333a:	701a      	strb	r2, [r3, #0]
			break;
 800333c:	e028      	b.n	8003390 <RunStateMachine+0x23c>

		case SwingExtension:
			CM_state = 1600;
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <RunStateMachine+0x250>)
 8003340:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003344:	801a      	strh	r2, [r3, #0]
			CM_Knee.ProsCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <RunStateMachine+0x254>)
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <RunStateMachine+0x254>)
 800334c:	62d3      	str	r3, [r2, #44]	; 0x2c
			CM_Knee.ProsCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <RunStateMachine+0x254>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <RunStateMachine+0x254>)
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
			CM_Knee.ProsCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <RunStateMachine+0x254>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <RunStateMachine+0x254>)
 800335c:	6353      	str	r3, [r2, #52]	; 0x34

			if(CM_LoadCell_Filtered->top[0] < CM_lcBot_lowerBound)
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <RunStateMachine+0x258>)
 8003360:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <RunStateMachine+0x25c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f891 	bl	8000490 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fd fb55 	bl	8000a24 <__aeabi_dcmplt>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d100      	bne.n	8003382 <RunStateMachine+0x22e>
				State = EarlyStance;

			break;
 8003380:	e006      	b.n	8003390 <RunStateMachine+0x23c>
				State = EarlyStance;
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <RunStateMachine+0x24c>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
			break;
 8003388:	e002      	b.n	8003390 <RunStateMachine+0x23c>
		}
	}
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <RunStateMachine+0x23c>
			break;
 800338e:	bf00      	nop
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bdb0      	pop	{r4, r5, r7, pc}
 8003398:	200000ac 	.word	0x200000ac
 800339c:	20000190 	.word	0x20000190
 80033a0:	20000338 	.word	0x20000338
 80033a4:	2000000a 	.word	0x2000000a
 80033a8:	200001f0 	.word	0x200001f0
 80033ac:	20000280 	.word	0x20000280
 80033b0:	20000178 	.word	0x20000178
 80033b4:	2000017c 	.word	0x2000017c
 80033b8:	20000339 	.word	0x20000339
 80033bc:	20000174 	.word	0x20000174
 80033c0:	20000180 	.word	0x20000180
 80033c4:	20000184 	.word	0x20000184

080033c8 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 80033ce:	4b6e      	ldr	r3, [pc, #440]	; (8003588 <RunImpedanceControl+0x1c0>)
 80033d0:	61fb      	str	r3, [r7, #28]
	float nomCurrent = 8.0f;
 80033d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80033d6:	61bb      	str	r3, [r7, #24]
	float torqueConst = 60.0f / (2 * M_PI * 100);	// For Kv = 100 rpm/V
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <RunImpedanceControl+0x1c4>)
 80033da:	617b      	str	r3, [r7, #20]
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80033dc:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <RunImpedanceControl+0x1c8>)
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <RunImpedanceControl+0x24>
 80033e4:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <RunImpedanceControl+0x1c8>)
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d15f      	bne.n	80034ac <RunImpedanceControl+0xe4>
	{
		float errorPos = CM_Ankle.ProsCtrl.eqPoint - CM_Ankle.jointAngle[0];
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <RunImpedanceControl+0x1cc>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f84d 	bl	8000490 <__aeabi_f2d>
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <RunImpedanceControl+0x1cc>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f7fc fee8 	bl	80001d0 <__aeabi_dsub>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	f7fd fb4a 	bl	8000aa0 <__aeabi_d2f>
 800340c:	4603      	mov	r3, r0
 800340e:	613b      	str	r3, [r7, #16]
		CM_Ankle.jointTorque = (CM_Ankle.ProsCtrl.kp*errorPos - CM_Ankle.ProsCtrl.kd*CM_Ankle.jointSpeed);
 8003410:	4b60      	ldr	r3, [pc, #384]	; (8003594 <RunImpedanceControl+0x1cc>)
 8003412:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003416:	edd7 7a04 	vldr	s15, [r7, #16]
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	ee17 0a90 	vmov	r0, s15
 8003422:	f7fd f835 	bl	8000490 <__aeabi_f2d>
 8003426:	4604      	mov	r4, r0
 8003428:	460d      	mov	r5, r1
 800342a:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <RunImpedanceControl+0x1cc>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f82e 	bl	8000490 <__aeabi_f2d>
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <RunImpedanceControl+0x1cc>)
 8003436:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800343a:	f7fd f881 	bl	8000540 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc fec3 	bl	80001d0 <__aeabi_dsub>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fb25 	bl	8000aa0 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	4a4e      	ldr	r2, [pc, #312]	; (8003594 <RunImpedanceControl+0x1cc>)
 800345a:	6293      	str	r3, [r2, #40]	; 0x28
		int16_t motorTorque = CM_Ankle.jointTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <RunImpedanceControl+0x1cc>)
 800345e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003462:	ed97 7a05 	vldr	s14, [r7, #20]
 8003466:	edd7 7a07 	vldr	s15, [r7, #28]
 800346a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800347a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003598 <RunImpedanceControl+0x1d0>
 800347e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003486:	ee17 3a90 	vmov	r3, s15
 800348a:	81fb      	strh	r3, [r7, #14]
		EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(AnkleMotorControllerIndex, motorTorque);
 800348c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003490:	4619      	mov	r1, r3
 8003492:	2000      	movs	r0, #0
 8003494:	f001 f826 	bl	80044e4 <EPOS4_WriteTargetTorqueValue>
 8003498:	4603      	mov	r3, r0
 800349a:	737b      	strb	r3, [r7, #13]
		if(error)
 800349c:	7b7b      	ldrb	r3, [r7, #13]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <RunImpedanceControl+0xe4>
			ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 80034a2:	7b7b      	ldrb	r3, [r7, #13]
 80034a4:	4619      	mov	r1, r3
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fd9c 	bl	8000fe4 <ErrorHandler_EPOS4>

	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <RunImpedanceControl+0x1c8>)
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d003      	beq.n	80034bc <RunImpedanceControl+0xf4>
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <RunImpedanceControl+0x1c8>)
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d161      	bne.n	8003580 <RunImpedanceControl+0x1b8>
	{
		float errorPos = CM_Knee.ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <RunImpedanceControl+0x1d4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fc ffe5 	bl	8000490 <__aeabi_f2d>
 80034c6:	4b35      	ldr	r3, [pc, #212]	; (800359c <RunImpedanceControl+0x1d4>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fc fe80 	bl	80001d0 <__aeabi_dsub>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd fae2 	bl	8000aa0 <__aeabi_d2f>
 80034dc:	4603      	mov	r3, r0
 80034de:	60bb      	str	r3, [r7, #8]
		CM_Knee.jointTorque = (CM_Knee.ProsCtrl.kp*errorPos - CM_Knee.ProsCtrl.kd*CM_Knee.jointSpeed);
 80034e0:	4b2e      	ldr	r3, [pc, #184]	; (800359c <RunImpedanceControl+0x1d4>)
 80034e2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80034e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fc ffcd 	bl	8000490 <__aeabi_f2d>
 80034f6:	4604      	mov	r4, r0
 80034f8:	460d      	mov	r5, r1
 80034fa:	4b28      	ldr	r3, [pc, #160]	; (800359c <RunImpedanceControl+0x1d4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc ffc6 	bl	8000490 <__aeabi_f2d>
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <RunImpedanceControl+0x1d4>)
 8003506:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800350a:	f7fd f819 	bl	8000540 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4620      	mov	r0, r4
 8003514:	4629      	mov	r1, r5
 8003516:	f7fc fe5b 	bl	80001d0 <__aeabi_dsub>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	f7fd fabd 	bl	8000aa0 <__aeabi_d2f>
 8003526:	4603      	mov	r3, r0
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <RunImpedanceControl+0x1d4>)
 800352a:	6293      	str	r3, [r2, #40]	; 0x28
		int16_t motorTorque = CM_Knee.jointTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <RunImpedanceControl+0x1d4>)
 800352e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003532:	ed97 7a05 	vldr	s14, [r7, #20]
 8003536:	edd7 7a07 	vldr	s15, [r7, #28]
 800353a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800353e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003598 <RunImpedanceControl+0x1d0>
 800354e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003556:	ee17 3a90 	vmov	r3, s15
 800355a:	80fb      	strh	r3, [r7, #6]
		EPOS4_Error_e error = EPOS4_WriteTargetTorqueValue(KneeMotorControllerIndex, -motorTorque);		// Knee joint rotates opposite of coordinate system
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	425b      	negs	r3, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	b21b      	sxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	2001      	movs	r0, #1
 8003568:	f000 ffbc 	bl	80044e4 <EPOS4_WriteTargetTorqueValue>
 800356c:	4603      	mov	r3, r0
 800356e:	717b      	strb	r3, [r7, #5]
		if(error)
 8003570:	797b      	ldrb	r3, [r7, #5]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <RunImpedanceControl+0x1b8>
			ErrorHandler_EPOS4(AnkleMotorControllerIndex, error);
 8003576:	797b      	ldrb	r3, [r7, #5]
 8003578:	4619      	mov	r1, r3
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd fd32 	bl	8000fe4 <ErrorHandler_EPOS4>
	}
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bdb0      	pop	{r4, r5, r7, pc}
 8003588:	42200000 	.word	0x42200000
 800358c:	3dc391d1 	.word	0x3dc391d1
 8003590:	200000ac 	.word	0x200000ac
 8003594:	20000190 	.word	0x20000190
 8003598:	447a0000 	.word	0x447a0000
 800359c:	200001f0 	.word	0x200001f0

080035a0 <RunTestProgram>:

static void RunTestProgram(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
	switch (testProgram)
 80035a6:	4b76      	ldr	r3, [pc, #472]	; (8003780 <RunTestProgram+0x1e0>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	f200 80e3 	bhi.w	8003776 <RunTestProgram+0x1d6>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <RunTestProgram+0x18>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	0800376d 	.word	0x0800376d
 80035bc:	0800376d 	.word	0x0800376d
 80035c0:	080035cd 	.word	0x080035cd
 80035c4:	08003603 	.word	0x08003603
 80035c8:	08003693 	.word	0x08003693

	case ReadOnly:
		break;

	case ConstantMotorTorque100Nmm:
		if(Device.Joint == Ankle || Device.Joint == Combined)
 80035cc:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <RunTestProgram+0x1e4>)
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <RunTestProgram+0x3c>
 80035d4:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <RunTestProgram+0x1e4>)
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d103      	bne.n	80035e4 <RunTestProgram+0x44>
			EPOS4_WriteTargetTorqueValue(AnkleMotorControllerIndex, 100);
 80035dc:	2164      	movs	r1, #100	; 0x64
 80035de:	2000      	movs	r0, #0
 80035e0:	f000 ff80 	bl	80044e4 <EPOS4_WriteTargetTorqueValue>

		if(Device.Joint == Knee || Device.Joint == Combined)
 80035e4:	4b67      	ldr	r3, [pc, #412]	; (8003784 <RunTestProgram+0x1e4>)
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d004      	beq.n	80035f6 <RunTestProgram+0x56>
 80035ec:	4b65      	ldr	r3, [pc, #404]	; (8003784 <RunTestProgram+0x1e4>)
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f040 80bd 	bne.w	8003770 <RunTestProgram+0x1d0>
			EPOS4_WriteTargetTorqueValue(KneeMotorControllerIndex, -100);	// Knee joint rotates opposite of coordinate system
 80035f6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80035fa:	2001      	movs	r0, #1
 80035fc:	f000 ff72 	bl	80044e4 <EPOS4_WriteTargetTorqueValue>

		break;
 8003600:	e0b6      	b.n	8003770 <RunTestProgram+0x1d0>

	case EncoderBias:
		if(Device.Joint == Ankle || Device.Joint == Combined)
 8003602:	4b60      	ldr	r3, [pc, #384]	; (8003784 <RunTestProgram+0x1e4>)
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <RunTestProgram+0x72>
 800360a:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <RunTestProgram+0x1e4>)
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d11a      	bne.n	8003648 <RunTestProgram+0xa8>
		{
			uint16_t i;
			uint32_t sum = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
			for(i = 0; i < 1000; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	84fb      	strh	r3, [r7, #38]	; 0x26
 800361a:	e00a      	b.n	8003632 <RunTestProgram+0x92>
				sum += AS5145B_ReadPosition_Raw(AnkleEncoderIndex);
 800361c:	2000      	movs	r0, #0
 800361e:	f000 fdbb 	bl	8004198 <AS5145B_ReadPosition_Raw>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	4413      	add	r3, r2
 800362a:	623b      	str	r3, [r7, #32]
			for(i = 0; i < 1000; i++)
 800362c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800362e:	3301      	adds	r3, #1
 8003630:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003638:	d3f0      	bcc.n	800361c <RunTestProgram+0x7c>

			CM_ankleEncBias = sum / i;
 800363a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <RunTestProgram+0x1e8>)
 8003646:	801a      	strh	r2, [r3, #0]
		}

		if(Device.Joint == Knee || Device.Joint == Combined)
 8003648:	4b4e      	ldr	r3, [pc, #312]	; (8003784 <RunTestProgram+0x1e4>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d004      	beq.n	800365a <RunTestProgram+0xba>
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <RunTestProgram+0x1e4>)
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 808d 	bne.w	8003774 <RunTestProgram+0x1d4>
		{
			uint16_t i;
			uint32_t sum = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
			for(i = 0; i < 1000; i++)
 800365e:	2300      	movs	r3, #0
 8003660:	83fb      	strh	r3, [r7, #30]
 8003662:	e00a      	b.n	800367a <RunTestProgram+0xda>
				sum += AS5145B_ReadPosition_Raw(KneeEncoderIndex);
 8003664:	2001      	movs	r0, #1
 8003666:	f000 fd97 	bl	8004198 <AS5145B_ReadPosition_Raw>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
			for(i = 0; i < 1000; i++)
 8003674:	8bfb      	ldrh	r3, [r7, #30]
 8003676:	3301      	adds	r3, #1
 8003678:	83fb      	strh	r3, [r7, #30]
 800367a:	8bfb      	ldrh	r3, [r7, #30]
 800367c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003680:	d3f0      	bcc.n	8003664 <RunTestProgram+0xc4>

			CM_kneeEncBias = sum / i;
 8003682:	8bfb      	ldrh	r3, [r7, #30]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b3f      	ldr	r3, [pc, #252]	; (800378c <RunTestProgram+0x1ec>)
 800368e:	801a      	strh	r2, [r3, #0]
		}

		break;
 8003690:	e070      	b.n	8003774 <RunTestProgram+0x1d4>

	case ImpedanceControl:
		if(isFirst)
 8003692:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <RunTestProgram+0x1f0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d065      	beq.n	8003766 <RunTestProgram+0x1c6>
		{
			if(Device.Joint == Ankle || Device.Joint == Combined)
 800369a:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <RunTestProgram+0x1e4>)
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <RunTestProgram+0x10a>
 80036a2:	4b38      	ldr	r3, [pc, #224]	; (8003784 <RunTestProgram+0x1e4>)
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d12a      	bne.n	8003700 <RunTestProgram+0x160>
			{
				uint16_t i;
				float sum = 0.0f;
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
				for(i = 0; i < 1000; i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	82fb      	strh	r3, [r7, #22]
 80036b4:	e00f      	b.n	80036d6 <RunTestProgram+0x136>
				{
					float position = AS5145B_ReadPosition(AnkleEncoderIndex);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f000 fd3c 	bl	8004134 <AS5145B_ReadPosition>
 80036bc:	ed87 0a01 	vstr	s0, [r7, #4]
					sum += position;
 80036c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036cc:	edc7 7a04 	vstr	s15, [r7, #16]
				for(i = 0; i < 1000; i++)
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	3301      	adds	r3, #1
 80036d4:	82fb      	strh	r3, [r7, #22]
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036dc:	d3eb      	bcc.n	80036b6 <RunTestProgram+0x116>
				}

				CM_Ankle.ProsCtrl.eqPoint = sum / i - ankleEncBias;
 80036de:	8afb      	ldrh	r3, [r7, #22]
 80036e0:	ee07 3a90 	vmov	s15, r3
 80036e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80036ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <RunTestProgram+0x1f4>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <RunTestProgram+0x1f8>)
 80036fc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			}

			if(Device.Joint == Knee || Device.Joint == Combined)
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <RunTestProgram+0x1e4>)
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d003      	beq.n	8003710 <RunTestProgram+0x170>
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <RunTestProgram+0x1e4>)
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d12a      	bne.n	8003766 <RunTestProgram+0x1c6>
			{
				uint16_t i;
				float sum = 0.0f;
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
				for(i = 0; i < 1000; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	81fb      	strh	r3, [r7, #14]
 800371a:	e00f      	b.n	800373c <RunTestProgram+0x19c>
				{
					float position = AS5145B_ReadPosition(KneeEncoderIndex);
 800371c:	2001      	movs	r0, #1
 800371e:	f000 fd09 	bl	8004134 <AS5145B_ReadPosition>
 8003722:	ed87 0a00 	vstr	s0, [r7]
					sum += position;
 8003726:	ed97 7a02 	vldr	s14, [r7, #8]
 800372a:	edd7 7a00 	vldr	s15, [r7]
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	edc7 7a02 	vstr	s15, [r7, #8]
				for(i = 0; i < 1000; i++)
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	3301      	adds	r3, #1
 800373a:	81fb      	strh	r3, [r7, #14]
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003742:	d3eb      	bcc.n	800371c <RunTestProgram+0x17c>
				}

				CM_Knee.ProsCtrl.eqPoint = sum / i - kneeEncBias;
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800374e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <RunTestProgram+0x1fc>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <RunTestProgram+0x200>)
 8003762:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			}
		}

		RunImpedanceControl();
 8003766:	f7ff fe2f 	bl	80033c8 <RunImpedanceControl>

		break;
 800376a:	e004      	b.n	8003776 <RunTestProgram+0x1d6>
		break;
 800376c:	bf00      	nop
 800376e:	e002      	b.n	8003776 <RunTestProgram+0x1d6>
		break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <RunTestProgram+0x1d6>
		break;
 8003774:	bf00      	nop
	}
}
 8003776:	bf00      	nop
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200000a3 	.word	0x200000a3
 8003784:	200000ac 	.word	0x200000ac
 8003788:	20000310 	.word	0x20000310
 800378c:	20000312 	.word	0x20000312
 8003790:	20000008 	.word	0x20000008
 8003794:	200000a4 	.word	0x200000a4
 8003798:	20000190 	.word	0x20000190
 800379c:	200000a8 	.word	0x200000a8
 80037a0:	200001f0 	.word	0x200001f0

080037a4 <LL_AHB2_GRP1_EnableClock>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80037ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b0:	4907      	ldr	r1, [pc, #28]	; (80037d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80037ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4013      	ands	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000

080037d4 <LL_APB1_GRP1_EnableClock>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40021000 	.word	0x40021000

08003804 <LL_APB2_GRP1_EnableClock>:
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800380e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800381a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000

08003834 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 0210 	bic.w	r2, r3, #16
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	605a      	str	r2, [r3, #4]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f023 0208 	bic.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b090      	sub	sp, #64	; 0x40
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003882:	f107 0318 	add.w	r3, r7, #24
 8003886:	2228      	movs	r2, #40	; 0x28
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fc06 	bl	800709c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	463b      	mov	r3, r7
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80038a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038a4:	f7ff ffae 	bl	8003804 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f7ff ff7b 	bl	80037a4 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 80038ae:	23e0      	movs	r3, #224	; 0xe0
 80038b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038b2:	2302      	movs	r3, #2
 80038b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80038c2:	2305      	movs	r3, #5
 80038c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	463b      	mov	r3, r7
 80038c8:	4619      	mov	r1, r3
 80038ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ce:	f002 fcd8 	bl	8006282 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80038d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80038da:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80038dc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80038e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80038e2:	2302      	movs	r3, #2
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80038ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80038f0:	2308      	movs	r3, #8
 80038f2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80038f4:	2300      	movs	r3, #0
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80038fc:	2307      	movs	r3, #7
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	4619      	mov	r1, r3
 8003906:	4807      	ldr	r0, [pc, #28]	; (8003924 <MX_SPI1_Init+0xa8>)
 8003908:	f003 f924 	bl	8006b54 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800390c:	2100      	movs	r1, #0
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <MX_SPI1_Init+0xa8>)
 8003910:	f7ff ff90 	bl	8003834 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003914:	4803      	ldr	r0, [pc, #12]	; (8003924 <MX_SPI1_Init+0xa8>)
 8003916:	f7ff ffa0 	bl	800385a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800391a:	bf00      	nop
 800391c:	3740      	adds	r7, #64	; 0x40
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40013000 	.word	0x40013000

08003928 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b090      	sub	sp, #64	; 0x40
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800392e:	f107 0318 	add.w	r3, r7, #24
 8003932:	2228      	movs	r2, #40	; 0x28
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f003 fbb0 	bl	800709c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	463b      	mov	r3, r7
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800394c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003950:	f7ff ff40 	bl	80037d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003954:	2002      	movs	r0, #2
 8003956:	f7ff ff25 	bl	80037a4 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = KNEE_CAN_CONTROLLER_SCK_Pin|KNEE_CAN_CONTROLLER_MISO_Pin|KNEE_CAN_CONTROLLER_MOSI_Pin;
 800395a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800395e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003960:	2302      	movs	r3, #2
 8003962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003970:	2305      	movs	r3, #5
 8003972:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	463b      	mov	r3, r7
 8003976:	4619      	mov	r1, r3
 8003978:	4815      	ldr	r0, [pc, #84]	; (80039d0 <MX_SPI2_Init+0xa8>)
 800397a:	f002 fc82 	bl	8006282 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003982:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003986:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003988:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800398c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800398e:	2302      	movs	r3, #2
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003992:	2301      	movs	r3, #1
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800399c:	2308      	movs	r3, #8
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80039a0:	2300      	movs	r3, #0
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80039a8:	2307      	movs	r3, #7
 80039aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	4619      	mov	r1, r3
 80039b2:	4808      	ldr	r0, [pc, #32]	; (80039d4 <MX_SPI2_Init+0xac>)
 80039b4:	f003 f8ce 	bl	8006b54 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80039b8:	2100      	movs	r1, #0
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <MX_SPI2_Init+0xac>)
 80039bc:	f7ff ff3a 	bl	8003834 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <MX_SPI2_Init+0xac>)
 80039c2:	f7ff ff4a 	bl	800385a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039c6:	bf00      	nop
 80039c8:	3740      	adds	r7, #64	; 0x40
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	48000400 	.word	0x48000400
 80039d4:	40003800 	.word	0x40003800

080039d8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b090      	sub	sp, #64	; 0x40
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80039de:	f107 0318 	add.w	r3, r7, #24
 80039e2:	2228      	movs	r2, #40	; 0x28
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fb58 	bl	800709c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	463b      	mov	r3, r7
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	611a      	str	r2, [r3, #16]
 80039fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80039fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a00:	f7ff fee8 	bl	80037d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003a04:	2002      	movs	r0, #2
 8003a06:	f7ff fecd 	bl	80037a4 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3 (JTDO-TRACESWO)   ------> SPI3_SCK
  PB4 (NJTRST)   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = ANKLE_CAN_CONTROLLER_SCK_Pin|ANKLE_CAN_CONTROLLER_MISO_Pin|ANKLE_CAN_CONTROLLER_MOSI_Pin;
 8003a0a:	2338      	movs	r3, #56	; 0x38
 8003a0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003a1e:	2306      	movs	r3, #6
 8003a20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	463b      	mov	r3, r7
 8003a24:	4619      	mov	r1, r3
 8003a26:	4815      	ldr	r0, [pc, #84]	; (8003a7c <MX_SPI3_Init+0xa4>)
 8003a28:	f002 fc2b 	bl	8006282 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003a30:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a34:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a36:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a3a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003a56:	2307      	movs	r3, #7
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003a5a:	f107 0318 	add.w	r3, r7, #24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4807      	ldr	r0, [pc, #28]	; (8003a80 <MX_SPI3_Init+0xa8>)
 8003a62:	f003 f877 	bl	8006b54 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003a66:	2100      	movs	r1, #0
 8003a68:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_SPI3_Init+0xa8>)
 8003a6a:	f7ff fee3 	bl	8003834 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8003a6e:	4804      	ldr	r0, [pc, #16]	; (8003a80 <MX_SPI3_Init+0xa8>)
 8003a70:	f7ff fef3 	bl	800385a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3740      	adds	r7, #64	; 0x40
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	48000400 	.word	0x48000400
 8003a80:	40003c00 	.word	0x40003c00

08003a84 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f043 0202 	orr.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	605a      	str	r2, [r3, #4]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d101      	bne.n	8003abc <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ace:	e7fe      	b.n	8003ace <NMI_Handler+0x4>

08003ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <HardFault_Handler+0x4>

08003ad6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <MemManage_Handler+0x4>

08003adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <BusFault_Handler+0x4>

08003ae2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <UsageFault_Handler+0x4>

08003ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0

/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <LPTIM2_IRQHandler+0x20>)
 8003b26:	f7ff ffbd 	bl	8003aa4 <LL_LPTIM_IsActiveFlag_ARRM>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <LPTIM2_IRQHandler+0x24>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8003b36:	4802      	ldr	r0, [pc, #8]	; (8003b40 <LPTIM2_IRQHandler+0x20>)
 8003b38:	f7ff ffa4 	bl	8003a84 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40009400 	.word	0x40009400
 8003b44:	200000a2 	.word	0x200000a2

08003b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SystemInit+0x20>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <SystemInit+0x20>)
 8003b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <LL_APB1_GRP1_EnableClock>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b78:	4907      	ldr	r1, [pc, #28]	; (8003b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4013      	ands	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40021000 	.word	0x40021000

08003b9c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	605a      	str	r2, [r3, #4]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8003c18:	2010      	movs	r0, #16
 8003c1a:	f7ff ffa7 	bl	8003b6c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 8003c1e:	2307      	movs	r3, #7
 8003c20:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8003c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4808      	ldr	r0, [pc, #32]	; (8003c54 <MX_TIM6_Init+0x50>)
 8003c32:	f003 f821 	bl	8006c78 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8003c36:	4807      	ldr	r0, [pc, #28]	; (8003c54 <MX_TIM6_Init+0x50>)
 8003c38:	f7ff ffb0 	bl	8003b9c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4805      	ldr	r0, [pc, #20]	; (8003c54 <MX_TIM6_Init+0x50>)
 8003c40:	f7ff ffbc 	bl	8003bbc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8003c44:	4803      	ldr	r0, [pc, #12]	; (8003c54 <MX_TIM6_Init+0x50>)
 8003c46:	f7ff ffcc 	bl	8003be2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40001000 	.word	0x40001000

08003c58 <LL_RCC_SetUSARTClockSource>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <LL_RCC_SetUSARTClockSource+0x30>)
 8003c62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	4905      	ldr	r1, [pc, #20]	; (8003c88 <LL_RCC_SetUSARTClockSource+0x30>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <LL_AHB2_GRP1_EnableClock>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40021000 	.word	0x40021000

08003cbc <LL_APB1_GRP1_EnableClock>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cc8:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40021000 	.word	0x40021000

08003cec <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08e      	sub	sp, #56	; 0x38
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	615a      	str	r2, [r3, #20]
 8003d50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
 8003d60:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8003d62:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003d66:	f7ff ff77 	bl	8003c58 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003d6a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003d6e:	f7ff ffa5 	bl	8003cbc <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7ff ff8a 	bl	8003c8c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d78:	230c      	movs	r3, #12
 8003d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d80:	2303      	movs	r3, #3
 8003d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003d8c:	2307      	movs	r3, #7
 8003d8e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d98:	f002 fa73 	bl	8006282 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003d9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003da0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003da2:	2300      	movs	r3, #0
 8003da4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003dae:	230c      	movs	r3, #12
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003db6:	2300      	movs	r3, #0
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4806      	ldr	r0, [pc, #24]	; (8003ddc <MX_USART2_UART_Init+0xa4>)
 8003dc2:	f003 f85d 	bl	8006e80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003dc6:	4805      	ldr	r0, [pc, #20]	; (8003ddc <MX_USART2_UART_Init+0xa4>)
 8003dc8:	f7ff ffa0 	bl	8003d0c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <MX_USART2_UART_Init+0xa4>)
 8003dce:	f7ff ff8d 	bl	8003cec <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dd2:	bf00      	nop
 8003dd4:	3738      	adds	r7, #56	; 0x38
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40004400 	.word	0x40004400

08003de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003de4:	f7ff feb0 	bl	8003b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003de8:	480c      	ldr	r0, [pc, #48]	; (8003e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8003dea:	490d      	ldr	r1, [pc, #52]	; (8003e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dec:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <LoopForever+0xe>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003df0:	e002      	b.n	8003df8 <LoopCopyDataInit>

08003df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003df6:	3304      	adds	r3, #4

08003df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dfc:	d3f9      	bcc.n	8003df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e00:	4c0a      	ldr	r4, [pc, #40]	; (8003e2c <LoopForever+0x16>)
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e04:	e001      	b.n	8003e0a <LoopFillZerobss>

08003e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e08:	3204      	adds	r2, #4

08003e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e0c:	d3fb      	bcc.n	8003e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e0e:	f003 f913 	bl	8007038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e12:	f7fd fde7 	bl	80019e4 <main>

08003e16 <LoopForever>:

LoopForever:
    b LoopForever
 8003e16:	e7fe      	b.n	8003e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e20:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003e24:	08008378 	.word	0x08008378
  ldr r2, =_sbss
 8003e28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003e2c:	20000420 	.word	0x20000420

08003e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e30:	e7fe      	b.n	8003e30 <ADC1_2_IRQHandler>

08003e32 <LL_GPIO_IsInputPinSet>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4013      	ands	r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d101      	bne.n	8003e4e <LL_GPIO_IsInputPinSet+0x1c>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <LL_GPIO_IsInputPinSet+0x1e>
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_GPIO_SetOutputPin>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	619a      	str	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_GPIO_ResetOutputPin>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DelayUs>:
 *  100			~100.6
 *  500			~500.0
 *  1000		~998.0
 */
static inline void DelayUs(TIM_TypeDef *TIMx, uint8_t timerRateMHz, uint16_t useconds)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	803b      	strh	r3, [r7, #0]
	TIMx->CNT = 0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t duration = useconds * timerRateMHz;
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	883a      	ldrh	r2, [r7, #0]
 8003eb0:	fb12 f303 	smulbb	r3, r2, r3
 8003eb4:	81fb      	strh	r3, [r7, #14]
	while(TIMx->CNT < duration);
 8003eb6:	bf00      	nop
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ebc:	89fb      	ldrh	r3, [r7, #14]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d3fa      	bcc.n	8003eb8 <DelayUs+0x24>
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AS5145B_Error_e AS5145B_Init(uint8_t deviceIndex, AS5145B_Init_t *Device_Init)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > AS5145B_NUMBER_OF_DEVICES)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d900      	bls.n	8003ee4 <AS5145B_Init+0x14>
		__NOP(); // add assert??
 8003ee2:	bf00      	nop

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AS5145B_Init_t));
 8003ee4:	79fa      	ldrb	r2, [r7, #7]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <AS5145B_Init+0x78>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	221c      	movs	r2, #28
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 f8c2 	bl	8007080 <memcpy>

	ClearChipSelect(deviceIndex);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f988 	bl	8004214 <ClearChipSelect>
	RaiseClockEdge(deviceIndex);
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f9c4 	bl	8004294 <RaiseClockEdge>

	uint8_t status = AS5145B_ReadStatus(deviceIndex);
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f962 	bl	80041d8 <AS5145B_ReadStatus>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
	if((status & 0b111000) != 0b100000)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d002      	beq.n	8003f28 <AS5145B_Init+0x58>
		return AS5145B_StatusError;
 8003f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f26:	e00a      	b.n	8003f3e <AS5145B_Init+0x6e>

	Device[deviceIndex].isInit = 1;
 8003f28:	79fa      	ldrb	r2, [r7, #7]
 8003f2a:	4907      	ldr	r1, [pc, #28]	; (8003f48 <AS5145B_Init+0x78>)
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3319      	adds	r3, #25
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]

	return AS5145B_NoError;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000033c 	.word	0x2000033c

08003f4c <AS5145B_ReadData>:

AS5145B_Data_t AS5145B_ReadData(uint8_t deviceIndex)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003f56:	79fa      	ldrb	r2, [r7, #7]
 8003f58:	4975      	ldr	r1, [pc, #468]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3319      	adds	r3, #25
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d100      	bne.n	8003f6e <AS5145B_ReadData+0x22>
		__NOP(); // add assert??
 8003f6c:	bf00      	nop

	SetChipSelect(deviceIndex);
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f96f 	bl	8004254 <SetChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003f76:	79fa      	ldrb	r2, [r7, #7]
 8003f78:	496d      	ldr	r1, [pc, #436]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3314      	adds	r3, #20
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	79fa      	ldrb	r2, [r7, #7]
 8003f8a:	4969      	ldr	r1, [pc, #420]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3318      	adds	r3, #24
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7ff ff79 	bl	8003e94 <DelayUs>

	AS5145B_Data_t Data;
	memset(&Data, 0, sizeof(Data));
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 f876 	bl	800709c <memset>
	for(int i = 12-1; i >= 0; i--)
 8003fb0:	230b      	movs	r3, #11
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e045      	b.n	8004042 <AS5145B_ReadData+0xf6>
	{
		LowerClockEdge(deviceIndex);
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f98b 	bl	80042d4 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003fbe:	79fa      	ldrb	r2, [r7, #7]
 8003fc0:	495b      	ldr	r1, [pc, #364]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3314      	adds	r3, #20
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	79fa      	ldrb	r2, [r7, #7]
 8003fd2:	4957      	ldr	r1, [pc, #348]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3318      	adds	r3, #24
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7ff ff55 	bl	8003e94 <DelayUs>
		RaiseClockEdge(deviceIndex);
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f951 	bl	8004294 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8003ff2:	79fa      	ldrb	r2, [r7, #7]
 8003ff4:	494e      	ldr	r1, [pc, #312]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3314      	adds	r3, #20
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	79fa      	ldrb	r2, [r7, #7]
 8004006:	494a      	ldr	r1, [pc, #296]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3318      	adds	r3, #24
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	4619      	mov	r1, r3
 800401a:	f7ff ff3b 	bl	8003e94 <DelayUs>

		Data.position |= ReadDO_Pin(deviceIndex) << i;
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f977 	bl	8004314 <ReadDO_Pin>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004034:	b21b      	sxth	r3, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	b21b      	sxth	r3, r3
 800403a:	813b      	strh	r3, [r7, #8]
	for(int i = 12-1; i >= 0; i--)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	dab6      	bge.n	8003fb6 <AS5145B_ReadData+0x6a>
	}

	for(int i = 6-1; i >= 0; i--)
 8004048:	2305      	movs	r3, #5
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e046      	b.n	80040dc <AS5145B_ReadData+0x190>
	{
		LowerClockEdge(deviceIndex);
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f93f 	bl	80042d4 <LowerClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 8004056:	79fa      	ldrb	r2, [r7, #7]
 8004058:	4935      	ldr	r1, [pc, #212]	; (8004130 <AS5145B_ReadData+0x1e4>)
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	3314      	adds	r3, #20
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	79fa      	ldrb	r2, [r7, #7]
 800406a:	4931      	ldr	r1, [pc, #196]	; (8004130 <AS5145B_ReadData+0x1e4>)
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3318      	adds	r3, #24
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	4619      	mov	r1, r3
 800407e:	f7ff ff09 	bl	8003e94 <DelayUs>
		RaiseClockEdge(deviceIndex);
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f905 	bl	8004294 <RaiseClockEdge>
		DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 800408a:	79fa      	ldrb	r2, [r7, #7]
 800408c:	4928      	ldr	r1, [pc, #160]	; (8004130 <AS5145B_ReadData+0x1e4>)
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3314      	adds	r3, #20
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	79fa      	ldrb	r2, [r7, #7]
 800409e:	4924      	ldr	r1, [pc, #144]	; (8004130 <AS5145B_ReadData+0x1e4>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3318      	adds	r3, #24
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7ff feef 	bl	8003e94 <DelayUs>

		Data.status |= ReadDO_Pin(deviceIndex) << i;
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f92b 	bl	8004314 <ReadDO_Pin>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	7aba      	ldrb	r2, [r7, #10]
 80040ca:	b252      	sxtb	r2, r2
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	72bb      	strb	r3, [r7, #10]
	for(int i = 6-1; i >= 0; i--)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3b01      	subs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	dab5      	bge.n	800404e <AS5145B_ReadData+0x102>
	}

	ClearChipSelect(deviceIndex);
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f895 	bl	8004214 <ClearChipSelect>
	DelayUs(Device[deviceIndex].TIMx, Device[deviceIndex].timerRateMHz, 1);	// Delay of 500 ns minimum required for t_(CLK FE)
 80040ea:	79fa      	ldrb	r2, [r7, #7]
 80040ec:	4910      	ldr	r1, [pc, #64]	; (8004130 <AS5145B_ReadData+0x1e4>)
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3314      	adds	r3, #20
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	79fa      	ldrb	r2, [r7, #7]
 80040fe:	490c      	ldr	r1, [pc, #48]	; (8004130 <AS5145B_ReadData+0x1e4>)
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3318      	adds	r3, #24
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	4619      	mov	r1, r3
 8004112:	f7ff febf 	bl	8003e94 <DelayUs>

	return Data;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	2300      	movs	r3, #0
 800411c:	89ba      	ldrh	r2, [r7, #12]
 800411e:	f362 030f 	bfi	r3, r2, #0, #16
 8004122:	89fa      	ldrh	r2, [r7, #14]
 8004124:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2000033c 	.word	0x2000033c

08004134 <AS5145B_ReadPosition>:

float AS5145B_ReadPosition(uint8_t deviceIndex)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800413e:	79fa      	ldrb	r2, [r7, #7]
 8004140:	4913      	ldr	r1, [pc, #76]	; (8004190 <AS5145B_ReadPosition+0x5c>)
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3319      	adds	r3, #25
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d100      	bne.n	8004156 <AS5145B_ReadPosition+0x22>
		__NOP(); // add assert??
 8004154:	bf00      	nop

	AS5145B_Data_t Data = AS5145B_ReadData(deviceIndex);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fef7 	bl	8003f4c <AS5145B_ReadData>
 800415e:	4603      	mov	r3, r0
 8004160:	60fb      	str	r3, [r7, #12]
	return Data.position * AS5145B_RAW2DEG;
 8004162:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800416c:	fb02 f303 	mul.w	r3, r2, r3
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004178:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004194 <AS5145B_ReadPosition+0x60>
 800417c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004180:	eef0 7a66 	vmov.f32	s15, s13
}
 8004184:	eeb0 0a67 	vmov.f32	s0, s15
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2000033c 	.word	0x2000033c
 8004194:	45800000 	.word	0x45800000

08004198 <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(uint8_t deviceIndex)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <AS5145B_ReadPosition_Raw+0x3c>)
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3319      	adds	r3, #25
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d100      	bne.n	80041ba <AS5145B_ReadPosition_Raw+0x22>
		__NOP(); // add assert??
 80041b8:	bf00      	nop

	AS5145B_Data_t Data = AS5145B_ReadData(deviceIndex);
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fec5 	bl	8003f4c <AS5145B_ReadData>
 80041c2:	4603      	mov	r3, r0
 80041c4:	60fb      	str	r3, [r7, #12]
	return Data.position;
 80041c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80041ca:	b29b      	uxth	r3, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	2000033c 	.word	0x2000033c

080041d8 <AS5145B_ReadStatus>:

uint8_t AS5145B_ReadStatus(uint8_t deviceIndex)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 80041e2:	79fa      	ldrb	r2, [r7, #7]
 80041e4:	490a      	ldr	r1, [pc, #40]	; (8004210 <AS5145B_ReadStatus+0x38>)
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3319      	adds	r3, #25
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d100      	bne.n	80041fa <AS5145B_ReadStatus+0x22>
		__NOP(); // add assert??
 80041f8:	bf00      	nop

	AS5145B_Data_t Data = AS5145B_ReadData(deviceIndex);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fea5 	bl	8003f4c <AS5145B_ReadData>
 8004202:	4603      	mov	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]
	return Data.status;
 8004206:	7bbb      	ldrb	r3, [r7, #14]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	2000033c 	.word	0x2000033c

08004214 <ClearChipSelect>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 800421e:	79fa      	ldrb	r2, [r7, #7]
 8004220:	490b      	ldr	r1, [pc, #44]	; (8004250 <ClearChipSelect+0x3c>)
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3308      	adds	r3, #8
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	79fa      	ldrb	r2, [r7, #7]
 8004232:	4907      	ldr	r1, [pc, #28]	; (8004250 <ClearChipSelect+0x3c>)
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3310      	adds	r3, #16
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	f7ff fe0a 	bl	8003e5c <LL_GPIO_SetOutputPin>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2000033c 	.word	0x2000033c

08004254 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CSn_GPIOx, Device[deviceIndex].CSn_Pin);
 800425e:	79fa      	ldrb	r2, [r7, #7]
 8004260:	490b      	ldr	r1, [pc, #44]	; (8004290 <SetChipSelect+0x3c>)
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	3308      	adds	r3, #8
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	79fa      	ldrb	r2, [r7, #7]
 8004272:	4907      	ldr	r1, [pc, #28]	; (8004290 <SetChipSelect+0x3c>)
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3310      	adds	r3, #16
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	4619      	mov	r1, r3
 8004284:	f7ff fdf8 	bl	8003e78 <LL_GPIO_ResetOutputPin>
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	2000033c 	.word	0x2000033c

08004294 <RaiseClockEdge>:

static inline void RaiseClockEdge(uint8_t deviceIndex)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 800429e:	79fa      	ldrb	r2, [r7, #7]
 80042a0:	490b      	ldr	r1, [pc, #44]	; (80042d0 <RaiseClockEdge+0x3c>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	3304      	adds	r3, #4
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	79fa      	ldrb	r2, [r7, #7]
 80042b2:	4907      	ldr	r1, [pc, #28]	; (80042d0 <RaiseClockEdge+0x3c>)
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	330e      	adds	r3, #14
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	f7ff fdca 	bl	8003e5c <LL_GPIO_SetOutputPin>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	2000033c 	.word	0x2000033c

080042d4 <LowerClockEdge>:

static inline void LowerClockEdge(uint8_t deviceIndex)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CLK_GPIOx, Device[deviceIndex].CLK_Pin);
 80042de:	79fa      	ldrb	r2, [r7, #7]
 80042e0:	490b      	ldr	r1, [pc, #44]	; (8004310 <LowerClockEdge+0x3c>)
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3304      	adds	r3, #4
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	79fa      	ldrb	r2, [r7, #7]
 80042f2:	4907      	ldr	r1, [pc, #28]	; (8004310 <LowerClockEdge+0x3c>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	330e      	adds	r3, #14
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	4619      	mov	r1, r3
 8004304:	f7ff fdb8 	bl	8003e78 <LL_GPIO_ResetOutputPin>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	2000033c 	.word	0x2000033c

08004314 <ReadDO_Pin>:

static inline uint8_t ReadDO_Pin(uint8_t deviceIndex)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	return LL_GPIO_IsInputPinSet(Device[deviceIndex].DO_GPIOx, Device[deviceIndex].DO_Pin) & 0x01; // 0x01??
 800431e:	79fa      	ldrb	r2, [r7, #7]
 8004320:	490d      	ldr	r1, [pc, #52]	; (8004358 <ReadDO_Pin+0x44>)
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	79fa      	ldrb	r2, [r7, #7]
 8004330:	4909      	ldr	r1, [pc, #36]	; (8004358 <ReadDO_Pin+0x44>)
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	330c      	adds	r3, #12
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	f7ff fd76 	bl	8003e32 <LL_GPIO_IsInputPinSet>
 8004346:	4603      	mov	r3, r0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2000033c 	.word	0x2000033c

0800435c <EPOS4_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

EPOS4_Error_e EPOS4_Init(uint8_t deviceIndex, EPOS4_Init_t *Device_Init)
{
 800435c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435e:	b093      	sub	sp, #76	; 0x4c
 8004360:	af0a      	add	r7, sp, #40	; 0x28
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > EPOS4_NUMBER_OF_DEVICES)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d900      	bls.n	8004370 <EPOS4_Init+0x14>
		__NOP(); // add assert??
 800436e:	bf00      	nop

	memcpy(&Device[deviceIndex], Device_Init, sizeof(EPOS4_Init_t));
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	019b      	lsls	r3, r3, #6
 8004374:	4a59      	ldr	r2, [pc, #356]	; (80044dc <EPOS4_Init+0x180>)
 8004376:	4413      	add	r3, r2
 8004378:	223c      	movs	r2, #60	; 0x3c
 800437a:	6839      	ldr	r1, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fe7f 	bl	8007080 <memcpy>

	Device[deviceIndex].cobId = Device[deviceIndex].nodeId + 0x0600;
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	4a55      	ldr	r2, [pc, #340]	; (80044dc <EPOS4_Init+0x180>)
 8004386:	019b      	lsls	r3, r3, #6
 8004388:	4413      	add	r3, r2
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b29a      	uxth	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8004394:	b291      	uxth	r1, r2
 8004396:	4a51      	ldr	r2, [pc, #324]	; (80044dc <EPOS4_Init+0x180>)
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	4413      	add	r3, r2
 800439c:	333a      	adds	r3, #58	; 0x3a
 800439e:	460a      	mov	r2, r1
 80043a0:	801a      	strh	r2, [r3, #0]

	uint8_t epos4ProductCodeError = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77fb      	strb	r3, [r7, #31]
	uint16_t hwVersions[6] = {0x6050, 0x6150, 0x6551, 0x6552, 0x6350, 0x6450};
 80043a6:	4a4e      	ldr	r2, [pc, #312]	; (80044e0 <EPOS4_Init+0x184>)
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80043ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t value;
	EPOS4_ReadObjectValue(deviceIndex, IDENTITY_OBJECT_INDEX, PRODUCT_CODE_SUBINDEX, &value);
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	79f8      	ldrb	r0, [r7, #7]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f241 0118 	movw	r1, #4120	; 0x1018
 80043be:	f000 f8dd 	bl	800457c <EPOS4_ReadObjectValue>
	value = value >> 16;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 6; i++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	77bb      	strb	r3, [r7, #30]
 80043cc:	e00f      	b.n	80043ee <EPOS4_Init+0x92>
	{
		if(value == hwVersions[i])
 80043ce:	7fbb      	ldrb	r3, [r7, #30]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	3320      	adds	r3, #32
 80043d4:	443b      	add	r3, r7
 80043d6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d102      	bne.n	80043e8 <EPOS4_Init+0x8c>
		{
			epos4ProductCodeError = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	77fb      	strb	r3, [r7, #31]
			break;
 80043e6:	e005      	b.n	80043f4 <EPOS4_Init+0x98>
	for(uint8_t i = 0; i < 6; i++)
 80043e8:	7fbb      	ldrb	r3, [r7, #30]
 80043ea:	3301      	adds	r3, #1
 80043ec:	77bb      	strb	r3, [r7, #30]
 80043ee:	7fbb      	ldrb	r3, [r7, #30]
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d9ec      	bls.n	80043ce <EPOS4_Init+0x72>
		}
	}
	if(epos4ProductCodeError)
 80043f4:	7ffb      	ldrb	r3, [r7, #31]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <EPOS4_Init+0xa2>
		return EPOS4_ProductCodeError;
 80043fa:	2302      	movs	r3, #2
 80043fc:	e069      	b.n	80044d2 <EPOS4_Init+0x176>

	EPOS4_ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 80043fe:	f107 030c 	add.w	r3, r7, #12
 8004402:	79f8      	ldrb	r0, [r7, #7]
 8004404:	2200      	movs	r2, #0
 8004406:	f246 0141 	movw	r1, #24641	; 0x6041
 800440a:	f000 f8b7 	bl	800457c <EPOS4_ReadObjectValue>
	value = value & STATE_MASK;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004414:	60fb      	str	r3, [r7, #12]
	if((value == STATE_FAULT) || (value == STATE_FAULT_REACTION_ACTIVE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d002      	beq.n	8004422 <EPOS4_Init+0xc6>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	d101      	bne.n	8004426 <EPOS4_Init+0xca>
		return EPOS4_InitFaultDetected;
 8004422:	2303      	movs	r3, #3
 8004424:	e055      	b.n	80044d2 <EPOS4_Init+0x176>

	EPOS4_DisableVoltage(deviceIndex);
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f883 	bl	8004534 <EPOS4_DisableVoltage>
	do
	{
		EPOS4_ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	79f8      	ldrb	r0, [r7, #7]
 8004434:	2200      	movs	r2, #0
 8004436:	f246 0141 	movw	r1, #24641	; 0x6041
 800443a:	f000 f89f 	bl	800457c <EPOS4_ReadObjectValue>
		value = value & STATE_MASK;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004444:	60fb      	str	r3, [r7, #12]
	} while(value != STATE_SWITCH_ON_DISABLED); // timeout??
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d1f0      	bne.n	800442e <EPOS4_Init+0xd2>

	if(Device[deviceIndex].Requirements.isFirstStepRequired)
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <EPOS4_Init+0x180>)
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	4413      	add	r3, r2
 8004454:	3302      	adds	r3, #2
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01a      	beq.n	8004492 <EPOS4_Init+0x136>
		if(WriteFirstStepObjects(deviceIndex, Device[deviceIndex].FirstStep))
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <EPOS4_Init+0x180>)
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	18d6      	adds	r6, r2, r3
 8004464:	f897 c007 	ldrb.w	ip, [r7, #7]
 8004468:	466d      	mov	r5, sp
 800446a:	f106 0410 	add.w	r4, r6, #16
 800446e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800447a:	e885 0003 	stmia.w	r5, {r0, r1}
 800447e:	1d33      	adds	r3, r6, #4
 8004480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004482:	4660      	mov	r0, ip
 8004484:	f000 fa11 	bl	80048aa <WriteFirstStepObjects>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <EPOS4_Init+0x136>
			return EPOS4_FirstStepError;
 800448e:	2305      	movs	r3, #5
 8004490:	e01f      	b.n	80044d2 <EPOS4_Init+0x176>

	if(Device[deviceIndex].Requirements.isModeOfOperationRequired)
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <EPOS4_Init+0x180>)
 8004496:	019b      	lsls	r3, r3, #6
 8004498:	4413      	add	r3, r2
 800449a:	3303      	adds	r3, #3
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00f      	beq.n	80044c2 <EPOS4_Init+0x166>
		if(WriteModeOfOperation(deviceIndex, Device[deviceIndex].ModeOfOperation))
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <EPOS4_Init+0x180>)
 80044a6:	019b      	lsls	r3, r3, #6
 80044a8:	4413      	add	r3, r2
 80044aa:	3338      	adds	r3, #56	; 0x38
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	4611      	mov	r1, r2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fb51 	bl	8004b5a <WriteModeOfOperation>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <EPOS4_Init+0x166>
			return EPOS4_ModeOfOperationError;
 80044be:	2306      	movs	r3, #6
 80044c0:	e007      	b.n	80044d2 <EPOS4_Init+0x176>

	Device[deviceIndex].isInit = 1;
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	4a05      	ldr	r2, [pc, #20]	; (80044dc <EPOS4_Init+0x180>)
 80044c6:	019b      	lsls	r3, r3, #6
 80044c8:	4413      	add	r3, r2
 80044ca:	333c      	adds	r3, #60	; 0x3c
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]

	return EPOS4_NoError;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000374 	.word	0x20000374
 80044e0:	080082a8 	.word	0x080082a8

080044e4 <EPOS4_WriteTargetTorqueValue>:

EPOS4_Error_e EPOS4_WriteTargetTorqueValue(uint8_t deviceIndex, int16_t torque)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	460a      	mov	r2, r1
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80bb      	strh	r3, [r7, #4]
	if(!Device[deviceIndex].isInit)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <EPOS4_WriteTargetTorqueValue+0x4c>)
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	4413      	add	r3, r2
 80044fc:	333c      	adds	r3, #60	; 0x3c
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d100      	bne.n	8004506 <EPOS4_WriteTargetTorqueValue+0x22>
		__NOP(); // add assert??
 8004504:	bf00      	nop

	EPOS4_Error_e error = EPOS4_WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, torque);
 8004506:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800450a:	79f8      	ldrb	r0, [r7, #7]
 800450c:	2200      	movs	r2, #0
 800450e:	f246 0171 	movw	r1, #24689	; 0x6071
 8004512:	f000 f875 	bl	8004600 <EPOS4_WriteObjectValue>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
	if(error)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <EPOS4_WriteTargetTorqueValue+0x40>
		return error;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	e000      	b.n	8004526 <EPOS4_WriteTargetTorqueValue+0x42>

	return EPOS4_NoError;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000374 	.word	0x20000374

08004534 <EPOS4_DisableVoltage>:

EPOS4_Error_e EPOS4_DisableVoltage(uint8_t deviceIndex)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <EPOS4_DisableVoltage+0x44>)
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	4413      	add	r3, r2
 8004546:	333c      	adds	r3, #60	; 0x3c
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d100      	bne.n	8004550 <EPOS4_DisableVoltage+0x1c>
		__NOP(); // add assert??
 800454e:	bf00      	nop

	EPOS4_Error_e error = EPOS4_WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_DISABLE_VOLTAGE);
 8004550:	79f8      	ldrb	r0, [r7, #7]
 8004552:	2300      	movs	r3, #0
 8004554:	2200      	movs	r2, #0
 8004556:	f246 0140 	movw	r1, #24640	; 0x6040
 800455a:	f000 f851 	bl	8004600 <EPOS4_WriteObjectValue>
 800455e:	4603      	mov	r3, r0
 8004560:	73fb      	strb	r3, [r7, #15]
	if(error)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <EPOS4_DisableVoltage+0x38>
		return error;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	e000      	b.n	800456e <EPOS4_DisableVoltage+0x3a>

	return EPOS4_NoError;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000374 	.word	0x20000374

0800457c <EPOS4_ReadObjectValue>:

EPOS4_Error_e EPOS4_ReadObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t *value)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4603      	mov	r3, r0
 8004586:	71fb      	strb	r3, [r7, #7]
 8004588:	460b      	mov	r3, r1
 800458a:	80bb      	strh	r3, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <EPOS4_ReadObjectValue+0x80>)
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	4413      	add	r3, r2
 8004598:	333c      	adds	r3, #60	; 0x3c
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d100      	bne.n	80045a2 <EPOS4_ReadObjectValue+0x26>
		__NOP(); // add assert??
 80045a0:	bf00      	nop

	MCP25625_RXBx_t RXBx;
	SDO_Upload(deviceIndex, objectIndex, objectSubindex, &RXBx);
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	79ba      	ldrb	r2, [r7, #6]
 80045a8:	88b9      	ldrh	r1, [r7, #4]
 80045aa:	79f8      	ldrb	r0, [r7, #7]
 80045ac:	f000 f8c2 	bl	8004734 <SDO_Upload>

	if(EPOS4_CheckForError(deviceIndex, &RXBx))
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f85d 	bl	8004678 <EPOS4_CheckForError>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <EPOS4_ReadObjectValue+0x4c>
		return EPOS4_FaultError;
 80045c4:	2307      	movs	r3, #7
 80045c6:	e014      	b.n	80045f2 <EPOS4_ReadObjectValue+0x76>
	if(EPOS4_CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	1d5a      	adds	r2, r3, #5
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f87a 	bl	80046cc <EPOS4_CheckForAbort>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <EPOS4_ReadObjectValue+0x66>
		return EPOS4_AbortError;
 80045de:	2308      	movs	r3, #8
 80045e0:	e007      	b.n	80045f2 <EPOS4_ReadObjectValue+0x76>

	ParseValueFromData(value, RXBx.Struct.RXBxDn_Reg);
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	3305      	adds	r3, #5
 80045e8:	4619      	mov	r1, r3
 80045ea:	6838      	ldr	r0, [r7, #0]
 80045ec:	f000 f882 	bl	80046f4 <ParseValueFromData>

	return EPOS4_NoError;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000374 	.word	0x20000374

08004600 <EPOS4_WriteObjectValue>:

EPOS4_Error_e EPOS4_WriteObjectValue(uint8_t deviceIndex, uint16_t objectIndex, uint8_t objectSubindex, uint32_t value)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4603      	mov	r3, r0
 800460a:	71fb      	strb	r3, [r7, #7]
 800460c:	460b      	mov	r3, r1
 800460e:	80bb      	strh	r3, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <EPOS4_WriteObjectValue+0x74>)
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	4413      	add	r3, r2
 800461c:	333c      	adds	r3, #60	; 0x3c
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d100      	bne.n	8004626 <EPOS4_WriteObjectValue+0x26>
		__NOP(); // add assert??
 8004624:	bf00      	nop

	MCP25625_RXBx_t	RXBx;
	SDO_Download(deviceIndex, objectIndex, objectSubindex, value, &RXBx);
 8004626:	79ba      	ldrb	r2, [r7, #6]
 8004628:	88b9      	ldrh	r1, [r7, #4]
 800462a:	79f8      	ldrb	r0, [r7, #7]
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f000 f8bc 	bl	80047b0 <SDO_Download>

	if(EPOS4_CheckForError(deviceIndex, &RXBx))
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f819 	bl	8004678 <EPOS4_CheckForError>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <EPOS4_WriteObjectValue+0x50>
		return EPOS4_FaultError;
 800464c:	2307      	movs	r3, #7
 800464e:	e00d      	b.n	800466c <EPOS4_WriteObjectValue+0x6c>
	if(EPOS4_CheckForAbort(deviceIndex, RXBx.Struct.RXBxDn_Reg))
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	1d5a      	adds	r2, r3, #5
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f836 	bl	80046cc <EPOS4_CheckForAbort>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <EPOS4_WriteObjectValue+0x6a>
		return EPOS4_AbortError;
 8004666:	2308      	movs	r3, #8
 8004668:	e000      	b.n	800466c <EPOS4_WriteObjectValue+0x6c>

	return EPOS4_NoError;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000374 	.word	0x20000374

08004678 <EPOS4_CheckForError>:

EPOS4_Error_e EPOS4_CheckForError(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	71fb      	strb	r3, [r7, #7]
	uint8_t cobIdEmcy = Device[deviceIndex].nodeId + 0x80;
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <EPOS4_CheckForError+0x50>)
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3b80      	subs	r3, #128	; 0x80
 8004690:	73fb      	strb	r3, [r7, #15]
	uint16_t cobId = (uint16_t) ((RXBx->Struct.RXBxSIDH_Reg << 3) + (RXBx->Struct.RXBxSIDL_Reg.value >> 5));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	b29a      	uxth	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	81bb      	strh	r3, [r7, #12]
	if(cobId == cobIdEmcy)
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	89ba      	ldrh	r2, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d101      	bne.n	80046b8 <EPOS4_CheckForError+0x40>
		return EPOS4_FaultError;
 80046b4:	2307      	movs	r3, #7
 80046b6:	e000      	b.n	80046ba <EPOS4_CheckForError+0x42>

	return EPOS4_NoError;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000374 	.word	0x20000374

080046cc <EPOS4_CheckForAbort>:

EPOS4_Error_e EPOS4_CheckForAbort(uint8_t deviceIndex, uint8_t *data)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	71fb      	strb	r3, [r7, #7]
	if(data[0] >> 7)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da01      	bge.n	80046e6 <EPOS4_CheckForAbort+0x1a>
		return EPOS4_AbortError;
 80046e2:	2308      	movs	r3, #8
 80046e4:	e000      	b.n	80046e8 <EPOS4_CheckForAbort+0x1c>

	return EPOS4_NoError;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <ParseValueFromData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ParseValueFromData(uint32_t *value, uint8_t *data)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	value[0] = ((data[7] << 24) + (data[6] << 16) + (data[5] << 8) + data[4]);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	3307      	adds	r3, #7
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	061a      	lsls	r2, r3, #24
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3306      	adds	r3, #6
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	441a      	add	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	3305      	adds	r3, #5
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	4413      	add	r3, r2
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	3204      	adds	r2, #4
 800471e:	7812      	ldrb	r2, [r2, #0]
 8004720:	4413      	add	r3, r2
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <SDO_Upload>:

static void SDO_Upload(uint8_t deviceIndex, uint16_t index, uint8_t subindex, MCP25625_RXBx_t *RXBx)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4603      	mov	r3, r0
 800473e:	71fb      	strb	r3, [r7, #7]
 8004740:	460b      	mov	r3, r1
 8004742:	80bb      	strh	r3, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, CLIENT_UPLOAD, index, subindex, 0);
 8004748:	79bb      	ldrb	r3, [r7, #6]
 800474a:	88ba      	ldrh	r2, [r7, #4]
 800474c:	f107 0008 	add.w	r0, r7, #8
 8004750:	2100      	movs	r1, #0
 8004752:	9100      	str	r1, [sp, #0]
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	f000 f86b 	bl	8004830 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 800475a:	bf00      	nop
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	4a13      	ldr	r2, [pc, #76]	; (80047ac <SDO_Upload+0x78>)
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	4413      	add	r3, r2
 8004764:	3301      	adds	r3, #1
 8004766:	7818      	ldrb	r0, [r3, #0]
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <SDO_Upload+0x78>)
 800476c:	019b      	lsls	r3, r3, #6
 800476e:	4413      	add	r3, r2
 8004770:	333a      	adds	r3, #58	; 0x3a
 8004772:	8819      	ldrh	r1, [r3, #0]
 8004774:	f107 0208 	add.w	r2, r7, #8
 8004778:	2308      	movs	r3, #8
 800477a:	f000 fb69 	bl	8004e50 <MCP25625_LoadTxBufferAtSIDH>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1eb      	bne.n	800475c <SDO_Upload+0x28>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 8004784:	bf00      	nop
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	4a08      	ldr	r2, [pc, #32]	; (80047ac <SDO_Upload+0x78>)
 800478a:	019b      	lsls	r3, r3, #6
 800478c:	4413      	add	r3, r2
 800478e:	3301      	adds	r3, #1
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2208      	movs	r2, #8
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc34 	bl	8005004 <MCP25625_ReadRxBufferAtSIDH>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f1      	bne.n	8004786 <SDO_Upload+0x52>
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000374 	.word	0x20000374

080047b0 <SDO_Download>:

static void SDO_Download(uint8_t deviceIndex, uint16_t index, uint8_t subindex, uint32_t value, MCP25625_RXBx_t *RXBx)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
 80047bc:	460b      	mov	r3, r1
 80047be:	80bb      	strh	r3, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[8];
	FrameData(data, EXPEDITED_CLIENT_DOWNLOAD, index, subindex, value);
 80047c4:	79b9      	ldrb	r1, [r7, #6]
 80047c6:	88ba      	ldrh	r2, [r7, #4]
 80047c8:	f107 0008 	add.w	r0, r7, #8
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	460b      	mov	r3, r1
 80047d2:	2122      	movs	r1, #34	; 0x22
 80047d4:	f000 f82c 	bl	8004830 <FrameData>
	while(MCP25625_LoadTxBufferAtSIDH(Device[deviceIndex].mcpIndex, Device[deviceIndex].cobId, data, 8));
 80047d8:	bf00      	nop
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <SDO_Download+0x7c>)
 80047de:	019b      	lsls	r3, r3, #6
 80047e0:	4413      	add	r3, r2
 80047e2:	3301      	adds	r3, #1
 80047e4:	7818      	ldrb	r0, [r3, #0]
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	4a10      	ldr	r2, [pc, #64]	; (800482c <SDO_Download+0x7c>)
 80047ea:	019b      	lsls	r3, r3, #6
 80047ec:	4413      	add	r3, r2
 80047ee:	333a      	adds	r3, #58	; 0x3a
 80047f0:	8819      	ldrh	r1, [r3, #0]
 80047f2:	f107 0208 	add.w	r2, r7, #8
 80047f6:	2308      	movs	r3, #8
 80047f8:	f000 fb2a 	bl	8004e50 <MCP25625_LoadTxBufferAtSIDH>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1eb      	bne.n	80047da <SDO_Download+0x2a>
	while(MCP25625_ReadRxBufferAtSIDH(Device[deviceIndex].mcpIndex, RXBx, 8));
 8004802:	bf00      	nop
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <SDO_Download+0x7c>)
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	4413      	add	r3, r2
 800480c:	3301      	adds	r3, #1
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fbf5 	bl	8005004 <MCP25625_ReadRxBufferAtSIDH>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f1      	bne.n	8004804 <SDO_Download+0x54>
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000374 	.word	0x20000374

08004830 <FrameData>:

static void FrameData(uint8_t *data, uint8_t byte0, uint16_t index, uint8_t subindex, uint32_t value)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	70fb      	strb	r3, [r7, #3]
 8004842:	460b      	mov	r3, r1
 8004844:	803b      	strh	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	70bb      	strb	r3, [r7, #2]
	data[0] = byte0;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	701a      	strb	r2, [r3, #0]
	data[1] = (0x00 | index);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	883a      	ldrh	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
	data[2] = (0x00 | index >> 8);
 800485a:	883b      	ldrh	r3, [r7, #0]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3302      	adds	r3, #2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
	data[3] = subindex;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3303      	adds	r3, #3
 800486c:	78ba      	ldrb	r2, [r7, #2]
 800486e:	701a      	strb	r2, [r3, #0]
	data[4] = (0x00 | value);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
	data[5] = (0x00 | value >> 8);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	0a1a      	lsrs	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3305      	adds	r3, #5
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
	data[6] = (0x00 | value >> 16);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	0c1a      	lsrs	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3306      	adds	r3, #6
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
	data[7] = (0x00 | value >> 24);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	0e1a      	lsrs	r2, r3, #24
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3307      	adds	r3, #7
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <WriteFirstStepObjects>:

static uint8_t WriteFirstStepObjects(uint8_t deviceIndex, EPOS4_FirstStep_t FirstStep)
{
 80048aa:	b084      	sub	sp, #16
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80048bc:	4623      	mov	r3, r4
 80048be:	71fb      	strb	r3, [r7, #7]
	uint32_t value;

	EPOS4_WriteObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, FirstStep.CAN_BitRate);
 80048c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048c4:	79f8      	ldrb	r0, [r7, #7]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f242 0101 	movw	r1, #8193	; 0x2001
 80048cc:	f7ff fe98 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, CAN_BITRATE_INDEX, 0, &value);
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	79f8      	ldrb	r0, [r7, #7]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f242 0101 	movw	r1, #8193	; 0x2001
 80048dc:	f7ff fe4e 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.CAN_BitRate)
 80048e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <WriteFirstStepObjects+0x46>
		return 1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e12d      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, FirstStep.MotorType);
 80048f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80048f4:	79f8      	ldrb	r0, [r7, #7]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f246 4102 	movw	r1, #25602	; 0x6402
 80048fc:	f7ff fe80 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_TYPE_INDEX, 0, &value);
 8004900:	f107 030c 	add.w	r3, r7, #12
 8004904:	79f8      	ldrb	r0, [r7, #7]
 8004906:	2200      	movs	r2, #0
 8004908:	f246 4102 	movw	r1, #25602	; 0x6402
 800490c:	f7ff fe36 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.MotorType)
 8004910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004914:	461a      	mov	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <WriteFirstStepObjects+0x76>
		return 1;
 800491c:	2301      	movs	r3, #1
 800491e:	e115      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, FirstStep.nominalCurrent);
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	79f8      	ldrb	r0, [r7, #7]
 8004924:	2201      	movs	r2, #1
 8004926:	f243 0101 	movw	r1, #12289	; 0x3001
 800492a:	f7ff fe69 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NOMINAL_CURRENT_SUBINDEX, &value);
 800492e:	f107 030c 	add.w	r3, r7, #12
 8004932:	79f8      	ldrb	r0, [r7, #7]
 8004934:	2201      	movs	r2, #1
 8004936:	f243 0101 	movw	r1, #12289	; 0x3001
 800493a:	f7ff fe1f 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.nominalCurrent)
 800493e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <WriteFirstStepObjects+0xa0>
		return 1;
 8004946:	2301      	movs	r3, #1
 8004948:	e100      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, FirstStep.outputCurrentLimit);
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	79f8      	ldrb	r0, [r7, #7]
 800494e:	2202      	movs	r2, #2
 8004950:	f243 0101 	movw	r1, #12289	; 0x3001
 8004954:	f7ff fe54 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, OUTPUT_CURRENT_LIMIT_SUBINDEX, &value);
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	79f8      	ldrb	r0, [r7, #7]
 800495e:	2202      	movs	r2, #2
 8004960:	f243 0101 	movw	r1, #12289	; 0x3001
 8004964:	f7ff fe0a 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.outputCurrentLimit)
 8004968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <WriteFirstStepObjects+0xca>
		return 1;
 8004970:	2301      	movs	r3, #1
 8004972:	e0eb      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, FirstStep.numberOfPolePairs);
 8004974:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004978:	79f8      	ldrb	r0, [r7, #7]
 800497a:	2203      	movs	r2, #3
 800497c:	f243 0101 	movw	r1, #12289	; 0x3001
 8004980:	f7ff fe3e 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, NUMBER_OF_POLE_PAIRS_SUBINDEX, &value);
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	79f8      	ldrb	r0, [r7, #7]
 800498a:	2203      	movs	r2, #3
 800498c:	f243 0101 	movw	r1, #12289	; 0x3001
 8004990:	f7ff fdf4 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.numberOfPolePairs)
 8004994:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004998:	461a      	mov	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <WriteFirstStepObjects+0xfa>
		return 1;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0d3      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, FirstStep.thermalTimeConstantWinding);
 80049a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049a6:	79f8      	ldrb	r0, [r7, #7]
 80049a8:	2204      	movs	r2, #4
 80049aa:	f243 0101 	movw	r1, #12289	; 0x3001
 80049ae:	f7ff fe27 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX, THERMAL_TIME_CONSTANT_WINDING_SUBINDEX, &value);
 80049b2:	f107 030c 	add.w	r3, r7, #12
 80049b6:	79f8      	ldrb	r0, [r7, #7]
 80049b8:	2204      	movs	r2, #4
 80049ba:	f243 0101 	movw	r1, #12289	; 0x3001
 80049be:	f7ff fddd 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.thermalTimeConstantWinding)
 80049c2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049c4:	461a      	mov	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <WriteFirstStepObjects+0x126>
		return 1;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0bd      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, FirstStep.torqueConstant);
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	79f8      	ldrb	r0, [r7, #7]
 80049d4:	2205      	movs	r2, #5
 80049d6:	f243 0101 	movw	r1, #12289	; 0x3001
 80049da:	f7ff fe11 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MOTOR_DATA_INDEX,TORQUE_CONSTANT_SUBINDEX, &value);
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	79f8      	ldrb	r0, [r7, #7]
 80049e4:	2205      	movs	r2, #5
 80049e6:	f243 0101 	movw	r1, #12289	; 0x3001
 80049ea:	f7ff fdc7 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.torqueConstant)
 80049ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <WriteFirstStepObjects+0x150>
		return 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e0a8      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, FirstStep.maxMotorSpeed);
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	79f8      	ldrb	r0, [r7, #7]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8004a04:	f7ff fdfc 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, MAX_MOTOR_SPEED_INDEX, 0, &value);
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	79f8      	ldrb	r0, [r7, #7]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8004a14:	f7ff fdb2 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.maxMotorSpeed)
 8004a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <WriteFirstStepObjects+0x17a>
		return 1;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e093      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, FirstStep.maxGearInputSpeed);
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	79f8      	ldrb	r0, [r7, #7]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	f243 0103 	movw	r1, #12291	; 0x3003
 8004a2e:	f7ff fde7 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, GEAR_CONFIGURATION_INDEX, MAX_GEAR_INPUT_SPEED_SUBINDEX, &value);
 8004a32:	f107 030c 	add.w	r3, r7, #12
 8004a36:	79f8      	ldrb	r0, [r7, #7]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	f243 0103 	movw	r1, #12291	; 0x3003
 8004a3e:	f7ff fd9d 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.maxGearInputSpeed)
 8004a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d001      	beq.n	8004a4e <WriteFirstStepObjects+0x1a4>
		return 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07e      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, FirstStep.sensorsConfiguration);
 8004a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a50:	79f8      	ldrb	r0, [r7, #7]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a58:	f7ff fdd2 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, SENSOR_CONFIGURATION_SUBINDEX, &value);
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	79f8      	ldrb	r0, [r7, #7]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a68:	f7ff fd88 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.sensorsConfiguration)
 8004a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <WriteFirstStepObjects+0x1ce>
		return 1;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e069      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, FirstStep.controlStructure);
 8004a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7a:	79f8      	ldrb	r0, [r7, #7]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a82:	f7ff fdbd 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, CONTROL_STRUCTURE_SUBINDEX, &value);
 8004a86:	f107 030c 	add.w	r3, r7, #12
 8004a8a:	79f8      	ldrb	r0, [r7, #7]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a92:	f7ff fd73 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.controlStructure)
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d001      	beq.n	8004aa2 <WriteFirstStepObjects+0x1f8>
		return 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e054      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, FirstStep.commutationSensors);
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	79f8      	ldrb	r0, [r7, #7]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004aac:	f7ff fda8 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, COMMUTATION_SENSORS_SUBINDEX, &value);
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	79f8      	ldrb	r0, [r7, #7]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004abc:	f7ff fd5e 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.commutationSensors)
 8004ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <WriteFirstStepObjects+0x222>
		return 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e03f      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, FirstStep.axisConfigMiscellaneous);
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	79f8      	ldrb	r0, [r7, #7]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ad6:	f7ff fd93 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, AXIS_CONFIGURATION_INDEX, AXIS_CONFIG_MISCELLANEOUS_SUBINDEX, &value);
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	79f8      	ldrb	r0, [r7, #7]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ae6:	f7ff fd49 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.axisConfigMiscellaneous)
 8004aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <WriteFirstStepObjects+0x24c>
		return 1;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e02a      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, FirstStep.currentControllerP_Gain);
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	79f8      	ldrb	r0, [r7, #7]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004b00:	f7ff fd7e 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_P_GAIN_SUBINDEX, &value);
 8004b04:	f107 030c 	add.w	r3, r7, #12
 8004b08:	79f8      	ldrb	r0, [r7, #7]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004b10:	f7ff fd34 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.currentControllerP_Gain)
 8004b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <WriteFirstStepObjects+0x276>
		return 1;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e015      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	EPOS4_WriteObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, FirstStep.currentControllerI_Gain);
 8004b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b22:	79f8      	ldrb	r0, [r7, #7]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004b2a:	f7ff fd69 	bl	8004600 <EPOS4_WriteObjectValue>
	EPOS4_ReadObjectValue(deviceIndex, CURRENT_CTRL_PARAMETER_SET_INDEX, CURRENT_CONTROLLER_I_GAIN_SUBINDEX, &value);
 8004b2e:	f107 030c 	add.w	r3, r7, #12
 8004b32:	79f8      	ldrb	r0, [r7, #7]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f243 01a0 	movw	r1, #12448	; 0x30a0
 8004b3a:	f7ff fd1f 	bl	800457c <EPOS4_ReadObjectValue>
	if(value != FirstStep.currentControllerI_Gain)
 8004b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <WriteFirstStepObjects+0x2a0>
		return 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <WriteFirstStepObjects+0x2a2>

	return 0;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b56:	b004      	add	sp, #16
 8004b58:	4770      	bx	lr

08004b5a <WriteModeOfOperation>:

static uint8_t WriteModeOfOperation(uint8_t deviceIndex, EPOS4_ModeOfOperation_e modeOfOperation)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	460a      	mov	r2, r1
 8004b64:	71fb      	strb	r3, [r7, #7]
 8004b66:	4613      	mov	r3, r2
 8004b68:	71bb      	strb	r3, [r7, #6]
	uint32_t value;
	switch (modeOfOperation)
 8004b6a:	79bb      	ldrb	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d169      	bne.n	8004c44 <WriteModeOfOperation+0xea>
	{
	case CyclicSynchronousTorqueMode:
		EPOS4_WriteObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, 0);
 8004b70:	79f8      	ldrb	r0, [r7, #7]
 8004b72:	2300      	movs	r3, #0
 8004b74:	2200      	movs	r2, #0
 8004b76:	f246 0171 	movw	r1, #24689	; 0x6071
 8004b7a:	f7ff fd41 	bl	8004600 <EPOS4_WriteObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, TARGET_TORQUE_INDEX, 0, &value);
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	79f8      	ldrb	r0, [r7, #7]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f246 0171 	movw	r1, #24689	; 0x6071
 8004b8a:	f7ff fcf7 	bl	800457c <EPOS4_ReadObjectValue>
		if(value != 0)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <WriteModeOfOperation+0x3e>
			return 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e056      	b.n	8004c46 <WriteModeOfOperation+0xec>

		EPOS4_WriteObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, CST_MODE);
 8004b98:	79f8      	ldrb	r0, [r7, #7]
 8004b9a:	230a      	movs	r3, #10
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f246 0160 	movw	r1, #24672	; 0x6060
 8004ba2:	f7ff fd2d 	bl	8004600 <EPOS4_WriteObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, MODES_OF_OPERATION_INDEX, 0, &value);
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	79f8      	ldrb	r0, [r7, #7]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f246 0160 	movw	r1, #24672	; 0x6060
 8004bb2:	f7ff fce3 	bl	800457c <EPOS4_ReadObjectValue>
		if(value != CST_MODE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b0a      	cmp	r3, #10
 8004bba:	d001      	beq.n	8004bc0 <WriteModeOfOperation+0x66>
			return 1;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e042      	b.n	8004c46 <WriteModeOfOperation+0xec>

		EPOS4_WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SHUTDOWN);
 8004bc0:	79f8      	ldrb	r0, [r7, #7]
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f246 0140 	movw	r1, #24640	; 0x6040
 8004bca:	f7ff fd19 	bl	8004600 <EPOS4_WriteObjectValue>
		do
		{
			EPOS4_ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	79f8      	ldrb	r0, [r7, #7]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f246 0141 	movw	r1, #24641	; 0x6041
 8004bda:	f7ff fccf 	bl	800457c <EPOS4_ReadObjectValue>
			value = value & STATE_MASK;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004be4:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_READY_TO_SWITCH_ON); // timeout??
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b21      	cmp	r3, #33	; 0x21
 8004bea:	d1f0      	bne.n	8004bce <WriteModeOfOperation+0x74>

		EPOS4_WriteObjectValue(deviceIndex, CONTROLWORD_INDEX, 0, CTRLCMD_SWITCH_ON_AND_ENABLE);
 8004bec:	79f8      	ldrb	r0, [r7, #7]
 8004bee:	230f      	movs	r3, #15
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f246 0140 	movw	r1, #24640	; 0x6040
 8004bf6:	f7ff fd03 	bl	8004600 <EPOS4_WriteObjectValue>
		do
		{
			EPOS4_ReadObjectValue(deviceIndex, STATUSWORD_INDEX, 0, &value);
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	79f8      	ldrb	r0, [r7, #7]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f246 0141 	movw	r1, #24641	; 0x6041
 8004c06:	f7ff fcb9 	bl	800457c <EPOS4_ReadObjectValue>
			value = value & STATE_MASK;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004c10:	60fb      	str	r3, [r7, #12]
		} while(value != STATE_OPERATION_ENABLED); // timeout??
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b27      	cmp	r3, #39	; 0x27
 8004c16:	d1f0      	bne.n	8004bfa <WriteModeOfOperation+0xa0>

		EPOS4_WriteObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, 0);
 8004c18:	79f8      	ldrb	r0, [r7, #7]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8004c22:	f7ff fced 	bl	8004600 <EPOS4_WriteObjectValue>
		EPOS4_ReadObjectValue(deviceIndex, TORQUE_OFFSET_INDEX, 0, &value);
 8004c26:	f107 030c 	add.w	r3, r7, #12
 8004c2a:	79f8      	ldrb	r0, [r7, #7]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f246 01b2 	movw	r1, #24754	; 0x60b2
 8004c32:	f7ff fca3 	bl	800457c <EPOS4_ReadObjectValue>
		if(value != 0)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <WriteModeOfOperation+0xe6>
			return 1;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e002      	b.n	8004c46 <WriteModeOfOperation+0xec>

		return 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <WriteModeOfOperation+0xec>
	}

	return 1;
 8004c44:	2301      	movs	r3, #1
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <LL_GPIO_SetOutputPin>:
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	619a      	str	r2, [r3, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_GPIO_ResetOutputPin>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d101      	bne.n	8004cc4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <MCP25625_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MCP25625_Error_e MCP25625_Init(uint8_t deviceIndex, MCP25625_Init_t *Device_Inits)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	6039      	str	r1, [r7, #0]
 8004d3a:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MCP25625_NUMBER_OF_DEVICES)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d900      	bls.n	8004d44 <MCP25625_Init+0x14>
		__NOP(); // add assert??
 8004d42:	bf00      	nop

	memcpy(&Device[deviceIndex], Device_Inits, sizeof(MCP25625_Init_t));
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <MCP25625_Init+0x11c>)
 8004d4a:	4413      	add	r3, r2
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 f995 	bl	8007080 <memcpy>

	ClearChipSelect(deviceIndex);
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fc4d 	bl	80055f8 <ClearChipSelect>
	ResetDevice(deviceIndex);
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f9ef 	bl	8005144 <ResetDevice>

	uint8_t canCtrlReg;
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8004d66:	f107 0216 	add.w	r2, r7, #22
 8004d6a:	79f8      	ldrb	r0, [r7, #7]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	210f      	movs	r1, #15
 8004d70:	f000 fa28 	bl	80051c4 <ReadRegisterData>
	if(canCtrlReg != CANCTRL_RESET_VALUE)
 8004d74:	7dbb      	ldrb	r3, [r7, #22]
 8004d76:	2b87      	cmp	r3, #135	; 0x87
 8004d78:	d001      	beq.n	8004d7e <MCP25625_Init+0x4e>
		return MCP25625_ResetError;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e062      	b.n	8004e44 <MCP25625_Init+0x114>

	InitRXBx(deviceIndex);
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f9c9 	bl	8005118 <InitRXBx>

	uint8_t configRegs[3];
	uint8_t configRegValues[3] = {Device[deviceIndex].CNF3_Reg.value, Device[deviceIndex].CNF2_Reg.value, Device[deviceIndex].CNF1_Reg.value};
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <MCP25625_Init+0x11c>)
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4413      	add	r3, r2
 8004d8e:	330d      	adds	r3, #13
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	733b      	strb	r3, [r7, #12]
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	4a2d      	ldr	r2, [pc, #180]	; (8004e4c <MCP25625_Init+0x11c>)
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4413      	add	r3, r2
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	737b      	strb	r3, [r7, #13]
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <MCP25625_Init+0x11c>)
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	330b      	adds	r3, #11
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	73bb      	strb	r3, [r7, #14]
	WriteRegisterData(deviceIndex, CNF3_REG, configRegValues, sizeof(configRegValues));
 8004db0:	f107 020c 	add.w	r2, r7, #12
 8004db4:	79f8      	ldrb	r0, [r7, #7]
 8004db6:	2303      	movs	r3, #3
 8004db8:	2128      	movs	r1, #40	; 0x28
 8004dba:	f000 fa7b 	bl	80052b4 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CNF3_REG, configRegs, sizeof(configRegs));
 8004dbe:	f107 0210 	add.w	r2, r7, #16
 8004dc2:	79f8      	ldrb	r0, [r7, #7]
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	2128      	movs	r1, #40	; 0x28
 8004dc8:	f000 f9fc 	bl	80051c4 <ReadRegisterData>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	75fb      	strb	r3, [r7, #23]
 8004dd0:	e010      	b.n	8004df4 <MCP25625_Init+0xc4>
		if(configRegs[i] != configRegValues[i])
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	443b      	add	r3, r7
 8004dd8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	3318      	adds	r3, #24
 8004de0:	443b      	add	r3, r7
 8004de2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <MCP25625_Init+0xbe>
			return MCP25625_ConfigError;
 8004dea:	2302      	movs	r3, #2
 8004dec:	e02a      	b.n	8004e44 <MCP25625_Init+0x114>
	for(uint8_t i = 0; i < sizeof(configRegs); i++)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	3301      	adds	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d9eb      	bls.n	8004dd2 <MCP25625_Init+0xa2>

	WriteRegisterData(deviceIndex, CANCTRL_REG, &Device[deviceIndex].CANCTRL_Reg.value, sizeof(Device[deviceIndex].CANCTRL_Reg.value));
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	3308      	adds	r3, #8
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <MCP25625_Init+0x11c>)
 8004e02:	4413      	add	r3, r2
 8004e04:	1c9a      	adds	r2, r3, #2
 8004e06:	79f8      	ldrb	r0, [r7, #7]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	210f      	movs	r1, #15
 8004e0c:	f000 fa52 	bl	80052b4 <WriteRegisterData>
	ReadRegisterData(deviceIndex, CANCTRL_REG, &canCtrlReg, sizeof(canCtrlReg));
 8004e10:	f107 0216 	add.w	r2, r7, #22
 8004e14:	79f8      	ldrb	r0, [r7, #7]
 8004e16:	2301      	movs	r3, #1
 8004e18:	210f      	movs	r1, #15
 8004e1a:	f000 f9d3 	bl	80051c4 <ReadRegisterData>
	if(canCtrlReg != Device[deviceIndex].CANCTRL_Reg.value)
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <MCP25625_Init+0x11c>)
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	4413      	add	r3, r2
 8004e26:	330a      	adds	r3, #10
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	7dbb      	ldrb	r3, [r7, #22]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <MCP25625_Init+0x104>
		return MCP25625_CANCTRL_Error;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e007      	b.n	8004e44 <MCP25625_Init+0x114>

	Device[deviceIndex].isInit = 1;
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <MCP25625_Init+0x11c>)
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	330e      	adds	r3, #14
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]

	return MCP25625_NoError;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200003f4 	.word	0x200003f4

08004e50 <MCP25625_LoadTxBufferAtSIDH>:

	return 1;
}

uint8_t MCP25625_LoadTxBufferAtSIDH(uint8_t deviceIndex, uint16_t id, uint8_t *data, uint8_t dataLength)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	603a      	str	r2, [r7, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	80bb      	strh	r3, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	4a65      	ldr	r2, [pc, #404]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4413      	add	r3, r2
 8004e6e:	330e      	adds	r3, #14
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d100      	bne.n	8004e78 <MCP25625_LoadTxBufferAtSIDH+0x28>
		__NOP(); // add assert??
 8004e76:	bf00      	nop

	uint8_t rtsTx = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77fb      	strb	r3, [r7, #31]
	uint8_t txbxDataAddress = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77bb      	strb	r3, [r7, #30]
	uint8_t status = ReadStatus(deviceIndex);
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb40 	bl	8005508 <ReadStatus>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	76fb      	strb	r3, [r7, #27]
	if(!(status & TX2REQ_STATUS_MASK))
 8004e8c:	7efb      	ldrb	r3, [r7, #27]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <MCP25625_LoadTxBufferAtSIDH+0x50>
	{
		rtsTx = RTS_T2;
 8004e96:	2384      	movs	r3, #132	; 0x84
 8004e98:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_2_AT_SIDH;
 8004e9a:	2344      	movs	r3, #68	; 0x44
 8004e9c:	77bb      	strb	r3, [r7, #30]
 8004e9e:	e012      	b.n	8004ec6 <MCP25625_LoadTxBufferAtSIDH+0x76>
	}
	else if(!(status & TX1REQ_STATUS_MASK))
 8004ea0:	7efb      	ldrb	r3, [r7, #27]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <MCP25625_LoadTxBufferAtSIDH+0x64>
	{
		rtsTx = RTS_T1;
 8004eaa:	2382      	movs	r3, #130	; 0x82
 8004eac:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_1_AT_SIDH;
 8004eae:	2342      	movs	r3, #66	; 0x42
 8004eb0:	77bb      	strb	r3, [r7, #30]
 8004eb2:	e008      	b.n	8004ec6 <MCP25625_LoadTxBufferAtSIDH+0x76>
	}
	else if(!(status & TX0REQ_STATUS_MASK))
 8004eb4:	7efb      	ldrb	r3, [r7, #27]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <MCP25625_LoadTxBufferAtSIDH+0x76>
	{
		rtsTx = RTS_T0;
 8004ebe:	2381      	movs	r3, #129	; 0x81
 8004ec0:	77fb      	strb	r3, [r7, #31]
		txbxDataAddress = LOAD_TX_BUFFER_0_AT_SIDH;
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	77bb      	strb	r3, [r7, #30]
	}

	if(txbxDataAddress)
 8004ec6:	7fbb      	ldrb	r3, [r7, #30]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8094 	beq.w	8004ff6 <MCP25625_LoadTxBufferAtSIDH+0x1a6>
	{
		MCP25625_TXBx_t TXBx;
		memset(&TXBx, 0, sizeof(TXBx));
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	220d      	movs	r2, #13
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f002 f8e0 	bl	800709c <memset>
		TXBx.Struct.TXBxSIDH_Reg = id >> 3;
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	733b      	strb	r3, [r7, #12]
		TXBx.Struct.TXBxSIDL_Reg.Bits.EXIDE = TransmitStandardID;
 8004ee6:	7b7b      	ldrb	r3, [r7, #13]
 8004ee8:	f36f 03c3 	bfc	r3, #3, #1
 8004eec:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxSIDL_Reg.Bits.SID = id & 0x07;
 8004eee:	88bb      	ldrh	r3, [r7, #4]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	7b7b      	ldrb	r3, [r7, #13]
 8004ef8:	f362 1347 	bfi	r3, r2, #5, #3
 8004efc:	737b      	strb	r3, [r7, #13]
		TXBx.Struct.TXBxDLC_Reg.Bits.DLC = dataLength;
 8004efe:	79bb      	ldrb	r3, [r7, #6]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	7c3b      	ldrb	r3, [r7, #16]
 8004f08:	f362 0303 	bfi	r3, r2, #0, #4
 8004f0c:	743b      	strb	r3, [r7, #16]
		for(uint8_t i = 0; i < dataLength; i++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	777b      	strb	r3, [r7, #29]
 8004f12:	e00b      	b.n	8004f2c <MCP25625_LoadTxBufferAtSIDH+0xdc>
			TXBx.Struct.TXBxDn_Reg[i] = data[i];
 8004f14:	7f7b      	ldrb	r3, [r7, #29]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	441a      	add	r2, r3
 8004f1a:	7f7b      	ldrb	r3, [r7, #29]
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	3320      	adds	r3, #32
 8004f20:	443b      	add	r3, r7
 8004f22:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for(uint8_t i = 0; i < dataLength; i++)
 8004f26:	7f7b      	ldrb	r3, [r7, #29]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	777b      	strb	r3, [r7, #29]
 8004f2c:	7f7a      	ldrb	r2, [r7, #29]
 8004f2e:	79bb      	ldrb	r3, [r7, #6]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3ef      	bcc.n	8004f14 <MCP25625_LoadTxBufferAtSIDH+0xc4>

		SetChipSelect(deviceIndex);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fb42 	bl	80055c0 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, txbxDataAddress);
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	4a30      	ldr	r2, [pc, #192]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	4413      	add	r3, r2
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	7fba      	ldrb	r2, [r7, #30]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fedd 	bl	8004d0a <LL_SPI_TransmitData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 8004f50:	79bb      	ldrb	r3, [r7, #6]
 8004f52:	3305      	adds	r3, #5
 8004f54:	76bb      	strb	r3, [r7, #26]
		for(uint8_t i = 0; i < nBytes; i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	773b      	strb	r3, [r7, #28]
 8004f5a:	e01c      	b.n	8004f96 <MCP25625_LoadTxBufferAtSIDH+0x146>
		{
			while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));		// block on txe
 8004f5c:	bf00      	nop
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	4a27      	ldr	r2, [pc, #156]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	4413      	add	r3, r2
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fe9f 	bl	8004cac <LL_SPI_IsActiveFlag_TXE>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f4      	beq.n	8004f5e <MCP25625_LoadTxBufferAtSIDH+0x10e>
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, TXBx.array[i]);
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	4a22      	ldr	r2, [pc, #136]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4413      	add	r3, r2
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	7f3b      	ldrb	r3, [r7, #28]
 8004f80:	3320      	adds	r3, #32
 8004f82:	443b      	add	r3, r7
 8004f84:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7ff febd 	bl	8004d0a <LL_SPI_TransmitData8>
		for(uint8_t i = 0; i < nBytes; i++)
 8004f90:	7f3b      	ldrb	r3, [r7, #28]
 8004f92:	3301      	adds	r3, #1
 8004f94:	773b      	strb	r3, [r7, #28]
 8004f96:	7f3a      	ldrb	r2, [r7, #28]
 8004f98:	7ebb      	ldrb	r3, [r7, #26]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d3de      	bcc.n	8004f5c <MCP25625_LoadTxBufferAtSIDH+0x10c>
		}

		while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));				// wait for fifo to clear
 8004f9e:	bf00      	nop
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fe91 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f4      	bne.n	8004fa0 <MCP25625_LoadTxBufferAtSIDH+0x150>


		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))			// clear out rx fifo
 8004fb6:	e007      	b.n	8004fc8 <MCP25625_LoadTxBufferAtSIDH+0x178>
			LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fe93 	bl	8004cee <LL_SPI_ReceiveData8>
		while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))			// clear out rx fifo
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <MCP25625_LoadTxBufferAtSIDH+0x1b0>)
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4413      	add	r3, r2
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fe57 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ec      	bne.n	8004fb8 <MCP25625_LoadTxBufferAtSIDH+0x168>

		ClearChipSelect(deviceIndex);
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fb09 	bl	80055f8 <ClearChipSelect>

		RequestToSend(deviceIndex, rtsTx);
 8004fe6:	7ffa      	ldrb	r2, [r7, #31]
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa3f 	bl	8005470 <RequestToSend>

		return 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <MCP25625_LoadTxBufferAtSIDH+0x1a8>
	}

	return 1;
 8004ff6:	2301      	movs	r3, #1
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	200003f4 	.word	0x200003f4

08005004 <MCP25625_ReadRxBufferAtSIDH>:

	return 1;
}

uint8_t MCP25625_ReadRxBufferAtSIDH(uint8_t deviceIndex, MCP25625_RXBx_t *RXBx, uint8_t dataLength)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
 8005010:	4613      	mov	r3, r2
 8005012:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	4a3f      	ldr	r2, [pc, #252]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	4413      	add	r3, r2
 800501c:	330e      	adds	r3, #14
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d100      	bne.n	8005026 <MCP25625_ReadRxBufferAtSIDH+0x22>
		__NOP(); // add assert??
 8005024:	bf00      	nop

	uint8_t rxbxSIDH_Address = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
	uint8_t status = ReadStatus(deviceIndex);
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fa6b 	bl	8005508 <ReadStatus>
 8005032:	4603      	mov	r3, r0
 8005034:	737b      	strb	r3, [r7, #13]
	if(status & RX0IF_STATUS_MASK)
 8005036:	7b7b      	ldrb	r3, [r7, #13]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <MCP25625_ReadRxBufferAtSIDH+0x42>
		rxbxSIDH_Address = READ_RX_BUFFER_0_AT_SIDH;
 8005040:	2390      	movs	r3, #144	; 0x90
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	e006      	b.n	8005054 <MCP25625_ReadRxBufferAtSIDH+0x50>
	else if(status & RX1IF_STATUS_MASK)
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MCP25625_ReadRxBufferAtSIDH+0x50>
		rxbxSIDH_Address = READ_RX_BUFFER_1_AT_SIDH;
 8005050:	2394      	movs	r3, #148	; 0x94
 8005052:	73fb      	strb	r3, [r7, #15]

	if(rxbxSIDH_Address)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d056      	beq.n	8005108 <MCP25625_ReadRxBufferAtSIDH+0x104>
	{
		SetChipSelect(deviceIndex);
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 faaf 	bl	80055c0 <SetChipSelect>

		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, rxbxSIDH_Address);
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	4a2b      	ldr	r2, [pc, #172]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fe4a 	bl	8004d0a <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 8005076:	bf00      	nop
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	4a26      	ldr	r2, [pc, #152]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	4413      	add	r3, r2
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fdff 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f4      	beq.n	8005078 <MCP25625_ReadRxBufferAtSIDH+0x74>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	4a20      	ldr	r2, [pc, #128]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	4413      	add	r3, r2
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fe28 	bl	8004cee <LL_SPI_ReceiveData8>

		uint8_t nBytes = dataLength + 5;						// data register + 5 registers in Rx buffer
 800509e:	79bb      	ldrb	r3, [r7, #6]
 80050a0:	3305      	adds	r3, #5
 80050a2:	733b      	strb	r3, [r7, #12]
		for(uint8_t i = 0; i < nBytes; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	73bb      	strb	r3, [r7, #14]
 80050a8:	e024      	b.n	80050f4 <MCP25625_ReadRxBufferAtSIDH+0xf0>
		{
			LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	4413      	add	r3, r2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fe27 	bl	8004d0a <LL_SPI_TransmitData8>
			while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));
 80050bc:	bf00      	nop
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	4413      	add	r3, r2
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fddc 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f4      	beq.n	80050be <MCP25625_ReadRxBufferAtSIDH+0xba>
			RXBx->array[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	4a0f      	ldr	r2, [pc, #60]	; (8005114 <MCP25625_ReadRxBufferAtSIDH+0x110>)
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4413      	add	r3, r2
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	7bbc      	ldrb	r4, [r7, #14]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fe04 	bl	8004cee <LL_SPI_ReceiveData8>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < nBytes; i++)
 80050ee:	7bbb      	ldrb	r3, [r7, #14]
 80050f0:	3301      	adds	r3, #1
 80050f2:	73bb      	strb	r3, [r7, #14]
 80050f4:	7bba      	ldrb	r2, [r7, #14]
 80050f6:	7b3b      	ldrb	r3, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3d6      	bcc.n	80050aa <MCP25625_ReadRxBufferAtSIDH+0xa6>
		}

		ClearChipSelect(deviceIndex);
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fa7a 	bl	80055f8 <ClearChipSelect>

		return 0;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <MCP25625_ReadRxBufferAtSIDH+0x106>
	}

	return 1;
 8005108:	2301      	movs	r3, #1
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bd90      	pop	{r4, r7, pc}
 8005112:	bf00      	nop
 8005114:	200003f4 	.word	0x200003f4

08005118 <InitRXBx>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void InitRXBx(uint8_t deviceIndex)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
	// Set RXBx to receive any message
	ModifyRegisterBits(deviceIndex, RXB0CTRL_REG, 0b01100000, 0b01100000);
 8005122:	79f8      	ldrb	r0, [r7, #7]
 8005124:	2360      	movs	r3, #96	; 0x60
 8005126:	2260      	movs	r2, #96	; 0x60
 8005128:	2160      	movs	r1, #96	; 0x60
 800512a:	f000 f931 	bl	8005390 <ModifyRegisterBits>
	ModifyRegisterBits(deviceIndex, RXB1CTRL_REG, 0b01100000, 0b01100000);
 800512e:	79f8      	ldrb	r0, [r7, #7]
 8005130:	2360      	movs	r3, #96	; 0x60
 8005132:	2260      	movs	r2, #96	; 0x60
 8005134:	2170      	movs	r1, #112	; 0x70
 8005136:	f000 f92b 	bl	8005390 <ModifyRegisterBits>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <ResetDevice>:

static void ResetDevice(uint8_t deviceIndex)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa35 	bl	80055c0 <SetChipSelect>

//	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RESET);
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <ResetDevice+0x7c>)
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4413      	add	r3, r2
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	21c0      	movs	r1, #192	; 0xc0
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fdd1 	bl	8004d0a <LL_SPI_TransmitData8>
	// wait for fifo to clear all bytes
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8005168:	bf00      	nop
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <ResetDevice+0x7c>)
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4413      	add	r3, r2
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fdac 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f4      	bne.n	800516a <ResetDevice+0x26>
	// while fifo has data, read to clear the fifo
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8005180:	e007      	b.n	8005192 <ResetDevice+0x4e>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <ResetDevice+0x7c>)
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	4413      	add	r3, r2
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fdae 	bl	8004cee <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <ResetDevice+0x7c>)
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fd72 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ec      	bne.n	8005182 <ResetDevice+0x3e>

	ClearChipSelect(deviceIndex);
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fa24 	bl	80055f8 <ClearChipSelect>
	LL_mDelay(1);					// Minimum 2 us required (t_RL)
 80051b0:	2001      	movs	r0, #1
 80051b2:	f001 ff09 	bl	8006fc8 <LL_mDelay>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200003f4 	.word	0x200003f4

080051c4 <ReadRegisterData>:

static void ReadRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	603a      	str	r2, [r7, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	460b      	mov	r3, r1
 80051d4:	71bb      	strb	r3, [r7, #6]
 80051d6:	4613      	mov	r3, r2
 80051d8:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f9ef 	bl	80055c0 <SetChipSelect>

	// send read command. 3 byte fifo
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ);
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	4a32      	ldr	r2, [pc, #200]	; (80052b0 <ReadRegisterData+0xec>)
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2103      	movs	r1, #3
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fd8b 	bl	8004d0a <LL_SPI_TransmitData8>
	// send register address
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	4a2e      	ldr	r2, [pc, #184]	; (80052b0 <ReadRegisterData+0xec>)
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4413      	add	r3, r2
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	79ba      	ldrb	r2, [r7, #6]
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fd81 	bl	8004d0a <LL_SPI_TransmitData8>
	// block until both bytes are sent
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));
 8005208:	bf00      	nop
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <ReadRegisterData+0xec>)
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fd5c 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f4      	bne.n	800520a <ReadRegisterData+0x46>
	// clear rx fifo of responses to command/reg
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8005220:	e007      	b.n	8005232 <ReadRegisterData+0x6e>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <ReadRegisterData+0xec>)
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fd5e 	bl	8004cee <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <ReadRegisterData+0xec>)
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fd22 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ec      	bne.n	8005222 <ReadRegisterData+0x5e>

	for(uint8_t i = 0; i < nDataBytes; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e024      	b.n	8005298 <ReadRegisterData+0xd4>
	{
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <ReadRegisterData+0xec>)
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	4413      	add	r3, r2
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fd55 	bl	8004d0a <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))); // waiting for rxne blocks sending the next
 8005260:	bf00      	nop
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <ReadRegisterData+0xec>)
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fd0a 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f4      	beq.n	8005262 <ReadRegisterData+0x9e>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <ReadRegisterData+0xec>)
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	4413      	add	r3, r2
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	18d4      	adds	r4, r2, r3
 8005288:	4608      	mov	r0, r1
 800528a:	f7ff fd30 	bl	8004cee <LL_SPI_ReceiveData8>
 800528e:	4603      	mov	r3, r0
 8005290:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nDataBytes; i++)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3301      	adds	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	797b      	ldrb	r3, [r7, #5]
 800529c:	429a      	cmp	r2, r3
 800529e:	d3d6      	bcc.n	800524e <ReadRegisterData+0x8a>
	}

	ClearChipSelect(deviceIndex);
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f9a8 	bl	80055f8 <ClearChipSelect>
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	200003f4 	.word	0x200003f4

080052b4 <WriteRegisterData>:

static void WriteRegisterData(uint8_t deviceIndex, uint8_t startReg, uint8_t *data, uint8_t nDataBytes)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	603a      	str	r2, [r7, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
 80052c2:	460b      	mov	r3, r1
 80052c4:	71bb      	strb	r3, [r7, #6]
 80052c6:	4613      	mov	r3, r2
 80052c8:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f977 	bl	80055c0 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, WRITE);
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	; (800538c <WriteRegisterData+0xd8>)
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fd13 	bl	8004d0a <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, startReg);
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	4a29      	ldr	r2, [pc, #164]	; (800538c <WriteRegisterData+0xd8>)
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	4413      	add	r3, r2
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	79ba      	ldrb	r2, [r7, #6]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fd09 	bl	8004d0a <LL_SPI_TransmitData8>

	for(uint8_t i = 0; i < nDataBytes; i++) {
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e01a      	b.n	8005334 <WriteRegisterData+0x80>
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx))); // don't send unless their is room
 80052fe:	bf00      	nop
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	4a22      	ldr	r2, [pc, #136]	; (800538c <WriteRegisterData+0xd8>)
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	4413      	add	r3, r2
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fcce 	bl	8004cac <LL_SPI_IsActiveFlag_TXE>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f4      	beq.n	8005300 <WriteRegisterData+0x4c>
		LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data[i]);
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	4a1c      	ldr	r2, [pc, #112]	; (800538c <WriteRegisterData+0xd8>)
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	4413      	add	r3, r2
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	f7ff fcee 	bl	8004d0a <LL_SPI_TransmitData8>
	for(uint8_t i = 0; i < nDataBytes; i++) {
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	3301      	adds	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	797b      	ldrb	r3, [r7, #5]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3e0      	bcc.n	80052fe <WriteRegisterData+0x4a>
	}
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));			// wait for tx to clear the fifo
 800533c:	bf00      	nop
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	4a12      	ldr	r2, [pc, #72]	; (800538c <WriteRegisterData+0xd8>)
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fcc2 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f4      	bne.n	800533e <WriteRegisterData+0x8a>

	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))		// clear out the rx fifo
 8005354:	e007      	b.n	8005366 <WriteRegisterData+0xb2>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <WriteRegisterData+0xd8>)
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	4413      	add	r3, r2
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fcc4 	bl	8004cee <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))		// clear out the rx fifo
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4a08      	ldr	r2, [pc, #32]	; (800538c <WriteRegisterData+0xd8>)
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	4413      	add	r3, r2
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fc88 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1ec      	bne.n	8005356 <WriteRegisterData+0xa2>

	ClearChipSelect(deviceIndex);
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f93a 	bl	80055f8 <ClearChipSelect>
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200003f4 	.word	0x200003f4

08005390 <ModifyRegisterBits>:

static void ModifyRegisterBits(uint8_t deviceIndex, uint8_t reg, uint8_t mask, uint8_t data)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	71fb      	strb	r3, [r7, #7]
 80053a2:	4603      	mov	r3, r0
 80053a4:	71bb      	strb	r3, [r7, #6]
 80053a6:	460b      	mov	r3, r1
 80053a8:	717b      	strb	r3, [r7, #5]
 80053aa:	4613      	mov	r3, r2
 80053ac:	713b      	strb	r3, [r7, #4]
	SetChipSelect(deviceIndex);
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f905 	bl	80055c0 <SetChipSelect>

	// first 3 bytes will def fit in fifo, so don't wait
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, BIT_MODIFY);
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <ModifyRegisterBits+0xdc>)
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2105      	movs	r1, #5
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fca1 	bl	8004d0a <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, reg);
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	4a28      	ldr	r2, [pc, #160]	; (800546c <ModifyRegisterBits+0xdc>)
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	4413      	add	r3, r2
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	79ba      	ldrb	r2, [r7, #6]
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fc97 	bl	8004d0a <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, mask);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	4a23      	ldr	r2, [pc, #140]	; (800546c <ModifyRegisterBits+0xdc>)
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	797a      	ldrb	r2, [r7, #5]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fc8d 	bl	8004d0a <LL_SPI_TransmitData8>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPIx)));	// check on the 4th for space
 80053f0:	bf00      	nop
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <ModifyRegisterBits+0xdc>)
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4413      	add	r3, r2
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fc55 	bl	8004cac <LL_SPI_IsActiveFlag_TXE>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f4      	beq.n	80053f2 <ModifyRegisterBits+0x62>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, data);
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	4a18      	ldr	r2, [pc, #96]	; (800546c <ModifyRegisterBits+0xdc>)
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	793a      	ldrb	r2, [r7, #4]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fc77 	bl	8004d0a <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));		// block until fifo is cleared
 800541c:	bf00      	nop
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	4a12      	ldr	r2, [pc, #72]	; (800546c <ModifyRegisterBits+0xdc>)
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4413      	add	r3, r2
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fc52 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f4      	bne.n	800541e <ModifyRegisterBits+0x8e>

	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))	// clear rx fifo
 8005434:	e007      	b.n	8005446 <ModifyRegisterBits+0xb6>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	4a0c      	ldr	r2, [pc, #48]	; (800546c <ModifyRegisterBits+0xdc>)
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	4413      	add	r3, r2
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fc54 	bl	8004cee <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))	// clear rx fifo
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <ModifyRegisterBits+0xdc>)
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	4413      	add	r3, r2
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fc18 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ec      	bne.n	8005436 <ModifyRegisterBits+0xa6>

	ClearChipSelect(deviceIndex);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f8ca 	bl	80055f8 <ClearChipSelect>
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}
 800546c:	200003f4 	.word	0x200003f4

08005470 <RequestToSend>:

static void RequestToSend(uint8_t deviceIndex, uint8_t RTS_Tx)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	460a      	mov	r2, r1
 800547a:	71fb      	strb	r3, [r7, #7]
 800547c:	4613      	mov	r3, r2
 800547e:	71bb      	strb	r3, [r7, #6]
	SetChipSelect(deviceIndex);
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f89c 	bl	80055c0 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, RTS_Tx);
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <RequestToSend+0x94>)
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4413      	add	r3, r2
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	79ba      	ldrb	r2, [r7, #6]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fc37 	bl	8004d0a <LL_SPI_TransmitData8>

	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));		// block until fifo is cleared
 800549c:	bf00      	nop
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <RequestToSend+0x94>)
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4413      	add	r3, r2
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fc12 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f4      	bne.n	800549e <RequestToSend+0x2e>
	while(!LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx));	// ISSUE: This line was added to prevent missing receive bits
 80054b4:	bf00      	nop
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	4a12      	ldr	r2, [pc, #72]	; (8005504 <RequestToSend+0x94>)
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	4413      	add	r3, r2
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fbe0 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f4      	beq.n	80054b6 <RequestToSend+0x46>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))	// clear rx fifo
 80054cc:	e007      	b.n	80054de <RequestToSend+0x6e>
		LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <RequestToSend+0x94>)
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	4413      	add	r3, r2
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fc08 	bl	8004cee <LL_SPI_ReceiveData8>
	while(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx))	// clear rx fifo
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4a08      	ldr	r2, [pc, #32]	; (8005504 <RequestToSend+0x94>)
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	4413      	add	r3, r2
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fbcc 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ec      	bne.n	80054ce <RequestToSend+0x5e>

	ClearChipSelect(deviceIndex);
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f87e 	bl	80055f8 <ClearChipSelect>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200003f4 	.word	0x200003f4

08005508 <ReadStatus>:

static uint8_t ReadStatus(uint8_t deviceIndex)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
	SetChipSelect(deviceIndex);
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f853 	bl	80055c0 <SetChipSelect>

	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, READ_STATUS);
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4a27      	ldr	r2, [pc, #156]	; (80055bc <ReadStatus+0xb4>)
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	4413      	add	r3, r2
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	21a0      	movs	r1, #160	; 0xa0
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fbef 	bl	8004d0a <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(Device[deviceIndex].SPIx, 0);
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	4a23      	ldr	r2, [pc, #140]	; (80055bc <ReadStatus+0xb4>)
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	4413      	add	r3, r2
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fbe6 	bl	8004d0a <LL_SPI_TransmitData8>
	while(LL_SPI_GetTxFIFOLevel(Device[deviceIndex].SPIx));		// block until fifo is cleared
 800553e:	bf00      	nop
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <ReadStatus+0xb4>)
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fbc1 	bl	8004cd2 <LL_SPI_GetTxFIFOLevel>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f4      	bne.n	8005540 <ReadStatus+0x38>

	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));// wait for rx data
 8005556:	bf00      	nop
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <ReadStatus+0xb4>)
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fb8f 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f4      	beq.n	8005558 <ReadStatus+0x50>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);				// clear first byte
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	4a12      	ldr	r2, [pc, #72]	; (80055bc <ReadStatus+0xb4>)
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	4413      	add	r3, r2
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fbb8 	bl	8004cee <LL_SPI_ReceiveData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPIx)));// wait for rx data
 800557e:	bf00      	nop
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <ReadStatus+0xb4>)
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fb7b 	bl	8004c86 <LL_SPI_IsActiveFlag_RXNE>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f4      	beq.n	8005580 <ReadStatus+0x78>
	uint8_t status = LL_SPI_ReceiveData8(Device[deviceIndex].SPIx);	// this is the response byte
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <ReadStatus+0xb4>)
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	4413      	add	r3, r2
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fba4 	bl	8004cee <LL_SPI_ReceiveData8>
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]

	ClearChipSelect(deviceIndex);
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f823 	bl	80055f8 <ClearChipSelect>

	return status;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200003f4 	.word	0x200003f4

080055c0 <SetChipSelect>:

static void SetChipSelect(uint8_t deviceIndex)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <SetChipSelect+0x34>)
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	4413      	add	r3, r2
 80055d2:	3304      	adds	r3, #4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <SetChipSelect+0x34>)
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	440b      	add	r3, r1
 80055de:	3308      	adds	r3, #8
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7ff fb40 	bl	8004c6a <LL_GPIO_ResetOutputPin>
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200003f4 	.word	0x200003f4

080055f8 <ClearChipSelect>:

static void ClearChipSelect(uint8_t deviceIndex)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_Port, Device[deviceIndex].csPin);
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	4a09      	ldr	r2, [pc, #36]	; (800562c <ClearChipSelect+0x34>)
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	4413      	add	r3, r2
 800560a:	3304      	adds	r3, #4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4906      	ldr	r1, [pc, #24]	; (800562c <ClearChipSelect+0x34>)
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	440b      	add	r3, r1
 8005616:	3308      	adds	r3, #8
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7ff fb16 	bl	8004c4e <LL_GPIO_SetOutputPin>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200003f4 	.word	0x200003f4

08005630 <LL_SPI_IsActiveFlag_RXNE>:
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_SPI_IsActiveFlag_TXE>:
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b02      	cmp	r3, #2
 8005668:	d101      	bne.n	800566e <LL_SPI_IsActiveFlag_TXE+0x18>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <LL_SPI_ReceiveData8>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	330c      	adds	r3, #12
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b2db      	uxtb	r3, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_SPI_TransmitData8>:
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	330c      	adds	r3, #12
 80056a8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	701a      	strb	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_GPIO_SetOutputPin>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	619a      	str	r2, [r3, #24]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <LL_GPIO_ResetOutputPin>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(uint8_t deviceIndex, MPU925x_Init_t *Device_Init)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > MPU925X_NUMBER_OF_DEVICES)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <MPU925x_Init+0x14>
		__NOP(); // add assert??
 8005706:	bf00      	nop

	memcpy(&Device[deviceIndex], Device_Init, sizeof(MPU925x_Init_t));
 8005708:	79fa      	ldrb	r2, [r7, #7]
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4a14      	ldr	r2, [pc, #80]	; (8005764 <MPU925x_Init+0x70>)
 8005714:	4413      	add	r3, r2
 8005716:	220c      	movs	r2, #12
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f001 fcb0 	bl	8007080 <memcpy>

	ClearChipSelect(deviceIndex);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fa16 	bl	8005b54 <ClearChipSelect>

	uint8_t whoAmI;
	ReadRegData(deviceIndex, MPU925X_REG_WHO_AM_I, &whoAmI, sizeof(whoAmI));
 8005728:	f107 020f 	add.w	r2, r7, #15
 800572c:	79f8      	ldrb	r0, [r7, #7]
 800572e:	2301      	movs	r3, #1
 8005730:	2175      	movs	r1, #117	; 0x75
 8005732:	f000 fadb 	bl	8005cec <ReadRegData>
	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b71      	cmp	r3, #113	; 0x71
 800573a:	d004      	beq.n	8005746 <MPU925x_Init+0x52>
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b73      	cmp	r3, #115	; 0x73
 8005740:	d001      	beq.n	8005746 <MPU925x_Init+0x52>
		return MPU925x_WhoAmI_Error;
 8005742:	2301      	movs	r3, #1
 8005744:	e00a      	b.n	800575c <MPU925x_Init+0x68>

	Device[deviceIndex].isInit = 1;
 8005746:	79fa      	ldrb	r2, [r7, #7]
 8005748:	4906      	ldr	r1, [pc, #24]	; (8005764 <MPU925x_Init+0x70>)
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	330a      	adds	r3, #10
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]

	return MPU925x_NoError;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000414 	.word	0x20000414

08005768 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(uint8_t deviceIndex, MPU925x_AccelSensitivity_e sensitivity)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	460a      	mov	r2, r1
 8005772:	71fb      	strb	r3, [r7, #7]
 8005774:	4613      	mov	r3, r2
 8005776:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8005778:	79fa      	ldrb	r2, [r7, #7]
 800577a:	4941      	ldr	r1, [pc, #260]	; (8005880 <MPU925x_SetAccelSensitivity+0x118>)
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	330a      	adds	r3, #10
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d100      	bne.n	8005790 <MPU925x_SetAccelSensitivity+0x28>
		__NOP(); // add assert??
 800578e:	bf00      	nop

	uint8_t data;
	switch(sensitivity)
 8005790:	79bb      	ldrb	r3, [r7, #6]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d870      	bhi.n	8005878 <MPU925x_SetAccelSensitivity+0x110>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <MPU925x_SetAccelSensitivity+0x34>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057db 	.word	0x080057db
 80057a4:	08005813 	.word	0x08005813
 80057a8:	0800584b 	.word	0x0800584b
	{
	case MPU925x_AccelSensitivity_2g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80057ac:	f107 020f 	add.w	r2, r7, #15
 80057b0:	79f8      	ldrb	r0, [r7, #7]
 80057b2:	2301      	movs	r3, #1
 80057b4:	211c      	movs	r1, #28
 80057b6:	f000 fa99 	bl	8005cec <ReadRegData>
		data = data & ~0x18;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	f023 0318 	bic.w	r3, r3, #24
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, data);
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	211c      	movs	r1, #28
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fa02 	bl	8005bd4 <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 80057d0:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <MPU925x_SetAccelSensitivity+0x11c>)
 80057d2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80057d6:	601a      	str	r2, [r3, #0]
		break;
 80057d8:	e04e      	b.n	8005878 <MPU925x_SetAccelSensitivity+0x110>

	case MPU925x_AccelSensitivity_4g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80057da:	f107 020f 	add.w	r2, r7, #15
 80057de:	79f8      	ldrb	r0, [r7, #7]
 80057e0:	2301      	movs	r3, #1
 80057e2:	211c      	movs	r1, #28
 80057e4:	f000 fa82 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x08;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	f023 0318 	bic.w	r3, r3, #24
 80057f0:	b25b      	sxtb	r3, r3
 80057f2:	f043 0308 	orr.w	r3, r3, #8
 80057f6:	b25b      	sxtb	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, data);
 80057fc:	7bfa      	ldrb	r2, [r7, #15]
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	211c      	movs	r1, #28
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f9e6 	bl	8005bd4 <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8005808:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <MPU925x_SetAccelSensitivity+0x11c>)
 800580a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800580e:	601a      	str	r2, [r3, #0]
		break;
 8005810:	e032      	b.n	8005878 <MPU925x_SetAccelSensitivity+0x110>

	case MPU925x_AccelSensitivity_8g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8005812:	f107 020f 	add.w	r2, r7, #15
 8005816:	79f8      	ldrb	r0, [r7, #7]
 8005818:	2301      	movs	r3, #1
 800581a:	211c      	movs	r1, #28
 800581c:	f000 fa66 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x10;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	b25b      	sxtb	r3, r3
 8005824:	f023 0318 	bic.w	r3, r3, #24
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f043 0310 	orr.w	r3, r3, #16
 800582e:	b25b      	sxtb	r3, r3
 8005830:	b2db      	uxtb	r3, r3
 8005832:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, data);
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	211c      	movs	r1, #28
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f9ca 	bl	8005bd4 <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <MPU925x_SetAccelSensitivity+0x11c>)
 8005842:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005846:	601a      	str	r2, [r3, #0]
		break;
 8005848:	e016      	b.n	8005878 <MPU925x_SetAccelSensitivity+0x110>

	case MPU925x_AccelSensitivity_16g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 800584a:	f107 020f 	add.w	r2, r7, #15
 800584e:	79f8      	ldrb	r0, [r7, #7]
 8005850:	2301      	movs	r3, #1
 8005852:	211c      	movs	r1, #28
 8005854:	f000 fa4a 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	f043 0318 	orr.w	r3, r3, #24
 800585e:	b2db      	uxtb	r3, r3
 8005860:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, data);
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	211c      	movs	r1, #28
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f9b3 	bl	8005bd4 <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <MPU925x_SetAccelSensitivity+0x11c>)
 8005870:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005874:	601a      	str	r2, [r3, #0]
		break;
 8005876:	bf00      	nop
	}
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000414 	.word	0x20000414
 8005884:	20000010 	.word	0x20000010

08005888 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(uint8_t deviceIndex, MPU925x_GyroSensitivity_e sensitivity)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	460a      	mov	r2, r1
 8005892:	71fb      	strb	r3, [r7, #7]
 8005894:	4613      	mov	r3, r2
 8005896:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8005898:	79fa      	ldrb	r2, [r7, #7]
 800589a:	493f      	ldr	r1, [pc, #252]	; (8005998 <MPU925x_SetGyroSensitivity+0x110>)
 800589c:	4613      	mov	r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	330a      	adds	r3, #10
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d100      	bne.n	80058b0 <MPU925x_SetGyroSensitivity+0x28>
		__NOP(); // add assert??
 80058ae:	bf00      	nop

	uint8_t data;
	switch(sensitivity)
 80058b0:	79bb      	ldrb	r3, [r7, #6]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d86c      	bhi.n	8005990 <MPU925x_SetGyroSensitivity+0x108>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <MPU925x_SetGyroSensitivity+0x34>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	0800592f 	.word	0x0800592f
 80058c8:	08005965 	.word	0x08005965
	{
	case MPU925x_GyroSensitivity_250dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80058cc:	f107 020f 	add.w	r2, r7, #15
 80058d0:	79f8      	ldrb	r0, [r7, #7]
 80058d2:	2301      	movs	r3, #1
 80058d4:	211b      	movs	r1, #27
 80058d6:	f000 fa09 	bl	8005cec <ReadRegData>
		data = data & ~0x18;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	f023 0318 	bic.w	r3, r3, #24
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, data);
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	211b      	movs	r1, #27
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f972 	bl	8005bd4 <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 80058f0:	4b2a      	ldr	r3, [pc, #168]	; (800599c <MPU925x_SetGyroSensitivity+0x114>)
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <MPU925x_SetGyroSensitivity+0x118>)
 80058f4:	601a      	str	r2, [r3, #0]
		break;
 80058f6:	e04b      	b.n	8005990 <MPU925x_SetGyroSensitivity+0x108>

	case MPU925x_GyroSensitivity_500dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80058f8:	f107 020f 	add.w	r2, r7, #15
 80058fc:	79f8      	ldrb	r0, [r7, #7]
 80058fe:	2301      	movs	r3, #1
 8005900:	211b      	movs	r1, #27
 8005902:	f000 f9f3 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	b25b      	sxtb	r3, r3
 800590a:	f023 0318 	bic.w	r3, r3, #24
 800590e:	b25b      	sxtb	r3, r3
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	b25b      	sxtb	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, data);
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	211b      	movs	r1, #27
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f957 	bl	8005bd4 <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <MPU925x_SetGyroSensitivity+0x114>)
 8005928:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <MPU925x_SetGyroSensitivity+0x11c>)
 800592a:	601a      	str	r2, [r3, #0]
		break;
 800592c:	e030      	b.n	8005990 <MPU925x_SetGyroSensitivity+0x108>

	case MPU925x_GyroSensitivity_1000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 800592e:	f107 020f 	add.w	r2, r7, #15
 8005932:	79f8      	ldrb	r0, [r7, #7]
 8005934:	2301      	movs	r3, #1
 8005936:	211b      	movs	r1, #27
 8005938:	f000 f9d8 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x10;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	b25b      	sxtb	r3, r3
 8005940:	f023 0318 	bic.w	r3, r3, #24
 8005944:	b25b      	sxtb	r3, r3
 8005946:	f043 0310 	orr.w	r3, r3, #16
 800594a:	b25b      	sxtb	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, data);
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	211b      	movs	r1, #27
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f93c 	bl	8005bd4 <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <MPU925x_SetGyroSensitivity+0x114>)
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <MPU925x_SetGyroSensitivity+0x120>)
 8005960:	601a      	str	r2, [r3, #0]
		break;
 8005962:	e015      	b.n	8005990 <MPU925x_SetGyroSensitivity+0x108>

	case MPU925x_GyroSensitivity_2000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8005964:	f107 020f 	add.w	r2, r7, #15
 8005968:	79f8      	ldrb	r0, [r7, #7]
 800596a:	2301      	movs	r3, #1
 800596c:	211b      	movs	r1, #27
 800596e:	f000 f9bd 	bl	8005cec <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	f043 0318 	orr.w	r3, r3, #24
 8005978:	b2db      	uxtb	r3, r3
 800597a:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, data);
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	211b      	movs	r1, #27
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f926 	bl	8005bd4 <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8005988:	4b04      	ldr	r3, [pc, #16]	; (800599c <MPU925x_SetGyroSensitivity+0x114>)
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <MPU925x_SetGyroSensitivity+0x124>)
 800598c:	601a      	str	r2, [r3, #0]
		break;
 800598e:	bf00      	nop
	}
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000414 	.word	0x20000414
 800599c:	20000014 	.word	0x20000014
 80059a0:	43030000 	.word	0x43030000
 80059a4:	42830000 	.word	0x42830000
 80059a8:	42033333 	.word	0x42033333
 80059ac:	41833333 	.word	0x41833333

080059b0 <MPU925x_ReadIMU>:

	WriteRegData(deviceIndex, MPU925X_REG_SMPLRT_DIV, divider);
}

MPU925x_IMU_Data_t MPU925x_ReadIMU(uint8_t deviceIndex)
{
 80059b0:	b5b0      	push	{r4, r5, r7, lr}
 80059b2:	b096      	sub	sp, #88	; 0x58
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
	if(!Device[deviceIndex].isInit)
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	4962      	ldr	r1, [pc, #392]	; (8005b48 <MPU925x_ReadIMU+0x198>)
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	330a      	adds	r3, #10
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d100      	bne.n	80059d4 <MPU925x_ReadIMU+0x24>
		__NOP(); // add assert??
 80059d2:	bf00      	nop

	MPU925x_IMU_Data_t IMU_Data;
	uint8_t data[14];
	ReadRegData(deviceIndex, MPU925X_REG_ACCEL_XOUT_H, data, 14);
 80059d4:	f107 0208 	add.w	r2, r7, #8
 80059d8:	78f8      	ldrb	r0, [r7, #3]
 80059da:	230e      	movs	r3, #14
 80059dc:	213b      	movs	r1, #59	; 0x3b
 80059de:	f000 f985 	bl	8005cec <ReadRegData>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 80059e2:	7a3b      	ldrb	r3, [r7, #8]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	b21a      	sxth	r2, r3
 80059e8:	7a7b      	ldrb	r3, [r7, #9]
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 80059f2:	7abb      	ldrb	r3, [r7, #10]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b21a      	sxth	r2, r3
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8005a02:	7b3b      	ldrb	r3, [r7, #12]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	b21a      	sxth	r2, r3
 8005a08:	7b7b      	ldrb	r3, [r7, #13]
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8005a12:	7c3b      	ldrb	r3, [r7, #16]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	b21a      	sxth	r2, r3
 8005a18:	7c7b      	ldrb	r3, [r7, #17]
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8005a22:	7cbb      	ldrb	r3, [r7, #18]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	b21a      	sxth	r2, r3
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8005a32:	7d3b      	ldrb	r3, [r7, #20]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	b21a      	sxth	r2, r3
 8005a38:	7d7b      	ldrb	r3, [r7, #21]
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMU_Data.ax = ax / accelSensitivity;
 8005a42:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a4e:	4b3f      	ldr	r3, [pc, #252]	; (8005b4c <MPU925x_ReadIMU+0x19c>)
 8005a50:	edd3 7a00 	vldr	s15, [r3]
 8005a54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a58:	ee16 0a90 	vmov	r0, s13
 8005a5c:	f7fa fd18 	bl	8000490 <__aeabi_f2d>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMU_Data.ay = ay / accelSensitivity;
 8005a68:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <MPU925x_ReadIMU+0x19c>)
 8005a76:	edd3 7a00 	vldr	s15, [r3]
 8005a7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a7e:	ee16 0a90 	vmov	r0, s13
 8005a82:	f7fa fd05 	bl	8000490 <__aeabi_f2d>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU_Data.az = az / accelSensitivity;
 8005a8e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a9a:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <MPU925x_ReadIMU+0x19c>)
 8005a9c:	edd3 7a00 	vldr	s15, [r3]
 8005aa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005aa4:	ee16 0a90 	vmov	r0, s13
 8005aa8:	f7fa fcf2 	bl	8000490 <__aeabi_f2d>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU_Data.gx = gx / gyroSensitivity;
 8005ab4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <MPU925x_ReadIMU+0x1a0>)
 8005ac2:	edd3 7a00 	vldr	s15, [r3]
 8005ac6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005aca:	ee16 0a90 	vmov	r0, s13
 8005ace:	f7fa fcdf 	bl	8000490 <__aeabi_f2d>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMU_Data.gy = gy / gyroSensitivity;
 8005ada:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae6:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <MPU925x_ReadIMU+0x1a0>)
 8005ae8:	edd3 7a00 	vldr	s15, [r3]
 8005aec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005af0:	ee16 0a90 	vmov	r0, s13
 8005af4:	f7fa fccc 	bl	8000490 <__aeabi_f2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMU_Data.gz = gz / gyroSensitivity;
 8005b00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b0c:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <MPU925x_ReadIMU+0x1a0>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b16:	ee16 0a90 	vmov	r0, s13
 8005b1a:	f7fa fcb9 	bl	8000490 <__aeabi_f2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMU_Data;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	461d      	mov	r5, r3
 8005b2a:	f107 0418 	add.w	r4, r7, #24
 8005b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005b3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	3758      	adds	r7, #88	; 0x58
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bdb0      	pop	{r4, r5, r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000414 	.word	0x20000414
 8005b4c:	20000010 	.word	0x20000010
 8005b50:	20000014 	.word	0x20000014

08005b54 <ClearChipSelect>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8005b5e:	79fa      	ldrb	r2, [r7, #7]
 8005b60:	490b      	ldr	r1, [pc, #44]	; (8005b90 <ClearChipSelect+0x3c>)
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	79fa      	ldrb	r2, [r7, #7]
 8005b72:	4907      	ldr	r1, [pc, #28]	; (8005b90 <ClearChipSelect+0x3c>)
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3308      	adds	r3, #8
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	f7ff fd9a 	bl	80056bc <LL_GPIO_SetOutputPin>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000414 	.word	0x20000414

08005b94 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8005b9e:	79fa      	ldrb	r2, [r7, #7]
 8005ba0:	490b      	ldr	r1, [pc, #44]	; (8005bd0 <SetChipSelect+0x3c>)
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	3304      	adds	r3, #4
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	79fa      	ldrb	r2, [r7, #7]
 8005bb2:	4907      	ldr	r1, [pc, #28]	; (8005bd0 <SetChipSelect+0x3c>)
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f7ff fd88 	bl	80056d8 <LL_GPIO_ResetOutputPin>
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000414 	.word	0x20000414

08005bd4 <WriteRegData>:

static void WriteRegData(uint8_t deviceIndex, uint8_t adress, uint8_t data)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
 8005bde:	460b      	mov	r3, r1
 8005be0:	71bb      	strb	r3, [r7, #6]
 8005be2:	4613      	mov	r3, r2
 8005be4:	717b      	strb	r3, [r7, #5]
	if(!Device[deviceIndex].isInit)
 8005be6:	79fa      	ldrb	r2, [r7, #7]
 8005be8:	493f      	ldr	r1, [pc, #252]	; (8005ce8 <WriteRegData+0x114>)
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	330a      	adds	r3, #10
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d100      	bne.n	8005bfe <WriteRegData+0x2a>
		__NOP(); // add assert??
 8005bfc:	bf00      	nop

	SetChipSelect(deviceIndex);
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ffc7 	bl	8005b94 <SetChipSelect>

	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 8005c06:	bf00      	nop
 8005c08:	79fa      	ldrb	r2, [r7, #7]
 8005c0a:	4937      	ldr	r1, [pc, #220]	; (8005ce8 <WriteRegData+0x114>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f2      	beq.n	8005c08 <WriteRegData+0x34>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, adress);
 8005c22:	79fa      	ldrb	r2, [r7, #7]
 8005c24:	4930      	ldr	r1, [pc, #192]	; (8005ce8 <WriteRegData+0x114>)
 8005c26:	4613      	mov	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	79ba      	ldrb	r2, [r7, #6]
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fd2e 	bl	8005698 <LL_SPI_TransmitData8>
	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 8005c3c:	bf00      	nop
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <WriteRegData+0x114>)
 8005c42:	4613      	mov	r3, r2
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f2      	beq.n	8005c3e <WriteRegData+0x6a>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);						// Read out bogus data
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	4923      	ldr	r1, [pc, #140]	; (8005ce8 <WriteRegData+0x114>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fd07 	bl	800567c <LL_SPI_ReceiveData8>

	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_TXE));
 8005c6e:	bf00      	nop
 8005c70:	79fa      	ldrb	r2, [r7, #7]
 8005c72:	491d      	ldr	r1, [pc, #116]	; (8005ce8 <WriteRegData+0x114>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f2      	beq.n	8005c70 <WriteRegData+0x9c>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, data);
 8005c8a:	79fa      	ldrb	r2, [r7, #7]
 8005c8c:	4916      	ldr	r1, [pc, #88]	; (8005ce8 <WriteRegData+0x114>)
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	797a      	ldrb	r2, [r7, #5]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fcfa 	bl	8005698 <LL_SPI_TransmitData8>
	while (!(Device[deviceIndex].SPI_Handle->SR & SPI_SR_RXNE));
 8005ca4:	bf00      	nop
 8005ca6:	79fa      	ldrb	r2, [r7, #7]
 8005ca8:	490f      	ldr	r1, [pc, #60]	; (8005ce8 <WriteRegData+0x114>)
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f2      	beq.n	8005ca6 <WriteRegData+0xd2>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);						// Read out bogus data
 8005cc0:	79fa      	ldrb	r2, [r7, #7]
 8005cc2:	4909      	ldr	r1, [pc, #36]	; (8005ce8 <WriteRegData+0x114>)
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fcd3 	bl	800567c <LL_SPI_ReceiveData8>

	ClearChipSelect(deviceIndex);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff ff3b 	bl	8005b54 <ClearChipSelect>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000414 	.word	0x20000414

08005cec <ReadRegData>:

static void ReadRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	603a      	str	r2, [r7, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	71fb      	strb	r3, [r7, #7]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	71bb      	strb	r3, [r7, #6]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	717b      	strb	r3, [r7, #5]
	if(!Device[deviceIndex].isInit)
 8005d02:	79fa      	ldrb	r2, [r7, #7]
 8005d04:	4949      	ldr	r1, [pc, #292]	; (8005e2c <ReadRegData+0x140>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	330a      	adds	r3, #10
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d100      	bne.n	8005d1a <ReadRegData+0x2e>
		__NOP(); // add assert??
 8005d18:	bf00      	nop

	SetChipSelect(deviceIndex);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff ff39 	bl	8005b94 <SetChipSelect>

	while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 8005d22:	bf00      	nop
 8005d24:	79fa      	ldrb	r2, [r7, #7]
 8005d26:	4941      	ldr	r1, [pc, #260]	; (8005e2c <ReadRegData+0x140>)
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fc8e 	bl	8005656 <LL_SPI_IsActiveFlag_TXE>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f1      	beq.n	8005d24 <ReadRegData+0x38>
	LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, (startAddress | 0x80));
 8005d40:	79fa      	ldrb	r2, [r7, #7]
 8005d42:	493a      	ldr	r1, [pc, #232]	; (8005e2c <ReadRegData+0x140>)
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	79bb      	ldrb	r3, [r7, #6]
 8005d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff fc9c 	bl	8005698 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 8005d60:	bf00      	nop
 8005d62:	79fa      	ldrb	r2, [r7, #7]
 8005d64:	4931      	ldr	r1, [pc, #196]	; (8005e2c <ReadRegData+0x140>)
 8005d66:	4613      	mov	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fc5c 	bl	8005630 <LL_SPI_IsActiveFlag_RXNE>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f1      	beq.n	8005d62 <ReadRegData+0x76>
	LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);							// Read out bogus data
 8005d7e:	79fa      	ldrb	r2, [r7, #7]
 8005d80:	492a      	ldr	r1, [pc, #168]	; (8005e2c <ReadRegData+0x140>)
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc74 	bl	800567c <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < nBytes; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
 8005d98:	e03c      	b.n	8005e14 <ReadRegData+0x128>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(Device[deviceIndex].SPI_Handle)));
 8005d9a:	bf00      	nop
 8005d9c:	79fa      	ldrb	r2, [r7, #7]
 8005d9e:	4923      	ldr	r1, [pc, #140]	; (8005e2c <ReadRegData+0x140>)
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fc52 	bl	8005656 <LL_SPI_IsActiveFlag_TXE>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f1      	beq.n	8005d9c <ReadRegData+0xb0>
		LL_SPI_TransmitData8(Device[deviceIndex].SPI_Handle, 0x00);				// Send out 8 bits to read 8 more bits
 8005db8:	79fa      	ldrb	r2, [r7, #7]
 8005dba:	491c      	ldr	r1, [pc, #112]	; (8005e2c <ReadRegData+0x140>)
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fc64 	bl	8005698 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(Device[deviceIndex].SPI_Handle)));
 8005dd0:	bf00      	nop
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	4915      	ldr	r1, [pc, #84]	; (8005e2c <ReadRegData+0x140>)
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fc24 	bl	8005630 <LL_SPI_IsActiveFlag_RXNE>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f1      	beq.n	8005dd2 <ReadRegData+0xe6>
		data[i] = LL_SPI_ReceiveData8(Device[deviceIndex].SPI_Handle);
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	490e      	ldr	r1, [pc, #56]	; (8005e2c <ReadRegData+0x140>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	18d4      	adds	r4, r2, r3
 8005e04:	4608      	mov	r0, r1
 8005e06:	f7ff fc39 	bl	800567c <LL_SPI_ReceiveData8>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < nBytes; i++)
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3301      	adds	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
 8005e14:	7bfa      	ldrb	r2, [r7, #15]
 8005e16:	797b      	ldrb	r3, [r7, #5]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3be      	bcc.n	8005d9a <ReadRegData+0xae>
	}

	ClearChipSelect(deviceIndex);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fe98 	bl	8005b54 <ClearChipSelect>
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd90      	pop	{r4, r7, pc}
 8005e2c:	20000414 	.word	0x20000414

08005e30 <LL_ADC_REG_SetSequencerLength>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f023 020f 	bic.w	r2, r3, #15
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <LL_ADC_IsEnabled>:
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <LL_ADC_IsEnabled+0x18>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <LL_ADC_IsEnabled+0x1a>
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005e8a:	481c      	ldr	r0, [pc, #112]	; (8005efc <LL_ADC_CommonInit+0x80>)
 8005e8c:	f7ff ffe3 	bl	8005e56 <LL_ADC_IsEnabled>
 8005e90:	4604      	mov	r4, r0
 8005e92:	481b      	ldr	r0, [pc, #108]	; (8005f00 <LL_ADC_CommonInit+0x84>)
 8005e94:	f7ff ffdf 	bl	8005e56 <LL_ADC_IsEnabled>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	431c      	orrs	r4, r3
 8005e9c:	4819      	ldr	r0, [pc, #100]	; (8005f04 <LL_ADC_CommonInit+0x88>)
 8005e9e:	f7ff ffda 	bl	8005e56 <LL_ADC_IsEnabled>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4323      	orrs	r3, r4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d120      	bne.n	8005eec <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d012      	beq.n	8005ed8 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <LL_ADC_CommonInit+0x8c>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	6811      	ldr	r1, [r2, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	6852      	ldr	r2, [r2, #4]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	6892      	ldr	r2, [r2, #8]
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	68d2      	ldr	r2, [r2, #12]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	e00b      	b.n	8005ef0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <LL_ADC_CommonInit+0x8c>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
 8005eea:	e001      	b.n	8005ef0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	50040000 	.word	0x50040000
 8005f00:	50040100 	.word	0x50040100
 8005f04:	50040200 	.word	0x50040200
 8005f08:	ffc030e0 	.word	0xffc030e0

08005f0c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff9b 	bl	8005e56 <LL_ADC_IsEnabled>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d111      	bne.n	8005f4a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	6811      	ldr	r1, [r2, #0]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	4311      	orrs	r1, r2
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	6892      	ldr	r2, [r2, #8]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	e001      	b.n	8005f4e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff ff75 	bl	8005e56 <LL_ADC_IsEnabled>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d132      	bne.n	8005fd8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <LL_ADC_REG_Init+0x90>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	6892      	ldr	r2, [r2, #8]
 8005f8a:	4311      	orrs	r1, r2
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	68d2      	ldr	r2, [r2, #12]
 8005f90:	4311      	orrs	r1, r2
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6912      	ldr	r2, [r2, #16]
 8005f96:	4311      	orrs	r1, r2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	6952      	ldr	r2, [r2, #20]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
 8005fa4:	e011      	b.n	8005fca <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <LL_ADC_REG_Init+0x90>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	68d2      	ldr	r2, [r2, #12]
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	6912      	ldr	r2, [r2, #16]
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6952      	ldr	r2, [r2, #20]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff2d 	bl	8005e30 <LL_ADC_REG_SetSequencerLength>
 8005fd6:	e001      	b.n	8005fdc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	fff0c03c 	.word	0xfff0c03c

08005fec <LL_GPIO_SetPinMode>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08b      	sub	sp, #44	; 0x2c
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	fa93 f3a3 	rbit	r3, r3
 8006006:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8006012:	2320      	movs	r3, #32
 8006014:	e003      	b.n	800601e <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	fab3 f383 	clz	r3, r3
 800601c:	b2db      	uxtb	r3, r3
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	2103      	movs	r1, #3
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	401a      	ands	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	61fb      	str	r3, [r7, #28]
  return result;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006040:	2320      	movs	r3, #32
 8006042:	e003      	b.n	800604c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	fab3 f383 	clz	r3, r3
 800604a:	b2db      	uxtb	r3, r3
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	372c      	adds	r7, #44	; 0x2c
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_GPIO_SetPinOutputType>:
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	43db      	mvns	r3, r3
 800607a:	401a      	ands	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	431a      	orrs	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <LL_GPIO_SetPinSpeed>:
{
 8006096:	b480      	push	{r7}
 8006098:	b08b      	sub	sp, #44	; 0x2c
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	fa93 f3a3 	rbit	r3, r3
 80060b0:	613b      	str	r3, [r7, #16]
  return result;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80060bc:	2320      	movs	r3, #32
 80060be:	e003      	b.n	80060c8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	2103      	movs	r1, #3
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	fa93 f3a3 	rbit	r3, r3
 80060de:	61fb      	str	r3, [r7, #28]
  return result;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80060ea:	2320      	movs	r3, #32
 80060ec:	e003      	b.n	80060f6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	fab3 f383 	clz	r3, r3
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	431a      	orrs	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	372c      	adds	r7, #44	; 0x2c
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_GPIO_SetPinPull>:
{
 8006110:	b480      	push	{r7}
 8006112:	b08b      	sub	sp, #44	; 0x2c
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	fa93 f3a3 	rbit	r3, r3
 800612a:	613b      	str	r3, [r7, #16]
  return result;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006136:	2320      	movs	r3, #32
 8006138:	e003      	b.n	8006142 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	fab3 f383 	clz	r3, r3
 8006140:	b2db      	uxtb	r3, r3
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	2103      	movs	r1, #3
 8006146:	fa01 f303 	lsl.w	r3, r1, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	401a      	ands	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	fa93 f3a3 	rbit	r3, r3
 8006158:	61fb      	str	r3, [r7, #28]
  return result;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006164:	2320      	movs	r3, #32
 8006166:	e003      	b.n	8006170 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	fab3 f383 	clz	r3, r3
 800616e:	b2db      	uxtb	r3, r3
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	fa01 f303 	lsl.w	r3, r1, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	60da      	str	r2, [r3, #12]
}
 800617e:	bf00      	nop
 8006180:	372c      	adds	r7, #44	; 0x2c
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_GPIO_SetAFPin_0_7>:
{
 800618a:	b480      	push	{r7}
 800618c:	b08b      	sub	sp, #44	; 0x2c
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	fa93 f3a3 	rbit	r3, r3
 80061a4:	613b      	str	r3, [r7, #16]
  return result;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80061b0:	2320      	movs	r3, #32
 80061b2:	e003      	b.n	80061bc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	fab3 f383 	clz	r3, r3
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	210f      	movs	r1, #15
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	61fb      	str	r3, [r7, #28]
  return result;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80061de:	2320      	movs	r3, #32
 80061e0:	e003      	b.n	80061ea <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	fab3 f383 	clz	r3, r3
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	372c      	adds	r7, #44	; 0x2c
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <LL_GPIO_SetAFPin_8_15>:
{
 8006204:	b480      	push	{r7}
 8006206:	b08b      	sub	sp, #44	; 0x2c
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	613b      	str	r3, [r7, #16]
  return result;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800622c:	2320      	movs	r3, #32
 800622e:	e003      	b.n	8006238 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	210f      	movs	r1, #15
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	fa93 f3a3 	rbit	r3, r3
 8006250:	61fb      	str	r3, [r7, #28]
  return result;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800625c:	2320      	movs	r3, #32
 800625e:	e003      	b.n	8006268 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	fa01 f303 	lsl.w	r3, r1, r3
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006276:	bf00      	nop
 8006278:	372c      	adds	r7, #44	; 0x2c
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b088      	sub	sp, #32
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	60fb      	str	r3, [r7, #12]
  return result;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <LL_GPIO_Init+0x26>
    return 32U;
 80062a4:	2320      	movs	r3, #32
 80062a6:	e003      	b.n	80062b0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80062b2:	e048      	b.n	8006346 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	2101      	movs	r1, #1
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	fa01 f303 	lsl.w	r3, r1, r3
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d03a      	beq.n	8006340 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d003      	beq.n	80062da <LL_GPIO_Init+0x58>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d10e      	bne.n	80062f8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	461a      	mov	r2, r3
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fed7 	bl	8006096 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6819      	ldr	r1, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff feb7 	bl	8006066 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	461a      	mov	r2, r3
 80062fe:	69b9      	ldr	r1, [r7, #24]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff05 	bl	8006110 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d111      	bne.n	8006332 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2bff      	cmp	r3, #255	; 0xff
 8006312:	d807      	bhi.n	8006324 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	461a      	mov	r2, r3
 800631a:	69b9      	ldr	r1, [r7, #24]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff34 	bl	800618a <LL_GPIO_SetAFPin_0_7>
 8006322:	e006      	b.n	8006332 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	461a      	mov	r2, r3
 800632a:	69b9      	ldr	r1, [r7, #24]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff69 	bl	8006204 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	461a      	mov	r2, r3
 8006338:	69b9      	ldr	r1, [r7, #24]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fe56 	bl	8005fec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1af      	bne.n	80062b4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <LL_RCC_HSI_IsReady>:
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <LL_RCC_HSI_IsReady+0x24>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d101      	bne.n	8006376 <LL_RCC_HSI_IsReady+0x16>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <LL_RCC_HSI_IsReady+0x18>
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40021000 	.word	0x40021000

08006388 <LL_RCC_LSE_IsReady>:
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <LL_RCC_LSE_IsReady+0x24>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d101      	bne.n	800639e <LL_RCC_LSE_IsReady+0x16>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <LL_RCC_LSE_IsReady+0x18>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40021000 	.word	0x40021000

080063b0 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d101      	bne.n	80063c4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	40021000 	.word	0x40021000

080063d4 <LL_RCC_MSI_GetRange>:
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <LL_RCC_MSI_GetRange+0x18>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40021000 	.word	0x40021000

080063f0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80063f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80063fe:	4618      	mov	r0, r3
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40021000 	.word	0x40021000

0800640c <LL_RCC_GetSysClkSource>:
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <LL_RCC_GetSysClkSource+0x18>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000

08006428 <LL_RCC_GetAHBPrescaler>:
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <LL_RCC_GetAHBPrescaler+0x18>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40021000 	.word	0x40021000

08006444 <LL_RCC_GetAPB1Prescaler>:
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <LL_RCC_GetAPB1Prescaler+0x18>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006450:	4618      	mov	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40021000 	.word	0x40021000

08006460 <LL_RCC_GetAPB2Prescaler>:
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800646c:	4618      	mov	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40021000 	.word	0x40021000

0800647c <LL_RCC_GetUSARTClockSource>:
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <LL_RCC_GetUSARTClockSource+0x24>)
 8006486:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	401a      	ands	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	4313      	orrs	r3, r2
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40021000 	.word	0x40021000

080064a4 <LL_RCC_GetUARTClockSource>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80064ac:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <LL_RCC_GetUARTClockSource+0x24>)
 80064ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	401a      	ands	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	4313      	orrs	r3, r2
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40021000 	.word	0x40021000

080064cc <LL_RCC_PLL_GetMainSource>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <LL_RCC_PLL_GetMainSource+0x18>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0303 	and.w	r3, r3, #3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000

080064e8 <LL_RCC_PLL_GetN>:
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <LL_RCC_PLL_GetN+0x18>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40021000 	.word	0x40021000

08006504 <LL_RCC_PLL_GetR>:
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <LL_RCC_PLL_GetR+0x18>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <LL_RCC_PLL_GetDivider>:
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <LL_RCC_PLL_GetDivider+0x18>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000

0800653c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d137      	bne.n	80065be <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff94 	bl	800647c <LL_RCC_GetUSARTClockSource>
 8006554:	4603      	mov	r3, r0
 8006556:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800655a:	2b03      	cmp	r3, #3
 800655c:	f200 80b3 	bhi.w	80066c6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065a7 	.word	0x080065a7
 800656c:	08006579 	.word	0x08006579
 8006570:	08006581 	.word	0x08006581
 8006574:	08006593 	.word	0x08006593
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006578:	f000 f95c 	bl	8006834 <RCC_GetSystemClockFreq>
 800657c:	60f8      	str	r0, [r7, #12]
        break;
 800657e:	e0b5      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006580:	f7ff feee 	bl	8006360 <LL_RCC_HSI_IsReady>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 809f 	beq.w	80066ca <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800658c:	4b5a      	ldr	r3, [pc, #360]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800658e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006590:	e09b      	b.n	80066ca <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006592:	f7ff fef9 	bl	8006388 <LL_RCC_LSE_IsReady>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8098 	beq.w	80066ce <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80065a4:	e093      	b.n	80066ce <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80065a6:	f000 f945 	bl	8006834 <RCC_GetSystemClockFreq>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 f9d1 	bl	8006954 <RCC_GetHCLKClockFreq>
 80065b2:	4603      	mov	r3, r0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 f9f7 	bl	80069a8 <RCC_GetPCLK2ClockFreq>
 80065ba:	60f8      	str	r0, [r7, #12]
        break;
 80065bc:	e096      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d146      	bne.n	8006652 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff59 	bl	800647c <LL_RCC_GetUSARTClockSource>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d87e      	bhi.n	80066d2 <LL_RCC_GetUSARTClockFreq+0x196>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <LL_RCC_GetUSARTClockFreq+0xa0>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	0800663b 	.word	0x0800663b
 80065e0:	080066d3 	.word	0x080066d3
 80065e4:	080066d3 	.word	0x080066d3
 80065e8:	080066d3 	.word	0x080066d3
 80065ec:	08006611 	.word	0x08006611
 80065f0:	080066d3 	.word	0x080066d3
 80065f4:	080066d3 	.word	0x080066d3
 80065f8:	080066d3 	.word	0x080066d3
 80065fc:	08006619 	.word	0x08006619
 8006600:	080066d3 	.word	0x080066d3
 8006604:	080066d3 	.word	0x080066d3
 8006608:	080066d3 	.word	0x080066d3
 800660c:	08006629 	.word	0x08006629
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006610:	f000 f910 	bl	8006834 <RCC_GetSystemClockFreq>
 8006614:	60f8      	str	r0, [r7, #12]
        break;
 8006616:	e069      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006618:	f7ff fea2 	bl	8006360 <LL_RCC_HSI_IsReady>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d059      	beq.n	80066d6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006622:	4b35      	ldr	r3, [pc, #212]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006624:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006626:	e056      	b.n	80066d6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006628:	f7ff feae 	bl	8006388 <LL_RCC_LSE_IsReady>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d053      	beq.n	80066da <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006636:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006638:	e04f      	b.n	80066da <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800663a:	f000 f8fb 	bl	8006834 <RCC_GetSystemClockFreq>
 800663e:	4603      	mov	r3, r0
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f987 	bl	8006954 <RCC_GetHCLKClockFreq>
 8006646:	4603      	mov	r3, r0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f999 	bl	8006980 <RCC_GetPCLK1ClockFreq>
 800664e:	60f8      	str	r0, [r7, #12]
        break;
 8006650:	e04c      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b30      	cmp	r3, #48	; 0x30
 8006656:	d142      	bne.n	80066de <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff0f 	bl	800647c <LL_RCC_GetUSARTClockSource>
 800665e:	4603      	mov	r3, r0
 8006660:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006664:	d01a      	beq.n	800669c <LL_RCC_GetUSARTClockFreq+0x160>
 8006666:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800666a:	d83a      	bhi.n	80066e2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800666c:	4a23      	ldr	r2, [pc, #140]	; (80066fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00c      	beq.n	800668c <LL_RCC_GetUSARTClockFreq+0x150>
 8006672:	4a22      	ldr	r2, [pc, #136]	; (80066fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d834      	bhi.n	80066e2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800667c:	d017      	beq.n	80066ae <LL_RCC_GetUSARTClockFreq+0x172>
 800667e:	4a20      	ldr	r2, [pc, #128]	; (8006700 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d12e      	bne.n	80066e2 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006684:	f000 f8d6 	bl	8006834 <RCC_GetSystemClockFreq>
 8006688:	60f8      	str	r0, [r7, #12]
          break;
 800668a:	e02f      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800668c:	f7ff fe68 	bl	8006360 <LL_RCC_HSI_IsReady>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d027      	beq.n	80066e6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006698:	60fb      	str	r3, [r7, #12]
          }
          break;
 800669a:	e024      	b.n	80066e6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800669c:	f7ff fe74 	bl	8006388 <LL_RCC_LSE_IsReady>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d021      	beq.n	80066ea <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	60fb      	str	r3, [r7, #12]
          }
          break;
 80066ac:	e01d      	b.n	80066ea <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80066ae:	f000 f8c1 	bl	8006834 <RCC_GetSystemClockFreq>
 80066b2:	4603      	mov	r3, r0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f94d 	bl	8006954 <RCC_GetHCLKClockFreq>
 80066ba:	4603      	mov	r3, r0
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f95f 	bl	8006980 <RCC_GetPCLK1ClockFreq>
 80066c2:	60f8      	str	r0, [r7, #12]
          break;
 80066c4:	e012      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066c6:	bf00      	nop
 80066c8:	e010      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066ca:	bf00      	nop
 80066cc:	e00e      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066ce:	bf00      	nop
 80066d0:	e00c      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066d2:	bf00      	nop
 80066d4:	e00a      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066d6:	bf00      	nop
 80066d8:	e008      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80066da:	bf00      	nop
 80066dc:	e006      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80066ea:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80066ec:	68fb      	ldr	r3, [r7, #12]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	00300020 	.word	0x00300020
 8006700:	00300010 	.word	0x00300010

08006704 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2bc0      	cmp	r3, #192	; 0xc0
 8006714:	d136      	bne.n	8006784 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fec4 	bl	80064a4 <LL_RCC_GetUARTClockSource>
 800671c:	4603      	mov	r3, r0
 800671e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006722:	d01a      	beq.n	800675a <LL_RCC_GetUARTClockFreq+0x56>
 8006724:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006728:	d82e      	bhi.n	8006788 <LL_RCC_GetUARTClockFreq+0x84>
 800672a:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <LL_RCC_GetUARTClockFreq+0x11c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00c      	beq.n	800674a <LL_RCC_GetUARTClockFreq+0x46>
 8006730:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d828      	bhi.n	8006788 <LL_RCC_GetUARTClockFreq+0x84>
 8006736:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800673a:	d017      	beq.n	800676c <LL_RCC_GetUARTClockFreq+0x68>
 800673c:	4a39      	ldr	r2, [pc, #228]	; (8006824 <LL_RCC_GetUARTClockFreq+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d122      	bne.n	8006788 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006742:	f000 f877 	bl	8006834 <RCC_GetSystemClockFreq>
 8006746:	60f8      	str	r0, [r7, #12]
        break;
 8006748:	e023      	b.n	8006792 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800674a:	f7ff fe09 	bl	8006360 <LL_RCC_HSI_IsReady>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006754:	4b34      	ldr	r3, [pc, #208]	; (8006828 <LL_RCC_GetUARTClockFreq+0x124>)
 8006756:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006758:	e018      	b.n	800678c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800675a:	f7ff fe15 	bl	8006388 <LL_RCC_LSE_IsReady>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006768:	60fb      	str	r3, [r7, #12]
        }
        break;
 800676a:	e011      	b.n	8006790 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800676c:	f000 f862 	bl	8006834 <RCC_GetSystemClockFreq>
 8006770:	4603      	mov	r3, r0
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f8ee 	bl	8006954 <RCC_GetHCLKClockFreq>
 8006778:	4603      	mov	r3, r0
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f900 	bl	8006980 <RCC_GetPCLK1ClockFreq>
 8006780:	60f8      	str	r0, [r7, #12]
        break;
 8006782:	e006      	b.n	8006792 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006784:	bf00      	nop
 8006786:	e004      	b.n	8006792 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006788:	bf00      	nop
 800678a:	e002      	b.n	8006792 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006790:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006798:	d136      	bne.n	8006808 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fe82 	bl	80064a4 <LL_RCC_GetUARTClockSource>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80067a6:	d01a      	beq.n	80067de <LL_RCC_GetUARTClockFreq+0xda>
 80067a8:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80067ac:	d82e      	bhi.n	800680c <LL_RCC_GetUARTClockFreq+0x108>
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <LL_RCC_GetUARTClockFreq+0x128>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00c      	beq.n	80067ce <LL_RCC_GetUARTClockFreq+0xca>
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <LL_RCC_GetUARTClockFreq+0x128>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d828      	bhi.n	800680c <LL_RCC_GetUARTClockFreq+0x108>
 80067ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067be:	d017      	beq.n	80067f0 <LL_RCC_GetUARTClockFreq+0xec>
 80067c0:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <LL_RCC_GetUARTClockFreq+0x12c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d122      	bne.n	800680c <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80067c6:	f000 f835 	bl	8006834 <RCC_GetSystemClockFreq>
 80067ca:	60f8      	str	r0, [r7, #12]
        break;
 80067cc:	e023      	b.n	8006816 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80067ce:	f7ff fdc7 	bl	8006360 <LL_RCC_HSI_IsReady>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01b      	beq.n	8006810 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <LL_RCC_GetUARTClockFreq+0x124>)
 80067da:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067dc:	e018      	b.n	8006810 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80067de:	f7ff fdd3 	bl	8006388 <LL_RCC_LSE_IsReady>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80067e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067ee:	e011      	b.n	8006814 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80067f0:	f000 f820 	bl	8006834 <RCC_GetSystemClockFreq>
 80067f4:	4603      	mov	r3, r0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f8ac 	bl	8006954 <RCC_GetHCLKClockFreq>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f8be 	bl	8006980 <RCC_GetPCLK1ClockFreq>
 8006804:	60f8      	str	r0, [r7, #12]
        break;
 8006806:	e006      	b.n	8006816 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006814:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006816:	68fb      	ldr	r3, [r7, #12]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	00c00080 	.word	0x00c00080
 8006824:	00c00040 	.word	0x00c00040
 8006828:	00f42400 	.word	0x00f42400
 800682c:	03000200 	.word	0x03000200
 8006830:	03000100 	.word	0x03000100

08006834 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800683a:	f7ff fde7 	bl	800640c <LL_RCC_GetSysClkSource>
 800683e:	4603      	mov	r3, r0
 8006840:	2b0c      	cmp	r3, #12
 8006842:	d851      	bhi.n	80068e8 <RCC_GetSystemClockFreq+0xb4>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <RCC_GetSystemClockFreq+0x18>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006881 	.word	0x08006881
 8006850:	080068e9 	.word	0x080068e9
 8006854:	080068e9 	.word	0x080068e9
 8006858:	080068e9 	.word	0x080068e9
 800685c:	080068d5 	.word	0x080068d5
 8006860:	080068e9 	.word	0x080068e9
 8006864:	080068e9 	.word	0x080068e9
 8006868:	080068e9 	.word	0x080068e9
 800686c:	080068db 	.word	0x080068db
 8006870:	080068e9 	.word	0x080068e9
 8006874:	080068e9 	.word	0x080068e9
 8006878:	080068e9 	.word	0x080068e9
 800687c:	080068e1 	.word	0x080068e1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006880:	f7ff fd96 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d111      	bne.n	80068ae <RCC_GetSystemClockFreq+0x7a>
 800688a:	f7ff fd91 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <RCC_GetSystemClockFreq+0x6a>
 8006894:	f7ff fd9e 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006898:	4603      	mov	r3, r0
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	e003      	b.n	80068a6 <RCC_GetSystemClockFreq+0x72>
 800689e:	f7ff fda7 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80068a2:	4603      	mov	r3, r0
 80068a4:	0a1b      	lsrs	r3, r3, #8
 80068a6:	4a28      	ldr	r2, [pc, #160]	; (8006948 <RCC_GetSystemClockFreq+0x114>)
 80068a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ac:	e010      	b.n	80068d0 <RCC_GetSystemClockFreq+0x9c>
 80068ae:	f7ff fd7f 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d004      	beq.n	80068c2 <RCC_GetSystemClockFreq+0x8e>
 80068b8:	f7ff fd8c 	bl	80063d4 <LL_RCC_MSI_GetRange>
 80068bc:	4603      	mov	r3, r0
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	e003      	b.n	80068ca <RCC_GetSystemClockFreq+0x96>
 80068c2:	f7ff fd95 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80068c6:	4603      	mov	r3, r0
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <RCC_GetSystemClockFreq+0x114>)
 80068cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80068d2:	e033      	b.n	800693c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <RCC_GetSystemClockFreq+0x118>)
 80068d6:	607b      	str	r3, [r7, #4]
      break;
 80068d8:	e030      	b.n	800693c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <RCC_GetSystemClockFreq+0x11c>)
 80068dc:	607b      	str	r3, [r7, #4]
      break;
 80068de:	e02d      	b.n	800693c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80068e0:	f000 f876 	bl	80069d0 <RCC_PLL_GetFreqDomain_SYS>
 80068e4:	6078      	str	r0, [r7, #4]
      break;
 80068e6:	e029      	b.n	800693c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80068e8:	f7ff fd62 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d111      	bne.n	8006916 <RCC_GetSystemClockFreq+0xe2>
 80068f2:	f7ff fd5d 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <RCC_GetSystemClockFreq+0xd2>
 80068fc:	f7ff fd6a 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006900:	4603      	mov	r3, r0
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	e003      	b.n	800690e <RCC_GetSystemClockFreq+0xda>
 8006906:	f7ff fd73 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 800690a:	4603      	mov	r3, r0
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	4a0e      	ldr	r2, [pc, #56]	; (8006948 <RCC_GetSystemClockFreq+0x114>)
 8006910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006914:	e010      	b.n	8006938 <RCC_GetSystemClockFreq+0x104>
 8006916:	f7ff fd4b 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <RCC_GetSystemClockFreq+0xf6>
 8006920:	f7ff fd58 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006924:	4603      	mov	r3, r0
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	e003      	b.n	8006932 <RCC_GetSystemClockFreq+0xfe>
 800692a:	f7ff fd61 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 800692e:	4603      	mov	r3, r0
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	4a05      	ldr	r2, [pc, #20]	; (8006948 <RCC_GetSystemClockFreq+0x114>)
 8006934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006938:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800693a:	bf00      	nop
  }

  return frequency;
 800693c:	687b      	ldr	r3, [r7, #4]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	080082cc 	.word	0x080082cc
 800694c:	00f42400 	.word	0x00f42400
 8006950:	007a1200 	.word	0x007a1200

08006954 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800695c:	f7ff fd64 	bl	8006428 <LL_RCC_GetAHBPrescaler>
 8006960:	4603      	mov	r3, r0
 8006962:	091b      	lsrs	r3, r3, #4
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <RCC_GetHCLKClockFreq+0x28>)
 800696a:	5cd3      	ldrb	r3, [r2, r3]
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	40d3      	lsrs	r3, r2
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	080082b4 	.word	0x080082b4

08006980 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006988:	f7ff fd5c 	bl	8006444 <LL_RCC_GetAPB1Prescaler>
 800698c:	4603      	mov	r3, r0
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8006992:	5cd3      	ldrb	r3, [r2, r3]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	40d3      	lsrs	r3, r2
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	080082c4 	.word	0x080082c4

080069a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80069b0:	f7ff fd56 	bl	8006460 <LL_RCC_GetAPB2Prescaler>
 80069b4:	4603      	mov	r3, r0
 80069b6:	0adb      	lsrs	r3, r3, #11
 80069b8:	4a04      	ldr	r2, [pc, #16]	; (80069cc <RCC_GetPCLK2ClockFreq+0x24>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	461a      	mov	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	40d3      	lsrs	r3, r2
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	080082c4 	.word	0x080082c4

080069d0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80069d6:	f7ff fd79 	bl	80064cc <LL_RCC_PLL_GetMainSource>
 80069da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d036      	beq.n	8006a50 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d836      	bhi.n	8006a56 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d003      	beq.n	80069f6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d02a      	beq.n	8006a4a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80069f4:	e02f      	b.n	8006a56 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80069f6:	f7ff fcdb 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d111      	bne.n	8006a24 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006a00:	f7ff fcd6 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006a0a:	f7ff fce3 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	e003      	b.n	8006a1c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006a14:	f7ff fcec 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	4a2f      	ldr	r2, [pc, #188]	; (8006adc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a22:	e010      	b.n	8006a46 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006a24:	f7ff fcc4 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006a2e:	f7ff fcd1 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006a32:	4603      	mov	r3, r0
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	e003      	b.n	8006a40 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006a38:	f7ff fcda 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	4a26      	ldr	r2, [pc, #152]	; (8006adc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a46:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006a48:	e02f      	b.n	8006aaa <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006a4a:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006a4c:	607b      	str	r3, [r7, #4]
      break;
 8006a4e:	e02c      	b.n	8006aaa <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006a50:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006a52:	607b      	str	r3, [r7, #4]
      break;
 8006a54:	e029      	b.n	8006aaa <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a56:	f7ff fcab 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d111      	bne.n	8006a84 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006a60:	f7ff fca6 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006a6a:	f7ff fcb3 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	0a1b      	lsrs	r3, r3, #8
 8006a72:	e003      	b.n	8006a7c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006a74:	f7ff fcbc 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	4a17      	ldr	r2, [pc, #92]	; (8006adc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a82:	e010      	b.n	8006aa6 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006a84:	f7ff fc94 	bl	80063b0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006a8e:	f7ff fca1 	bl	80063d4 <LL_RCC_MSI_GetRange>
 8006a92:	4603      	mov	r3, r0
 8006a94:	091b      	lsrs	r3, r3, #4
 8006a96:	e003      	b.n	8006aa0 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006a98:	f7ff fcaa 	bl	80063f0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	4a0e      	ldr	r2, [pc, #56]	; (8006adc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006aa8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006aaa:	f7ff fd39 	bl	8006520 <LL_RCC_PLL_GetDivider>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	fbb2 f4f3 	udiv	r4, r2, r3
 8006aba:	f7ff fd15 	bl	80064e8 <LL_RCC_PLL_GetN>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	fb03 f404 	mul.w	r4, r3, r4
 8006ac4:	f7ff fd1e 	bl	8006504 <LL_RCC_PLL_GetR>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	0e5b      	lsrs	r3, r3, #25
 8006acc:	3301      	adds	r3, #1
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd90      	pop	{r4, r7, pc}
 8006adc:	080082cc 	.word	0x080082cc
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	007a1200 	.word	0x007a1200

08006ae8 <LL_SPI_IsEnabled>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d101      	bne.n	8006b00 <LL_SPI_IsEnabled+0x18>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <LL_SPI_IsEnabled+0x1a>
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <LL_SPI_SetRxFIFOThreshold>:
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	605a      	str	r2, [r3, #4]
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <LL_SPI_SetCRCPolynomial>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	611a      	str	r2, [r3, #16]
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff ffc0 	bl	8006ae8 <LL_SPI_IsEnabled>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d145      	bne.n	8006bfa <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b76:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	6811      	ldr	r1, [r2, #0]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	6852      	ldr	r2, [r2, #4]
 8006b82:	4311      	orrs	r1, r2
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	68d2      	ldr	r2, [r2, #12]
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	6912      	ldr	r2, [r2, #16]
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	6952      	ldr	r2, [r2, #20]
 8006b94:	4311      	orrs	r1, r2
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	6992      	ldr	r2, [r2, #24]
 8006b9a:	4311      	orrs	r1, r2
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	69d2      	ldr	r2, [r2, #28]
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	6a12      	ldr	r2, [r2, #32]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bb6:	f023 0304 	bic.w	r3, r3, #4
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	6891      	ldr	r1, [r2, #8]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	6952      	ldr	r2, [r2, #20]
 8006bc2:	0c12      	lsrs	r2, r2, #16
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd4:	d204      	bcs.n	8006be0 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8006bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff ff97 	bl	8006b0e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be8:	d105      	bne.n	8006bf6 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff9f 	bl	8006b34 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <LL_TIM_SetPrescaler>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_TIM_SetAutoReload>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_TIM_SetRepetitionCounter>:
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	615a      	str	r2, [r3, #20]
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <LL_TIM_Init+0x108>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <LL_TIM_Init+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d00f      	beq.n	8006cb8 <LL_TIM_Init+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3a      	ldr	r2, [pc, #232]	; (8006d84 <LL_TIM_Init+0x10c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <LL_TIM_Init+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <LL_TIM_Init+0x110>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <LL_TIM_Init+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a38      	ldr	r2, [pc, #224]	; (8006d8c <LL_TIM_Init+0x114>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <LL_TIM_Init+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a37      	ldr	r2, [pc, #220]	; (8006d90 <LL_TIM_Init+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d106      	bne.n	8006cc6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <LL_TIM_Init+0x108>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01f      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d01b      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2a      	ldr	r2, [pc, #168]	; (8006d84 <LL_TIM_Init+0x10c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d017      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <LL_TIM_Init+0x110>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <LL_TIM_Init+0x114>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00f      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <LL_TIM_Init+0x118>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <LL_TIM_Init+0x11c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a25      	ldr	r2, [pc, #148]	; (8006d98 <LL_TIM_Init+0x120>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <LL_TIM_Init+0x96>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a24      	ldr	r2, [pc, #144]	; (8006d9c <LL_TIM_Init+0x124>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d106      	bne.n	8006d1c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ff79 	bl	8006c20 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff65 	bl	8006c04 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a10      	ldr	r2, [pc, #64]	; (8006d80 <LL_TIM_Init+0x108>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00f      	beq.n	8006d62 <LL_TIM_Init+0xea>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <LL_TIM_Init+0x118>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00b      	beq.n	8006d62 <LL_TIM_Init+0xea>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a11      	ldr	r2, [pc, #68]	; (8006d94 <LL_TIM_Init+0x11c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <LL_TIM_Init+0xea>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a10      	ldr	r2, [pc, #64]	; (8006d98 <LL_TIM_Init+0x120>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <LL_TIM_Init+0xea>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a0f      	ldr	r2, [pc, #60]	; (8006d9c <LL_TIM_Init+0x124>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d105      	bne.n	8006d6e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff67 	bl	8006c3c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ff72 	bl	8006c58 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40013400 	.word	0x40013400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <LL_USART_IsEnabled>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <LL_USART_IsEnabled+0x18>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <LL_USART_IsEnabled+0x1a>
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_USART_SetStopBitsLength>:
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_USART_SetHWFlowCtrl>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	609a      	str	r2, [r3, #8]
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <LL_USART_SetBaudRate>:
{
 8006e12:	b480      	push	{r7}
 8006e14:	b087      	sub	sp, #28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d11a      	bne.n	8006e5e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	005a      	lsls	r2, r3, #1
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	441a      	add	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006e42:	4013      	ands	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	60da      	str	r2, [r3, #12]
}
 8006e5c:	e00a      	b.n	8006e74 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	085a      	lsrs	r2, r3, #1
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	60da      	str	r2, [r3, #12]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff ff84 	bl	8006da0 <LL_USART_IsEnabled>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d15b      	bne.n	8006f56 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <LL_USART_Init+0xe0>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	6851      	ldr	r1, [r2, #4]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	68d2      	ldr	r2, [r2, #12]
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	6912      	ldr	r2, [r2, #16]
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	6992      	ldr	r2, [r2, #24]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff ff7c 	bl	8006dc6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ff89 	bl	8006dec <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <LL_USART_Init+0xe4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d104      	bne.n	8006eec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f7ff fb2a 	bl	800653c <LL_RCC_GetUSARTClockFreq>
 8006ee8:	60b8      	str	r0, [r7, #8]
 8006eea:	e023      	b.n	8006f34 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <LL_USART_Init+0xe8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d104      	bne.n	8006efe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006ef4:	200c      	movs	r0, #12
 8006ef6:	f7ff fb21 	bl	800653c <LL_RCC_GetUSARTClockFreq>
 8006efa:	60b8      	str	r0, [r7, #8]
 8006efc:	e01a      	b.n	8006f34 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	; (8006f6c <LL_USART_Init+0xec>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d104      	bne.n	8006f10 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006f06:	2030      	movs	r0, #48	; 0x30
 8006f08:	f7ff fb18 	bl	800653c <LL_RCC_GetUSARTClockFreq>
 8006f0c:	60b8      	str	r0, [r7, #8]
 8006f0e:	e011      	b.n	8006f34 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <LL_USART_Init+0xf0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d104      	bne.n	8006f22 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006f18:	20c0      	movs	r0, #192	; 0xc0
 8006f1a:	f7ff fbf3 	bl	8006704 <LL_RCC_GetUARTClockFreq>
 8006f1e:	60b8      	str	r0, [r7, #8]
 8006f20:	e008      	b.n	8006f34 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <LL_USART_Init+0xf4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d104      	bne.n	8006f34 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006f2a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006f2e:	f7ff fbe9 	bl	8006704 <LL_RCC_GetUARTClockFreq>
 8006f32:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00d      	beq.n	8006f56 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ff5e 	bl	8006e12 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	efff69f3 	.word	0xefff69f3
 8006f64:	40013800 	.word	0x40013800
 8006f68:	40004400 	.word	0x40004400
 8006f6c:	40004800 	.word	0x40004800
 8006f70:	40004c00 	.word	0x40004c00
 8006f74:	40005000 	.word	0x40005000

08006f78 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	4a07      	ldr	r2, [pc, #28]	; (8006fa8 <LL_InitTick+0x30>)
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <LL_InitTick+0x30>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <LL_InitTick+0x30>)
 8006f98:	2205      	movs	r2, #5
 8006f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	e000e010 	.word	0xe000e010

08006fac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006fb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff ffdd 	bl	8006f78 <LL_InitTick>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <LL_mDelay+0x4c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006fda:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d00c      	beq.n	8006ffe <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8006fea:	e008      	b.n	8006ffe <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <LL_mDelay+0x4c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <LL_mDelay+0x36>
    {
      tmpDelay--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f3      	bne.n	8006fec <LL_mDelay+0x24>
    }
  }
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000e010 	.word	0xe000e010

08007018 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007020:	4a04      	ldr	r2, [pc, #16]	; (8007034 <LL_SetSystemCoreClock+0x1c>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6013      	str	r3, [r2, #0]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	2000000c 	.word	0x2000000c

08007038 <__libc_init_array>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	4d0d      	ldr	r5, [pc, #52]	; (8007070 <__libc_init_array+0x38>)
 800703c:	4c0d      	ldr	r4, [pc, #52]	; (8007074 <__libc_init_array+0x3c>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	2600      	movs	r6, #0
 8007044:	42a6      	cmp	r6, r4
 8007046:	d109      	bne.n	800705c <__libc_init_array+0x24>
 8007048:	4d0b      	ldr	r5, [pc, #44]	; (8007078 <__libc_init_array+0x40>)
 800704a:	4c0c      	ldr	r4, [pc, #48]	; (800707c <__libc_init_array+0x44>)
 800704c:	f001 f920 	bl	8008290 <_init>
 8007050:	1b64      	subs	r4, r4, r5
 8007052:	10a4      	asrs	r4, r4, #2
 8007054:	2600      	movs	r6, #0
 8007056:	42a6      	cmp	r6, r4
 8007058:	d105      	bne.n	8007066 <__libc_init_array+0x2e>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007060:	4798      	blx	r3
 8007062:	3601      	adds	r6, #1
 8007064:	e7ee      	b.n	8007044 <__libc_init_array+0xc>
 8007066:	f855 3b04 	ldr.w	r3, [r5], #4
 800706a:	4798      	blx	r3
 800706c:	3601      	adds	r6, #1
 800706e:	e7f2      	b.n	8007056 <__libc_init_array+0x1e>
 8007070:	08008370 	.word	0x08008370
 8007074:	08008370 	.word	0x08008370
 8007078:	08008370 	.word	0x08008370
 800707c:	08008374 	.word	0x08008374

08007080 <memcpy>:
 8007080:	440a      	add	r2, r1
 8007082:	4291      	cmp	r1, r2
 8007084:	f100 33ff 	add.w	r3, r0, #4294967295
 8007088:	d100      	bne.n	800708c <memcpy+0xc>
 800708a:	4770      	bx	lr
 800708c:	b510      	push	{r4, lr}
 800708e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007096:	4291      	cmp	r1, r2
 8007098:	d1f9      	bne.n	800708e <memcpy+0xe>
 800709a:	bd10      	pop	{r4, pc}

0800709c <memset>:
 800709c:	4402      	add	r2, r0
 800709e:	4603      	mov	r3, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>
 80070ac:	0000      	movs	r0, r0
	...

080070b0 <atan>:
 80070b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	ec55 4b10 	vmov	r4, r5, d0
 80070b8:	4bc3      	ldr	r3, [pc, #780]	; (80073c8 <atan+0x318>)
 80070ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070be:	429e      	cmp	r6, r3
 80070c0:	46ab      	mov	fp, r5
 80070c2:	dd18      	ble.n	80070f6 <atan+0x46>
 80070c4:	4bc1      	ldr	r3, [pc, #772]	; (80073cc <atan+0x31c>)
 80070c6:	429e      	cmp	r6, r3
 80070c8:	dc01      	bgt.n	80070ce <atan+0x1e>
 80070ca:	d109      	bne.n	80070e0 <atan+0x30>
 80070cc:	b144      	cbz	r4, 80070e0 <atan+0x30>
 80070ce:	4622      	mov	r2, r4
 80070d0:	462b      	mov	r3, r5
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f87d 	bl	80001d4 <__adddf3>
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
 80070de:	e006      	b.n	80070ee <atan+0x3e>
 80070e0:	f1bb 0f00 	cmp.w	fp, #0
 80070e4:	f300 8131 	bgt.w	800734a <atan+0x29a>
 80070e8:	a59b      	add	r5, pc, #620	; (adr r5, 8007358 <atan+0x2a8>)
 80070ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070ee:	ec45 4b10 	vmov	d0, r4, r5
 80070f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	4bb6      	ldr	r3, [pc, #728]	; (80073d0 <atan+0x320>)
 80070f8:	429e      	cmp	r6, r3
 80070fa:	dc14      	bgt.n	8007126 <atan+0x76>
 80070fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007100:	429e      	cmp	r6, r3
 8007102:	dc0d      	bgt.n	8007120 <atan+0x70>
 8007104:	a396      	add	r3, pc, #600	; (adr r3, 8007360 <atan+0x2b0>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	ee10 0a10 	vmov	r0, s0
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f860 	bl	80001d4 <__adddf3>
 8007114:	4baf      	ldr	r3, [pc, #700]	; (80073d4 <atan+0x324>)
 8007116:	2200      	movs	r2, #0
 8007118:	f7f9 fca2 	bl	8000a60 <__aeabi_dcmpgt>
 800711c:	2800      	cmp	r0, #0
 800711e:	d1e6      	bne.n	80070ee <atan+0x3e>
 8007120:	f04f 3aff 	mov.w	sl, #4294967295
 8007124:	e02b      	b.n	800717e <atan+0xce>
 8007126:	f000 f963 	bl	80073f0 <fabs>
 800712a:	4bab      	ldr	r3, [pc, #684]	; (80073d8 <atan+0x328>)
 800712c:	429e      	cmp	r6, r3
 800712e:	ec55 4b10 	vmov	r4, r5, d0
 8007132:	f300 80bf 	bgt.w	80072b4 <atan+0x204>
 8007136:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800713a:	429e      	cmp	r6, r3
 800713c:	f300 80a0 	bgt.w	8007280 <atan+0x1d0>
 8007140:	ee10 2a10 	vmov	r2, s0
 8007144:	ee10 0a10 	vmov	r0, s0
 8007148:	462b      	mov	r3, r5
 800714a:	4629      	mov	r1, r5
 800714c:	f7f9 f842 	bl	80001d4 <__adddf3>
 8007150:	4ba0      	ldr	r3, [pc, #640]	; (80073d4 <atan+0x324>)
 8007152:	2200      	movs	r2, #0
 8007154:	f7f9 f83c 	bl	80001d0 <__aeabi_dsub>
 8007158:	2200      	movs	r2, #0
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 f835 	bl	80001d4 <__adddf3>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fb0f 	bl	8000794 <__aeabi_ddiv>
 8007176:	f04f 0a00 	mov.w	sl, #0
 800717a:	4604      	mov	r4, r0
 800717c:	460d      	mov	r5, r1
 800717e:	4622      	mov	r2, r4
 8007180:	462b      	mov	r3, r5
 8007182:	4620      	mov	r0, r4
 8007184:	4629      	mov	r1, r5
 8007186:	f7f9 f9db 	bl	8000540 <__aeabi_dmul>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4680      	mov	r8, r0
 8007190:	4689      	mov	r9, r1
 8007192:	f7f9 f9d5 	bl	8000540 <__aeabi_dmul>
 8007196:	a374      	add	r3, pc, #464	; (adr r3, 8007368 <atan+0x2b8>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	f7f9 f9ce 	bl	8000540 <__aeabi_dmul>
 80071a4:	a372      	add	r3, pc, #456	; (adr r3, 8007370 <atan+0x2c0>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f813 	bl	80001d4 <__adddf3>
 80071ae:	4632      	mov	r2, r6
 80071b0:	463b      	mov	r3, r7
 80071b2:	f7f9 f9c5 	bl	8000540 <__aeabi_dmul>
 80071b6:	a370      	add	r3, pc, #448	; (adr r3, 8007378 <atan+0x2c8>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f80a 	bl	80001d4 <__adddf3>
 80071c0:	4632      	mov	r2, r6
 80071c2:	463b      	mov	r3, r7
 80071c4:	f7f9 f9bc 	bl	8000540 <__aeabi_dmul>
 80071c8:	a36d      	add	r3, pc, #436	; (adr r3, 8007380 <atan+0x2d0>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f801 	bl	80001d4 <__adddf3>
 80071d2:	4632      	mov	r2, r6
 80071d4:	463b      	mov	r3, r7
 80071d6:	f7f9 f9b3 	bl	8000540 <__aeabi_dmul>
 80071da:	a36b      	add	r3, pc, #428	; (adr r3, 8007388 <atan+0x2d8>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f8 fff8 	bl	80001d4 <__adddf3>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	f7f9 f9aa 	bl	8000540 <__aeabi_dmul>
 80071ec:	a368      	add	r3, pc, #416	; (adr r3, 8007390 <atan+0x2e0>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f8 ffef 	bl	80001d4 <__adddf3>
 80071f6:	4642      	mov	r2, r8
 80071f8:	464b      	mov	r3, r9
 80071fa:	f7f9 f9a1 	bl	8000540 <__aeabi_dmul>
 80071fe:	a366      	add	r3, pc, #408	; (adr r3, 8007398 <atan+0x2e8>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	4680      	mov	r8, r0
 8007206:	4689      	mov	r9, r1
 8007208:	4630      	mov	r0, r6
 800720a:	4639      	mov	r1, r7
 800720c:	f7f9 f998 	bl	8000540 <__aeabi_dmul>
 8007210:	a363      	add	r3, pc, #396	; (adr r3, 80073a0 <atan+0x2f0>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f8 ffdb 	bl	80001d0 <__aeabi_dsub>
 800721a:	4632      	mov	r2, r6
 800721c:	463b      	mov	r3, r7
 800721e:	f7f9 f98f 	bl	8000540 <__aeabi_dmul>
 8007222:	a361      	add	r3, pc, #388	; (adr r3, 80073a8 <atan+0x2f8>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 ffd2 	bl	80001d0 <__aeabi_dsub>
 800722c:	4632      	mov	r2, r6
 800722e:	463b      	mov	r3, r7
 8007230:	f7f9 f986 	bl	8000540 <__aeabi_dmul>
 8007234:	a35e      	add	r3, pc, #376	; (adr r3, 80073b0 <atan+0x300>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ffc9 	bl	80001d0 <__aeabi_dsub>
 800723e:	4632      	mov	r2, r6
 8007240:	463b      	mov	r3, r7
 8007242:	f7f9 f97d 	bl	8000540 <__aeabi_dmul>
 8007246:	a35c      	add	r3, pc, #368	; (adr r3, 80073b8 <atan+0x308>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f8 ffc0 	bl	80001d0 <__aeabi_dsub>
 8007250:	4632      	mov	r2, r6
 8007252:	463b      	mov	r3, r7
 8007254:	f7f9 f974 	bl	8000540 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f8 ffb8 	bl	80001d4 <__adddf3>
 8007264:	4622      	mov	r2, r4
 8007266:	462b      	mov	r3, r5
 8007268:	f7f9 f96a 	bl	8000540 <__aeabi_dmul>
 800726c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	d14b      	bne.n	800730e <atan+0x25e>
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f8 ffa9 	bl	80001d0 <__aeabi_dsub>
 800727e:	e72c      	b.n	80070da <atan+0x2a>
 8007280:	ee10 0a10 	vmov	r0, s0
 8007284:	4b53      	ldr	r3, [pc, #332]	; (80073d4 <atan+0x324>)
 8007286:	2200      	movs	r2, #0
 8007288:	4629      	mov	r1, r5
 800728a:	f7f8 ffa1 	bl	80001d0 <__aeabi_dsub>
 800728e:	4b51      	ldr	r3, [pc, #324]	; (80073d4 <atan+0x324>)
 8007290:	4606      	mov	r6, r0
 8007292:	460f      	mov	r7, r1
 8007294:	2200      	movs	r2, #0
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f8 ff9b 	bl	80001d4 <__adddf3>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4630      	mov	r0, r6
 80072a4:	4639      	mov	r1, r7
 80072a6:	f7f9 fa75 	bl	8000794 <__aeabi_ddiv>
 80072aa:	f04f 0a01 	mov.w	sl, #1
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	e764      	b.n	800717e <atan+0xce>
 80072b4:	4b49      	ldr	r3, [pc, #292]	; (80073dc <atan+0x32c>)
 80072b6:	429e      	cmp	r6, r3
 80072b8:	da1d      	bge.n	80072f6 <atan+0x246>
 80072ba:	ee10 0a10 	vmov	r0, s0
 80072be:	4b48      	ldr	r3, [pc, #288]	; (80073e0 <atan+0x330>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	4629      	mov	r1, r5
 80072c4:	f7f8 ff84 	bl	80001d0 <__aeabi_dsub>
 80072c8:	4b45      	ldr	r3, [pc, #276]	; (80073e0 <atan+0x330>)
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	2200      	movs	r2, #0
 80072d0:	4620      	mov	r0, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f9 f934 	bl	8000540 <__aeabi_dmul>
 80072d8:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <atan+0x324>)
 80072da:	2200      	movs	r2, #0
 80072dc:	f7f8 ff7a 	bl	80001d4 <__adddf3>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fa54 	bl	8000794 <__aeabi_ddiv>
 80072ec:	f04f 0a02 	mov.w	sl, #2
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	e743      	b.n	800717e <atan+0xce>
 80072f6:	462b      	mov	r3, r5
 80072f8:	ee10 2a10 	vmov	r2, s0
 80072fc:	4939      	ldr	r1, [pc, #228]	; (80073e4 <atan+0x334>)
 80072fe:	2000      	movs	r0, #0
 8007300:	f7f9 fa48 	bl	8000794 <__aeabi_ddiv>
 8007304:	f04f 0a03 	mov.w	sl, #3
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	e737      	b.n	800717e <atan+0xce>
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <atan+0x338>)
 8007310:	4e36      	ldr	r6, [pc, #216]	; (80073ec <atan+0x33c>)
 8007312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007316:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800731a:	e9da 2300 	ldrd	r2, r3, [sl]
 800731e:	f7f8 ff57 	bl	80001d0 <__aeabi_dsub>
 8007322:	4622      	mov	r2, r4
 8007324:	462b      	mov	r3, r5
 8007326:	f7f8 ff53 	bl	80001d0 <__aeabi_dsub>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007332:	f7f8 ff4d 	bl	80001d0 <__aeabi_dsub>
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	4604      	mov	r4, r0
 800733c:	460d      	mov	r5, r1
 800733e:	f6bf aed6 	bge.w	80070ee <atan+0x3e>
 8007342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007346:	461d      	mov	r5, r3
 8007348:	e6d1      	b.n	80070ee <atan+0x3e>
 800734a:	a51d      	add	r5, pc, #116	; (adr r5, 80073c0 <atan+0x310>)
 800734c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007350:	e6cd      	b.n	80070ee <atan+0x3e>
 8007352:	bf00      	nop
 8007354:	f3af 8000 	nop.w
 8007358:	54442d18 	.word	0x54442d18
 800735c:	bff921fb 	.word	0xbff921fb
 8007360:	8800759c 	.word	0x8800759c
 8007364:	7e37e43c 	.word	0x7e37e43c
 8007368:	e322da11 	.word	0xe322da11
 800736c:	3f90ad3a 	.word	0x3f90ad3a
 8007370:	24760deb 	.word	0x24760deb
 8007374:	3fa97b4b 	.word	0x3fa97b4b
 8007378:	a0d03d51 	.word	0xa0d03d51
 800737c:	3fb10d66 	.word	0x3fb10d66
 8007380:	c54c206e 	.word	0xc54c206e
 8007384:	3fb745cd 	.word	0x3fb745cd
 8007388:	920083ff 	.word	0x920083ff
 800738c:	3fc24924 	.word	0x3fc24924
 8007390:	5555550d 	.word	0x5555550d
 8007394:	3fd55555 	.word	0x3fd55555
 8007398:	2c6a6c2f 	.word	0x2c6a6c2f
 800739c:	bfa2b444 	.word	0xbfa2b444
 80073a0:	52defd9a 	.word	0x52defd9a
 80073a4:	3fadde2d 	.word	0x3fadde2d
 80073a8:	af749a6d 	.word	0xaf749a6d
 80073ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80073b0:	fe231671 	.word	0xfe231671
 80073b4:	3fbc71c6 	.word	0x3fbc71c6
 80073b8:	9998ebc4 	.word	0x9998ebc4
 80073bc:	3fc99999 	.word	0x3fc99999
 80073c0:	54442d18 	.word	0x54442d18
 80073c4:	3ff921fb 	.word	0x3ff921fb
 80073c8:	440fffff 	.word	0x440fffff
 80073cc:	7ff00000 	.word	0x7ff00000
 80073d0:	3fdbffff 	.word	0x3fdbffff
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	3ff2ffff 	.word	0x3ff2ffff
 80073dc:	40038000 	.word	0x40038000
 80073e0:	3ff80000 	.word	0x3ff80000
 80073e4:	bff00000 	.word	0xbff00000
 80073e8:	08008320 	.word	0x08008320
 80073ec:	08008300 	.word	0x08008300

080073f0 <fabs>:
 80073f0:	ec51 0b10 	vmov	r0, r1, d0
 80073f4:	ee10 2a10 	vmov	r2, s0
 80073f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073fc:	ec43 2b10 	vmov	d0, r2, r3
 8007400:	4770      	bx	lr
	...

08007404 <pow>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	ed2d 8b02 	vpush	{d8}
 800740a:	eeb0 8a40 	vmov.f32	s16, s0
 800740e:	eef0 8a60 	vmov.f32	s17, s1
 8007412:	ec55 4b11 	vmov	r4, r5, d1
 8007416:	f000 f893 	bl	8007540 <__ieee754_pow>
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	ec57 6b10 	vmov	r6, r7, d0
 8007426:	f7f9 fb25 	bl	8000a74 <__aeabi_dcmpun>
 800742a:	2800      	cmp	r0, #0
 800742c:	d13b      	bne.n	80074a6 <pow+0xa2>
 800742e:	ec51 0b18 	vmov	r0, r1, d8
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	f7f9 faeb 	bl	8000a10 <__aeabi_dcmpeq>
 800743a:	b1b8      	cbz	r0, 800746c <pow+0x68>
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4620      	mov	r0, r4
 8007442:	4629      	mov	r1, r5
 8007444:	f7f9 fae4 	bl	8000a10 <__aeabi_dcmpeq>
 8007448:	2800      	cmp	r0, #0
 800744a:	d146      	bne.n	80074da <pow+0xd6>
 800744c:	ec45 4b10 	vmov	d0, r4, r5
 8007450:	f000 fe86 	bl	8008160 <finite>
 8007454:	b338      	cbz	r0, 80074a6 <pow+0xa2>
 8007456:	2200      	movs	r2, #0
 8007458:	2300      	movs	r3, #0
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f9 fae1 	bl	8000a24 <__aeabi_dcmplt>
 8007462:	b300      	cbz	r0, 80074a6 <pow+0xa2>
 8007464:	f000 ff0e 	bl	8008284 <__errno>
 8007468:	2322      	movs	r3, #34	; 0x22
 800746a:	e01b      	b.n	80074a4 <pow+0xa0>
 800746c:	ec47 6b10 	vmov	d0, r6, r7
 8007470:	f000 fe76 	bl	8008160 <finite>
 8007474:	b9e0      	cbnz	r0, 80074b0 <pow+0xac>
 8007476:	eeb0 0a48 	vmov.f32	s0, s16
 800747a:	eef0 0a68 	vmov.f32	s1, s17
 800747e:	f000 fe6f 	bl	8008160 <finite>
 8007482:	b1a8      	cbz	r0, 80074b0 <pow+0xac>
 8007484:	ec45 4b10 	vmov	d0, r4, r5
 8007488:	f000 fe6a 	bl	8008160 <finite>
 800748c:	b180      	cbz	r0, 80074b0 <pow+0xac>
 800748e:	4632      	mov	r2, r6
 8007490:	463b      	mov	r3, r7
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 faed 	bl	8000a74 <__aeabi_dcmpun>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0e2      	beq.n	8007464 <pow+0x60>
 800749e:	f000 fef1 	bl	8008284 <__errno>
 80074a2:	2321      	movs	r3, #33	; 0x21
 80074a4:	6003      	str	r3, [r0, #0]
 80074a6:	ecbd 8b02 	vpop	{d8}
 80074aa:	ec47 6b10 	vmov	d0, r6, r7
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f9 faaa 	bl	8000a10 <__aeabi_dcmpeq>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0f2      	beq.n	80074a6 <pow+0xa2>
 80074c0:	eeb0 0a48 	vmov.f32	s0, s16
 80074c4:	eef0 0a68 	vmov.f32	s1, s17
 80074c8:	f000 fe4a 	bl	8008160 <finite>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d0ea      	beq.n	80074a6 <pow+0xa2>
 80074d0:	ec45 4b10 	vmov	d0, r4, r5
 80074d4:	f000 fe44 	bl	8008160 <finite>
 80074d8:	e7c3      	b.n	8007462 <pow+0x5e>
 80074da:	4f01      	ldr	r7, [pc, #4]	; (80074e0 <pow+0xdc>)
 80074dc:	2600      	movs	r6, #0
 80074de:	e7e2      	b.n	80074a6 <pow+0xa2>
 80074e0:	3ff00000 	.word	0x3ff00000

080074e4 <sqrt>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	ed2d 8b02 	vpush	{d8}
 80074ea:	ec55 4b10 	vmov	r4, r5, d0
 80074ee:	f000 fd55 	bl	8007f9c <__ieee754_sqrt>
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	eeb0 8a40 	vmov.f32	s16, s0
 80074fe:	eef0 8a60 	vmov.f32	s17, s1
 8007502:	f7f9 fab7 	bl	8000a74 <__aeabi_dcmpun>
 8007506:	b990      	cbnz	r0, 800752e <sqrt+0x4a>
 8007508:	2200      	movs	r2, #0
 800750a:	2300      	movs	r3, #0
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 fa88 	bl	8000a24 <__aeabi_dcmplt>
 8007514:	b158      	cbz	r0, 800752e <sqrt+0x4a>
 8007516:	f000 feb5 	bl	8008284 <__errno>
 800751a:	2321      	movs	r3, #33	; 0x21
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	f7f9 f935 	bl	8000794 <__aeabi_ddiv>
 800752a:	ec41 0b18 	vmov	d8, r0, r1
 800752e:	eeb0 0a48 	vmov.f32	s0, s16
 8007532:	eef0 0a68 	vmov.f32	s1, s17
 8007536:	ecbd 8b02 	vpop	{d8}
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	0000      	movs	r0, r0
	...

08007540 <__ieee754_pow>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ed2d 8b06 	vpush	{d8-d10}
 8007548:	b089      	sub	sp, #36	; 0x24
 800754a:	ed8d 1b00 	vstr	d1, [sp]
 800754e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007552:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007556:	ea58 0102 	orrs.w	r1, r8, r2
 800755a:	ec57 6b10 	vmov	r6, r7, d0
 800755e:	d115      	bne.n	800758c <__ieee754_pow+0x4c>
 8007560:	19b3      	adds	r3, r6, r6
 8007562:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007566:	4152      	adcs	r2, r2
 8007568:	4299      	cmp	r1, r3
 800756a:	4b89      	ldr	r3, [pc, #548]	; (8007790 <__ieee754_pow+0x250>)
 800756c:	4193      	sbcs	r3, r2
 800756e:	f080 84d2 	bcs.w	8007f16 <__ieee754_pow+0x9d6>
 8007572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f8 fe2b 	bl	80001d4 <__adddf3>
 800757e:	ec41 0b10 	vmov	d0, r0, r1
 8007582:	b009      	add	sp, #36	; 0x24
 8007584:	ecbd 8b06 	vpop	{d8-d10}
 8007588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758c:	4b81      	ldr	r3, [pc, #516]	; (8007794 <__ieee754_pow+0x254>)
 800758e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007592:	429c      	cmp	r4, r3
 8007594:	ee10 aa10 	vmov	sl, s0
 8007598:	463d      	mov	r5, r7
 800759a:	dc06      	bgt.n	80075aa <__ieee754_pow+0x6a>
 800759c:	d101      	bne.n	80075a2 <__ieee754_pow+0x62>
 800759e:	2e00      	cmp	r6, #0
 80075a0:	d1e7      	bne.n	8007572 <__ieee754_pow+0x32>
 80075a2:	4598      	cmp	r8, r3
 80075a4:	dc01      	bgt.n	80075aa <__ieee754_pow+0x6a>
 80075a6:	d10f      	bne.n	80075c8 <__ieee754_pow+0x88>
 80075a8:	b172      	cbz	r2, 80075c8 <__ieee754_pow+0x88>
 80075aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80075ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80075b2:	ea55 050a 	orrs.w	r5, r5, sl
 80075b6:	d1dc      	bne.n	8007572 <__ieee754_pow+0x32>
 80075b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80075bc:	18db      	adds	r3, r3, r3
 80075be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80075c2:	4152      	adcs	r2, r2
 80075c4:	429d      	cmp	r5, r3
 80075c6:	e7d0      	b.n	800756a <__ieee754_pow+0x2a>
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	da3b      	bge.n	8007644 <__ieee754_pow+0x104>
 80075cc:	4b72      	ldr	r3, [pc, #456]	; (8007798 <__ieee754_pow+0x258>)
 80075ce:	4598      	cmp	r8, r3
 80075d0:	dc51      	bgt.n	8007676 <__ieee754_pow+0x136>
 80075d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80075d6:	4598      	cmp	r8, r3
 80075d8:	f340 84ac 	ble.w	8007f34 <__ieee754_pow+0x9f4>
 80075dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075e4:	2b14      	cmp	r3, #20
 80075e6:	dd0f      	ble.n	8007608 <__ieee754_pow+0xc8>
 80075e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80075ec:	fa22 f103 	lsr.w	r1, r2, r3
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	4293      	cmp	r3, r2
 80075f6:	f040 849d 	bne.w	8007f34 <__ieee754_pow+0x9f4>
 80075fa:	f001 0101 	and.w	r1, r1, #1
 80075fe:	f1c1 0302 	rsb	r3, r1, #2
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	b182      	cbz	r2, 8007628 <__ieee754_pow+0xe8>
 8007606:	e05f      	b.n	80076c8 <__ieee754_pow+0x188>
 8007608:	2a00      	cmp	r2, #0
 800760a:	d15b      	bne.n	80076c4 <__ieee754_pow+0x184>
 800760c:	f1c3 0314 	rsb	r3, r3, #20
 8007610:	fa48 f103 	asr.w	r1, r8, r3
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	4543      	cmp	r3, r8
 800761a:	f040 8488 	bne.w	8007f2e <__ieee754_pow+0x9ee>
 800761e:	f001 0101 	and.w	r1, r1, #1
 8007622:	f1c1 0302 	rsb	r3, r1, #2
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	4b5c      	ldr	r3, [pc, #368]	; (800779c <__ieee754_pow+0x25c>)
 800762a:	4598      	cmp	r8, r3
 800762c:	d132      	bne.n	8007694 <__ieee754_pow+0x154>
 800762e:	f1b9 0f00 	cmp.w	r9, #0
 8007632:	f280 8478 	bge.w	8007f26 <__ieee754_pow+0x9e6>
 8007636:	4959      	ldr	r1, [pc, #356]	; (800779c <__ieee754_pow+0x25c>)
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	2000      	movs	r0, #0
 800763e:	f7f9 f8a9 	bl	8000794 <__aeabi_ddiv>
 8007642:	e79c      	b.n	800757e <__ieee754_pow+0x3e>
 8007644:	2300      	movs	r3, #0
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	2a00      	cmp	r2, #0
 800764a:	d13d      	bne.n	80076c8 <__ieee754_pow+0x188>
 800764c:	4b51      	ldr	r3, [pc, #324]	; (8007794 <__ieee754_pow+0x254>)
 800764e:	4598      	cmp	r8, r3
 8007650:	d1ea      	bne.n	8007628 <__ieee754_pow+0xe8>
 8007652:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007656:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800765a:	ea53 030a 	orrs.w	r3, r3, sl
 800765e:	f000 845a 	beq.w	8007f16 <__ieee754_pow+0x9d6>
 8007662:	4b4f      	ldr	r3, [pc, #316]	; (80077a0 <__ieee754_pow+0x260>)
 8007664:	429c      	cmp	r4, r3
 8007666:	dd08      	ble.n	800767a <__ieee754_pow+0x13a>
 8007668:	f1b9 0f00 	cmp.w	r9, #0
 800766c:	f2c0 8457 	blt.w	8007f1e <__ieee754_pow+0x9de>
 8007670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007674:	e783      	b.n	800757e <__ieee754_pow+0x3e>
 8007676:	2302      	movs	r3, #2
 8007678:	e7e5      	b.n	8007646 <__ieee754_pow+0x106>
 800767a:	f1b9 0f00 	cmp.w	r9, #0
 800767e:	f04f 0000 	mov.w	r0, #0
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	f6bf af7a 	bge.w	800757e <__ieee754_pow+0x3e>
 800768a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800768e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007692:	e774      	b.n	800757e <__ieee754_pow+0x3e>
 8007694:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007698:	d106      	bne.n	80076a8 <__ieee754_pow+0x168>
 800769a:	4632      	mov	r2, r6
 800769c:	463b      	mov	r3, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f8 ff4d 	bl	8000540 <__aeabi_dmul>
 80076a6:	e76a      	b.n	800757e <__ieee754_pow+0x3e>
 80076a8:	4b3e      	ldr	r3, [pc, #248]	; (80077a4 <__ieee754_pow+0x264>)
 80076aa:	4599      	cmp	r9, r3
 80076ac:	d10c      	bne.n	80076c8 <__ieee754_pow+0x188>
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	db0a      	blt.n	80076c8 <__ieee754_pow+0x188>
 80076b2:	ec47 6b10 	vmov	d0, r6, r7
 80076b6:	b009      	add	sp, #36	; 0x24
 80076b8:	ecbd 8b06 	vpop	{d8-d10}
 80076bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	f000 bc6c 	b.w	8007f9c <__ieee754_sqrt>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9304      	str	r3, [sp, #16]
 80076c8:	ec47 6b10 	vmov	d0, r6, r7
 80076cc:	f7ff fe90 	bl	80073f0 <fabs>
 80076d0:	ec51 0b10 	vmov	r0, r1, d0
 80076d4:	f1ba 0f00 	cmp.w	sl, #0
 80076d8:	d129      	bne.n	800772e <__ieee754_pow+0x1ee>
 80076da:	b124      	cbz	r4, 80076e6 <__ieee754_pow+0x1a6>
 80076dc:	4b2f      	ldr	r3, [pc, #188]	; (800779c <__ieee754_pow+0x25c>)
 80076de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d123      	bne.n	800772e <__ieee754_pow+0x1ee>
 80076e6:	f1b9 0f00 	cmp.w	r9, #0
 80076ea:	da05      	bge.n	80076f8 <__ieee754_pow+0x1b8>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	2000      	movs	r0, #0
 80076f2:	492a      	ldr	r1, [pc, #168]	; (800779c <__ieee754_pow+0x25c>)
 80076f4:	f7f9 f84e 	bl	8000794 <__aeabi_ddiv>
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	f6bf af40 	bge.w	800757e <__ieee754_pow+0x3e>
 80076fe:	9b04      	ldr	r3, [sp, #16]
 8007700:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007704:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007708:	4323      	orrs	r3, r4
 800770a:	d108      	bne.n	800771e <__ieee754_pow+0x1de>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4610      	mov	r0, r2
 8007712:	4619      	mov	r1, r3
 8007714:	f7f8 fd5c 	bl	80001d0 <__aeabi_dsub>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	e78f      	b.n	800763e <__ieee754_pow+0xfe>
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	2b01      	cmp	r3, #1
 8007722:	f47f af2c 	bne.w	800757e <__ieee754_pow+0x3e>
 8007726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800772a:	4619      	mov	r1, r3
 800772c:	e727      	b.n	800757e <__ieee754_pow+0x3e>
 800772e:	0feb      	lsrs	r3, r5, #31
 8007730:	3b01      	subs	r3, #1
 8007732:	9306      	str	r3, [sp, #24]
 8007734:	9a06      	ldr	r2, [sp, #24]
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	d102      	bne.n	8007742 <__ieee754_pow+0x202>
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	e7e6      	b.n	8007710 <__ieee754_pow+0x1d0>
 8007742:	4b19      	ldr	r3, [pc, #100]	; (80077a8 <__ieee754_pow+0x268>)
 8007744:	4598      	cmp	r8, r3
 8007746:	f340 80fb 	ble.w	8007940 <__ieee754_pow+0x400>
 800774a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800774e:	4598      	cmp	r8, r3
 8007750:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <__ieee754_pow+0x260>)
 8007752:	dd0c      	ble.n	800776e <__ieee754_pow+0x22e>
 8007754:	429c      	cmp	r4, r3
 8007756:	dc0f      	bgt.n	8007778 <__ieee754_pow+0x238>
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	da0f      	bge.n	800777e <__ieee754_pow+0x23e>
 800775e:	2000      	movs	r0, #0
 8007760:	b009      	add	sp, #36	; 0x24
 8007762:	ecbd 8b06 	vpop	{d8-d10}
 8007766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f000 bcf0 	b.w	800814e <__math_oflow>
 800776e:	429c      	cmp	r4, r3
 8007770:	dbf2      	blt.n	8007758 <__ieee754_pow+0x218>
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <__ieee754_pow+0x25c>)
 8007774:	429c      	cmp	r4, r3
 8007776:	dd19      	ble.n	80077ac <__ieee754_pow+0x26c>
 8007778:	f1b9 0f00 	cmp.w	r9, #0
 800777c:	dcef      	bgt.n	800775e <__ieee754_pow+0x21e>
 800777e:	2000      	movs	r0, #0
 8007780:	b009      	add	sp, #36	; 0x24
 8007782:	ecbd 8b06 	vpop	{d8-d10}
 8007786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f000 bcd7 	b.w	800813c <__math_uflow>
 800778e:	bf00      	nop
 8007790:	fff00000 	.word	0xfff00000
 8007794:	7ff00000 	.word	0x7ff00000
 8007798:	433fffff 	.word	0x433fffff
 800779c:	3ff00000 	.word	0x3ff00000
 80077a0:	3fefffff 	.word	0x3fefffff
 80077a4:	3fe00000 	.word	0x3fe00000
 80077a8:	41e00000 	.word	0x41e00000
 80077ac:	4b60      	ldr	r3, [pc, #384]	; (8007930 <__ieee754_pow+0x3f0>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	f7f8 fd0e 	bl	80001d0 <__aeabi_dsub>
 80077b4:	a354      	add	r3, pc, #336	; (adr r3, 8007908 <__ieee754_pow+0x3c8>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	f7f8 febf 	bl	8000540 <__aeabi_dmul>
 80077c2:	a353      	add	r3, pc, #332	; (adr r3, 8007910 <__ieee754_pow+0x3d0>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	4606      	mov	r6, r0
 80077ca:	460f      	mov	r7, r1
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 feb6 	bl	8000540 <__aeabi_dmul>
 80077d4:	4b57      	ldr	r3, [pc, #348]	; (8007934 <__ieee754_pow+0x3f4>)
 80077d6:	4682      	mov	sl, r0
 80077d8:	468b      	mov	fp, r1
 80077da:	2200      	movs	r2, #0
 80077dc:	4620      	mov	r0, r4
 80077de:	4629      	mov	r1, r5
 80077e0:	f7f8 feae 	bl	8000540 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	a14b      	add	r1, pc, #300	; (adr r1, 8007918 <__ieee754_pow+0x3d8>)
 80077ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ee:	f7f8 fcef 	bl	80001d0 <__aeabi_dsub>
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	f7f8 fea3 	bl	8000540 <__aeabi_dmul>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	2000      	movs	r0, #0
 8007800:	494d      	ldr	r1, [pc, #308]	; (8007938 <__ieee754_pow+0x3f8>)
 8007802:	f7f8 fce5 	bl	80001d0 <__aeabi_dsub>
 8007806:	4622      	mov	r2, r4
 8007808:	4680      	mov	r8, r0
 800780a:	4689      	mov	r9, r1
 800780c:	462b      	mov	r3, r5
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f8 fe95 	bl	8000540 <__aeabi_dmul>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 fe8f 	bl	8000540 <__aeabi_dmul>
 8007822:	a33f      	add	r3, pc, #252	; (adr r3, 8007920 <__ieee754_pow+0x3e0>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fe8a 	bl	8000540 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	f7f8 fccc 	bl	80001d0 <__aeabi_dsub>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f8 fcc6 	bl	80001d4 <__adddf3>
 8007848:	2000      	movs	r0, #0
 800784a:	4632      	mov	r2, r6
 800784c:	463b      	mov	r3, r7
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	f7f8 fcbd 	bl	80001d0 <__aeabi_dsub>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fcb7 	bl	80001d0 <__aeabi_dsub>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	9a06      	ldr	r2, [sp, #24]
 8007866:	3b01      	subs	r3, #1
 8007868:	4313      	orrs	r3, r2
 800786a:	4682      	mov	sl, r0
 800786c:	468b      	mov	fp, r1
 800786e:	f040 81e7 	bne.w	8007c40 <__ieee754_pow+0x700>
 8007872:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007928 <__ieee754_pow+0x3e8>
 8007876:	eeb0 8a47 	vmov.f32	s16, s14
 800787a:	eef0 8a67 	vmov.f32	s17, s15
 800787e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007882:	2600      	movs	r6, #0
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800788c:	f7f8 fca0 	bl	80001d0 <__aeabi_dsub>
 8007890:	4622      	mov	r2, r4
 8007892:	462b      	mov	r3, r5
 8007894:	f7f8 fe54 	bl	8000540 <__aeabi_dmul>
 8007898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 fe4c 	bl	8000540 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f8 fc90 	bl	80001d4 <__adddf3>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	4680      	mov	r8, r0
 80078ba:	4689      	mov	r9, r1
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f8 fe3e 	bl	8000540 <__aeabi_dmul>
 80078c4:	460b      	mov	r3, r1
 80078c6:	4604      	mov	r4, r0
 80078c8:	460d      	mov	r5, r1
 80078ca:	4602      	mov	r2, r0
 80078cc:	4649      	mov	r1, r9
 80078ce:	4640      	mov	r0, r8
 80078d0:	f7f8 fc80 	bl	80001d4 <__adddf3>
 80078d4:	4b19      	ldr	r3, [pc, #100]	; (800793c <__ieee754_pow+0x3fc>)
 80078d6:	4299      	cmp	r1, r3
 80078d8:	ec45 4b19 	vmov	d9, r4, r5
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	468b      	mov	fp, r1
 80078e2:	f340 82f1 	ble.w	8007ec8 <__ieee754_pow+0x988>
 80078e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80078ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80078ee:	4303      	orrs	r3, r0
 80078f0:	f000 81e4 	beq.w	8007cbc <__ieee754_pow+0x77c>
 80078f4:	ec51 0b18 	vmov	r0, r1, d8
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	f7f9 f892 	bl	8000a24 <__aeabi_dcmplt>
 8007900:	3800      	subs	r0, #0
 8007902:	bf18      	it	ne
 8007904:	2001      	movne	r0, #1
 8007906:	e72b      	b.n	8007760 <__ieee754_pow+0x220>
 8007908:	60000000 	.word	0x60000000
 800790c:	3ff71547 	.word	0x3ff71547
 8007910:	f85ddf44 	.word	0xf85ddf44
 8007914:	3e54ae0b 	.word	0x3e54ae0b
 8007918:	55555555 	.word	0x55555555
 800791c:	3fd55555 	.word	0x3fd55555
 8007920:	652b82fe 	.word	0x652b82fe
 8007924:	3ff71547 	.word	0x3ff71547
 8007928:	00000000 	.word	0x00000000
 800792c:	bff00000 	.word	0xbff00000
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	3fd00000 	.word	0x3fd00000
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	408fffff 	.word	0x408fffff
 8007940:	4bd5      	ldr	r3, [pc, #852]	; (8007c98 <__ieee754_pow+0x758>)
 8007942:	402b      	ands	r3, r5
 8007944:	2200      	movs	r2, #0
 8007946:	b92b      	cbnz	r3, 8007954 <__ieee754_pow+0x414>
 8007948:	4bd4      	ldr	r3, [pc, #848]	; (8007c9c <__ieee754_pow+0x75c>)
 800794a:	f7f8 fdf9 	bl	8000540 <__aeabi_dmul>
 800794e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007952:	460c      	mov	r4, r1
 8007954:	1523      	asrs	r3, r4, #20
 8007956:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800795a:	4413      	add	r3, r2
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	4bd0      	ldr	r3, [pc, #832]	; (8007ca0 <__ieee754_pow+0x760>)
 8007960:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007964:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007968:	429c      	cmp	r4, r3
 800796a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800796e:	dd08      	ble.n	8007982 <__ieee754_pow+0x442>
 8007970:	4bcc      	ldr	r3, [pc, #816]	; (8007ca4 <__ieee754_pow+0x764>)
 8007972:	429c      	cmp	r4, r3
 8007974:	f340 8162 	ble.w	8007c3c <__ieee754_pow+0x6fc>
 8007978:	9b05      	ldr	r3, [sp, #20]
 800797a:	3301      	adds	r3, #1
 800797c:	9305      	str	r3, [sp, #20]
 800797e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007982:	2400      	movs	r4, #0
 8007984:	00e3      	lsls	r3, r4, #3
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	4bc7      	ldr	r3, [pc, #796]	; (8007ca8 <__ieee754_pow+0x768>)
 800798a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800798e:	ed93 7b00 	vldr	d7, [r3]
 8007992:	4629      	mov	r1, r5
 8007994:	ec53 2b17 	vmov	r2, r3, d7
 8007998:	eeb0 9a47 	vmov.f32	s18, s14
 800799c:	eef0 9a67 	vmov.f32	s19, s15
 80079a0:	4682      	mov	sl, r0
 80079a2:	f7f8 fc15 	bl	80001d0 <__aeabi_dsub>
 80079a6:	4652      	mov	r2, sl
 80079a8:	4606      	mov	r6, r0
 80079aa:	460f      	mov	r7, r1
 80079ac:	462b      	mov	r3, r5
 80079ae:	ec51 0b19 	vmov	r0, r1, d9
 80079b2:	f7f8 fc0f 	bl	80001d4 <__adddf3>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	2000      	movs	r0, #0
 80079bc:	49bb      	ldr	r1, [pc, #748]	; (8007cac <__ieee754_pow+0x76c>)
 80079be:	f7f8 fee9 	bl	8000794 <__aeabi_ddiv>
 80079c2:	ec41 0b1a 	vmov	d10, r0, r1
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fdb7 	bl	8000540 <__aeabi_dmul>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d8:	9302      	str	r3, [sp, #8]
 80079da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079de:	46ab      	mov	fp, r5
 80079e0:	106d      	asrs	r5, r5, #1
 80079e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80079ea:	ec41 0b18 	vmov	d8, r0, r1
 80079ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80079f2:	2200      	movs	r2, #0
 80079f4:	4640      	mov	r0, r8
 80079f6:	4649      	mov	r1, r9
 80079f8:	4614      	mov	r4, r2
 80079fa:	461d      	mov	r5, r3
 80079fc:	f7f8 fda0 	bl	8000540 <__aeabi_dmul>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fbe2 	bl	80001d0 <__aeabi_dsub>
 8007a0c:	ec53 2b19 	vmov	r2, r3, d9
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	4620      	mov	r0, r4
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7f8 fbda 	bl	80001d0 <__aeabi_dsub>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4650      	mov	r0, sl
 8007a22:	4659      	mov	r1, fp
 8007a24:	f7f8 fbd4 	bl	80001d0 <__aeabi_dsub>
 8007a28:	4642      	mov	r2, r8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	f7f8 fd88 	bl	8000540 <__aeabi_dmul>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4630      	mov	r0, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	f7f8 fbca 	bl	80001d0 <__aeabi_dsub>
 8007a3c:	ec53 2b1a 	vmov	r2, r3, d10
 8007a40:	f7f8 fd7e 	bl	8000540 <__aeabi_dmul>
 8007a44:	ec53 2b18 	vmov	r2, r3, d8
 8007a48:	ec41 0b19 	vmov	d9, r0, r1
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	f7f8 fd76 	bl	8000540 <__aeabi_dmul>
 8007a54:	a37c      	add	r3, pc, #496	; (adr r3, 8007c48 <__ieee754_pow+0x708>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	460d      	mov	r5, r1
 8007a5e:	f7f8 fd6f 	bl	8000540 <__aeabi_dmul>
 8007a62:	a37b      	add	r3, pc, #492	; (adr r3, 8007c50 <__ieee754_pow+0x710>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f7f8 fbb4 	bl	80001d4 <__adddf3>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	f7f8 fd66 	bl	8000540 <__aeabi_dmul>
 8007a74:	a378      	add	r3, pc, #480	; (adr r3, 8007c58 <__ieee754_pow+0x718>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fbab 	bl	80001d4 <__adddf3>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	462b      	mov	r3, r5
 8007a82:	f7f8 fd5d 	bl	8000540 <__aeabi_dmul>
 8007a86:	a376      	add	r3, pc, #472	; (adr r3, 8007c60 <__ieee754_pow+0x720>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f7f8 fba2 	bl	80001d4 <__adddf3>
 8007a90:	4622      	mov	r2, r4
 8007a92:	462b      	mov	r3, r5
 8007a94:	f7f8 fd54 	bl	8000540 <__aeabi_dmul>
 8007a98:	a373      	add	r3, pc, #460	; (adr r3, 8007c68 <__ieee754_pow+0x728>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f8 fb99 	bl	80001d4 <__adddf3>
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	f7f8 fd4b 	bl	8000540 <__aeabi_dmul>
 8007aaa:	a371      	add	r3, pc, #452	; (adr r3, 8007c70 <__ieee754_pow+0x730>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f8 fb90 	bl	80001d4 <__adddf3>
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460f      	mov	r7, r1
 8007aba:	462b      	mov	r3, r5
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fd3e 	bl	8000540 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7f8 fd38 	bl	8000540 <__aeabi_dmul>
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	460d      	mov	r5, r1
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	ec51 0b18 	vmov	r0, r1, d8
 8007adc:	f7f8 fb7a 	bl	80001d4 <__adddf3>
 8007ae0:	ec53 2b19 	vmov	r2, r3, d9
 8007ae4:	f7f8 fd2c 	bl	8000540 <__aeabi_dmul>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fb72 	bl	80001d4 <__adddf3>
 8007af0:	4642      	mov	r2, r8
 8007af2:	4682      	mov	sl, r0
 8007af4:	468b      	mov	fp, r1
 8007af6:	464b      	mov	r3, r9
 8007af8:	4640      	mov	r0, r8
 8007afa:	4649      	mov	r1, r9
 8007afc:	f7f8 fd20 	bl	8000540 <__aeabi_dmul>
 8007b00:	4b6b      	ldr	r3, [pc, #428]	; (8007cb0 <__ieee754_pow+0x770>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	4606      	mov	r6, r0
 8007b06:	460f      	mov	r7, r1
 8007b08:	f7f8 fb64 	bl	80001d4 <__adddf3>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	465b      	mov	r3, fp
 8007b10:	f7f8 fb60 	bl	80001d4 <__adddf3>
 8007b14:	2000      	movs	r0, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4640      	mov	r0, r8
 8007b20:	4649      	mov	r1, r9
 8007b22:	f7f8 fd0d 	bl	8000540 <__aeabi_dmul>
 8007b26:	4b62      	ldr	r3, [pc, #392]	; (8007cb0 <__ieee754_pow+0x770>)
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4689      	mov	r9, r1
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fb4d 	bl	80001d0 <__aeabi_dsub>
 8007b36:	4632      	mov	r2, r6
 8007b38:	463b      	mov	r3, r7
 8007b3a:	f7f8 fb49 	bl	80001d0 <__aeabi_dsub>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4650      	mov	r0, sl
 8007b44:	4659      	mov	r1, fp
 8007b46:	f7f8 fb43 	bl	80001d0 <__aeabi_dsub>
 8007b4a:	ec53 2b18 	vmov	r2, r3, d8
 8007b4e:	f7f8 fcf7 	bl	8000540 <__aeabi_dmul>
 8007b52:	4622      	mov	r2, r4
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	462b      	mov	r3, r5
 8007b5a:	ec51 0b19 	vmov	r0, r1, d9
 8007b5e:	f7f8 fcef 	bl	8000540 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fb33 	bl	80001d4 <__adddf3>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 fb2b 	bl	80001d4 <__adddf3>
 8007b7e:	a33e      	add	r3, pc, #248	; (adr r3, 8007c78 <__ieee754_pow+0x738>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	2000      	movs	r0, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	f7f8 fcd9 	bl	8000540 <__aeabi_dmul>
 8007b8e:	4642      	mov	r2, r8
 8007b90:	ec41 0b18 	vmov	d8, r0, r1
 8007b94:	464b      	mov	r3, r9
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fb19 	bl	80001d0 <__aeabi_dsub>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	f7f8 fb13 	bl	80001d0 <__aeabi_dsub>
 8007baa:	a335      	add	r3, pc, #212	; (adr r3, 8007c80 <__ieee754_pow+0x740>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fcc6 	bl	8000540 <__aeabi_dmul>
 8007bb4:	a334      	add	r3, pc, #208	; (adr r3, 8007c88 <__ieee754_pow+0x748>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 fcbd 	bl	8000540 <__aeabi_dmul>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	f7f8 fb01 	bl	80001d4 <__adddf3>
 8007bd2:	9a07      	ldr	r2, [sp, #28]
 8007bd4:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <__ieee754_pow+0x774>)
 8007bd6:	4413      	add	r3, r2
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fafa 	bl	80001d4 <__adddf3>
 8007be0:	4682      	mov	sl, r0
 8007be2:	9805      	ldr	r0, [sp, #20]
 8007be4:	468b      	mov	fp, r1
 8007be6:	f7f8 fc41 	bl	800046c <__aeabi_i2d>
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <__ieee754_pow+0x778>)
 8007bee:	4413      	add	r3, r2
 8007bf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	465b      	mov	r3, fp
 8007bfc:	ec51 0b18 	vmov	r0, r1, d8
 8007c00:	f7f8 fae8 	bl	80001d4 <__adddf3>
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	f7f8 fae4 	bl	80001d4 <__adddf3>
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	f7f8 fae0 	bl	80001d4 <__adddf3>
 8007c14:	2000      	movs	r0, #0
 8007c16:	4632      	mov	r2, r6
 8007c18:	463b      	mov	r3, r7
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	f7f8 fad7 	bl	80001d0 <__aeabi_dsub>
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	f7f8 fad3 	bl	80001d0 <__aeabi_dsub>
 8007c2a:	ec53 2b18 	vmov	r2, r3, d8
 8007c2e:	f7f8 facf 	bl	80001d0 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4650      	mov	r0, sl
 8007c38:	4659      	mov	r1, fp
 8007c3a:	e610      	b.n	800785e <__ieee754_pow+0x31e>
 8007c3c:	2401      	movs	r4, #1
 8007c3e:	e6a1      	b.n	8007984 <__ieee754_pow+0x444>
 8007c40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007c90 <__ieee754_pow+0x750>
 8007c44:	e617      	b.n	8007876 <__ieee754_pow+0x336>
 8007c46:	bf00      	nop
 8007c48:	4a454eef 	.word	0x4a454eef
 8007c4c:	3fca7e28 	.word	0x3fca7e28
 8007c50:	93c9db65 	.word	0x93c9db65
 8007c54:	3fcd864a 	.word	0x3fcd864a
 8007c58:	a91d4101 	.word	0xa91d4101
 8007c5c:	3fd17460 	.word	0x3fd17460
 8007c60:	518f264d 	.word	0x518f264d
 8007c64:	3fd55555 	.word	0x3fd55555
 8007c68:	db6fabff 	.word	0xdb6fabff
 8007c6c:	3fdb6db6 	.word	0x3fdb6db6
 8007c70:	33333303 	.word	0x33333303
 8007c74:	3fe33333 	.word	0x3fe33333
 8007c78:	e0000000 	.word	0xe0000000
 8007c7c:	3feec709 	.word	0x3feec709
 8007c80:	dc3a03fd 	.word	0xdc3a03fd
 8007c84:	3feec709 	.word	0x3feec709
 8007c88:	145b01f5 	.word	0x145b01f5
 8007c8c:	be3e2fe0 	.word	0xbe3e2fe0
 8007c90:	00000000 	.word	0x00000000
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	43400000 	.word	0x43400000
 8007ca0:	0003988e 	.word	0x0003988e
 8007ca4:	000bb679 	.word	0x000bb679
 8007ca8:	08008340 	.word	0x08008340
 8007cac:	3ff00000 	.word	0x3ff00000
 8007cb0:	40080000 	.word	0x40080000
 8007cb4:	08008360 	.word	0x08008360
 8007cb8:	08008350 	.word	0x08008350
 8007cbc:	a3b5      	add	r3, pc, #724	; (adr r3, 8007f94 <__ieee754_pow+0xa54>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 fa85 	bl	80001d4 <__adddf3>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	ec41 0b1a 	vmov	d10, r0, r1
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 fa7b 	bl	80001d0 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	ec51 0b1a 	vmov	r0, r1, d10
 8007ce2:	f7f8 febd 	bl	8000a60 <__aeabi_dcmpgt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f47f ae04 	bne.w	80078f4 <__ieee754_pow+0x3b4>
 8007cec:	4aa4      	ldr	r2, [pc, #656]	; (8007f80 <__ieee754_pow+0xa40>)
 8007cee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	f340 8108 	ble.w	8007f08 <__ieee754_pow+0x9c8>
 8007cf8:	151b      	asrs	r3, r3, #20
 8007cfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007cfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007d02:	fa4a f303 	asr.w	r3, sl, r3
 8007d06:	445b      	add	r3, fp
 8007d08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d0c:	4e9d      	ldr	r6, [pc, #628]	; (8007f84 <__ieee754_pow+0xa44>)
 8007d0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d12:	4116      	asrs	r6, r2
 8007d14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007d18:	2000      	movs	r0, #0
 8007d1a:	ea23 0106 	bic.w	r1, r3, r6
 8007d1e:	f1c2 0214 	rsb	r2, r2, #20
 8007d22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d26:	fa4a fa02 	asr.w	sl, sl, r2
 8007d2a:	f1bb 0f00 	cmp.w	fp, #0
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4620      	mov	r0, r4
 8007d34:	4629      	mov	r1, r5
 8007d36:	bfb8      	it	lt
 8007d38:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d3c:	f7f8 fa48 	bl	80001d0 <__aeabi_dsub>
 8007d40:	ec41 0b19 	vmov	d9, r0, r1
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	ec51 0b19 	vmov	r0, r1, d9
 8007d4c:	f7f8 fa42 	bl	80001d4 <__adddf3>
 8007d50:	a37b      	add	r3, pc, #492	; (adr r3, 8007f40 <__ieee754_pow+0xa00>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	2000      	movs	r0, #0
 8007d58:	4604      	mov	r4, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	f7f8 fbf0 	bl	8000540 <__aeabi_dmul>
 8007d60:	ec53 2b19 	vmov	r2, r3, d9
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	4620      	mov	r0, r4
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	f7f8 fa30 	bl	80001d0 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 fa2a 	bl	80001d0 <__aeabi_dsub>
 8007d7c:	a372      	add	r3, pc, #456	; (adr r3, 8007f48 <__ieee754_pow+0xa08>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fbdd 	bl	8000540 <__aeabi_dmul>
 8007d86:	a372      	add	r3, pc, #456	; (adr r3, 8007f50 <__ieee754_pow+0xa10>)
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	4689      	mov	r9, r1
 8007d90:	4620      	mov	r0, r4
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7f8 fbd4 	bl	8000540 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	4649      	mov	r1, r9
 8007da0:	f7f8 fa18 	bl	80001d4 <__adddf3>
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fa10 	bl	80001d4 <__adddf3>
 8007db4:	4632      	mov	r2, r6
 8007db6:	463b      	mov	r3, r7
 8007db8:	4680      	mov	r8, r0
 8007dba:	4689      	mov	r9, r1
 8007dbc:	f7f8 fa08 	bl	80001d0 <__aeabi_dsub>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa02 	bl	80001d0 <__aeabi_dsub>
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	f7f8 fbb2 	bl	8000540 <__aeabi_dmul>
 8007ddc:	a35e      	add	r3, pc, #376	; (adr r3, 8007f58 <__ieee754_pow+0xa18>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	f7f8 fbab 	bl	8000540 <__aeabi_dmul>
 8007dea:	a35d      	add	r3, pc, #372	; (adr r3, 8007f60 <__ieee754_pow+0xa20>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 f9ee 	bl	80001d0 <__aeabi_dsub>
 8007df4:	4622      	mov	r2, r4
 8007df6:	462b      	mov	r3, r5
 8007df8:	f7f8 fba2 	bl	8000540 <__aeabi_dmul>
 8007dfc:	a35a      	add	r3, pc, #360	; (adr r3, 8007f68 <__ieee754_pow+0xa28>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	f7f8 f9e7 	bl	80001d4 <__adddf3>
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	f7f8 fb99 	bl	8000540 <__aeabi_dmul>
 8007e0e:	a358      	add	r3, pc, #352	; (adr r3, 8007f70 <__ieee754_pow+0xa30>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 f9dc 	bl	80001d0 <__aeabi_dsub>
 8007e18:	4622      	mov	r2, r4
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	f7f8 fb90 	bl	8000540 <__aeabi_dmul>
 8007e20:	a355      	add	r3, pc, #340	; (adr r3, 8007f78 <__ieee754_pow+0xa38>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 f9d5 	bl	80001d4 <__adddf3>
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	f7f8 fb87 	bl	8000540 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4640      	mov	r0, r8
 8007e38:	4649      	mov	r1, r9
 8007e3a:	f7f8 f9c9 	bl	80001d0 <__aeabi_dsub>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460d      	mov	r5, r1
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 fb79 	bl	8000540 <__aeabi_dmul>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	ec41 0b19 	vmov	d9, r0, r1
 8007e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7f8 f9b8 	bl	80001d0 <__aeabi_dsub>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	ec51 0b19 	vmov	r0, r1, d9
 8007e68:	f7f8 fc94 	bl	8000794 <__aeabi_ddiv>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	463b      	mov	r3, r7
 8007e74:	4640      	mov	r0, r8
 8007e76:	4649      	mov	r1, r9
 8007e78:	f7f8 fb62 	bl	8000540 <__aeabi_dmul>
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	463b      	mov	r3, r7
 8007e80:	f7f8 f9a8 	bl	80001d4 <__adddf3>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 f9a0 	bl	80001d0 <__aeabi_dsub>
 8007e90:	4642      	mov	r2, r8
 8007e92:	464b      	mov	r3, r9
 8007e94:	f7f8 f99c 	bl	80001d0 <__aeabi_dsub>
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	493a      	ldr	r1, [pc, #232]	; (8007f88 <__ieee754_pow+0xa48>)
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f7f8 f996 	bl	80001d0 <__aeabi_dsub>
 8007ea4:	ec41 0b10 	vmov	d0, r0, r1
 8007ea8:	ee10 3a90 	vmov	r3, s1
 8007eac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eb4:	da2b      	bge.n	8007f0e <__ieee754_pow+0x9ce>
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f000 f95e 	bl	8008178 <scalbn>
 8007ebc:	ec51 0b10 	vmov	r0, r1, d0
 8007ec0:	ec53 2b18 	vmov	r2, r3, d8
 8007ec4:	f7ff bbed 	b.w	80076a2 <__ieee754_pow+0x162>
 8007ec8:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <__ieee754_pow+0xa4c>)
 8007eca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007ece:	429e      	cmp	r6, r3
 8007ed0:	f77f af0c 	ble.w	8007cec <__ieee754_pow+0x7ac>
 8007ed4:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__ieee754_pow+0xa50>)
 8007ed6:	440b      	add	r3, r1
 8007ed8:	4303      	orrs	r3, r0
 8007eda:	d009      	beq.n	8007ef0 <__ieee754_pow+0x9b0>
 8007edc:	ec51 0b18 	vmov	r0, r1, d8
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f7f8 fd9e 	bl	8000a24 <__aeabi_dcmplt>
 8007ee8:	3800      	subs	r0, #0
 8007eea:	bf18      	it	ne
 8007eec:	2001      	movne	r0, #1
 8007eee:	e447      	b.n	8007780 <__ieee754_pow+0x240>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	f7f8 f96c 	bl	80001d0 <__aeabi_dsub>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 fda6 	bl	8000a4c <__aeabi_dcmpge>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f43f aef3 	beq.w	8007cec <__ieee754_pow+0x7ac>
 8007f06:	e7e9      	b.n	8007edc <__ieee754_pow+0x99c>
 8007f08:	f04f 0a00 	mov.w	sl, #0
 8007f0c:	e71a      	b.n	8007d44 <__ieee754_pow+0x804>
 8007f0e:	ec51 0b10 	vmov	r0, r1, d0
 8007f12:	4619      	mov	r1, r3
 8007f14:	e7d4      	b.n	8007ec0 <__ieee754_pow+0x980>
 8007f16:	491c      	ldr	r1, [pc, #112]	; (8007f88 <__ieee754_pow+0xa48>)
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f7ff bb30 	b.w	800757e <__ieee754_pow+0x3e>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	2100      	movs	r1, #0
 8007f22:	f7ff bb2c 	b.w	800757e <__ieee754_pow+0x3e>
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7ff bb28 	b.w	800757e <__ieee754_pow+0x3e>
 8007f2e:	9204      	str	r2, [sp, #16]
 8007f30:	f7ff bb7a 	b.w	8007628 <__ieee754_pow+0xe8>
 8007f34:	2300      	movs	r3, #0
 8007f36:	f7ff bb64 	b.w	8007602 <__ieee754_pow+0xc2>
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w
 8007f40:	00000000 	.word	0x00000000
 8007f44:	3fe62e43 	.word	0x3fe62e43
 8007f48:	fefa39ef 	.word	0xfefa39ef
 8007f4c:	3fe62e42 	.word	0x3fe62e42
 8007f50:	0ca86c39 	.word	0x0ca86c39
 8007f54:	be205c61 	.word	0xbe205c61
 8007f58:	72bea4d0 	.word	0x72bea4d0
 8007f5c:	3e663769 	.word	0x3e663769
 8007f60:	c5d26bf1 	.word	0xc5d26bf1
 8007f64:	3ebbbd41 	.word	0x3ebbbd41
 8007f68:	af25de2c 	.word	0xaf25de2c
 8007f6c:	3f11566a 	.word	0x3f11566a
 8007f70:	16bebd93 	.word	0x16bebd93
 8007f74:	3f66c16c 	.word	0x3f66c16c
 8007f78:	5555553e 	.word	0x5555553e
 8007f7c:	3fc55555 	.word	0x3fc55555
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	000fffff 	.word	0x000fffff
 8007f88:	3ff00000 	.word	0x3ff00000
 8007f8c:	4090cbff 	.word	0x4090cbff
 8007f90:	3f6f3400 	.word	0x3f6f3400
 8007f94:	652b82fe 	.word	0x652b82fe
 8007f98:	3c971547 	.word	0x3c971547

08007f9c <__ieee754_sqrt>:
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	ec55 4b10 	vmov	r4, r5, d0
 8007fa4:	4e55      	ldr	r6, [pc, #340]	; (80080fc <__ieee754_sqrt+0x160>)
 8007fa6:	43ae      	bics	r6, r5
 8007fa8:	ee10 0a10 	vmov	r0, s0
 8007fac:	ee10 3a10 	vmov	r3, s0
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	d110      	bne.n	8007fd8 <__ieee754_sqrt+0x3c>
 8007fb6:	ee10 2a10 	vmov	r2, s0
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f7f8 fac0 	bl	8000540 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f904 	bl	80001d4 <__adddf3>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460d      	mov	r5, r1
 8007fd0:	ec45 4b10 	vmov	d0, r4, r5
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	dc10      	bgt.n	8007ffe <__ieee754_sqrt+0x62>
 8007fdc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fe0:	4330      	orrs	r0, r6
 8007fe2:	d0f5      	beq.n	8007fd0 <__ieee754_sqrt+0x34>
 8007fe4:	b15d      	cbz	r5, 8007ffe <__ieee754_sqrt+0x62>
 8007fe6:	ee10 2a10 	vmov	r2, s0
 8007fea:	462b      	mov	r3, r5
 8007fec:	ee10 0a10 	vmov	r0, s0
 8007ff0:	f7f8 f8ee 	bl	80001d0 <__aeabi_dsub>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	f7f8 fbcc 	bl	8000794 <__aeabi_ddiv>
 8007ffc:	e7e6      	b.n	8007fcc <__ieee754_sqrt+0x30>
 8007ffe:	1512      	asrs	r2, r2, #20
 8008000:	d074      	beq.n	80080ec <__ieee754_sqrt+0x150>
 8008002:	07d4      	lsls	r4, r2, #31
 8008004:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008008:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800800c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008010:	bf5e      	ittt	pl
 8008012:	0fda      	lsrpl	r2, r3, #31
 8008014:	005b      	lslpl	r3, r3, #1
 8008016:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800801a:	2400      	movs	r4, #0
 800801c:	0fda      	lsrs	r2, r3, #31
 800801e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008022:	107f      	asrs	r7, r7, #1
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	2516      	movs	r5, #22
 8008028:	4620      	mov	r0, r4
 800802a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800802e:	1886      	adds	r6, r0, r2
 8008030:	428e      	cmp	r6, r1
 8008032:	bfde      	ittt	le
 8008034:	1b89      	suble	r1, r1, r6
 8008036:	18b0      	addle	r0, r6, r2
 8008038:	18a4      	addle	r4, r4, r2
 800803a:	0049      	lsls	r1, r1, #1
 800803c:	3d01      	subs	r5, #1
 800803e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008042:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008046:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800804a:	d1f0      	bne.n	800802e <__ieee754_sqrt+0x92>
 800804c:	462a      	mov	r2, r5
 800804e:	f04f 0e20 	mov.w	lr, #32
 8008052:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008056:	4281      	cmp	r1, r0
 8008058:	eb06 0c05 	add.w	ip, r6, r5
 800805c:	dc02      	bgt.n	8008064 <__ieee754_sqrt+0xc8>
 800805e:	d113      	bne.n	8008088 <__ieee754_sqrt+0xec>
 8008060:	459c      	cmp	ip, r3
 8008062:	d811      	bhi.n	8008088 <__ieee754_sqrt+0xec>
 8008064:	f1bc 0f00 	cmp.w	ip, #0
 8008068:	eb0c 0506 	add.w	r5, ip, r6
 800806c:	da43      	bge.n	80080f6 <__ieee754_sqrt+0x15a>
 800806e:	2d00      	cmp	r5, #0
 8008070:	db41      	blt.n	80080f6 <__ieee754_sqrt+0x15a>
 8008072:	f100 0801 	add.w	r8, r0, #1
 8008076:	1a09      	subs	r1, r1, r0
 8008078:	459c      	cmp	ip, r3
 800807a:	bf88      	it	hi
 800807c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008080:	eba3 030c 	sub.w	r3, r3, ip
 8008084:	4432      	add	r2, r6
 8008086:	4640      	mov	r0, r8
 8008088:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800808c:	f1be 0e01 	subs.w	lr, lr, #1
 8008090:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008098:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800809c:	d1db      	bne.n	8008056 <__ieee754_sqrt+0xba>
 800809e:	430b      	orrs	r3, r1
 80080a0:	d006      	beq.n	80080b0 <__ieee754_sqrt+0x114>
 80080a2:	1c50      	adds	r0, r2, #1
 80080a4:	bf13      	iteet	ne
 80080a6:	3201      	addne	r2, #1
 80080a8:	3401      	addeq	r4, #1
 80080aa:	4672      	moveq	r2, lr
 80080ac:	f022 0201 	bicne.w	r2, r2, #1
 80080b0:	1063      	asrs	r3, r4, #1
 80080b2:	0852      	lsrs	r2, r2, #1
 80080b4:	07e1      	lsls	r1, r4, #31
 80080b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080be:	bf48      	it	mi
 80080c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80080c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80080c8:	4614      	mov	r4, r2
 80080ca:	e781      	b.n	8007fd0 <__ieee754_sqrt+0x34>
 80080cc:	0ad9      	lsrs	r1, r3, #11
 80080ce:	3815      	subs	r0, #21
 80080d0:	055b      	lsls	r3, r3, #21
 80080d2:	2900      	cmp	r1, #0
 80080d4:	d0fa      	beq.n	80080cc <__ieee754_sqrt+0x130>
 80080d6:	02cd      	lsls	r5, r1, #11
 80080d8:	d50a      	bpl.n	80080f0 <__ieee754_sqrt+0x154>
 80080da:	f1c2 0420 	rsb	r4, r2, #32
 80080de:	fa23 f404 	lsr.w	r4, r3, r4
 80080e2:	1e55      	subs	r5, r2, #1
 80080e4:	4093      	lsls	r3, r2
 80080e6:	4321      	orrs	r1, r4
 80080e8:	1b42      	subs	r2, r0, r5
 80080ea:	e78a      	b.n	8008002 <__ieee754_sqrt+0x66>
 80080ec:	4610      	mov	r0, r2
 80080ee:	e7f0      	b.n	80080d2 <__ieee754_sqrt+0x136>
 80080f0:	0049      	lsls	r1, r1, #1
 80080f2:	3201      	adds	r2, #1
 80080f4:	e7ef      	b.n	80080d6 <__ieee754_sqrt+0x13a>
 80080f6:	4680      	mov	r8, r0
 80080f8:	e7bd      	b.n	8008076 <__ieee754_sqrt+0xda>
 80080fa:	bf00      	nop
 80080fc:	7ff00000 	.word	0x7ff00000

08008100 <with_errno>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	4616      	mov	r6, r2
 8008108:	f000 f8bc 	bl	8008284 <__errno>
 800810c:	4629      	mov	r1, r5
 800810e:	6006      	str	r6, [r0, #0]
 8008110:	4620      	mov	r0, r4
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <xflow>:
 8008114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008116:	4614      	mov	r4, r2
 8008118:	461d      	mov	r5, r3
 800811a:	b108      	cbz	r0, 8008120 <xflow+0xc>
 800811c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008120:	e9cd 2300 	strd	r2, r3, [sp]
 8008124:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 fa08 	bl	8000540 <__aeabi_dmul>
 8008130:	2222      	movs	r2, #34	; 0x22
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008138:	f7ff bfe2 	b.w	8008100 <with_errno>

0800813c <__math_uflow>:
 800813c:	b508      	push	{r3, lr}
 800813e:	2200      	movs	r2, #0
 8008140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008144:	f7ff ffe6 	bl	8008114 <xflow>
 8008148:	ec41 0b10 	vmov	d0, r0, r1
 800814c:	bd08      	pop	{r3, pc}

0800814e <__math_oflow>:
 800814e:	b508      	push	{r3, lr}
 8008150:	2200      	movs	r2, #0
 8008152:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008156:	f7ff ffdd 	bl	8008114 <xflow>
 800815a:	ec41 0b10 	vmov	d0, r0, r1
 800815e:	bd08      	pop	{r3, pc}

08008160 <finite>:
 8008160:	b082      	sub	sp, #8
 8008162:	ed8d 0b00 	vstr	d0, [sp]
 8008166:	9801      	ldr	r0, [sp, #4]
 8008168:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800816c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008170:	0fc0      	lsrs	r0, r0, #31
 8008172:	b002      	add	sp, #8
 8008174:	4770      	bx	lr
	...

08008178 <scalbn>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	ec55 4b10 	vmov	r4, r5, d0
 800817e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008182:	4606      	mov	r6, r0
 8008184:	462b      	mov	r3, r5
 8008186:	b99a      	cbnz	r2, 80081b0 <scalbn+0x38>
 8008188:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800818c:	4323      	orrs	r3, r4
 800818e:	d036      	beq.n	80081fe <scalbn+0x86>
 8008190:	4b39      	ldr	r3, [pc, #228]	; (8008278 <scalbn+0x100>)
 8008192:	4629      	mov	r1, r5
 8008194:	ee10 0a10 	vmov	r0, s0
 8008198:	2200      	movs	r2, #0
 800819a:	f7f8 f9d1 	bl	8000540 <__aeabi_dmul>
 800819e:	4b37      	ldr	r3, [pc, #220]	; (800827c <scalbn+0x104>)
 80081a0:	429e      	cmp	r6, r3
 80081a2:	4604      	mov	r4, r0
 80081a4:	460d      	mov	r5, r1
 80081a6:	da10      	bge.n	80081ca <scalbn+0x52>
 80081a8:	a32b      	add	r3, pc, #172	; (adr r3, 8008258 <scalbn+0xe0>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	e03a      	b.n	8008226 <scalbn+0xae>
 80081b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80081b4:	428a      	cmp	r2, r1
 80081b6:	d10c      	bne.n	80081d2 <scalbn+0x5a>
 80081b8:	ee10 2a10 	vmov	r2, s0
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 f808 	bl	80001d4 <__adddf3>
 80081c4:	4604      	mov	r4, r0
 80081c6:	460d      	mov	r5, r1
 80081c8:	e019      	b.n	80081fe <scalbn+0x86>
 80081ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081ce:	460b      	mov	r3, r1
 80081d0:	3a36      	subs	r2, #54	; 0x36
 80081d2:	4432      	add	r2, r6
 80081d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081d8:	428a      	cmp	r2, r1
 80081da:	dd08      	ble.n	80081ee <scalbn+0x76>
 80081dc:	2d00      	cmp	r5, #0
 80081de:	a120      	add	r1, pc, #128	; (adr r1, 8008260 <scalbn+0xe8>)
 80081e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e4:	da1c      	bge.n	8008220 <scalbn+0xa8>
 80081e6:	a120      	add	r1, pc, #128	; (adr r1, 8008268 <scalbn+0xf0>)
 80081e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ec:	e018      	b.n	8008220 <scalbn+0xa8>
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	dd08      	ble.n	8008204 <scalbn+0x8c>
 80081f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081fe:	ec45 4b10 	vmov	d0, r4, r5
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008208:	da19      	bge.n	800823e <scalbn+0xc6>
 800820a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800820e:	429e      	cmp	r6, r3
 8008210:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008214:	dd0a      	ble.n	800822c <scalbn+0xb4>
 8008216:	a112      	add	r1, pc, #72	; (adr r1, 8008260 <scalbn+0xe8>)
 8008218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e2      	bne.n	80081e6 <scalbn+0x6e>
 8008220:	a30f      	add	r3, pc, #60	; (adr r3, 8008260 <scalbn+0xe8>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f98b 	bl	8000540 <__aeabi_dmul>
 800822a:	e7cb      	b.n	80081c4 <scalbn+0x4c>
 800822c:	a10a      	add	r1, pc, #40	; (adr r1, 8008258 <scalbn+0xe0>)
 800822e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0b8      	beq.n	80081a8 <scalbn+0x30>
 8008236:	a10e      	add	r1, pc, #56	; (adr r1, 8008270 <scalbn+0xf8>)
 8008238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823c:	e7b4      	b.n	80081a8 <scalbn+0x30>
 800823e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008242:	3236      	adds	r2, #54	; 0x36
 8008244:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008248:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800824c:	4620      	mov	r0, r4
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <scalbn+0x108>)
 8008250:	2200      	movs	r2, #0
 8008252:	e7e8      	b.n	8008226 <scalbn+0xae>
 8008254:	f3af 8000 	nop.w
 8008258:	c2f8f359 	.word	0xc2f8f359
 800825c:	01a56e1f 	.word	0x01a56e1f
 8008260:	8800759c 	.word	0x8800759c
 8008264:	7e37e43c 	.word	0x7e37e43c
 8008268:	8800759c 	.word	0x8800759c
 800826c:	fe37e43c 	.word	0xfe37e43c
 8008270:	c2f8f359 	.word	0xc2f8f359
 8008274:	81a56e1f 	.word	0x81a56e1f
 8008278:	43500000 	.word	0x43500000
 800827c:	ffff3cb0 	.word	0xffff3cb0
 8008280:	3c900000 	.word	0x3c900000

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000018 	.word	0x20000018

08008290 <_init>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	bf00      	nop
 8008294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008296:	bc08      	pop	{r3}
 8008298:	469e      	mov	lr, r3
 800829a:	4770      	bx	lr

0800829c <_fini>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr
