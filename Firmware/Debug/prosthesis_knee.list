
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bdc  08002bdc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002bdc  08002bdc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bdc  08002bdc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000004  08002be8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08002be8  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008571  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa9  00000000  00000000  000285a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021080  00000000  00000000  0002b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008797  00000000  00000000  0004c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3001  00000000  00000000  00054c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107c40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  00107c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b7c 	.word	0x08002b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002b7c 	.word	0x08002b7c

080001c8 <delay_us>:
#include "EPOS4.h"

// Can we lose this??
static void delay_us(uint32_t us)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80001d0:	2300      	movs	r3, #0
 80001d2:	60bb      	str	r3, [r7, #8]
 80001d4:	e00c      	b.n	80001f0 <delay_us+0x28>
    {
    	for(i=0;i<11;i++)
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	e003      	b.n	80001e4 <delay_us+0x1c>
         __NOP();  // Timed at 48 MHz clock
 80001dc:	bf00      	nop
    	for(i=0;i<11;i++)
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	3301      	adds	r3, #1
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2b0a      	cmp	r3, #10
 80001e8:	d9f8      	bls.n	80001dc <delay_us+0x14>
    for(k=0;k<us;k++)
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d3ee      	bcc.n	80001d6 <delay_us+0xe>
    }
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr

08000206 <EPOS4_data_framer>:

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value)
{
 8000206:	b480      	push	{r7}
 8000208:	b085      	sub	sp, #20
 800020a:	af00      	add	r7, sp, #0
 800020c:	60f8      	str	r0, [r7, #12]
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	460b      	mov	r3, r1
 8000212:	817b      	strh	r3, [r7, #10]
 8000214:	4613      	mov	r3, r2
 8000216:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2222      	movs	r2, #34	; 0x22
 800021c:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	897a      	ldrh	r2, [r7, #10]
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	0a1b      	lsrs	r3, r3, #8
 800022c:	b29a      	uxth	r2, r3
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3302      	adds	r3, #2
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3303      	adds	r3, #3
 800023a:	7a7a      	ldrb	r2, [r7, #9]
 800023c:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3304      	adds	r3, #4
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	0a1a      	lsrs	r2, r3, #8
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3305      	adds	r3, #5
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	0c1a      	lsrs	r2, r3, #16
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3306      	adds	r3, #6
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	0e1a      	lsrs	r2, r3, #24
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	3307      	adds	r3, #7
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <EPOS4_set_operation_mode>:

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000284:	f107 0008 	add.w	r0, r7, #8
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2200      	movs	r2, #0
 800028c:	f246 0160 	movw	r1, #24672	; 0x6060
 8000290:	f7ff ffb9 	bl	8000206 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000294:	f107 0208 	add.w	r2, r7, #8
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	2108      	movs	r1, #8
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f806 	bl	80012ae <CAN_transmit>
    delay_us(10000);
 80002a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80002a6:	f7ff ff8f 	bl	80001c8 <delay_us>
//    HAL_Delay(10);
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <EPOS4_enable>:

void EPOS4_enable(uint16_t CAN_ID)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	4603      	mov	r3, r0
 80002ba:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
    EPOS4_data_framer(data, 0x6040, 0x00, 0x06);
 80002bc:	f107 0008 	add.w	r0, r7, #8
 80002c0:	2306      	movs	r3, #6
 80002c2:	2200      	movs	r2, #0
 80002c4:	f246 0140 	movw	r1, #24640	; 0x6040
 80002c8:	f7ff ff9d 	bl	8000206 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	2108      	movs	r1, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 ffea 	bl	80012ae <CAN_transmit>
    delay_us(10000);
 80002da:	f242 7010 	movw	r0, #10000	; 0x2710
 80002de:	f7ff ff73 	bl	80001c8 <delay_us>
//    HAL_Delay(10);

    EPOS4_enable2(CAN_ID);
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f804 	bl	80002f2 <EPOS4_enable2>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <EPOS4_enable2>:


void EPOS4_enable2(uint16_t CAN_ID)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	4603      	mov	r3, r0
 80002fa:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);
 80002fc:	f107 0008 	add.w	r0, r7, #8
 8000300:	230f      	movs	r3, #15
 8000302:	2200      	movs	r2, #0
 8000304:	f246 0140 	movw	r1, #24640	; 0x6040
 8000308:	f7ff ff7d 	bl	8000206 <EPOS4_data_framer>
    CAN_transmit(CAN_ID, 8, data);
 800030c:	f107 0208 	add.w	r2, r7, #8
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	2108      	movs	r1, #8
 8000314:	4618      	mov	r0, r3
 8000316:	f000 ffca 	bl	80012ae <CAN_transmit>
    delay_us(10000);
 800031a:	f242 7010 	movw	r0, #10000	; 0x2710
 800031e:	f7ff ff53 	bl	80001c8 <delay_us>
//    HAL_Delay(10);
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <EPOS4_CST_apply_torque>:
//    HAL_Delay(10);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b084      	sub	sp, #16
 800032e:	af00      	add	r7, sp, #0
 8000330:	4603      	mov	r3, r0
 8000332:	6039      	str	r1, [r7, #0]
 8000334:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8000336:	f107 0008 	add.w	r0, r7, #8
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2200      	movs	r2, #0
 800033e:	f246 0171 	movw	r1, #24689	; 0x6071
 8000342:	f7ff ff60 	bl	8000206 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000346:	f107 0208 	add.w	r2, r7, #8
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	2108      	movs	r1, #8
 800034e:	4618      	mov	r0, r3
 8000350:	f000 ffad 	bl	80012ae <CAN_transmit>
    delay_us(50); //1500
 8000354:	2032      	movs	r0, #50	; 0x32
 8000356:	f7ff ff37 	bl	80001c8 <delay_us>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800036e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4313      	orrs	r3, r2
 8000376:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800037a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4013      	ands	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	bf00      	nop
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000394:	b480      	push	{r7}
 8000396:	b087      	sub	sp, #28
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <LL_SYSCFG_SetEXTISource+0x68>)
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	3302      	adds	r3, #2
 80003a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	0c1b      	lsrs	r3, r3, #16
 80003ae:	43db      	mvns	r3, r3
 80003b0:	ea02 0103 	and.w	r1, r2, r3
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	0c1b      	lsrs	r3, r3, #16
 80003b8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	fa93 f3a3 	rbit	r3, r3
 80003c0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d101      	bne.n	80003d0 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80003cc:	2320      	movs	r3, #32
 80003ce:	e003      	b.n	80003d8 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	fab3 f383 	clz	r3, r3
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	fa03 f202 	lsl.w	r2, r3, r2
 80003e0:	4806      	ldr	r0, [pc, #24]	; (80003fc <LL_SYSCFG_SetEXTISource+0x68>)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	430a      	orrs	r2, r1
 80003e8:	3302      	adds	r3, #2
 80003ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80003ee:	bf00      	nop
 80003f0:	371c      	adds	r7, #28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40010000 	.word	0x40010000

08000400 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000400:	b480      	push	{r7}
 8000402:	b08b      	sub	sp, #44	; 0x2c
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	fa93 f3a3 	rbit	r3, r3
 800041a:	613b      	str	r3, [r7, #16]
  return result;
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d101      	bne.n	800042a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000426:	2320      	movs	r3, #32
 8000428:	e003      	b.n	8000432 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	fab3 f383 	clz	r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000442:	6a3b      	ldr	r3, [r7, #32]
 8000444:	fa93 f3a3 	rbit	r3, r3
 8000448:	61fb      	str	r3, [r7, #28]
  return result;
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000454:	2320      	movs	r3, #32
 8000456:	e003      	b.n	8000460 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800045a:	fab3 f383 	clz	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	6879      	ldr	r1, [r7, #4]
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	431a      	orrs	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	bf00      	nop
 8000470:	372c      	adds	r7, #44	; 0x2c
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800047a:	b480      	push	{r7}
 800047c:	b08b      	sub	sp, #44	; 0x2c
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	613b      	str	r3, [r7, #16]
  return result;
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d101      	bne.n	80004a4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80004a0:	2320      	movs	r3, #32
 80004a2:	e003      	b.n	80004ac <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fab3 f383 	clz	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2103      	movs	r1, #3
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	401a      	ands	r2, r3
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004bc:	6a3b      	ldr	r3, [r7, #32]
 80004be:	fa93 f3a3 	rbit	r3, r3
 80004c2:	61fb      	str	r3, [r7, #28]
  return result;
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80004c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d101      	bne.n	80004d2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80004ce:	2320      	movs	r3, #32
 80004d0:	e003      	b.n	80004da <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	fab3 f383 	clz	r3, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	431a      	orrs	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	60da      	str	r2, [r3, #12]
}
 80004e8:	bf00      	nop
 80004ea:	372c      	adds	r7, #44	; 0x2c
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
 8000530:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000532:	2004      	movs	r0, #4
 8000534:	f7ff ff16 	bl	8000364 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000538:	2080      	movs	r0, #128	; 0x80
 800053a:	f7ff ff13 	bl	8000364 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff ff10 	bl	8000364 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff ff0d 	bl	8000364 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, Oscope_Pin|SPI2_CS_Pin);
 800054a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800054e:	4830      	ldr	r0, [pc, #192]	; (8000610 <MX_GPIO_Init+0x100>)
 8000550:	f7ff ffd0 	bl	80004f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f7ff ffca 	bl	80004f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000560:	492c      	ldr	r1, [pc, #176]	; (8000614 <MX_GPIO_Init+0x104>)
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ff16 	bl	8000394 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000572:	2301      	movs	r3, #1
 8000574:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000578:	2300      	movs	r3, #0
 800057a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800057e:	2302      	movs	r3, #2
 8000580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4618      	mov	r0, r3
 800058a:	f001 faa5 	bl	8001ad8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x108>)
 8000596:	f7ff ff70 	bl	800047a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <MX_GPIO_Init+0x108>)
 80005a2:	f7ff ff2d 	bl	8000400 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Oscope_Pin;
 80005a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Oscope_GPIO_Port, &GPIO_InitStruct);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <MX_GPIO_Init+0x100>)
 80005c2:	f001 fccb 	bl	8001f5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <MX_GPIO_Init+0x100>)
 80005e2:	f001 fcbb 	bl	8001f5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005ec:	2301      	movs	r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 fcaa 	bl	8001f5c <LL_GPIO_Init>

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	; 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	48000400 	.word	0x48000400
 8000614:	00f00003 	.word	0x00f00003
 8000618:	48000800 	.word	0x48000800

0800061c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <__NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db0b      	blt.n	8000662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f003 021f 	and.w	r2, r3, #31
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <__NVIC_EnableIRQ+0x38>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	095b      	lsrs	r3, r3, #5
 8000658:	2001      	movs	r0, #1
 800065a:	fa00 f202 	lsl.w	r2, r0, r2
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e100 	.word	0xe000e100

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db0a      	blt.n	800069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <__NVIC_SetPriority+0x4c>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069c:	e00a      	b.n	80006b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <__NVIC_SetPriority+0x50>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	3b04      	subs	r3, #4
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43da      	mvns	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43d9      	mvns	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	4313      	orrs	r3, r2
         );
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	431a      	orrs	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	60da      	str	r2, [r3, #12]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60da      	str	r2, [r3, #12]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	431a      	orrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60da      	str	r2, [r3, #12]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60da      	str	r2, [r3, #12]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	f023 0203 	bic.w	r2, r3, #3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	431a      	orrs	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	621a      	str	r2, [r3, #32]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60da      	str	r2, [r3, #12]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	f023 0201 	bic.w	r2, r3, #1
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	431a      	orrs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60da      	str	r2, [r3, #12]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <LL_RCC_SetLPTIMClockSource+0x30>)
 800083e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	041b      	lsls	r3, r3, #16
 8000848:	43db      	mvns	r3, r3
 800084a:	401a      	ands	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	041b      	lsls	r3, r3, #16
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000852:	4313      	orrs	r3, r2
 8000854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000874:	4907      	ldr	r1, [pc, #28]	; (8000894 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4313      	orrs	r3, r2
 800087a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <LL_APB1_GRP2_EnableClock+0x2c>)
 800087e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4013      	ands	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000

08000898 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 800089c:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 80008a0:	f7ff ffc8 	bl	8000834 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 80008a4:	2020      	movs	r0, #32
 80008a6:	f7ff ffdf 	bl	8000868 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008aa:	f7ff feb7 	bl	800061c <__NVIC_GetPriorityGrouping>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff07 	bl	80006c8 <NVIC_EncodePriority>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4619      	mov	r1, r3
 80008be:	2042      	movs	r0, #66	; 0x42
 80008c0:	f7ff fed8 	bl	8000674 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80008c4:	2042      	movs	r0, #66	; 0x42
 80008c6:	f7ff feb7 	bl	8000638 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80008ca:	2100      	movs	r1, #0
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008ce:	f7ff ff9d 	bl	800080c <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008d6:	f7ff ff63 	bl	80007a0 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008de:	f7ff ff4c 	bl	800077a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008e6:	f7ff ff22 	bl	800072e <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008ee:	f7ff ff31 	bl	8000754 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008f4:	f7ff ff7a 	bl	80007ec <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80008f8:	2100      	movs	r1, #0
 80008fa:	4802      	ldr	r0, [pc, #8]	; (8000904 <MX_LPTIM2_Init+0x6c>)
 80008fc:	f7ff ff63 	bl	80007c6 <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40009400 	.word	0x40009400

08000908 <__NVIC_SetPriorityGrouping>:
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <LL_LPTIM_Enable>:
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	611a      	str	r2, [r3, #16]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_LPTIM_StartCounter>:
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f023 0206 	bic.w	r2, r3, #6
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	611a      	str	r2, [r3, #16]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_LPTIM_SetAutoReload>:
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	0c1b      	lsrs	r3, r3, #16
 80009a6:	041b      	lsls	r3, r3, #16
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	619a      	str	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f043 0202 	orr.w	r2, r3, #2
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	609a      	str	r2, [r3, #8]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_RCC_LSE_Enable>:
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LL_RCC_LSE_Enable+0x20>)
 80009e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <LL_RCC_LSE_Enable+0x20>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <LL_RCC_LSE_SetDriveCapability>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a0e:	f023 0218 	bic.w	r2, r3, #24
 8000a12:	4905      	ldr	r1, [pc, #20]	; (8000a28 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_RCC_LSE_IsReady>:
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <LL_RCC_LSE_IsReady+0x24>)
 8000a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d101      	bne.n	8000a42 <LL_RCC_LSE_IsReady+0x16>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <LL_RCC_LSE_IsReady+0x18>
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_RCC_MSI_Enable>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <LL_RCC_MSI_Enable+0x1c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <LL_RCC_MSI_Enable+0x1c>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <LL_RCC_MSI_IsReady>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_RCC_MSI_IsReady+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d101      	bne.n	8000a88 <LL_RCC_MSI_IsReady+0x14>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <LL_RCC_MSI_IsReady+0x16>
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_RCC_MSI_EnablePLLMode>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <LL_RCC_MSI_EnableRangeSelection>:
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <LL_RCC_MSI_SetRange>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <LL_RCC_MSI_SetRange+0x24>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <LL_RCC_MSI_SetRange+0x24>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000

08000b00 <LL_RCC_MSI_SetCalibTrimming>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	4904      	ldr	r1, [pc, #16]	; (8000b28 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000b16:	4313      	orrs	r3, r2
 8000b18:	604b      	str	r3, [r1, #4]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <LL_RCC_SetSysClkSource>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <LL_RCC_SetSysClkSource+0x24>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f023 0203 	bic.w	r2, r3, #3
 8000b3c:	4904      	ldr	r1, [pc, #16]	; (8000b50 <LL_RCC_SetSysClkSource+0x24>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	608b      	str	r3, [r1, #8]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000

08000b54 <LL_RCC_GetSysClkSource>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <LL_RCC_GetSysClkSource+0x18>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <LL_RCC_SetAHBPrescaler>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b80:	4904      	ldr	r1, [pc, #16]	; (8000b94 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	608b      	str	r3, [r1, #8]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <LL_RCC_SetAPB1Prescaler>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ba8:	4904      	ldr	r1, [pc, #16]	; (8000bbc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	608b      	str	r3, [r1, #8]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <LL_RCC_SetAPB2Prescaler>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000bd0:	4904      	ldr	r1, [pc, #16]	; (8000be4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	608b      	str	r3, [r1, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000

08000be8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <LL_RCC_PLL_Enable+0x1c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <LL_RCC_PLL_Enable+0x1c>)
 8000bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <LL_RCC_PLL_IsReady+0x24>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c18:	d101      	bne.n	8000c1e <LL_RCC_PLL_IsReady+0x16>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <LL_RCC_PLL_IsReady+0x18>
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	4311      	orrs	r1, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	0212      	lsls	r2, r2, #8
 8000c50:	4311      	orrs	r1, r2
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	f9ff808c 	.word	0xf9ff808c

08000c70 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_APB1_GRP1_EnableClock>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ca6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000

08000cf0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <LL_FLASH_SetLatency+0x24>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 0207 	bic.w	r2, r3, #7
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <LL_FLASH_SetLatency+0x24>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40022000 	.word	0x40022000

08000d18 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <LL_FLASH_GetLatency+0x18>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0307 	and.w	r3, r3, #7
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40022000 	.word	0x40022000

08000d34 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	40007000 	.word	0x40007000

08000d5c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000

08000d7c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <LL_GPIO_SetOutputPin>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	619a      	str	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_GPIO_ResetOutputPin>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
/*******************************************************************************
 * USER DEFINITIONS
 ******************************************************************************/

	// Declare variables
	uint16_t CAN_ID = 0x601;	// CAN ID for EPOS4
 8000dda:	f240 6301 	movw	r3, #1537	; 0x601
 8000dde:	807b      	strh	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff ff6d 	bl	8000cc0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000de6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000dea:	f7ff ff51 	bl	8000c90 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f7ff fd8a 	bl	8000908 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df4:	f000 f84a 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f7ff fb8a 	bl	8000510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dfc:	f000 fcbe 	bl	800177c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e00:	f000 fb2e 	bl	8001460 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8000e04:	f7ff fd48 	bl	8000898 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8000e08:	f000 fb80 	bl	800150c <MX_SPI2_Init>
/******************************************************************************
* USER INITIALIZATIONS
******************************************************************************/

	// Start LPTIM2 interrupt
	LL_LPTIM_Enable(LPTIM2);												// Initially enable timer
 8000e0c:	481c      	ldr	r0, [pc, #112]	; (8000e80 <main+0xac>)
 8000e0e:	f7ff fd9f 	bl	8000950 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);											// Enable timer interrupt mode
 8000e12:	481b      	ldr	r0, [pc, #108]	; (8000e80 <main+0xac>)
 8000e14:	f7ff fdd2 	bl	80009bc <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload( LPTIM2, LPTIM2_Period );						// Set auto reload register with period
 8000e18:	213f      	movs	r1, #63	; 0x3f
 8000e1a:	4819      	ldr	r0, [pc, #100]	; (8000e80 <main+0xac>)
 8000e1c:	f7ff fdbb 	bl	8000996 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter( LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);		// Start counter
 8000e20:	2104      	movs	r1, #4
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <main+0xac>)
 8000e24:	f7ff fda4 	bl	8000970 <LL_LPTIM_StartCounter>

	// Enable peripherals
	LL_SPI_Enable(SPI2);
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <main+0xb0>)
 8000e2a:	f7ff ffa7 	bl	8000d7c <LL_SPI_Enable>

	// Configure devices
	CAN_configure();									// Configure MCP25625
 8000e2e:	f000 fa85 	bl	800133c <CAN_configure>
	EPOS4_enable(CAN_ID);								// Enable EPOS4
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fa3c 	bl	80002b2 <EPOS4_enable>
	EPOS4_set_operation_mode( CAN_ID, EPOS4_Mode );		// Set EPOS4 to torque mode
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fa1a 	bl	8000278 <EPOS4_set_operation_mode>
	EPOS4_enable(CAN_ID);								// Why is this enabled again?? (it is needed at the moment)
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fa33 	bl	80002b2 <EPOS4_enable>

	// Remove spikes from beginning (can we do better??)
	for ( int jj = 1; jj < 1000; ++jj );
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e002      	b.n	8000e58 <main+0x84>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5e:	dbf8      	blt.n	8000e52 <main+0x7e>

	// Command motor to 0.1 N*m
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <main+0xb4>)
 8000e66:	f7ff ff99 	bl	8000d9c <LL_GPIO_SetOutputPin>
	EPOS4_CST_apply_torque( CAN_ID, 100 );
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	2164      	movs	r1, #100	; 0x64
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fa5b 	bl	800032a <EPOS4_CST_apply_torque>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <main+0xb4>)
 8000e7a:	f7ff ff9d 	bl	8000db8 <LL_GPIO_ResetOutputPin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0xaa>
 8000e80:	40009400 	.word	0x40009400
 8000e84:	40003800 	.word	0x40003800
 8000e88:	48000400 	.word	0x48000400

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000e90:	2004      	movs	r0, #4
 8000e92:	f7ff ff2d 	bl	8000cf0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000e96:	bf00      	nop
 8000e98:	f7ff ff3e 	bl	8000d18 <LL_FLASH_GetLatency>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d1fa      	bne.n	8000e98 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000ea2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ea6:	f7ff ff45 	bl	8000d34 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8000eaa:	f7ff fdd3 	bl	8000a54 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000eae:	bf00      	nop
 8000eb0:	f7ff fde0 	bl	8000a74 <LL_RCC_MSI_IsReady>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d1fa      	bne.n	8000eb0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000eba:	f7ff fdfd 	bl	8000ab8 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8000ebe:	20b0      	movs	r0, #176	; 0xb0
 8000ec0:	f7ff fe0a 	bl	8000ad8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fe1b 	bl	8000b00 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8000eca:	f7ff ff47 	bl	8000d5c <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fd96 	bl	8000a00 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8000ed4:	f7ff fd82 	bl	80009dc <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000ed8:	bf00      	nop
 8000eda:	f7ff fda7 	bl	8000a2c <LL_RCC_LSE_IsReady>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1fa      	bne.n	8000eda <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8000ee4:	f7ff fdd8 	bl	8000a98 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8000ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eec:	2228      	movs	r2, #40	; 0x28
 8000eee:	2150      	movs	r1, #80	; 0x50
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fe9d 	bl	8000c30 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000ef6:	f7ff febb 	bl	8000c70 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000efa:	f7ff fe75 	bl	8000be8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000efe:	bf00      	nop
 8000f00:	f7ff fe82 	bl	8000c08 <LL_RCC_PLL_IsReady>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d1fa      	bne.n	8000f00 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f7ff fe0e 	bl	8000b2c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f10:	bf00      	nop
 8000f12:	f7ff fe1f 	bl	8000b54 <LL_RCC_GetSysClkSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b0c      	cmp	r3, #12
 8000f1a:	d1fa      	bne.n	8000f12 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe27 	bl	8000b70 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f26:	f7ff fe37 	bl	8000b98 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f2a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f2e:	f7ff fe47 	bl	8000bc0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <SystemClock_Config+0xb8>)
 8000f34:	f001 fdd8 	bl	8002ae8 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <SystemClock_Config+0xb8>)
 8000f3a:	f001 fde3 	bl	8002b04 <LL_SetSystemCoreClock>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	04c4b400 	.word	0x04c4b400

08000f48 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	330c      	adds	r3, #12
 8000f58:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	78fa      	ldrb	r2, [r7, #3]
 8000f5e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_GPIO_SetOutputPin>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	619a      	str	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_GPIO_ResetOutputPin>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <clearChipSelect>:
//         __NOP();  // Timed at 48 MHz clock
//    }
//}

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 8000fa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <clearChipSelect+0x14>)
 8000fae:	f7ff ffdd 	bl	8000f6c <LL_GPIO_SetOutputPin>
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	48000400 	.word	0x48000400

08000fbc <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <setChipSelect+0x14>)
 8000fc6:	f7ff ffdf 	bl	8000f88 <LL_GPIO_ResetOutputPin>
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8000fda:	f7ff ffef 	bl	8000fbc <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 8000fde:	21c0      	movs	r1, #192	; 0xc0
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <mcp25625_reset+0x44>)
 8000fe2:	f7ff ffb1 	bl	8000f48 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8000fe6:	bf00      	nop
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <mcp25625_reset+0x44>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f9      	bne.n	8000fe8 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8000ff4:	f7ff ffd6 	bl	8000fa4 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8000ff8:	e002      	b.n	8001000 <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <mcp25625_reset+0x44>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <mcp25625_reset+0x44>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f6      	bne.n	8000ffa <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}

	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
//	delay_us(50);
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40003800 	.word	0x40003800

0800101c <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 800102c:	f7ff ffc6 	bl	8000fbc <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 8001030:	2102      	movs	r1, #2
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <mcp25625_writeRegister+0x70>)
 8001034:	f7ff ff88 	bl	8000f48 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4619      	mov	r1, r3
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <mcp25625_writeRegister+0x70>)
 800103e:	f7ff ff83 	bl	8000f48 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	4619      	mov	r1, r3
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <mcp25625_writeRegister+0x70>)
 8001048:	f7ff ff7e 	bl	8000f48 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 800104c:	bf00      	nop
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <mcp25625_writeRegister+0x70>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 800105a:	bf00      	nop
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <mcp25625_writeRegister+0x70>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f9      	bne.n	800105c <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 8001068:	f7ff ff9c 	bl	8000fa4 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800106c:	e002      	b.n	8001074 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <mcp25625_writeRegister+0x70>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <mcp25625_writeRegister+0x70>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f6      	bne.n	800106e <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40003800 	.word	0x40003800

08001090 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 800109a:	f7ff ff8f 	bl	8000fbc <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 800109e:	2103      	movs	r1, #3
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010a2:	f7ff ff51 	bl	8000f48 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010ac:	f7ff ff4c 	bl	8000f48 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 80010b0:	2100      	movs	r1, #0
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010b4:	f7ff ff48 	bl	8000f48 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80010b8:	bf00      	nop
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80010c6:	bf00      	nop
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f9      	bne.n	80010c8 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <mcp25625_readRegister+0x64>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();						// Disable CS
 80010e6:	f7ff ff5d 	bl	8000fa4 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 80010ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40003800 	.word	0x40003800

080010f8 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	603a      	str	r2, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	460b      	mov	r3, r1
 8001106:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 8001108:	f7ff ff58 	bl	8000fbc <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4619      	mov	r1, r3
 8001110:	481d      	ldr	r0, [pc, #116]	; (8001188 <mcp25625_loadTXB+0x90>)
 8001112:	f7ff ff19 	bl	8000f48 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++)
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e011      	b.n	8001140 <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 800111c:	bf00      	nop
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <mcp25625_loadTXB+0x90>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f9      	beq.n	800111e <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	4814      	ldr	r0, [pc, #80]	; (8001188 <mcp25625_loadTXB+0x90>)
 8001136:	f7ff ff07 	bl	8000f48 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	3301      	adds	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3e9      	bcc.n	800111c <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8001148:	bf00      	nop
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <mcp25625_loadTXB+0x90>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8001156:	bf00      	nop
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <mcp25625_loadTXB+0x90>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f9      	bne.n	8001158 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8001164:	f7ff ff1e 	bl	8000fa4 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8001168:	e002      	b.n	8001170 <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <mcp25625_loadTXB+0x90>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <mcp25625_loadTXB+0x90>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f6      	bne.n	800116a <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40003800 	.word	0x40003800

0800118c <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8001190:	2030      	movs	r0, #48	; 0x30
 8001192:	f7ff ff7d 	bl	8001090 <mcp25625_readRegister>
 8001196:	4603      	mov	r3, r0
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}

0800119c <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 80011a0:	2040      	movs	r0, #64	; 0x40
 80011a2:	f7ff ff75 	bl	8001090 <mcp25625_readRegister>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	bd80      	pop	{r7, pc}

080011ac <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 80011b0:	2050      	movs	r0, #80	; 0x50
 80011b2:	f7ff ff6d 	bl	8001090 <mcp25625_readRegister>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}

080011bc <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	210d      	movs	r1, #13
 80011c8:	2044      	movs	r0, #68	; 0x44
 80011ca:	f7ff ff95 	bl	80010f8 <mcp25625_loadTXB>
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	210d      	movs	r1, #13
 80011e2:	2042      	movs	r0, #66	; 0x42
 80011e4:	f7ff ff88 	bl	80010f8 <mcp25625_loadTXB>
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	210d      	movs	r1, #13
 80011fc:	2040      	movs	r0, #64	; 0x40
 80011fe:	f7ff ff7b 	bl	80010f8 <mcp25625_loadTXB>
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 800120e:	210b      	movs	r1, #11
 8001210:	2050      	movs	r0, #80	; 0x50
 8001212:	f7ff ff03 	bl	800101c <mcp25625_writeRegister>
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 800121e:	210b      	movs	r1, #11
 8001220:	2040      	movs	r0, #64	; 0x40
 8001222:	f7ff fefb 	bl	800101c <mcp25625_writeRegister>
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}

0800122a <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 800122e:	210b      	movs	r1, #11
 8001230:	2030      	movs	r0, #48	; 0x30
 8001232:	f7ff fef3 	bl	800101c <mcp25625_writeRegister>
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}

0800123a <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8001242:	f7ff ffb3 	bl	80011ac <getTXB2CTRL>
 8001246:	4603      	mov	r3, r0
 8001248:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffaf 	bl	80011bc <loadTXB2>
		setTXREQ2();
 800125e:	f7ff ffd4 	bl	800120a <setTXREQ2>
		return; // once txbuffer is loaded, return
 8001262:	e021      	b.n	80012a8 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8001264:	f7ff ff9a 	bl	800119c <getTXB1CTRL>
 8001268:	4603      	mov	r3, r0
 800126a:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffab 	bl	80011d6 <loadTXB1>
		setTXREQ1();
 8001280:	f7ff ffcb 	bl	800121a <setTXREQ1>
		return; //once tx buffer is loaded, return
 8001284:	e010      	b.n	80012a8 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8001286:	f7ff ff81 	bl	800118c <getTXB0CTRL>
 800128a:	4603      	mov	r3, r0
 800128c:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa7 	bl	80011f0 <loadTXB0>
		setTXREQ0();
 80012a2:	f7ff ffc2 	bl	800122a <setTXREQ0>
		return; // once tx buffer is loaded, return
 80012a6:	bf00      	nop
	}
}
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	603a      	str	r2, [r7, #0]
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	460b      	mov	r3, r1
 80012bc:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	220d      	movs	r2, #13
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fc50 	bl	8002b6c <memset>

	t.txb.SIDH = CAN_ID >> 3;
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
 80012e6:	e00b      	b.n	8001300 <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	441a      	add	r2, r3
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	3318      	adds	r3, #24
 80012f4:	443b      	add	r3, r7
 80012f6:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	3301      	adds	r3, #1
 80012fe:	75fb      	strb	r3, [r7, #23]
 8001300:	7dfa      	ldrb	r2, [r7, #23]
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	429a      	cmp	r2, r3
 8001306:	d3ef      	bcc.n	80012e8 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff94 	bl	800123a <mcp25625_sendCAN>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <mcp25625_init>:

void mcp25625_init (void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8001320:	f240 2276 	movw	r2, #630	; 0x276
 8001324:	2100      	movs	r1, #0
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <mcp25625_init+0x1c>)
 8001328:	f001 fc20 	bl	8002b6c <memset>
	clearChipSelect();
 800132c:	f7ff fe3a 	bl	8000fa4 <clearChipSelect>
	mcp25625_reset();
 8001330:	f7ff fe50 	bl	8000fd4 <mcp25625_reset>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000020 	.word	0x20000020

0800133c <CAN_configure>:

void CAN_configure()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8001342:	23c0      	movs	r3, #192	; 0xc0
 8001344:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8001346:	2389      	movs	r3, #137	; 0x89
 8001348:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 800134a:	2304      	movs	r3, #4
 800134c:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 800134e:	2308      	movs	r3, #8
 8001350:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8001352:	f7ff ffe3 	bl	800131c <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 8001356:	7b3b      	ldrb	r3, [r7, #12]
 8001358:	4619      	mov	r1, r3
 800135a:	202a      	movs	r0, #42	; 0x2a
 800135c:	f7ff fe5e 	bl	800101c <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 8001360:	7a3b      	ldrb	r3, [r7, #8]
 8001362:	4619      	mov	r1, r3
 8001364:	2029      	movs	r0, #41	; 0x29
 8001366:	f7ff fe59 	bl	800101c <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 800136a:	793b      	ldrb	r3, [r7, #4]
 800136c:	4619      	mov	r1, r3
 800136e:	2028      	movs	r0, #40	; 0x28
 8001370:	f7ff fe54 	bl	800101c <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 8001374:	783b      	ldrb	r3, [r7, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	200f      	movs	r0, #15
 800137a:	f7ff fe4f 	bl	800101c <mcp25625_writeRegister>

}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <LL_AHB2_GRP1_EnableClock>:
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4013      	ands	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000

080013b8 <LL_APB1_GRP1_EnableClock>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000

080013e8 <LL_APB2_GRP1_EnableClock>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000

08001418 <LL_SPI_SetStandard>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 0210 	bic.w	r2, r3, #16
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	605a      	str	r2, [r3, #4]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_SPI_DisableNSSPulseMgt>:
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f023 0208 	bic.w	r2, r3, #8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2228      	movs	r2, #40	; 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fb7c 	bl	8002b6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001484:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001488:	f7ff ffae 	bl	80013e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff ff7b 	bl	8001388 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001492:	23e0      	movs	r3, #224	; 0xe0
 8001494:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001496:	2302      	movs	r3, #2
 8001498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80014a6:	2305      	movs	r3, #5
 80014a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f000 fd53 	bl	8001f5c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80014ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014be:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80014c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014c4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80014c6:	2302      	movs	r3, #2
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80014ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80014d4:	2308      	movs	r3, #8
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_SPI1_Init+0xa8>)
 80014ec:	f001 f99e 	bl	800282c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80014f0:	2100      	movs	r1, #0
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_SPI1_Init+0xa8>)
 80014f4:	f7ff ff90 	bl	8001418 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_SPI1_Init+0xa8>)
 80014fa:	f7ff ffa0 	bl	800143e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3740      	adds	r7, #64	; 0x40
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40013000 	.word	0x40013000

0800150c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	; 0x40
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fb26 	bl	8002b6c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001530:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001534:	f7ff ff40 	bl	80013b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001538:	2002      	movs	r0, #2
 800153a:	f7ff ff25 	bl	8001388 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800153e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001542:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001544:	2302      	movs	r3, #2
 8001546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001554:	2305      	movs	r3, #5
 8001556:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4815      	ldr	r0, [pc, #84]	; (80015b4 <MX_SPI2_Init+0xa8>)
 800155e:	f000 fcfd 	bl	8001f5c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001566:	f44f 7382 	mov.w	r3, #260	; 0x104
 800156a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800156c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001570:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001572:	2302      	movs	r3, #2
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001580:	2308      	movs	r3, #8
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800158c:	2307      	movs	r3, #7
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4619      	mov	r1, r3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_SPI2_Init+0xac>)
 8001598:	f001 f948 	bl	800282c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800159c:	2100      	movs	r1, #0
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_SPI2_Init+0xac>)
 80015a0:	f7ff ff3a 	bl	8001418 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_SPI2_Init+0xac>)
 80015a6:	f7ff ff4a 	bl	800143e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3740      	adds	r7, #64	; 0x40
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	48000400 	.word	0x48000400
 80015b8:	40003800 	.word	0x40003800

080015bc <LL_LPTIM_ClearFLAG_ARRM>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_LPTIM_IsActiveFlag_ARRM>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d101      	bne.n	80015f4 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <HardFault_Handler+0x4>

0800160e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <BusFault_Handler+0x4>

0800161a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <LPTIM2_IRQHandler+0x1c>)
 800165e:	f7ff ffbd 	bl	80015dc <LL_LPTIM_IsActiveFlag_ARRM>
 8001662:	4603      	mov	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <LPTIM2_IRQHandler+0x16>
	{
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);    		// Clear ARR interrupt flag
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <LPTIM2_IRQHandler+0x1c>)
 800166a:	f7ff ffa7 	bl	80015bc <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40009400 	.word	0x40009400

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <LL_RCC_SetUSARTClockSource>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LL_RCC_SetUSARTClockSource+0x30>)
 80016a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	43db      	mvns	r3, r3
 80016b0:	401a      	ands	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4905      	ldr	r1, [pc, #20]	; (80016cc <LL_RCC_SetUSARTClockSource+0x30>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <LL_AHB2_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000

08001700 <LL_APB1_GRP1_EnableClock>:
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <LL_APB1_GRP1_EnableClock+0x2c>)
 800170a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <LL_APB1_GRP1_EnableClock+0x2c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000

08001730 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80017a6:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80017aa:	f7ff ff77 	bl	800169c <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80017ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017b2:	f7ff ffa5 	bl	8001700 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff ff8a 	bl	80016d0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017bc:	230c      	movs	r3, #12
 80017be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017c0:	2302      	movs	r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80017d0:	2307      	movs	r3, #7
 80017d2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f000 fbbe 	bl	8001f5c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80017e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017e4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80017f2:	230c      	movs	r3, #12
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_USART2_UART_Init+0xa4>)
 8001806:	f001 f8d9 	bl	80029bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0xa4>)
 800180c:	f7ff ffa0 	bl	8001750 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_USART2_UART_Init+0xa4>)
 8001812:	f7ff ff8d 	bl	8001730 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3738      	adds	r7, #56	; 0x38
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400

08001824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001828:	f7ff ff26 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001852:	f001 f967 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001856:	f7ff fabd 	bl	8000dd4 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800185c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001868:	08002be4 	.word	0x08002be4
  ldr r2, =_sbss
 800186c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001870:	20000298 	.word	0x20000298

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <LL_EXTI_EnableIT_0_31+0x20>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <LL_EXTI_EnableIT_0_31+0x20>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40010400 	.word	0x40010400

0800189c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <LL_EXTI_EnableIT_32_63+0x20>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4904      	ldr	r1, [pc, #16]	; (80018bc <LL_EXTI_EnableIT_32_63+0x20>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	620b      	str	r3, [r1, #32]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40010400 	.word	0x40010400

080018c0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4904      	ldr	r1, [pc, #16]	; (80018e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40010400 	.word	0x40010400

080018e8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <LL_EXTI_DisableIT_32_63+0x24>)
 80018f2:	6a1a      	ldr	r2, [r3, #32]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4904      	ldr	r1, [pc, #16]	; (800190c <LL_EXTI_DisableIT_32_63+0x24>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	620b      	str	r3, [r1, #32]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40010400 	.word	0x40010400

08001910 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LL_EXTI_EnableEvent_0_31+0x20>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4904      	ldr	r1, [pc, #16]	; (8001930 <LL_EXTI_EnableEvent_0_31+0x20>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]

}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LL_EXTI_EnableEvent_32_63+0x20>)
 800193e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001940:	4904      	ldr	r1, [pc, #16]	; (8001954 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40010400 	.word	0x40010400

08001958 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	43db      	mvns	r3, r3
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <LL_EXTI_DisableEvent_0_31+0x24>)
 800196a:	4013      	ands	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010400 	.word	0x40010400

08001980 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800198a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	43db      	mvns	r3, r3
 8001990:	4904      	ldr	r1, [pc, #16]	; (80019a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001992:	4013      	ands	r3, r2
 8001994:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40010400 	.word	0x40010400

080019a8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40010400 	.word	0x40010400

080019cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d8:	4904      	ldr	r1, [pc, #16]	; (80019ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]

}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40010400 	.word	0x40010400

08001a18 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4904      	ldr	r1, [pc, #16]	; (8001a3c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40010400 	.word	0x40010400

08001a40 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4904      	ldr	r1, [pc, #16]	; (8001a60 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40010400 	.word	0x40010400

08001a64 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40010400 	.word	0x40010400

08001a88 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40010400 	.word	0x40010400

08001ab0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4904      	ldr	r1, [pc, #16]	; (8001ad4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7a1b      	ldrb	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80d1 	beq.w	8001c90 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d063      	beq.n	8001bbe <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a5b      	ldrb	r3, [r3, #9]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d01c      	beq.n	8001b38 <LL_EXTI_Init+0x60>
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	dc25      	bgt.n	8001b4e <LL_EXTI_Init+0x76>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <LL_EXTI_Init+0x34>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d00b      	beq.n	8001b22 <LL_EXTI_Init+0x4a>
 8001b0a:	e020      	b.n	8001b4e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff21 	bl	8001958 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff feac 	bl	8001878 <LL_EXTI_EnableIT_0_31>
          break;
 8001b20:	e018      	b.n	8001b54 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff feca 	bl	80018c0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff feed 	bl	8001910 <LL_EXTI_EnableEvent_0_31>
          break;
 8001b36:	e00d      	b.n	8001b54 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe9b 	bl	8001878 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fee2 	bl	8001910 <LL_EXTI_EnableEvent_0_31>
          break;
 8001b4c:	e002      	b.n	8001b54 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
          break;
 8001b52:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7a9b      	ldrb	r3, [r3, #10]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d030      	beq.n	8001bbe <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7a9b      	ldrb	r3, [r3, #10]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d01c      	beq.n	8001b9e <LL_EXTI_Init+0xc6>
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	dc25      	bgt.n	8001bb4 <LL_EXTI_Init+0xdc>
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <LL_EXTI_Init+0x9a>
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d00b      	beq.n	8001b88 <LL_EXTI_Init+0xb0>
 8001b70:	e020      	b.n	8001bb4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff86 	bl	8001a88 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff11 	bl	80019a8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001b86:	e01b      	b.n	8001bc0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff2f 	bl	80019f0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff52 	bl	8001a40 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001b9c:	e010      	b.n	8001bc0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff00 	bl	80019a8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff47 	bl	8001a40 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001bb2:	e005      	b.n	8001bc0 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]
            break;
 8001bbc:	e000      	b.n	8001bc0 <LL_EXTI_Init+0xe8>
        }
      }
 8001bbe:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d078      	beq.n	8001cba <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7a5b      	ldrb	r3, [r3, #9]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d01c      	beq.n	8001c0a <LL_EXTI_Init+0x132>
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	dc25      	bgt.n	8001c20 <LL_EXTI_Init+0x148>
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <LL_EXTI_Init+0x106>
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d00b      	beq.n	8001bf4 <LL_EXTI_Init+0x11c>
 8001bdc:	e020      	b.n	8001c20 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fecc 	bl	8001980 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe55 	bl	800189c <LL_EXTI_EnableIT_32_63>
          break;
 8001bf2:	e01a      	b.n	8001c2a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe75 	bl	80018e8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe96 	bl	8001934 <LL_EXTI_EnableEvent_32_63>
          break;
 8001c08:	e00f      	b.n	8001c2a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe44 	bl	800189c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe8b 	bl	8001934 <LL_EXTI_EnableEvent_32_63>
          break;
 8001c1e:	e004      	b.n	8001c2a <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
          break;
 8001c28:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7a9b      	ldrb	r3, [r3, #10]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d043      	beq.n	8001cba <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7a9b      	ldrb	r3, [r3, #10]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d01c      	beq.n	8001c74 <LL_EXTI_Init+0x19c>
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	dc25      	bgt.n	8001c8a <LL_EXTI_Init+0x1b2>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d002      	beq.n	8001c48 <LL_EXTI_Init+0x170>
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d00b      	beq.n	8001c5e <LL_EXTI_Init+0x186>
 8001c46:	e020      	b.n	8001c8a <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff2f 	bl	8001ab0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff feb8 	bl	80019cc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001c5c:	e02e      	b.n	8001cbc <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fed8 	bl	8001a18 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fef9 	bl	8001a64 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001c72:	e023      	b.n	8001cbc <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fea7 	bl	80019cc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff feee 	bl	8001a64 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001c88:	e018      	b.n	8001cbc <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
            break;
 8001c8e:	e015      	b.n	8001cbc <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe13 	bl	80018c0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fe5a 	bl	8001958 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe1d 	bl	80018e8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe64 	bl	8001980 <LL_EXTI_DisableEvent_32_63>
 8001cb8:	e000      	b.n	8001cbc <LL_EXTI_Init+0x1e4>
      }
 8001cba:	bf00      	nop
  }

  return status;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <LL_GPIO_SetPinMode>:
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b08b      	sub	sp, #44	; 0x2c
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	613b      	str	r3, [r7, #16]
  return result;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	61fb      	str	r3, [r7, #28]
  return result;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	372c      	adds	r7, #44	; 0x2c
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_GPIO_SetPinOutputType>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_GPIO_SetPinSpeed>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b08b      	sub	sp, #44	; 0x2c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	613b      	str	r3, [r7, #16]
  return result;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e003      	b.n	8001da2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	61fb      	str	r3, [r7, #28]
  return result;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	609a      	str	r2, [r3, #8]
}
 8001dde:	bf00      	nop
 8001de0:	372c      	adds	r7, #44	; 0x2c
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_GPIO_SetPinPull>:
{
 8001dea:	b480      	push	{r7}
 8001dec:	b08b      	sub	sp, #44	; 0x2c
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	613b      	str	r3, [r7, #16]
  return result;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e003      	b.n	8001e1c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2103      	movs	r1, #3
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	61fb      	str	r3, [r7, #28]
  return result;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e003      	b.n	8001e4a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	60da      	str	r2, [r3, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	372c      	adds	r7, #44	; 0x2c
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_GPIO_SetAFPin_0_7>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	613b      	str	r3, [r7, #16]
  return result;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	210f      	movs	r1, #15
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	61fb      	str	r3, [r7, #28]
  return result;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e003      	b.n	8001ec4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	621a      	str	r2, [r3, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	372c      	adds	r7, #44	; 0x2c
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_GPIO_SetAFPin_8_15>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b08b      	sub	sp, #44	; 0x2c
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	613b      	str	r3, [r7, #16]
  return result;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	210f      	movs	r1, #15
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
  return result;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f50:	bf00      	nop
 8001f52:	372c      	adds	r7, #44	; 0x2c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	60fb      	str	r3, [r7, #12]
  return result;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <LL_GPIO_Init+0x26>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f8c:	e048      	b.n	8002020 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03a      	beq.n	800201a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d003      	beq.n	8001fb4 <LL_GPIO_Init+0x58>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d10e      	bne.n	8001fd2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fed7 	bl	8001d70 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff feb7 	bl	8001d40 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	69b9      	ldr	r1, [r7, #24]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff05 	bl	8001dea <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d111      	bne.n	800200c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d807      	bhi.n	8001ffe <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff34 	bl	8001e64 <LL_GPIO_SetAFPin_0_7>
 8001ffc:	e006      	b.n	800200c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	461a      	mov	r2, r3
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff69 	bl	8001ede <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	461a      	mov	r2, r3
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fe56 	bl	8001cc6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1af      	bne.n	8001f8e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <LL_RCC_HSI_IsReady>:
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <LL_RCC_HSI_IsReady+0x24>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d101      	bne.n	800204e <LL_RCC_HSI_IsReady+0x16>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_RCC_HSI_IsReady+0x18>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000

08002060 <LL_RCC_LSE_IsReady>:
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <LL_RCC_LSE_IsReady+0x24>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d101      	bne.n	8002076 <LL_RCC_LSE_IsReady+0x16>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_RCC_LSE_IsReady+0x18>
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000

08002088 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d101      	bne.n	800209c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000

080020ac <LL_RCC_MSI_GetRange>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <LL_RCC_MSI_GetRange+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000

080020c8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000

080020e4 <LL_RCC_GetSysClkSource>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <LL_RCC_GetSysClkSource+0x18>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <LL_RCC_GetAHBPrescaler>:
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <LL_RCC_GetAHBPrescaler+0x18>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <LL_RCC_GetAPB1Prescaler>:
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <LL_RCC_GetAPB2Prescaler>:
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <LL_RCC_GetAPB2Prescaler+0x18>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <LL_RCC_GetUSARTClockSource>:
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <LL_RCC_GetUSARTClockSource+0x24>)
 800215e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	4313      	orrs	r3, r2
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000

0800217c <LL_RCC_GetUARTClockSource>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <LL_RCC_GetUARTClockSource+0x24>)
 8002186:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	401a      	ands	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	4313      	orrs	r3, r2
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000

080021a4 <LL_RCC_PLL_GetMainSource>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <LL_RCC_PLL_GetMainSource+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0303 	and.w	r3, r3, #3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <LL_RCC_PLL_GetN>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <LL_RCC_PLL_GetN+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40021000 	.word	0x40021000

080021dc <LL_RCC_PLL_GetR>:
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <LL_RCC_PLL_GetR+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <LL_RCC_PLL_GetDivider>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <LL_RCC_PLL_GetDivider+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000

08002214 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d137      	bne.n	8002296 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff94 	bl	8002154 <LL_RCC_GetUSARTClockSource>
 800222c:	4603      	mov	r3, r0
 800222e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002232:	2b03      	cmp	r3, #3
 8002234:	f200 80b3 	bhi.w	800239e <LL_RCC_GetUSARTClockFreq+0x18a>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	0800227f 	.word	0x0800227f
 8002244:	08002251 	.word	0x08002251
 8002248:	08002259 	.word	0x08002259
 800224c:	0800226b 	.word	0x0800226b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002250:	f000 f95c 	bl	800250c <RCC_GetSystemClockFreq>
 8002254:	60f8      	str	r0, [r7, #12]
        break;
 8002256:	e0b5      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002258:	f7ff feee 	bl	8002038 <LL_RCC_HSI_IsReady>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 809f 	beq.w	80023a2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8002264:	4b5a      	ldr	r3, [pc, #360]	; (80023d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002266:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002268:	e09b      	b.n	80023a2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800226a:	f7ff fef9 	bl	8002060 <LL_RCC_LSE_IsReady>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8098 	beq.w	80023a6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8002276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800227a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800227c:	e093      	b.n	80023a6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800227e:	f000 f945 	bl	800250c <RCC_GetSystemClockFreq>
 8002282:	4603      	mov	r3, r0
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f9d1 	bl	800262c <RCC_GetHCLKClockFreq>
 800228a:	4603      	mov	r3, r0
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f9f7 	bl	8002680 <RCC_GetPCLK2ClockFreq>
 8002292:	60f8      	str	r0, [r7, #12]
        break;
 8002294:	e096      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d146      	bne.n	800232a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff59 	bl	8002154 <LL_RCC_GetUSARTClockSource>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d87e      	bhi.n	80023aa <LL_RCC_GetUSARTClockFreq+0x196>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	08002313 	.word	0x08002313
 80022b8:	080023ab 	.word	0x080023ab
 80022bc:	080023ab 	.word	0x080023ab
 80022c0:	080023ab 	.word	0x080023ab
 80022c4:	080022e9 	.word	0x080022e9
 80022c8:	080023ab 	.word	0x080023ab
 80022cc:	080023ab 	.word	0x080023ab
 80022d0:	080023ab 	.word	0x080023ab
 80022d4:	080022f1 	.word	0x080022f1
 80022d8:	080023ab 	.word	0x080023ab
 80022dc:	080023ab 	.word	0x080023ab
 80022e0:	080023ab 	.word	0x080023ab
 80022e4:	08002301 	.word	0x08002301
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80022e8:	f000 f910 	bl	800250c <RCC_GetSystemClockFreq>
 80022ec:	60f8      	str	r0, [r7, #12]
        break;
 80022ee:	e069      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80022f0:	f7ff fea2 	bl	8002038 <LL_RCC_HSI_IsReady>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d059      	beq.n	80023ae <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80022fa:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80022fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022fe:	e056      	b.n	80023ae <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002300:	f7ff feae 	bl	8002060 <LL_RCC_LSE_IsReady>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d053      	beq.n	80023b2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800230a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002310:	e04f      	b.n	80023b2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002312:	f000 f8fb 	bl	800250c <RCC_GetSystemClockFreq>
 8002316:	4603      	mov	r3, r0
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f987 	bl	800262c <RCC_GetHCLKClockFreq>
 800231e:	4603      	mov	r3, r0
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f999 	bl	8002658 <RCC_GetPCLK1ClockFreq>
 8002326:	60f8      	str	r0, [r7, #12]
        break;
 8002328:	e04c      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b30      	cmp	r3, #48	; 0x30
 800232e:	d142      	bne.n	80023b6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff0f 	bl	8002154 <LL_RCC_GetUSARTClockSource>
 8002336:	4603      	mov	r3, r0
 8002338:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800233c:	d01a      	beq.n	8002374 <LL_RCC_GetUSARTClockFreq+0x160>
 800233e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002342:	d83a      	bhi.n	80023ba <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00c      	beq.n	8002364 <LL_RCC_GetUSARTClockFreq+0x150>
 800234a:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d834      	bhi.n	80023ba <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002354:	d017      	beq.n	8002386 <LL_RCC_GetUSARTClockFreq+0x172>
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d12e      	bne.n	80023ba <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800235c:	f000 f8d6 	bl	800250c <RCC_GetSystemClockFreq>
 8002360:	60f8      	str	r0, [r7, #12]
          break;
 8002362:	e02f      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002364:	f7ff fe68 	bl	8002038 <LL_RCC_HSI_IsReady>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d027      	beq.n	80023be <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002370:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002372:	e024      	b.n	80023be <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002374:	f7ff fe74 	bl	8002060 <LL_RCC_LSE_IsReady>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d021      	beq.n	80023c2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 800237e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002382:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002384:	e01d      	b.n	80023c2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002386:	f000 f8c1 	bl	800250c <RCC_GetSystemClockFreq>
 800238a:	4603      	mov	r3, r0
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f94d 	bl	800262c <RCC_GetHCLKClockFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f95f 	bl	8002658 <RCC_GetPCLK1ClockFreq>
 800239a:	60f8      	str	r0, [r7, #12]
          break;
 800239c:	e012      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 800239e:	bf00      	nop
 80023a0:	e010      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80023a2:	bf00      	nop
 80023a4:	e00e      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80023a6:	bf00      	nop
 80023a8:	e00c      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80023aa:	bf00      	nop
 80023ac:	e00a      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80023ae:	bf00      	nop
 80023b0:	e008      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80023b2:	bf00      	nop
 80023b4:	e006      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80023b6:	bf00      	nop
 80023b8:	e004      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80023ba:	bf00      	nop
 80023bc:	e002      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80023c2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00f42400 	.word	0x00f42400
 80023d4:	00300020 	.word	0x00300020
 80023d8:	00300010 	.word	0x00300010

080023dc <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2bc0      	cmp	r3, #192	; 0xc0
 80023ec:	d136      	bne.n	800245c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fec4 	bl	800217c <LL_RCC_GetUARTClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80023fa:	d01a      	beq.n	8002432 <LL_RCC_GetUARTClockFreq+0x56>
 80023fc:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002400:	d82e      	bhi.n	8002460 <LL_RCC_GetUARTClockFreq+0x84>
 8002402:	4a3d      	ldr	r2, [pc, #244]	; (80024f8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00c      	beq.n	8002422 <LL_RCC_GetUARTClockFreq+0x46>
 8002408:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <LL_RCC_GetUARTClockFreq+0x11c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d828      	bhi.n	8002460 <LL_RCC_GetUARTClockFreq+0x84>
 800240e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002412:	d017      	beq.n	8002444 <LL_RCC_GetUARTClockFreq+0x68>
 8002414:	4a39      	ldr	r2, [pc, #228]	; (80024fc <LL_RCC_GetUARTClockFreq+0x120>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d122      	bne.n	8002460 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800241a:	f000 f877 	bl	800250c <RCC_GetSystemClockFreq>
 800241e:	60f8      	str	r0, [r7, #12]
        break;
 8002420:	e023      	b.n	800246a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002422:	f7ff fe09 	bl	8002038 <LL_RCC_HSI_IsReady>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <LL_RCC_GetUARTClockFreq+0x124>)
 800242e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002430:	e018      	b.n	8002464 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002432:	f7ff fe15 	bl	8002060 <LL_RCC_LSE_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 800243c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002440:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002442:	e011      	b.n	8002468 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002444:	f000 f862 	bl	800250c <RCC_GetSystemClockFreq>
 8002448:	4603      	mov	r3, r0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f8ee 	bl	800262c <RCC_GetHCLKClockFreq>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f900 	bl	8002658 <RCC_GetPCLK1ClockFreq>
 8002458:	60f8      	str	r0, [r7, #12]
        break;
 800245a:	e006      	b.n	800246a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 800245c:	bf00      	nop
 800245e:	e004      	b.n	800246a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8002460:	bf00      	nop
 8002462:	e002      	b.n	800246a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8002468:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002470:	d136      	bne.n	80024e0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fe82 	bl	800217c <LL_RCC_GetUARTClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800247e:	d01a      	beq.n	80024b6 <LL_RCC_GetUARTClockFreq+0xda>
 8002480:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002484:	d82e      	bhi.n	80024e4 <LL_RCC_GetUARTClockFreq+0x108>
 8002486:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <LL_RCC_GetUARTClockFreq+0x128>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00c      	beq.n	80024a6 <LL_RCC_GetUARTClockFreq+0xca>
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <LL_RCC_GetUARTClockFreq+0x128>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d828      	bhi.n	80024e4 <LL_RCC_GetUARTClockFreq+0x108>
 8002492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002496:	d017      	beq.n	80024c8 <LL_RCC_GetUARTClockFreq+0xec>
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <LL_RCC_GetUARTClockFreq+0x12c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d122      	bne.n	80024e4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800249e:	f000 f835 	bl	800250c <RCC_GetSystemClockFreq>
 80024a2:	60f8      	str	r0, [r7, #12]
        break;
 80024a4:	e023      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80024a6:	f7ff fdc7 	bl	8002038 <LL_RCC_HSI_IsReady>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <LL_RCC_GetUARTClockFreq+0x124>)
 80024b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024b4:	e018      	b.n	80024e8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80024b6:	f7ff fdd3 	bl	8002060 <LL_RCC_LSE_IsReady>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 80024c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024c6:	e011      	b.n	80024ec <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024c8:	f000 f820 	bl	800250c <RCC_GetSystemClockFreq>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f8ac 	bl	800262c <RCC_GetHCLKClockFreq>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f8be 	bl	8002658 <RCC_GetPCLK1ClockFreq>
 80024dc:	60f8      	str	r0, [r7, #12]
        break;
 80024de:	e006      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 80024e0:	bf00      	nop
 80024e2:	e004      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80024e4:	bf00      	nop
 80024e6:	e002      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <LL_RCC_GetUARTClockFreq+0x112>
        break;
 80024ec:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00c00080 	.word	0x00c00080
 80024fc:	00c00040 	.word	0x00c00040
 8002500:	00f42400 	.word	0x00f42400
 8002504:	03000200 	.word	0x03000200
 8002508:	03000100 	.word	0x03000100

0800250c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002512:	f7ff fde7 	bl	80020e4 <LL_RCC_GetSysClkSource>
 8002516:	4603      	mov	r3, r0
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d851      	bhi.n	80025c0 <RCC_GetSystemClockFreq+0xb4>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <RCC_GetSystemClockFreq+0x18>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002559 	.word	0x08002559
 8002528:	080025c1 	.word	0x080025c1
 800252c:	080025c1 	.word	0x080025c1
 8002530:	080025c1 	.word	0x080025c1
 8002534:	080025ad 	.word	0x080025ad
 8002538:	080025c1 	.word	0x080025c1
 800253c:	080025c1 	.word	0x080025c1
 8002540:	080025c1 	.word	0x080025c1
 8002544:	080025b3 	.word	0x080025b3
 8002548:	080025c1 	.word	0x080025c1
 800254c:	080025c1 	.word	0x080025c1
 8002550:	080025c1 	.word	0x080025c1
 8002554:	080025b9 	.word	0x080025b9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002558:	f7ff fd96 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d111      	bne.n	8002586 <RCC_GetSystemClockFreq+0x7a>
 8002562:	f7ff fd91 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <RCC_GetSystemClockFreq+0x6a>
 800256c:	f7ff fd9e 	bl	80020ac <LL_RCC_MSI_GetRange>
 8002570:	4603      	mov	r3, r0
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	e003      	b.n	800257e <RCC_GetSystemClockFreq+0x72>
 8002576:	f7ff fda7 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 800257a:	4603      	mov	r3, r0
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <RCC_GetSystemClockFreq+0x114>)
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	e010      	b.n	80025a8 <RCC_GetSystemClockFreq+0x9c>
 8002586:	f7ff fd7f 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <RCC_GetSystemClockFreq+0x8e>
 8002590:	f7ff fd8c 	bl	80020ac <LL_RCC_MSI_GetRange>
 8002594:	4603      	mov	r3, r0
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	e003      	b.n	80025a2 <RCC_GetSystemClockFreq+0x96>
 800259a:	f7ff fd95 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 800259e:	4603      	mov	r3, r0
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <RCC_GetSystemClockFreq+0x114>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80025aa:	e033      	b.n	8002614 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <RCC_GetSystemClockFreq+0x118>)
 80025ae:	607b      	str	r3, [r7, #4]
      break;
 80025b0:	e030      	b.n	8002614 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <RCC_GetSystemClockFreq+0x11c>)
 80025b4:	607b      	str	r3, [r7, #4]
      break;
 80025b6:	e02d      	b.n	8002614 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80025b8:	f000 f876 	bl	80026a8 <RCC_PLL_GetFreqDomain_SYS>
 80025bc:	6078      	str	r0, [r7, #4]
      break;
 80025be:	e029      	b.n	8002614 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80025c0:	f7ff fd62 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d111      	bne.n	80025ee <RCC_GetSystemClockFreq+0xe2>
 80025ca:	f7ff fd5d 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <RCC_GetSystemClockFreq+0xd2>
 80025d4:	f7ff fd6a 	bl	80020ac <LL_RCC_MSI_GetRange>
 80025d8:	4603      	mov	r3, r0
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	e003      	b.n	80025e6 <RCC_GetSystemClockFreq+0xda>
 80025de:	f7ff fd73 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 80025e2:	4603      	mov	r3, r0
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <RCC_GetSystemClockFreq+0x114>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	e010      	b.n	8002610 <RCC_GetSystemClockFreq+0x104>
 80025ee:	f7ff fd4b 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <RCC_GetSystemClockFreq+0xf6>
 80025f8:	f7ff fd58 	bl	80020ac <LL_RCC_MSI_GetRange>
 80025fc:	4603      	mov	r3, r0
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	e003      	b.n	800260a <RCC_GetSystemClockFreq+0xfe>
 8002602:	f7ff fd61 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002606:	4603      	mov	r3, r0
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <RCC_GetSystemClockFreq+0x114>)
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002612:	bf00      	nop
  }

  return frequency;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	08002bac 	.word	0x08002bac
 8002624:	00f42400 	.word	0x00f42400
 8002628:	007a1200 	.word	0x007a1200

0800262c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002634:	f7ff fd64 	bl	8002100 <LL_RCC_GetAHBPrescaler>
 8002638:	4603      	mov	r3, r0
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <RCC_GetHCLKClockFreq+0x28>)
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	40d3      	lsrs	r3, r2
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08002b94 	.word	0x08002b94

08002658 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002660:	f7ff fd5c 	bl	800211c <LL_RCC_GetAPB1Prescaler>
 8002664:	4603      	mov	r3, r0
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <RCC_GetPCLK1ClockFreq+0x24>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	40d3      	lsrs	r3, r2
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08002ba4 	.word	0x08002ba4

08002680 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002688:	f7ff fd56 	bl	8002138 <LL_RCC_GetAPB2Prescaler>
 800268c:	4603      	mov	r3, r0
 800268e:	0adb      	lsrs	r3, r3, #11
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	40d3      	lsrs	r3, r2
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	08002ba4 	.word	0x08002ba4

080026a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80026ae:	f7ff fd79 	bl	80021a4 <LL_RCC_PLL_GetMainSource>
 80026b2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d036      	beq.n	8002728 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d836      	bhi.n	800272e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d003      	beq.n	80026ce <RCC_PLL_GetFreqDomain_SYS+0x26>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d02a      	beq.n	8002722 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80026cc:	e02f      	b.n	800272e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80026ce:	f7ff fcdb 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <RCC_PLL_GetFreqDomain_SYS+0x54>
 80026d8:	f7ff fcd6 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <RCC_PLL_GetFreqDomain_SYS+0x44>
 80026e2:	f7ff fce3 	bl	80020ac <LL_RCC_MSI_GetRange>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	e003      	b.n	80026f4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80026ec:	f7ff fcec 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 80026f0:	4603      	mov	r3, r0
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	e010      	b.n	800271e <RCC_PLL_GetFreqDomain_SYS+0x76>
 80026fc:	f7ff fcc4 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002706:	f7ff fcd1 	bl	80020ac <LL_RCC_MSI_GetRange>
 800270a:	4603      	mov	r3, r0
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	e003      	b.n	8002718 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002710:	f7ff fcda 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002714:	4603      	mov	r3, r0
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002720:	e02f      	b.n	8002782 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002724:	607b      	str	r3, [r7, #4]
      break;
 8002726:	e02c      	b.n	8002782 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800272a:	607b      	str	r3, [r7, #4]
      break;
 800272c:	e029      	b.n	8002782 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800272e:	f7ff fcab 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002738:	f7ff fca6 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8002742:	f7ff fcb3 	bl	80020ac <LL_RCC_MSI_GetRange>
 8002746:	4603      	mov	r3, r0
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	e003      	b.n	8002754 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800274c:	f7ff fcbc 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002750:	4603      	mov	r3, r0
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	e010      	b.n	800277e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800275c:	f7ff fc94 	bl	8002088 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8002766:	f7ff fca1 	bl	80020ac <LL_RCC_MSI_GetRange>
 800276a:	4603      	mov	r3, r0
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	e003      	b.n	8002778 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8002770:	f7ff fcaa 	bl	80020c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002774:	4603      	mov	r3, r0
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002780:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002782:	f7ff fd39 	bl	80021f8 <LL_RCC_PLL_GetDivider>
 8002786:	4603      	mov	r3, r0
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	3301      	adds	r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	fbb2 f4f3 	udiv	r4, r2, r3
 8002792:	f7ff fd15 	bl	80021c0 <LL_RCC_PLL_GetN>
 8002796:	4603      	mov	r3, r0
 8002798:	fb03 f404 	mul.w	r4, r3, r4
 800279c:	f7ff fd1e 	bl	80021dc <LL_RCC_PLL_GetR>
 80027a0:	4603      	mov	r3, r0
 80027a2:	0e5b      	lsrs	r3, r3, #25
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	08002bac 	.word	0x08002bac
 80027b8:	00f42400 	.word	0x00f42400
 80027bc:	007a1200 	.word	0x007a1200

080027c0 <LL_SPI_IsEnabled>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	2b40      	cmp	r3, #64	; 0x40
 80027d2:	d101      	bne.n	80027d8 <LL_SPI_IsEnabled+0x18>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <LL_SPI_IsEnabled+0x1a>
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_SPI_SetRxFIFOThreshold>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	605a      	str	r2, [r3, #4]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_SPI_SetCRCPolynomial>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	611a      	str	r2, [r3, #16]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffc0 	bl	80027c0 <LL_SPI_IsEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d145      	bne.n	80028d2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6811      	ldr	r1, [r2, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6852      	ldr	r2, [r2, #4]
 800285a:	4311      	orrs	r1, r2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	68d2      	ldr	r2, [r2, #12]
 8002860:	4311      	orrs	r1, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6912      	ldr	r2, [r2, #16]
 8002866:	4311      	orrs	r1, r2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	6952      	ldr	r2, [r2, #20]
 800286c:	4311      	orrs	r1, r2
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	6992      	ldr	r2, [r2, #24]
 8002872:	4311      	orrs	r1, r2
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	69d2      	ldr	r2, [r2, #28]
 8002878:	4311      	orrs	r1, r2
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6a12      	ldr	r2, [r2, #32]
 800287e:	430a      	orrs	r2, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	6891      	ldr	r1, [r2, #8]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	6952      	ldr	r2, [r2, #20]
 800289a:	0c12      	lsrs	r2, r2, #16
 800289c:	430a      	orrs	r2, r1
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ac:	d204      	bcs.n	80028b8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80028ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff97 	bl	80027e6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d105      	bne.n	80028ce <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff9f 	bl	800280c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <LL_USART_IsEnabled>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <LL_USART_IsEnabled+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_USART_IsEnabled+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_USART_SetStopBitsLength>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	605a      	str	r2, [r3, #4]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_USART_SetHWFlowCtrl>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_USART_SetBaudRate>:
{
 800294e:	b480      	push	{r7}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002962:	d11a      	bne.n	800299a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	005a      	lsls	r2, r3, #1
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	441a      	add	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	b29b      	uxth	r3, r3
 8002976:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	60da      	str	r2, [r3, #12]
}
 8002998:	e00a      	b.n	80029b0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	085a      	lsrs	r2, r3, #1
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	441a      	add	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	60da      	str	r2, [r3, #12]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ff84 	bl	80028dc <LL_USART_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d15b      	bne.n	8002a92 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <LL_USART_Init+0xe0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6851      	ldr	r1, [r2, #4]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	4311      	orrs	r1, r2
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	6912      	ldr	r2, [r2, #16]
 80029f0:	4311      	orrs	r1, r2
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	6992      	ldr	r2, [r2, #24]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff7c 	bl	8002902 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff89 	bl	8002928 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <LL_USART_Init+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d104      	bne.n	8002a28 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f7ff fbf8 	bl	8002214 <LL_RCC_GetUSARTClockFreq>
 8002a24:	60b8      	str	r0, [r7, #8]
 8002a26:	e023      	b.n	8002a70 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <LL_USART_Init+0xe8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d104      	bne.n	8002a3a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002a30:	200c      	movs	r0, #12
 8002a32:	f7ff fbef 	bl	8002214 <LL_RCC_GetUSARTClockFreq>
 8002a36:	60b8      	str	r0, [r7, #8]
 8002a38:	e01a      	b.n	8002a70 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <LL_USART_Init+0xec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d104      	bne.n	8002a4c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002a42:	2030      	movs	r0, #48	; 0x30
 8002a44:	f7ff fbe6 	bl	8002214 <LL_RCC_GetUSARTClockFreq>
 8002a48:	60b8      	str	r0, [r7, #8]
 8002a4a:	e011      	b.n	8002a70 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <LL_USART_Init+0xf0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d104      	bne.n	8002a5e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002a54:	20c0      	movs	r0, #192	; 0xc0
 8002a56:	f7ff fcc1 	bl	80023dc <LL_RCC_GetUARTClockFreq>
 8002a5a:	60b8      	str	r0, [r7, #8]
 8002a5c:	e008      	b.n	8002a70 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <LL_USART_Init+0xf4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d104      	bne.n	8002a70 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002a66:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002a6a:	f7ff fcb7 	bl	80023dc <LL_RCC_GetUARTClockFreq>
 8002a6e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff5e 	bl	800294e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	efff69f3 	.word	0xefff69f3
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40004c00 	.word	0x40004c00
 8002ab0:	40005000 	.word	0x40005000

08002ab4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <LL_InitTick+0x30>)
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_InitTick+0x30>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <LL_InitTick+0x30>)
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ffdd 	bl	8002ab4 <LL_InitTick>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <LL_SetSystemCoreClock+0x1c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	; (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	; (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 f820 	bl	8002b7c <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002bdc 	.word	0x08002bdc
 8002b60:	08002bdc 	.word	0x08002bdc
 8002b64:	08002bdc 	.word	0x08002bdc
 8002b68:	08002be0 	.word	0x08002be0

08002b6c <memset>:
 8002b6c:	4402      	add	r2, r0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <_init>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	bf00      	nop
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr

08002b88 <_fini>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr
