
prosthesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007260  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080073e8  080073e8  000173e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080074a0  080074a0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a0  080074a0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080074a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000088  08007530  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08007530  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b933  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252a  00000000  00000000  0002b9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bee  00000000  00000000  0002f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca1  00000000  00000000  000533de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c199a  00000000  00000000  0005f07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  00120a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073d0 	.word	0x080073d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080073d0 	.word	0x080073d0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d92:	f004 fbe7 	bl	8005564 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000d96:	2104      	movs	r1, #4
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000db2:	f003 fff5 	bl	8004da0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dd6:	f004 f809 	bl	8004dec <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dea:	f003 ff91 	bl	8004d10 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000dee:	2100      	movs	r1, #0
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000df2:	f7ff fea5 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000df8:	f7ff ff30 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dfe:	f7ff ff3f 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	099a      	lsrs	r2, r3, #6
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e24:	e002      	b.n	8000e2c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e34:	2106      	movs	r1, #6
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e38:	f7ff fe95 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e42:	f7ff febc 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000e46:	227f      	movs	r2, #127	; 0x7f
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e4c:	f7ff fee2 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	; 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	50040300 	.word	0x50040300
 8000e64:	20000018 	.word	0x20000018
 8000e68:	053e2d63 	.word	0x053e2d63
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	0c900008 	.word	0x0c900008

08000e74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eb6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000eba:	f7ff fef5 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec2:	f7ff ff07 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff04 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ede:	f004 fb41 	bl	8005564 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ee6:	f7ff ff0d 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000efe:	f003 ff4f 	bl	8004da0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f22:	f003 ff63 	bl	8004dec <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f32:	f003 feed 	bl	8004d10 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f36:	2100      	movs	r1, #0
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f3a:	f7ff fe01 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f40:	f7ff fe8c 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f46:	f7ff fe9b 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC2_Init+0x138>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0x13c>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099a      	lsrs	r2, r3, #6
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x140>)
 8000f64:	fba3 2302 	umull	r2, r3, r3, r2
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f6c:	e002      	b.n	8000f74 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	3b01      	subs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f80:	f7ff fdf1 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f84:	2200      	movs	r2, #0
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f8a:	f7ff fe18 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000f8e:	227f      	movs	r2, #127	; 0x7f
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f94:	f7ff fe3e 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	50040100 	.word	0x50040100
 8000fa8:	50040300 	.word	0x50040300
 8000fac:	20000018 	.word	0x20000018
 8000fb0:	053e2d63 	.word	0x053e2d63
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	10c00010 	.word	0x10c00010

08000fbc <LL_AHB2_GRP1_EnableClock>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	43db      	mvns	r3, r3
 8001008:	ea02 0103 	and.w	r1, r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001024:	2320      	movs	r3, #32
 8001026:	e003      	b.n	8001030 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fa03 f202 	lsl.w	r2, r3, r2
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	430a      	orrs	r2, r1
 8001040:	3302      	adds	r3, #2
 8001042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000

08001058 <LL_GPIO_SetPinMode>:
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	613b      	str	r3, [r7, #16]
  return result;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800107e:	2320      	movs	r3, #32
 8001080:	e003      	b.n	800108a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2103      	movs	r1, #3
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	401a      	ands	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	61fb      	str	r3, [r7, #28]
  return result;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80010ac:	2320      	movs	r3, #32
 80010ae:	e003      	b.n	80010b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	; 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_GPIO_SetPinPull>:
{
 80010d2:	b480      	push	{r7}
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	613b      	str	r3, [r7, #16]
  return result;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80010f8:	2320      	movs	r3, #32
 80010fa:	e003      	b.n	8001104 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2103      	movs	r1, #3
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	61fb      	str	r3, [r7, #28]
  return result;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001126:	2320      	movs	r3, #32
 8001128:	e003      	b.n	8001132 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	60da      	str	r2, [r3, #12]
}
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff ff16 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001190:	2080      	movs	r0, #128	; 0x80
 8001192:	f7ff ff13 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff10 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ff0d 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin);
 80011a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <MX_GPIO_Init+0x11c>)
 80011a8:	f7ff ffd0 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENC_CSn_GPIO_Port, ENC_CSn_Pin);
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4836      	ldr	r0, [pc, #216]	; (8001288 <MX_GPIO_Init+0x120>)
 80011b0:	f7ff ffcc 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff ffc6 	bl	800114c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80011c0:	4932      	ldr	r1, [pc, #200]	; (800128c <MX_GPIO_Init+0x124>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff ff12 	bl	8000fec <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011de:	2302      	movs	r3, #2
 80011e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 ff79 	bl	80050e0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <MX_GPIO_Init+0x120>)
 80011f6:	f7ff ff6c 	bl	80010d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_GPIO_Init+0x120>)
 8001202:	f7ff ff29 	bl	8001058 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin;
 8001206:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 800120a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_GPIO_Init+0x11c>)
 8001222:	f004 f99f 	bl	8005564 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CSn_Pin;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122a:	2301      	movs	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_CSn_GPIO_Port, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0x120>)
 8001240:	f004 f990 	bl	8005564 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_DO_Pin;
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_DO_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_GPIO_Init+0x120>)
 8001256:	f004 f985 	bl	8005564 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f004 f974 	bl	8005564 <LL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	00f00003 	.word	0x00f00003

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f023 0203 	bic.w	r2, r3, #3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	621a      	str	r2, [r3, #32]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 0201 	bic.w	r2, r3, #1
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <LL_RCC_SetLPTIMClockSource>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001510:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001514:	f7ff ffc8 	bl	80014a8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001518:	2020      	movs	r0, #32
 800151a:	f7ff ffdf 	bl	80014dc <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800151e:	f7ff feb7 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001522:	4603      	mov	r3, r0
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff07 	bl	800133c <NVIC_EncodePriority>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	2042      	movs	r0, #66	; 0x42
 8001534:	f7ff fed8 	bl	80012e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001538:	2042      	movs	r0, #66	; 0x42
 800153a:	f7ff feb7 	bl	80012ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800153e:	2100      	movs	r1, #0
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001542:	f7ff ff9d 	bl	8001480 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001546:	2100      	movs	r1, #0
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800154a:	f7ff ff63 	bl	8001414 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001552:	f7ff ff4c 	bl	80013ee <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001556:	2100      	movs	r1, #0
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800155a:	f7ff ff22 	bl	80013a2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800155e:	2100      	movs	r1, #0
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001562:	f7ff ff31 	bl	80013c8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001568:	f7ff ff7a 	bl	8001460 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800156c:	2100      	movs	r1, #0
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001570:	f7ff ff63 	bl	800143a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40009400 	.word	0x40009400

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_LPTIM_Enable>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_LPTIM_StartCounter>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f023 0206 	bic.w	r2, r3, #6
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_LPTIM_SetAutoReload>:
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_RCC_LSE_Enable>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <LL_RCC_LSE_SetDriveCapability>:
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	f023 0218 	bic.w	r2, r3, #24
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <LL_RCC_LSE_IsReady>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <LL_RCC_LSE_IsReady+0x24>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <LL_RCC_LSE_IsReady+0x16>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_RCC_LSE_IsReady+0x18>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_MSI_Enable>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_MSI_IsReady>:
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <LL_RCC_MSI_IsReady+0x20>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b02      	cmp	r3, #2
 800171e:	d101      	bne.n	8001724 <LL_RCC_MSI_IsReady+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_RCC_MSI_IsReady+0x16>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_MSI_EnablePLLMode>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_MSI_SetRange>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_MSI_SetCalibTrimming>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_SetSysClkSource>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 0203 	bic.w	r2, r3, #3
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_GetSysClkSource>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_GetSysClkSource+0x18>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_SetAHBPrescaler>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetAPB1Prescaler>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_SetAPB2Prescaler>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <LL_RCC_PLL_IsReady+0x24>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b4:	d101      	bne.n	80018ba <LL_RCC_PLL_IsReady+0x16>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_RCC_PLL_IsReady+0x18>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0212      	lsls	r2, r2, #8
 80018ec:	4311      	orrs	r1, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	4904      	ldr	r1, [pc, #16]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	f9ff808c 	.word	0xf9ff808c

0800190c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_APB1_GRP1_EnableClock>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40022000 	.word	0x40022000

080019b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <LL_FLASH_GetLatency+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40007000 	.word	0x40007000

08001a18 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff ff7c 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a68:	f7ff ff60 	bl	800192c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f7ff fd85 	bl	800157c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a72:	f000 f885 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a76:	f7ff fb77 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a7a:	f002 f979 	bl	8003d70 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a7e:	f001 ffe5 	bl	8003a4c <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001a82:	f7ff fd43 	bl	800150c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001a86:	f002 f837 	bl	8003af8 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001a8a:	f7ff f9f3 	bl	8000e74 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a8e:	f7ff f94b 	bl	8000d28 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t MagEnc;
	MagEnc.DO_GPIOx = ENC_DO_GPIO_Port;
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <main+0x104>)
 8001a94:	60bb      	str	r3, [r7, #8]
	MagEnc.CLK_GPIOx = ENC_CLK_GPIO_Port;
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <main+0x108>)
 8001a98:	60fb      	str	r3, [r7, #12]
	MagEnc.CSn_GPIOx = ENC_CSn_GPIO_Port;
 8001a9a:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <main+0x104>)
 8001a9c:	613b      	str	r3, [r7, #16]
	MagEnc.DO_Pin = ENC_DO_Pin;
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	82bb      	strh	r3, [r7, #20]
	MagEnc.CLK_Pin = ENC_CLK_Pin;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	82fb      	strh	r3, [r7, #22]
	MagEnc.CSn_Pin = ENC_CSn_Pin;
 8001aa6:	2340      	movs	r3, #64	; 0x40
 8001aa8:	833b      	strh	r3, [r7, #24]

	struct Configuration_s Config;
	Config.Device = knee;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	717b      	strb	r3, [r7, #5]
	Config.Side = left;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	713b      	strb	r3, [r7, #4]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001ab2:	f7ff ff8d 	bl	80019d0 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001ab6:	482b      	ldr	r0, [pc, #172]	; (8001b64 <main+0x10c>)
 8001ab8:	f7ff fd98 	bl	80015ec <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001abc:	4829      	ldr	r0, [pc, #164]	; (8001b64 <main+0x10c>)
 8001abe:	f7ff fdcb 	bl	8001658 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001ac2:	213f      	movs	r1, #63	; 0x3f
 8001ac4:	4827      	ldr	r0, [pc, #156]	; (8001b64 <main+0x10c>)
 8001ac6:	f7ff fdb4 	bl	8001632 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001aca:	2104      	movs	r1, #4
 8001acc:	4825      	ldr	r0, [pc, #148]	; (8001b64 <main+0x10c>)
 8001ace:	f7ff fd9d 	bl	800160c <LL_LPTIM_StartCounter>

	LL_SPI_Enable(SPI1);
 8001ad2:	4825      	ldr	r0, [pc, #148]	; (8001b68 <main+0x110>)
 8001ad4:	f7ff ffb0 	bl	8001a38 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001ad8:	4824      	ldr	r0, [pc, #144]	; (8001b6c <main+0x114>)
 8001ada:	f7ff ffad 	bl	8001a38 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001ade:	4824      	ldr	r0, [pc, #144]	; (8001b70 <main+0x118>)
 8001ae0:	f7ff fd70 	bl	80015c4 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <main+0x11c>)
 8001ae6:	f7ff fd6d 	bl	80015c4 <LL_ADC_Enable>

	if(MPU925x_Init(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin))
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001af2:	481d      	ldr	r0, [pc, #116]	; (8001b68 <main+0x110>)
 8001af4:	f002 fe44 	bl	8004780 <MPU925x_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <main+0xaa>
		Error_Handler();
 8001afe:	f000 f89d 	bl	8001c3c <Error_Handler>
	MPU925x_SetAccelSensitivity(mpu925x_accelSensitivity_8g);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f002 fe62 	bl	80047cc <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(mpu925x_gyroSensitivity_1000dps);
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f002 fedb 	bl	80048c4 <MPU925x_SetGyroSensitivity>

	CAN_configure();
 8001b0e:	f002 fdaf 	bl	8004670 <CAN_configure>
	EPOS4_SetCSTMode(kneeCANID);
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <main+0x120>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fad9 	bl	80040ce <EPOS4_SetCSTMode>
	AS5145B_Init(&MagEnc);
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 f9d3 	bl	8003ecc <AS5145B_Init>

	InitProsthesisControl(Config);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8ce 	bl	8001cc8 <InitProsthesisControl>

	for(uint16_t i = 0; i < 1000; i++);		// Remove spikes from beginning
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	83fb      	strh	r3, [r7, #30]
 8001b30:	e002      	b.n	8001b38 <main+0xe0>
 8001b32:	8bfb      	ldrh	r3, [r7, #30]
 8001b34:	3301      	adds	r3, #1
 8001b36:	83fb      	strh	r3, [r7, #30]
 8001b38:	8bfb      	ldrh	r3, [r7, #30]
 8001b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b3e:	d3f8      	bcc.n	8001b32 <main+0xda>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(none);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f961 	bl	8001e08 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <main+0x124>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0fb      	beq.n	8001b46 <main+0xee>
	  {
		  RunProsthesisControl();
 8001b4e:	f000 f975 	bl	8001e3c <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <main+0x124>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001b58:	e7f5      	b.n	8001b46 <main+0xee>
 8001b5a:	bf00      	nop
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000400 	.word	0x48000400
 8001b64:	40009400 	.word	0x40009400
 8001b68:	40013000 	.word	0x40013000
 8001b6c:	40003800 	.word	0x40003800
 8001b70:	50040000 	.word	0x50040000
 8001b74:	50040100 	.word	0x50040100
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	200000a4 	.word	0x200000a4

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001b84:	2004      	movs	r0, #4
 8001b86:	f7ff ff01 	bl	800198c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ff12 	bl	80019b4 <LL_FLASH_GetLatency>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d1fa      	bne.n	8001b8c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b9a:	f7ff ff29 	bl	80019f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001b9e:	f7ff fda7 	bl	80016f0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff fdb4 	bl	8001710 <LL_RCC_MSI_IsReady>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d1fa      	bne.n	8001ba4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001bae:	f7ff fdd1 	bl	8001754 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001bb2:	20b0      	movs	r0, #176	; 0xb0
 8001bb4:	f7ff fdde 	bl	8001774 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fdef 	bl	800179c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001bbe:	f7ff ff2b 	bl	8001a18 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fd6a 	bl	800169c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001bc8:	f7ff fd56 	bl	8001678 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001bcc:	bf00      	nop
 8001bce:	f7ff fd7b 	bl	80016c8 <LL_RCC_LSE_IsReady>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d1fa      	bne.n	8001bce <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001bd8:	f7ff fdac 	bl	8001734 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be0:	2228      	movs	r2, #40	; 0x28
 8001be2:	2150      	movs	r1, #80	; 0x50
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fe71 	bl	80018cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001bea:	f7ff fe8f 	bl	800190c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bee:	f7ff fe49 	bl	8001884 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff fe56 	bl	80018a4 <LL_RCC_PLL_IsReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1fa      	bne.n	8001bf4 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bfe:	2003      	movs	r0, #3
 8001c00:	f7ff fde2 	bl	80017c8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c04:	bf00      	nop
 8001c06:	f7ff fdf3 	bl	80017f0 <LL_RCC_GetSysClkSource>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d1fa      	bne.n	8001c06 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fdfb 	bl	800180c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001c16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c1a:	f7ff fe0b 	bl	8001834 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001c1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c22:	f7ff fe1b 	bl	800185c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <SystemClock_Config+0xb8>)
 8001c28:	f004 fa62 	bl	80060f0 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <SystemClock_Config+0xb8>)
 8001c2e:	f004 fa95 	bl	800615c <LL_SetSystemCoreClock>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	04c4b400 	.word	0x04c4b400

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>

08001c46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	b29b      	uxth	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d101      	bne.n	8001ca0 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// Includes variables that are subject to change during testing for convenience
void InitProsthesisControl(struct Configuration_s option)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	80b8      	strh	r0, [r7, #4]
	config.Device = option.Device;
 8001cd0:	797a      	ldrb	r2, [r7, #5]
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <InitProsthesisControl+0x104>)
 8001cd4:	705a      	strb	r2, [r3, #1]
	config.Side = option.Side;
 8001cd6:	793a      	ldrb	r2, [r7, #4]
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <InitProsthesisControl+0x104>)
 8001cda:	701a      	strb	r2, [r3, #0]

	ankleEncBias = 1325 * AS5145B_RAW2DEG;
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <InitProsthesisControl+0x108>)
 8001cde:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <InitProsthesisControl+0x10c>)
 8001ce0:	601a      	str	r2, [r3, #0]
	kneeEncBias = 2244 * AS5145B_RAW2DEG;
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <InitProsthesisControl+0x110>)
 8001ce4:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <InitProsthesisControl+0x114>)
 8001ce6:	601a      	str	r2, [r3, #0]

	CM_Ankle.ImpCtrl.eqPoint = 0.0f;
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <InitProsthesisControl+0x118>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
	CM_Ankle.ImpCtrl.kd = 0.0f;
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <InitProsthesisControl+0x118>)
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
	CM_Ankle.ImpCtrl.kp = 0.0f;
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <InitProsthesisControl+0x118>)
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	CM_Ankle.StanceCtrl.eqPoint = 0.0f;
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
	CM_Ankle.StanceCtrl.kd = 0.0f;
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
	CM_Ankle.StanceCtrl.kp = 0.0f;
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
	CM_Ankle.SwingFlexCtrl.eqPoint = 0.0f;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	CM_Ankle.SwingFlexCtrl.kd = 0.0f;
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
	CM_Ankle.SwingFlexCtrl.kp = 0.0f;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
	CM_Ankle.SwingExtCtrl.eqPoint = 0.0f;
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	649a      	str	r2, [r3, #72]	; 0x48
	CM_Ankle.SwingExtCtrl.kd = 0.0f;
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	64da      	str	r2, [r3, #76]	; 0x4c
	CM_Ankle.SwingExtCtrl.kp = 0.0f;
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <InitProsthesisControl+0x118>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	651a      	str	r2, [r3, #80]	; 0x50

	CM_Knee.ImpCtrl.kd = 0.0f;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
	CM_Knee.ImpCtrl.kp = 0.0f;
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
	CM_Knee.StanceCtrl.eqPoint = 0.0f;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
	CM_Knee.StanceCtrl.kd = 0.0f;
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
	CM_Knee.StanceCtrl.kp = 0.0f;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
	CM_Knee.SwingFlexCtrl.eqPoint = 0.0f;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
	CM_Knee.SwingFlexCtrl.kd = 0.0f;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
	CM_Knee.SwingFlexCtrl.kp = 0.0f;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
	CM_Knee.SwingExtCtrl.eqPoint = 0.0f;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	649a      	str	r2, [r3, #72]	; 0x48
	CM_Knee.SwingExtCtrl.kd = 0.0f;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	64da      	str	r2, [r3, #76]	; 0x4c
	CM_Knee.SwingExtCtrl.kp = 0.0f;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <InitProsthesisControl+0x11c>)
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	651a      	str	r2, [r3, #80]	; 0x50

	CM_lcBot_upperBound = 1431.0f;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <InitProsthesisControl+0x120>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <InitProsthesisControl+0x124>)
 8001da4:	601a      	str	r2, [r3, #0]
	CM_lcBot_lowerBound = 1395.0f;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <InitProsthesisControl+0x128>)
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <InitProsthesisControl+0x12c>)
 8001daa:	601a      	str	r2, [r3, #0]
	CM_lcTop_upperBound = 1461.0f;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <InitProsthesisControl+0x130>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <InitProsthesisControl+0x134>)
 8001db0:	601a      	str	r2, [r3, #0]
	CM_lcTop_lowerBound = 1395.0f;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <InitProsthesisControl+0x138>)
 8001db4:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <InitProsthesisControl+0x12c>)
 8001db6:	601a      	str	r2, [r3, #0]

	CM_speedThreshold = 0.0f;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <InitProsthesisControl+0x13c>)
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	200000b0 	.word	0x200000b0
 8001dd0:	200000a8 	.word	0x200000a8
 8001dd4:	42e8e900 	.word	0x42e8e900
 8001dd8:	200000ac 	.word	0x200000ac
 8001ddc:	43453a00 	.word	0x43453a00
 8001de0:	200001c8 	.word	0x200001c8
 8001de4:	20000250 	.word	0x20000250
 8001de8:	200001b4 	.word	0x200001b4
 8001dec:	44b2e000 	.word	0x44b2e000
 8001df0:	200001b8 	.word	0x200001b8
 8001df4:	44ae6000 	.word	0x44ae6000
 8001df8:	200001bc 	.word	0x200001bc
 8001dfc:	44b6a000 	.word	0x44b6a000
 8001e00:	200001c0 	.word	0x200001c0
 8001e04:	200001c4 	.word	0x200001c4

08001e08 <RequireTestProgram>:

void RequireTestProgram(enum TestPrograms_e option)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <RequireTestProgram+0x2c>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	7013      	strb	r3, [r2, #0]

	if(testProgram != none)
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <RequireTestProgram+0x2c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <RequireTestProgram+0x30>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200000a5 	.word	0x200000a5
 8001e38:	200001b1 	.word	0x200001b1

08001e3c <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	GetInputs();
 8001e40:	f000 f828 	bl	8001e94 <GetInputs>
	ProcessInputs();
 8001e44:	f000 f8c8 	bl	8001fd8 <ProcessInputs>

	if(isTestProgramRequired)
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <RunProsthesisControl+0x4c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <RunProsthesisControl+0x1a>
		RunTestProgram();
 8001e50:	f001 fcfe 	bl	8003850 <RunTestProgram>
 8001e54:	e003      	b.n	8001e5e <RunProsthesisControl+0x22>
	else
	{
		RunStateMachine();
 8001e56:	f001 fb63 	bl	8003520 <RunStateMachine>
		RunImpedanceControl();
 8001e5a:	f001 fc71 	bl	8003740 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <RunProsthesisControl+0x50>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <RunProsthesisControl+0x50>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <RunProsthesisControl+0x54>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001e72:	e006      	b.n	8001e82 <RunProsthesisControl+0x46>
	else if(isSecond)
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <RunProsthesisControl+0x54>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <RunProsthesisControl+0x46>
		isSecond = 0;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <RunProsthesisControl+0x54>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001b1 	.word	0x200001b1
 8001e8c:	20000010 	.word	0x20000010
 8001e90:	200001b0 	.word	0x200001b0

08001e94 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

void GetInputs(void)
{
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
	// Differentiate between two IMUs??
	if((config.Device == ankle) || (config.Device == combined))
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <GetInputs+0xe4>)
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <GetInputs+0x16>
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <GetInputs+0xe4>)
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d121      	bne.n	8001eee <GetInputs+0x5a>
	{
		CM_Ankle.jointAngle[0] = AS5145B_ReadPosition_Deg() - ankleEncBias;
 8001eaa:	f002 f8d1 	bl	8004050 <AS5145B_ReadPosition_Deg>
 8001eae:	eeb0 7a40 	vmov.f32	s14, s0
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <GetInputs+0xe8>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	ee17 0a90 	vmov	r0, s15
 8001ec0:	f7fe fae6 	bl	8000490 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	492d      	ldr	r1, [pc, #180]	; (8001f80 <GetInputs+0xec>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
		AnkleIMUData = MPU925x_ReadIMU();
 8001ece:	4c2d      	ldr	r4, [pc, #180]	; (8001f84 <GetInputs+0xf0>)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fd72 	bl	80049bc <MPU925x_ReadIMU>
 8001ed8:	4625      	mov	r5, r4
 8001eda:	463c      	mov	r4, r7
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ee8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001eec:	e028      	b.n	8001f40 <GetInputs+0xac>
	}
	else if((config.Device == knee) || (config.Device == combined))
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <GetInputs+0xe4>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <GetInputs+0x6a>
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <GetInputs+0xe4>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d120      	bne.n	8001f40 <GetInputs+0xac>
	{
		CM_Knee.jointAngle[0] = AS5145B_ReadPosition_Deg() - kneeEncBias;
 8001efe:	f002 f8a7 	bl	8004050 <AS5145B_ReadPosition_Deg>
 8001f02:	eeb0 7a40 	vmov.f32	s14, s0
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <GetInputs+0xf4>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fabc 	bl	8000490 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	491b      	ldr	r1, [pc, #108]	; (8001f8c <GetInputs+0xf8>)
 8001f1e:	e9c1 2300 	strd	r2, r3, [r1]
		KneeIMUData = MPU925x_ReadIMU();
 8001f22:	4c1b      	ldr	r4, [pc, #108]	; (8001f90 <GetInputs+0xfc>)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fd48 	bl	80049bc <MPU925x_ReadIMU>
 8001f2c:	4625      	mov	r5, r4
 8001f2e:	463c      	mov	r4, r7
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}

	LoadCell->bot[0] = ReadLoadCell(ADC1);
 8001f40:	4814      	ldr	r0, [pc, #80]	; (8001f94 <GetInputs+0x100>)
 8001f42:	f000 f82d 	bl	8001fa0 <ReadLoadCell>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa7f 	bl	800044c <__aeabi_ui2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4911      	ldr	r1, [pc, #68]	; (8001f98 <GetInputs+0x104>)
 8001f54:	e9c1 2300 	strd	r2, r3, [r1]
	LoadCell->top[0] = ReadLoadCell(ADC2);
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <GetInputs+0x108>)
 8001f5a:	f000 f821 	bl	8001fa0 <ReadLoadCell>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa73 	bl	800044c <__aeabi_ui2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	490b      	ldr	r1, [pc, #44]	; (8001f98 <GetInputs+0x104>)
 8001f6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bdb0      	pop	{r4, r5, r7, pc}
 8001f78:	200000b0 	.word	0x200000b0
 8001f7c:	200000a8 	.word	0x200000a8
 8001f80:	200001c8 	.word	0x200001c8
 8001f84:	20000150 	.word	0x20000150
 8001f88:	200000ac 	.word	0x200000ac
 8001f8c:	20000250 	.word	0x20000250
 8001f90:	20000180 	.word	0x20000180
 8001f94:	50040000 	.word	0x50040000
 8001f98:	200000c0 	.word	0x200000c0
 8001f9c:	50040100 	.word	0x50040100

08001fa0 <ReadLoadCell>:

// Should be moved to ADC driver??
uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fe4c 	bl	8001c46 <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8001fae:	bf00      	nop
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fe69 	bl	8001c88 <LL_ADC_IsActiveFlag_EOC>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f9      	beq.n	8001fb0 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fe76 	bl	8001cae <LL_ADC_ClearFlag_EOC>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fe53 	bl	8001c6e <LL_ADC_REG_ReadConversionData12>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	81fb      	strh	r3, [r7, #14]
	return data;
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <ProcessInputs>:

void ProcessInputs(void)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	double tau = 1.0 / (2 * M_PI * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8001fde:	a3a8      	add	r3, pc, #672	; (adr r3, 8002280 <ProcessInputs+0x2a8>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	e9c7 2300 	strd	r2, r3, [r7]

	// Derivative of angle and filtering of load cells
	// No derivative of angle (angular speed) on first execution
	// No filtering of load cells on first or second execution
	if(isFirst)
 8001fe8:	4b9d      	ldr	r3, [pc, #628]	; (8002260 <ProcessInputs+0x288>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d04f      	beq.n	8002090 <ProcessInputs+0xb8>
	{
		if((config.Device == ankle) || (config.Device == combined))
 8001ff0:	4b9c      	ldr	r3, [pc, #624]	; (8002264 <ProcessInputs+0x28c>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <ProcessInputs+0x28>
 8001ff8:	4b9a      	ldr	r3, [pc, #616]	; (8002264 <ProcessInputs+0x28c>)
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10d      	bne.n	800201c <ProcessInputs+0x44>
		{
			CM_Ankle.jointSpeed = 0.0;
 8002000:	4999      	ldr	r1, [pc, #612]	; (8002268 <ProcessInputs+0x290>)
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 800200e:	4b96      	ldr	r3, [pc, #600]	; (8002268 <ProcessInputs+0x290>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	4994      	ldr	r1, [pc, #592]	; (8002268 <ProcessInputs+0x290>)
 8002016:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800201a:	e014      	b.n	8002046 <ProcessInputs+0x6e>
		}
		else if((config.Device == knee) || (config.Device == combined))
 800201c:	4b91      	ldr	r3, [pc, #580]	; (8002264 <ProcessInputs+0x28c>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d003      	beq.n	800202c <ProcessInputs+0x54>
 8002024:	4b8f      	ldr	r3, [pc, #572]	; (8002264 <ProcessInputs+0x28c>)
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10c      	bne.n	8002046 <ProcessInputs+0x6e>
		{
			CM_Knee.jointSpeed = 0.0;
 800202c:	498f      	ldr	r1, [pc, #572]	; (800226c <ProcessInputs+0x294>)
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800203a:	4b8c      	ldr	r3, [pc, #560]	; (800226c <ProcessInputs+0x294>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	498a      	ldr	r1, [pc, #552]	; (800226c <ProcessInputs+0x294>)
 8002042:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[2] = LoadCell->bot[0];
 8002046:	4b8a      	ldr	r3, [pc, #552]	; (8002270 <ProcessInputs+0x298>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	4988      	ldr	r1, [pc, #544]	; (8002270 <ProcessInputs+0x298>)
 800204e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		LoadCell->top[2] = LoadCell->top[0];
 8002052:	4b87      	ldr	r3, [pc, #540]	; (8002270 <ProcessInputs+0x298>)
 8002054:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002058:	4985      	ldr	r1, [pc, #532]	; (8002270 <ProcessInputs+0x298>)
 800205a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 800205e:	4b84      	ldr	r3, [pc, #528]	; (8002270 <ProcessInputs+0x298>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	4983      	ldr	r1, [pc, #524]	; (8002274 <ProcessInputs+0x29c>)
 8002066:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 800206a:	4b81      	ldr	r3, [pc, #516]	; (8002270 <ProcessInputs+0x298>)
 800206c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002070:	4980      	ldr	r1, [pc, #512]	; (8002274 <ProcessInputs+0x29c>)
 8002072:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 8002076:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <ProcessInputs+0x29c>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	497d      	ldr	r1, [pc, #500]	; (8002274 <ProcessInputs+0x29c>)
 800207e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 8002082:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <ProcessInputs+0x29c>)
 8002084:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002088:	497a      	ldr	r1, [pc, #488]	; (8002274 <ProcessInputs+0x29c>)
 800208a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800208e:	e299      	b.n	80025c4 <ProcessInputs+0x5ec>
	}
	else if(isSecond)
 8002090:	4b79      	ldr	r3, [pc, #484]	; (8002278 <ProcessInputs+0x2a0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80f7 	beq.w	8002288 <ProcessInputs+0x2b0>
	{
		if((config.Device == ankle) || (config.Device == combined))
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <ProcessInputs+0x28c>)
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <ProcessInputs+0xd2>
 80020a2:	4b70      	ldr	r3, [pc, #448]	; (8002264 <ProcessInputs+0x28c>)
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d156      	bne.n	8002158 <ProcessInputs+0x180>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <ProcessInputs+0x290>)
 80020ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b0:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <ProcessInputs+0x290>)
 80020b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020b6:	f7fe f88b 	bl	80001d0 <__aeabi_dsub>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	f7fe f885 	bl	80001d4 <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	f7fe f87b 	bl	80001d4 <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	4b65      	ldr	r3, [pc, #404]	; (800227c <ProcessInputs+0x2a4>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe f870 	bl	80001d0 <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <ProcessInputs+0x290>)
 80020fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020fe:	f7fe fa1f 	bl	8000540 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe f863 	bl	80001d4 <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	461d      	mov	r5, r3
 8002116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	f7fe f859 	bl	80001d4 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	4b54      	ldr	r3, [pc, #336]	; (800227c <ProcessInputs+0x2a4>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe f850 	bl	80001d4 <__adddf3>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe fb2a 	bl	8000794 <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4948      	ldr	r1, [pc, #288]	; (8002268 <ProcessInputs+0x290>)
 8002146:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <ProcessInputs+0x290>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	4945      	ldr	r1, [pc, #276]	; (8002268 <ProcessInputs+0x290>)
 8002152:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002156:	e05d      	b.n	8002214 <ProcessInputs+0x23c>
		}
		else if((config.Device == knee) || (config.Device == combined))
 8002158:	4b42      	ldr	r3, [pc, #264]	; (8002264 <ProcessInputs+0x28c>)
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d003      	beq.n	8002168 <ProcessInputs+0x190>
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <ProcessInputs+0x28c>)
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d155      	bne.n	8002214 <ProcessInputs+0x23c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <ProcessInputs+0x294>)
 800216a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <ProcessInputs+0x294>)
 8002170:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002174:	f7fe f82c 	bl	80001d0 <__aeabi_dsub>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	f7fe f826 	bl	80001d4 <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4614      	mov	r4, r2
 800218e:	461d      	mov	r5, r3
 8002190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	f7fe f81c 	bl	80001d4 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <ProcessInputs+0x2a4>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe f811 	bl	80001d0 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <ProcessInputs+0x294>)
 80021b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021bc:	f7fe f9c0 	bl	8000540 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe f804 	bl	80001d4 <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4614      	mov	r4, r2
 80021d2:	461d      	mov	r5, r3
 80021d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	f7fd fffa 	bl	80001d4 <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <ProcessInputs+0x2a4>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fd fff1 	bl	80001d4 <__adddf3>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe facb 	bl	8000794 <__aeabi_ddiv>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <ProcessInputs+0x294>)
 8002204:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <ProcessInputs+0x294>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	4917      	ldr	r1, [pc, #92]	; (800226c <ProcessInputs+0x294>)
 8002210:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		LoadCell->bot[1] = LoadCell->bot[0];
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <ProcessInputs+0x298>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	4915      	ldr	r1, [pc, #84]	; (8002270 <ProcessInputs+0x298>)
 800221c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[1] = LoadCell->top[0];
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <ProcessInputs+0x298>)
 8002222:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002226:	4912      	ldr	r1, [pc, #72]	; (8002270 <ProcessInputs+0x298>)
 8002228:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[0] = LoadCell->bot[0];
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <ProcessInputs+0x298>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4910      	ldr	r1, [pc, #64]	; (8002274 <ProcessInputs+0x29c>)
 8002234:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = LoadCell->top[0];
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <ProcessInputs+0x298>)
 800223a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800223e:	490d      	ldr	r1, [pc, #52]	; (8002274 <ProcessInputs+0x29c>)
 8002240:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <ProcessInputs+0x29c>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	490a      	ldr	r1, [pc, #40]	; (8002274 <ProcessInputs+0x29c>)
 800224c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <ProcessInputs+0x29c>)
 8002252:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002256:	4907      	ldr	r1, [pc, #28]	; (8002274 <ProcessInputs+0x29c>)
 8002258:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800225c:	e1b2      	b.n	80025c4 <ProcessInputs+0x5ec>
 800225e:	bf00      	nop
 8002260:	20000010 	.word	0x20000010
 8002264:	200000b0 	.word	0x200000b0
 8002268:	200001c8 	.word	0x200001c8
 800226c:	20000250 	.word	0x20000250
 8002270:	200000c0 	.word	0x200000c0
 8002274:	200002d8 	.word	0x200002d8
 8002278:	200001b0 	.word	0x200001b0
 800227c:	20000008 	.word	0x20000008
 8002280:	be3b06cf 	.word	0xbe3b06cf
 8002284:	3f904c26 	.word	0x3f904c26
	}
	else
	{
		if((config.Device == ankle) || (config.Device == combined))
 8002288:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <ProcessInputs+0x370>)
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <ProcessInputs+0x2c0>
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <ProcessInputs+0x370>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d15d      	bne.n	8002354 <ProcessInputs+0x37c>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Ankle.jointSpeed = (2*(CM_Ankle.jointAngle[0] - CM_Ankle.jointAngle[1]) + (2*tau - dt)*CM_Ankle.jointSpeed) / (dt + 2*tau);
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <ProcessInputs+0x374>)
 800229a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <ProcessInputs+0x374>)
 80022a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022a4:	f7fd ff94 	bl	80001d0 <__aeabi_dsub>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	f7fd ff8e 	bl	80001d4 <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	f7fd ff84 	bl	80001d4 <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <ProcessInputs+0x378>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fd ff79 	bl	80001d0 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <ProcessInputs+0x374>)
 80022e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022ec:	f7fe f928 	bl	8000540 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fd ff6c 	bl	80001d4 <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f7fd ff62 	bl	80001d4 <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <ProcessInputs+0x378>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fd ff59 	bl	80001d4 <__adddf3>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fe fa33 	bl	8000794 <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4906      	ldr	r1, [pc, #24]	; (800234c <ProcessInputs+0x374>)
 8002334:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Ankle.jointAngle[1] = CM_Ankle.jointAngle[0];
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <ProcessInputs+0x374>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	4903      	ldr	r1, [pc, #12]	; (800234c <ProcessInputs+0x374>)
 8002340:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002344:	e064      	b.n	8002410 <ProcessInputs+0x438>
 8002346:	bf00      	nop
 8002348:	200000b0 	.word	0x200000b0
 800234c:	200001c8 	.word	0x200001c8
 8002350:	20000008 	.word	0x20000008
		}
		else if((config.Device == knee) || (config.Device == combined))
 8002354:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <ProcessInputs+0x620>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d003      	beq.n	8002364 <ProcessInputs+0x38c>
 800235c:	4ba6      	ldr	r3, [pc, #664]	; (80025f8 <ProcessInputs+0x620>)
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d155      	bne.n	8002410 <ProcessInputs+0x438>
		{
			// Practical differentiator (bilinear transformation used)
			CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 8002364:	4ba5      	ldr	r3, [pc, #660]	; (80025fc <ProcessInputs+0x624>)
 8002366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236a:	4ba4      	ldr	r3, [pc, #656]	; (80025fc <ProcessInputs+0x624>)
 800236c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002370:	f7fd ff2e 	bl	80001d0 <__aeabi_dsub>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	f7fd ff28 	bl	80001d4 <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4614      	mov	r4, r2
 800238a:	461d      	mov	r5, r3
 800238c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	f7fd ff1e 	bl	80001d4 <__adddf3>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	4b97      	ldr	r3, [pc, #604]	; (8002600 <ProcessInputs+0x628>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fd ff13 	bl	80001d0 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <ProcessInputs+0x624>)
 80023b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023b8:	f7fe f8c2 	bl	8000540 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd ff06 	bl	80001d4 <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	f7fd fefc 	bl	80001d4 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	4b86      	ldr	r3, [pc, #536]	; (8002600 <ProcessInputs+0x628>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd fef3 	bl	80001d4 <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fe f9cd 	bl	8000794 <__aeabi_ddiv>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	497f      	ldr	r1, [pc, #508]	; (80025fc <ProcessInputs+0x624>)
 8002400:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8002404:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <ProcessInputs+0x624>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	497c      	ldr	r1, [pc, #496]	; (80025fc <ProcessInputs+0x624>)
 800240c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 8002410:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <ProcessInputs+0x62c>)
 8002412:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002416:	a370      	add	r3, pc, #448	; (adr r3, 80025d8 <ProcessInputs+0x600>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe f890 	bl	8000540 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4614      	mov	r4, r2
 8002426:	461d      	mov	r5, r3
 8002428:	4b76      	ldr	r3, [pc, #472]	; (8002604 <ProcessInputs+0x62c>)
 800242a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800242e:	a36c      	add	r3, pc, #432	; (adr r3, 80025e0 <ProcessInputs+0x608>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f884 	bl	8000540 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7fd fec6 	bl	80001d0 <__aeabi_dsub>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->bot[0] + 0.0256 * LoadCell->bot[1] + 0.0128 * LoadCell->bot[2];
 800244c:	4b6e      	ldr	r3, [pc, #440]	; (8002608 <ProcessInputs+0x630>)
 800244e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002452:	a365      	add	r3, pc, #404	; (adr r3, 80025e8 <ProcessInputs+0x610>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f872 	bl	8000540 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fd feb6 	bl	80001d4 <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	4b65      	ldr	r3, [pc, #404]	; (8002608 <ProcessInputs+0x630>)
 8002472:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002476:	a35e      	add	r3, pc, #376	; (adr r3, 80025f0 <ProcessInputs+0x618>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f860 	bl	8000540 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fd fea4 	bl	80001d4 <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <ProcessInputs+0x630>)
 8002496:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800249a:	a353      	add	r3, pc, #332	; (adr r3, 80025e8 <ProcessInputs+0x610>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f84e 	bl	8000540 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4620      	mov	r0, r4
 80024aa:	4629      	mov	r1, r5
 80024ac:	f7fd fe92 	bl	80001d4 <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 80024b4:	4953      	ldr	r1, [pc, #332]	; (8002604 <ProcessInputs+0x62c>)
 80024b6:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 80024ba:	4b52      	ldr	r3, [pc, #328]	; (8002604 <ProcessInputs+0x62c>)
 80024bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024c0:	a345      	add	r3, pc, #276	; (adr r3, 80025d8 <ProcessInputs+0x600>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f83b 	bl	8000540 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4614      	mov	r4, r2
 80024d0:	461d      	mov	r5, r3
 80024d2:	4b4c      	ldr	r3, [pc, #304]	; (8002604 <ProcessInputs+0x62c>)
 80024d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80024d8:	a341      	add	r3, pc, #260	; (adr r3, 80025e0 <ProcessInputs+0x608>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f82f 	bl	8000540 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fd fe71 	bl	80001d0 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
									   + 0.0128 * LoadCell->top[0] + 0.0256 * LoadCell->top[1] + 0.0128 * LoadCell->top[2];
 80024f6:	4b44      	ldr	r3, [pc, #272]	; (8002608 <ProcessInputs+0x630>)
 80024f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024fc:	a33a      	add	r3, pc, #232	; (adr r3, 80025e8 <ProcessInputs+0x610>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f81d 	bl	8000540 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fd fe61 	bl	80001d4 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4614      	mov	r4, r2
 8002518:	461d      	mov	r5, r3
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <ProcessInputs+0x630>)
 800251c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002520:	a333      	add	r3, pc, #204	; (adr r3, 80025f0 <ProcessInputs+0x618>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f80b 	bl	8000540 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fd fe4f 	bl	80001d4 <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4614      	mov	r4, r2
 800253c:	461d      	mov	r5, r3
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <ProcessInputs+0x630>)
 8002540:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002544:	a328      	add	r3, pc, #160	; (adr r3, 80025e8 <ProcessInputs+0x610>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd fff9 	bl	8000540 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4620      	mov	r0, r4
 8002554:	4629      	mov	r1, r5
 8002556:	f7fd fe3d 	bl	80001d4 <__adddf3>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 800255e:	4929      	ldr	r1, [pc, #164]	; (8002604 <ProcessInputs+0x62c>)
 8002560:	e9c1 2306 	strd	r2, r3, [r1, #24]

		LoadCell->bot[2] = LoadCell->bot[1];
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <ProcessInputs+0x630>)
 8002566:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800256a:	4927      	ldr	r1, [pc, #156]	; (8002608 <ProcessInputs+0x630>)
 800256c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		LoadCell->bot[1] = LoadCell->bot[0];
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <ProcessInputs+0x630>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	4924      	ldr	r1, [pc, #144]	; (8002608 <ProcessInputs+0x630>)
 8002578:	e9c1 2302 	strd	r2, r3, [r1, #8]
		LoadCell->top[2] = LoadCell->top[1];
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <ProcessInputs+0x630>)
 800257e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002582:	4921      	ldr	r1, [pc, #132]	; (8002608 <ProcessInputs+0x630>)
 8002584:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		LoadCell->top[1] = LoadCell->top[0];
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <ProcessInputs+0x630>)
 800258a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800258e:	491e      	ldr	r1, [pc, #120]	; (8002608 <ProcessInputs+0x630>)
 8002590:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <ProcessInputs+0x62c>)
 8002596:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800259a:	491a      	ldr	r1, [pc, #104]	; (8002604 <ProcessInputs+0x62c>)
 800259c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <ProcessInputs+0x62c>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	4917      	ldr	r1, [pc, #92]	; (8002604 <ProcessInputs+0x62c>)
 80025a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <ProcessInputs+0x62c>)
 80025ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025b2:	4914      	ldr	r1, [pc, #80]	; (8002604 <ProcessInputs+0x62c>)
 80025b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <ProcessInputs+0x62c>)
 80025ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025be:	4911      	ldr	r1, [pc, #68]	; (8002604 <ProcessInputs+0x62c>)
 80025c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}

	CalibrateIMU();
 80025c4:	f000 f824 	bl	8002610 <CalibrateIMU>
	ComputeLimbAngle();
 80025c8:	f000 feda 	bl	8003380 <ComputeLimbAngle>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bdb0      	pop	{r4, r5, r7, pc}
 80025d4:	f3af 8000 	nop.w
 80025d8:	6cf41f21 	.word	0x6cf41f21
 80025dc:	3ffa7d56 	.word	0x3ffa7d56
 80025e0:	089a0275 	.word	0x089a0275
 80025e4:	3fe69e1b 	.word	0x3fe69e1b
 80025e8:	eb1c432d 	.word	0xeb1c432d
 80025ec:	3f8a36e2 	.word	0x3f8a36e2
 80025f0:	eb1c432d 	.word	0xeb1c432d
 80025f4:	3f9a36e2 	.word	0x3f9a36e2
 80025f8:	200000b0 	.word	0x200000b0
 80025fc:	20000250 	.word	0x20000250
 8002600:	20000008 	.word	0x20000008
 8002604:	200002d8 	.word	0x200002d8
 8002608:	200000c0 	.word	0x200000c0
 800260c:	00000000 	.word	0x00000000

08002610 <CalibrateIMU>:

void CalibrateIMU(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b0c4      	sub	sp, #272	; 0x110
 8002616:	af00      	add	r7, sp, #0
	double ankleAxBias = 0.0;
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	double ankleAyBias = 0.0;
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	double ankleAzBias = 0.0;
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	double ankleGxBias = 0.0;
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	double ankleGyBias = 0.0;
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double ankleGzBias = 0.0;
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double ankleN = 1.0;		// For normalization
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <CalibrateIMU+0x140>)
 8002666:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	double kneeAxBias = 0.0;
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double kneeAyBias = 0.0;
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double kneeAzBias = 0.0;
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double kneeGxBias = 0.0;
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double kneeGyBias = 0.0;
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double kneeGzBias = 0.0;
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double kneeN = 1.0;			// For normalization
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <CalibrateIMU+0x140>)
 80026b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double ac1, ac2, ac3, as1, as2, as3;
	double kc1, kc2, kc3, ks1, ks2, ks3;
	if(config.Side == left)
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <CalibrateIMU+0x144>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d14b      	bne.n	800275c <CalibrateIMU+0x14c>
	{
		ac1 = cos(M_PI);
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <CalibrateIMU+0x148>)
 80026ca:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		ac2 = cos(M_PI);
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <CalibrateIMU+0x148>)
 80026d4:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		ac3 = cos(0.0);
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <CalibrateIMU+0x140>)
 80026de:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		as1 = sin(M_PI);
 80026e2:	a319      	add	r3, pc, #100	; (adr r3, 8002748 <CalibrateIMU+0x138>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		as2 = sin(M_PI);
 80026ec:	a316      	add	r3, pc, #88	; (adr r3, 8002748 <CalibrateIMU+0x138>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		as3 = sin(0.0);
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

		kc1 = cos(M_PI);
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <CalibrateIMU+0x148>)
 8002708:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		kc2 = cos(M_PI);
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <CalibrateIMU+0x148>)
 8002712:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		kc3 = cos(0.0);
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <CalibrateIMU+0x140>)
 800271c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
		ks1 = sin(M_PI);
 8002720:	a309      	add	r3, pc, #36	; (adr r3, 8002748 <CalibrateIMU+0x138>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		ks2 = sin(M_PI);
 800272a:	a307      	add	r3, pc, #28	; (adr r3, 8002748 <CalibrateIMU+0x138>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		ks3 = sin(0.0);
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8002740:	e04e      	b.n	80027e0 <CalibrateIMU+0x1d0>
 8002742:	bf00      	nop
 8002744:	f3af 8000 	nop.w
 8002748:	33145c07 	.word	0x33145c07
 800274c:	3ca1a626 	.word	0x3ca1a626
 8002750:	3ff00000 	.word	0x3ff00000
 8002754:	200000b0 	.word	0x200000b0
 8002758:	bff00000 	.word	0xbff00000
	}
	else
	{
		ac1 = cos(0.0);
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4bbd      	ldr	r3, [pc, #756]	; (8002a58 <CalibrateIMU+0x448>)
 8002762:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		ac2 = cos(0.0);
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4bbb      	ldr	r3, [pc, #748]	; (8002a58 <CalibrateIMU+0x448>)
 800276c:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		ac3 = cos(0.0);
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4bb8      	ldr	r3, [pc, #736]	; (8002a58 <CalibrateIMU+0x448>)
 8002776:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		as1 = sin(0.0);
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		as2 = sin(0.0);
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		as3 = sin(0.0);
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

		kc1 = cos(0.0);
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	4bad      	ldr	r3, [pc, #692]	; (8002a58 <CalibrateIMU+0x448>)
 80027a4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
		kc2 = cos(0.0);
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	4baa      	ldr	r3, [pc, #680]	; (8002a58 <CalibrateIMU+0x448>)
 80027ae:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		kc3 = cos(0.0);
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4ba8      	ldr	r3, [pc, #672]	; (8002a58 <CalibrateIMU+0x448>)
 80027b8:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
		ks1 = sin(0.0);
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
		ks2 = sin(0.0);
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		ks3 = sin(0.0);
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	}

	CM_Ankle.IMUData.ax = ankleN * (AnkleIMUData.ax*(ac1*ac3 - ac2*as1*as3) + AnkleIMUData.ay*(-ac3*as1     - ac1*ac2*as3) + AnkleIMUData.az*( as2*as3)) - ankleAxBias;
 80027e0:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <CalibrateIMU+0x44c>)
 80027e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027e6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80027ea:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80027ee:	f7fd fea7 	bl	8000540 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4690      	mov	r8, r2
 80027f8:	4699      	mov	r9, r3
 80027fa:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80027fe:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002802:	f7fd fe9d 	bl	8000540 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002812:	f7fd fe95 	bl	8000540 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4640      	mov	r0, r8
 800281c:	4649      	mov	r1, r9
 800281e:	f7fd fcd7 	bl	80001d0 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4620      	mov	r0, r4
 8002828:	4629      	mov	r1, r5
 800282a:	f7fd fe89 	bl	8000540 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4692      	mov	sl, r2
 8002834:	469b      	mov	fp, r3
 8002836:	4b89      	ldr	r3, [pc, #548]	; (8002a5c <CalibrateIMU+0x44c>)
 8002838:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800283c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
 8002842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002846:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002850:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002854:	f7fd fe74 	bl	8000540 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002864:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002868:	f7fd fe6a 	bl	8000540 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002878:	f7fd fe62 	bl	8000540 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fca4 	bl	80001d0 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4640      	mov	r0, r8
 800288e:	4649      	mov	r1, r9
 8002890:	f7fd fe56 	bl	8000540 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4650      	mov	r0, sl
 800289a:	4659      	mov	r1, fp
 800289c:	f7fd fc9a 	bl	80001d4 <__adddf3>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4690      	mov	r8, r2
 80028a6:	4699      	mov	r9, r3
 80028a8:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <CalibrateIMU+0x44c>)
 80028aa:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80028ae:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80028b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80028b6:	f7fd fe43 	bl	8000540 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f7fd fe3d 	bl	8000540 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4640      	mov	r0, r8
 80028cc:	4649      	mov	r1, r9
 80028ce:	f7fd fc81 	bl	80001d4 <__adddf3>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80028de:	f7fd fe2f 	bl	8000540 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80028ee:	f7fd fc6f 	bl	80001d0 <__aeabi_dsub>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <CalibrateIMU+0x450>)
 80028fc:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	CM_Ankle.IMUData.ay = ankleN * (AnkleIMUData.ax*(ac1*as3 + ac2*ac3*as1) + AnkleIMUData.ay*( ac1*ac2*ac3 - as1*as3    ) + AnkleIMUData.az*(-ac3*as2)) - ankleAyBias;
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <CalibrateIMU+0x44c>)
 8002902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002906:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800290a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800290e:	f7fd fe17 	bl	8000540 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800291e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002922:	f7fd fe0d 	bl	8000540 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002932:	f7fd fe05 	bl	8000540 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4640      	mov	r0, r8
 800293c:	4649      	mov	r1, r9
 800293e:	f7fd fc49 	bl	80001d4 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fdf9 	bl	8000540 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4692      	mov	sl, r2
 8002954:	469b      	mov	fp, r3
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <CalibrateIMU+0x44c>)
 8002958:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800295c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002960:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002964:	f7fd fdec 	bl	8000540 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002974:	f7fd fde4 	bl	8000540 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002984:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002988:	f7fd fdda 	bl	8000540 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fc1c 	bl	80001d0 <__aeabi_dsub>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4640      	mov	r0, r8
 800299e:	4649      	mov	r1, r9
 80029a0:	f7fd fdce 	bl	8000540 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4650      	mov	r0, sl
 80029aa:	4659      	mov	r1, fp
 80029ac:	f7fd fc12 	bl	80001d4 <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4690      	mov	r8, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <CalibrateIMU+0x44c>)
 80029ba:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80029be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
 80029c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
 80029ce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80029d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80029d6:	f7fd fdb3 	bl	8000540 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fdad 	bl	8000540 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4640      	mov	r0, r8
 80029ec:	4649      	mov	r1, r9
 80029ee:	f7fd fbf1 	bl	80001d4 <__adddf3>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80029fe:	f7fd fd9f 	bl	8000540 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002a0e:	f7fd fbdf 	bl	80001d0 <__aeabi_dsub>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <CalibrateIMU+0x450>)
 8002a1c:	e9c3 0118 	strd	r0, r1, [r3, #96]	; 0x60
	CM_Ankle.IMUData.az = ankleN * (AnkleIMUData.ax*(as1*as2              ) + AnkleIMUData.ay*( ac1*as2                  ) + AnkleIMUData.az*( ac2    )) - ankleAzBias;
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <CalibrateIMU+0x44c>)
 8002a22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a26:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002a2a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002a2e:	f7fd fd87 	bl	8000540 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4620      	mov	r0, r4
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f7fd fd81 	bl	8000540 <__aeabi_dmul>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4690      	mov	r8, r2
 8002a44:	4699      	mov	r9, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <CalibrateIMU+0x44c>)
 8002a48:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002a4c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002a50:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002a54:	e006      	b.n	8002a64 <CalibrateIMU+0x454>
 8002a56:	bf00      	nop
 8002a58:	3ff00000 	.word	0x3ff00000
 8002a5c:	20000150 	.word	0x20000150
 8002a60:	200001c8 	.word	0x200001c8
 8002a64:	f7fd fd6c 	bl	8000540 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f7fd fd66 	bl	8000540 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4640      	mov	r0, r8
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	f7fd fbaa 	bl	80001d4 <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4bc2      	ldr	r3, [pc, #776]	; (8002d94 <CalibrateIMU+0x784>)
 8002a8a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a8e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002a92:	f7fd fd55 	bl	8000540 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f7fd fb99 	bl	80001d4 <__adddf3>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002aae:	f7fd fd47 	bl	8000540 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002abe:	f7fd fb87 	bl	80001d0 <__aeabi_dsub>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4bb3      	ldr	r3, [pc, #716]	; (8002d98 <CalibrateIMU+0x788>)
 8002acc:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	CM_Ankle.IMUData.gx = ankleN * (AnkleIMUData.gx*(ac1*ac3 - ac2*as1*as3) + AnkleIMUData.gy*(-ac3*as1     - ac1*ac2*as3) + AnkleIMUData.gz*( as2*as3)) - ankleGxBias;
 8002ad0:	4bb0      	ldr	r3, [pc, #704]	; (8002d94 <CalibrateIMU+0x784>)
 8002ad2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ad6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002ada:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002ade:	f7fd fd2f 	bl	8000540 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002aee:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002af2:	f7fd fd25 	bl	8000540 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002b02:	f7fd fd1d 	bl	8000540 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	f7fd fb5f 	bl	80001d0 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fd11 	bl	8000540 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4692      	mov	sl, r2
 8002b24:	469b      	mov	fp, r3
 8002b26:	4b9b      	ldr	r3, [pc, #620]	; (8002d94 <CalibrateIMU+0x784>)
 8002b28:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002b40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b44:	f7fd fcfc 	bl	8000540 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	461d      	mov	r5, r3
 8002b50:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002b54:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002b58:	f7fd fcf2 	bl	8000540 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002b68:	f7fd fcea 	bl	8000540 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4620      	mov	r0, r4
 8002b72:	4629      	mov	r1, r5
 8002b74:	f7fd fb2c 	bl	80001d0 <__aeabi_dsub>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	4649      	mov	r1, r9
 8002b80:	f7fd fcde 	bl	8000540 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4650      	mov	r0, sl
 8002b8a:	4659      	mov	r1, fp
 8002b8c:	f7fd fb22 	bl	80001d4 <__adddf3>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <CalibrateIMU+0x784>)
 8002b9a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b9e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002ba2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8002ba6:	f7fd fccb 	bl	8000540 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fcc5 	bl	8000540 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4640      	mov	r0, r8
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	f7fd fb09 	bl	80001d4 <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002bce:	f7fd fcb7 	bl	8000540 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002bde:	f7fd faf7 	bl	80001d0 <__aeabi_dsub>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	496c      	ldr	r1, [pc, #432]	; (8002d98 <CalibrateIMU+0x788>)
 8002be8:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	CM_Ankle.IMUData.gy = ankleN * (AnkleIMUData.gx*(ac1*as3 + ac2*ac3*as1) + AnkleIMUData.gy*( ac1*ac2*ac3 - as1*as3    ) + AnkleIMUData.gz*(-ac3*as2)) - ankleGyBias;
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <CalibrateIMU+0x784>)
 8002bee:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002bf2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002bf6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002bfa:	f7fd fca1 	bl	8000540 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002c0a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002c0e:	f7fd fc97 	bl	8000540 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002c1e:	f7fd fc8f 	bl	8000540 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4640      	mov	r0, r8
 8002c28:	4649      	mov	r1, r9
 8002c2a:	f7fd fad3 	bl	80001d4 <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f7fd fc83 	bl	8000540 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4692      	mov	sl, r2
 8002c40:	469b      	mov	fp, r3
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <CalibrateIMU+0x784>)
 8002c44:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002c48:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002c4c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002c50:	f7fd fc76 	bl	8000540 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002c60:	f7fd fc6e 	bl	8000540 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002c70:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002c74:	f7fd fc64 	bl	8000540 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f7fd faa6 	bl	80001d0 <__aeabi_dsub>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4640      	mov	r0, r8
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	f7fd fc58 	bl	8000540 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4650      	mov	r0, sl
 8002c96:	4659      	mov	r1, fp
 8002c98:	f7fd fa9c 	bl	80001d4 <__adddf3>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4690      	mov	r8, r2
 8002ca2:	4699      	mov	r9, r3
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <CalibrateIMU+0x784>)
 8002ca6:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002cbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cc2:	f7fd fc3d 	bl	8000540 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fc37 	bl	8000540 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fa7b 	bl	80001d4 <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002cea:	f7fd fc29 	bl	8000540 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002cfa:	f7fd fa69 	bl	80001d0 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4925      	ldr	r1, [pc, #148]	; (8002d98 <CalibrateIMU+0x788>)
 8002d04:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	CM_Ankle.IMUData.gz = ankleN * (AnkleIMUData.gx*(as1*as2              ) + AnkleIMUData.gy*( ac1*as2                  ) + AnkleIMUData.gz*( ac2    )) - ankleGzBias;
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <CalibrateIMU+0x784>)
 8002d0a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d0e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002d12:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002d16:	f7fd fc13 	bl	8000540 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fc0d 	bl	8000540 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <CalibrateIMU+0x784>)
 8002d30:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d34:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002d38:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002d3c:	f7fd fc00 	bl	8000540 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4620      	mov	r0, r4
 8002d46:	4629      	mov	r1, r5
 8002d48:	f7fd fbfa 	bl	8000540 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4640      	mov	r0, r8
 8002d52:	4649      	mov	r1, r9
 8002d54:	f7fd fa3e 	bl	80001d4 <__adddf3>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	461d      	mov	r5, r3
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <CalibrateIMU+0x784>)
 8002d62:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d66:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002d6a:	f7fd fbe9 	bl	8000540 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7fd fa2d 	bl	80001d4 <__adddf3>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002d86:	f7fd fbdb 	bl	8000540 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	e003      	b.n	8002d9c <CalibrateIMU+0x78c>
 8002d94:	20000150 	.word	0x20000150
 8002d98:	200001c8 	.word	0x200001c8
 8002d9c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002da0:	f7fd fa16 	bl	80001d0 <__aeabi_dsub>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	49bf      	ldr	r1, [pc, #764]	; (80030a8 <CalibrateIMU+0xa98>)
 8002daa:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	CM_Knee.IMUData.ax = kneeN * (KneeIMUData.ax*(kc1*kc3 - kc2*ks1*ks3) + KneeIMUData.ay*(-kc3*ks1 - kc1*kc2*ks3) + KneeIMUData.az*( ks2*ks3)) - kneeAxBias;
 8002dae:	4bbf      	ldr	r3, [pc, #764]	; (80030ac <CalibrateIMU+0xa9c>)
 8002db0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002db4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002db8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002dbc:	f7fd fbc0 	bl	8000540 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4690      	mov	r8, r2
 8002dc6:	4699      	mov	r9, r3
 8002dc8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002dcc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002dd0:	f7fd fbb6 	bl	8000540 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002de0:	f7fd fbae 	bl	8000540 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4640      	mov	r0, r8
 8002dea:	4649      	mov	r1, r9
 8002dec:	f7fd f9f0 	bl	80001d0 <__aeabi_dsub>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4620      	mov	r0, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	f7fd fba2 	bl	8000540 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4692      	mov	sl, r2
 8002e02:	469b      	mov	fp, r3
 8002e04:	4ba9      	ldr	r3, [pc, #676]	; (80030ac <CalibrateIMU+0xa9c>)
 8002e06:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002e1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e22:	f7fd fb8d 	bl	8000540 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4690      	mov	r8, r2
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002e32:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002e36:	f7fd fb83 	bl	8000540 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002e46:	f7fd fb7b 	bl	8000540 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd f9bd 	bl	80001d0 <__aeabi_dsub>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fb6f 	bl	8000540 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4650      	mov	r0, sl
 8002e68:	4659      	mov	r1, fp
 8002e6a:	f7fd f9b3 	bl	80001d4 <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <CalibrateIMU+0xa9c>)
 8002e78:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e7c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002e80:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002e84:	f7fd fb5c 	bl	8000540 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd fb56 	bl	8000540 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4640      	mov	r0, r8
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	f7fd f99a 	bl	80001d4 <__adddf3>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eac:	f7fd fb48 	bl	8000540 <__aeabi_dmul>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ebc:	f7fd f988 	bl	80001d0 <__aeabi_dsub>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	497a      	ldr	r1, [pc, #488]	; (80030b0 <CalibrateIMU+0xaa0>)
 8002ec6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	CM_Knee.IMUData.ay = kneeN * (KneeIMUData.ax*(kc1*ks3 + kc2*kc3*ks1) + KneeIMUData.ay*( kc1*kc2*kc3 - ks1*ks3) + KneeIMUData.az*(-kc3*ks2)) - kneeAyBias;
 8002eca:	4b78      	ldr	r3, [pc, #480]	; (80030ac <CalibrateIMU+0xa9c>)
 8002ecc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ed0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002ed4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002ed8:	f7fd fb32 	bl	8000540 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4690      	mov	r8, r2
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002ee8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002eec:	f7fd fb28 	bl	8000540 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002efc:	f7fd fb20 	bl	8000540 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd f964 	bl	80001d4 <__adddf3>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd fb14 	bl	8000540 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	469b      	mov	fp, r3
 8002f20:	4b62      	ldr	r3, [pc, #392]	; (80030ac <CalibrateIMU+0xa9c>)
 8002f22:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002f26:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002f2a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002f2e:	f7fd fb07 	bl	8000540 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002f3e:	f7fd faff 	bl	8000540 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4690      	mov	r8, r2
 8002f48:	4699      	mov	r9, r3
 8002f4a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002f4e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002f52:	f7fd faf5 	bl	8000540 <__aeabi_dmul>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	f7fd f937 	bl	80001d0 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4620      	mov	r0, r4
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7fd fae9 	bl	8000540 <__aeabi_dmul>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4650      	mov	r0, sl
 8002f74:	4659      	mov	r1, fp
 8002f76:	f7fd f92d 	bl	80001d4 <__adddf3>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4690      	mov	r8, r2
 8002f80:	4699      	mov	r9, r3
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <CalibrateIMU+0xa9c>)
 8002f84:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fa0:	f7fd face 	bl	8000540 <__aeabi_dmul>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd fac8 	bl	8000540 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd f90c 	bl	80001d4 <__adddf3>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fc8:	f7fd faba 	bl	8000540 <__aeabi_dmul>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002fd8:	f7fd f8fa 	bl	80001d0 <__aeabi_dsub>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4933      	ldr	r1, [pc, #204]	; (80030b0 <CalibrateIMU+0xaa0>)
 8002fe2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	CM_Knee.IMUData.az = kneeN * (KneeIMUData.ax*(ks1*ks2              ) + KneeIMUData.ay*( kc1*ks2              ) + KneeIMUData.az*( kc2    )) - kneeAzBias;
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <CalibrateIMU+0xa9c>)
 8002fe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fec:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002ff0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002ff4:	f7fd faa4 	bl	8000540 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd fa9e 	bl	8000540 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4690      	mov	r8, r2
 800300a:	4699      	mov	r9, r3
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <CalibrateIMU+0xa9c>)
 800300e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003012:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003016:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800301a:	f7fd fa91 	bl	8000540 <__aeabi_dmul>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd fa8b 	bl	8000540 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd f8cf 	bl	80001d4 <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <CalibrateIMU+0xa9c>)
 8003040:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003044:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003048:	f7fd fa7a 	bl	8000540 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd f8be 	bl	80001d4 <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003064:	f7fd fa6c 	bl	8000540 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003074:	f7fd f8ac 	bl	80001d0 <__aeabi_dsub>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <CalibrateIMU+0xaa0>)
 800307e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	CM_Knee.IMUData.gx = kneeN * (KneeIMUData.gx*(kc1*kc3 - kc2*ks1*ks3) + KneeIMUData.gy*(-kc3*ks1 - kc1*kc2*ks3) + KneeIMUData.gz*( ks2*ks3)) - kneeGxBias;
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <CalibrateIMU+0xa9c>)
 8003084:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003088:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800308c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003090:	f7fd fa56 	bl	8000540 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4690      	mov	r8, r2
 800309a:	4699      	mov	r9, r3
 800309c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80030a0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80030a4:	e006      	b.n	80030b4 <CalibrateIMU+0xaa4>
 80030a6:	bf00      	nop
 80030a8:	200001c8 	.word	0x200001c8
 80030ac:	20000180 	.word	0x20000180
 80030b0:	20000250 	.word	0x20000250
 80030b4:	f7fd fa44 	bl	8000540 <__aeabi_dmul>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80030c4:	f7fd fa3c 	bl	8000540 <__aeabi_dmul>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4640      	mov	r0, r8
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7fd f87e 	bl	80001d0 <__aeabi_dsub>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd fa30 	bl	8000540 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4690      	mov	r8, r2
 80030e6:	4699      	mov	r9, r3
 80030e8:	4ba2      	ldr	r3, [pc, #648]	; (8003374 <CalibrateIMU+0xd64>)
 80030ea:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80030ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003106:	f7fd fa1b 	bl	8000540 <__aeabi_dmul>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4692      	mov	sl, r2
 8003110:	469b      	mov	fp, r3
 8003112:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003116:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800311a:	f7fd fa11 	bl	8000540 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800312a:	f7fd fa09 	bl	8000540 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4650      	mov	r0, sl
 8003134:	4659      	mov	r1, fp
 8003136:	f7fd f84b 	bl	80001d0 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd f9fd 	bl	8000540 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f7fd f841 	bl	80001d4 <__adddf3>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4690      	mov	r8, r2
 8003158:	4699      	mov	r9, r3
 800315a:	4b86      	ldr	r3, [pc, #536]	; (8003374 <CalibrateIMU+0xd64>)
 800315c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003160:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003164:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003168:	f7fd f9ea 	bl	8000540 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd f9e4 	bl	8000540 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4640      	mov	r0, r8
 800317e:	4649      	mov	r1, r9
 8003180:	f7fd f828 	bl	80001d4 <__adddf3>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003190:	f7fd f9d6 	bl	8000540 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031a0:	f7fd f816 	bl	80001d0 <__aeabi_dsub>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4973      	ldr	r1, [pc, #460]	; (8003378 <CalibrateIMU+0xd68>)
 80031aa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	CM_Knee.IMUData.gy = kneeN * (KneeIMUData.gx*(kc1*ks3 + kc2*kc3*ks1) + KneeIMUData.gy*( kc1*kc2*kc3 - ks1*ks3) + KneeIMUData.gz*(-kc3*ks2)) - kneeGyBias;
 80031ae:	4b71      	ldr	r3, [pc, #452]	; (8003374 <CalibrateIMU+0xd64>)
 80031b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80031b4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80031b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80031bc:	f7fd f9c0 	bl	8000540 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4690      	mov	r8, r2
 80031c6:	4699      	mov	r9, r3
 80031c8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80031cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031d0:	f7fd f9b6 	bl	8000540 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80031e0:	f7fd f9ae 	bl	8000540 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4640      	mov	r0, r8
 80031ea:	4649      	mov	r1, r9
 80031ec:	f7fc fff2 	bl	80001d4 <__adddf3>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4620      	mov	r0, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	f7fd f9a2 	bl	8000540 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4690      	mov	r8, r2
 8003202:	4699      	mov	r9, r3
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <CalibrateIMU+0xd64>)
 8003206:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800320a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800320e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003212:	f7fd f995 	bl	8000540 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003222:	f7fd f98d 	bl	8000540 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4692      	mov	sl, r2
 800322c:	469b      	mov	fp, r3
 800322e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003232:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003236:	f7fd f983 	bl	8000540 <__aeabi_dmul>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4650      	mov	r0, sl
 8003240:	4659      	mov	r1, fp
 8003242:	f7fc ffc5 	bl	80001d0 <__aeabi_dsub>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f977 	bl	8000540 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4640      	mov	r0, r8
 8003258:	4649      	mov	r1, r9
 800325a:	f7fc ffbb 	bl	80001d4 <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <CalibrateIMU+0xd64>)
 8003268:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800326c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003276:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003280:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003284:	f7fd f95c 	bl	8000540 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	f7fd f956 	bl	8000540 <__aeabi_dmul>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4640      	mov	r0, r8
 800329a:	4649      	mov	r1, r9
 800329c:	f7fc ff9a 	bl	80001d4 <__adddf3>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032ac:	f7fd f948 	bl	8000540 <__aeabi_dmul>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032bc:	f7fc ff88 	bl	80001d0 <__aeabi_dsub>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	492c      	ldr	r1, [pc, #176]	; (8003378 <CalibrateIMU+0xd68>)
 80032c6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	CM_Knee.IMUData.gz = kneeN * (KneeIMUData.gx*(ks1*ks2              ) + KneeIMUData.gy*( kc1*ks2              ) + KneeIMUData.gz*( kc2    )) - kneeGzBias;
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <CalibrateIMU+0xd64>)
 80032cc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032d0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80032d4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80032d8:	f7fd f932 	bl	8000540 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fd f92c 	bl	8000540 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4690      	mov	r8, r2
 80032ee:	4699      	mov	r9, r3
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <CalibrateIMU+0xd64>)
 80032f2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80032f6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80032fa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80032fe:	f7fd f91f 	bl	8000540 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4620      	mov	r0, r4
 8003308:	4629      	mov	r1, r5
 800330a:	f7fd f919 	bl	8000540 <__aeabi_dmul>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4640      	mov	r0, r8
 8003314:	4649      	mov	r1, r9
 8003316:	f7fc ff5d 	bl	80001d4 <__adddf3>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4614      	mov	r4, r2
 8003320:	461d      	mov	r5, r3
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <CalibrateIMU+0xd64>)
 8003324:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003328:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800332c:	f7fd f908 	bl	8000540 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fc ff4c 	bl	80001d4 <__adddf3>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003348:	f7fd f8fa 	bl	8000540 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003358:	f7fc ff3a 	bl	80001d0 <__aeabi_dsub>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4905      	ldr	r1, [pc, #20]	; (8003378 <CalibrateIMU+0xd68>)
 8003362:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 8003366:	bf00      	nop
 8003368:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003372:	bf00      	nop
 8003374:	20000180 	.word	0x20000180
 8003378:	20000250 	.word	0x20000250
 800337c:	00000000 	.word	0x00000000

08003380 <ComputeLimbAngle>:

void ComputeLimbAngle(void)
{
 8003380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
	double accelAngle = (atan(CM_Knee.IMUData.ax / sqrt(pow(CM_Knee.IMUData.ay, 2) + pow(CM_Knee.IMUData.az, 2)))) * 180.0/M_PI;
 8003388:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <ComputeLimbAngle+0x188>)
 800338a:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800338e:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <ComputeLimbAngle+0x188>)
 8003390:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003394:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80034f0 <ComputeLimbAngle+0x170>
 8003398:	eeb0 0a47 	vmov.f32	s0, s14
 800339c:	eef0 0a67 	vmov.f32	s1, s15
 80033a0:	f003 f8d0 	bl	8006544 <pow>
 80033a4:	ec59 8b10 	vmov	r8, r9, d0
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <ComputeLimbAngle+0x188>)
 80033aa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80033ae:	ed9f 1b50 	vldr	d1, [pc, #320]	; 80034f0 <ComputeLimbAngle+0x170>
 80033b2:	eeb0 0a47 	vmov.f32	s0, s14
 80033b6:	eef0 0a67 	vmov.f32	s1, s15
 80033ba:	f003 f8c3 	bl	8006544 <pow>
 80033be:	ec53 2b10 	vmov	r2, r3, d0
 80033c2:	4640      	mov	r0, r8
 80033c4:	4649      	mov	r1, r9
 80033c6:	f7fc ff05 	bl	80001d4 <__adddf3>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	ec43 2b17 	vmov	d7, r2, r3
 80033d2:	eeb0 0a47 	vmov.f32	s0, s14
 80033d6:	eef0 0a67 	vmov.f32	s1, s15
 80033da:	f003 f923 	bl	8006624 <sqrt>
 80033de:	ec53 2b10 	vmov	r2, r3, d0
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7fd f9d5 	bl	8000794 <__aeabi_ddiv>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	ec43 2b17 	vmov	d7, r2, r3
 80033f2:	eeb0 0a47 	vmov.f32	s0, s14
 80033f6:	eef0 0a67 	vmov.f32	s1, s15
 80033fa:	f002 fef9 	bl	80061f0 <atan>
 80033fe:	ec51 0b10 	vmov	r0, r1, d0
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	4b41      	ldr	r3, [pc, #260]	; (800350c <ComputeLimbAngle+0x18c>)
 8003408:	f7fd f89a 	bl	8000540 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	a338      	add	r3, pc, #224	; (adr r3, 80034f8 <ComputeLimbAngle+0x178>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f9bb 	bl	8000794 <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	e9c7 2302 	strd	r2, r3, [r7, #8]
	static double compFiltAngle = 0.0;
	static double dGyroAngle = 0.0;

	// Change in angle from gyro (trapezoidal used)
	dGyroAngle = dt/2 * (CM_Knee.IMUData.gz + dGyroAngle);
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <ComputeLimbAngle+0x190>)
 8003428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003434:	f7fd f9ae 	bl	8000794 <__aeabi_ddiv>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <ComputeLimbAngle+0x188>)
 8003442:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <ComputeLimbAngle+0x194>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fc fec2 	bl	80001d4 <__adddf3>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4620      	mov	r0, r4
 8003456:	4629      	mov	r1, r5
 8003458:	f7fd f872 	bl	8000540 <__aeabi_dmul>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	492c      	ldr	r1, [pc, #176]	; (8003514 <ComputeLimbAngle+0x194>)
 8003462:	e9c1 2300 	strd	r2, r3, [r1]

	// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
	double alpha = 0.002;
 8003466:	a326      	add	r3, pc, #152	; (adr r3, 8003500 <ComputeLimbAngle+0x180>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	e9c7 2300 	strd	r2, r3, [r7]
	compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 8003470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003478:	f7fd f862 	bl	8000540 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003488:	f04f 0000 	mov.w	r0, #0
 800348c:	4922      	ldr	r1, [pc, #136]	; (8003518 <ComputeLimbAngle+0x198>)
 800348e:	f7fc fe9f 	bl	80001d0 <__aeabi_dsub>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <ComputeLimbAngle+0x194>)
 800349c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a0:	4b1e      	ldr	r3, [pc, #120]	; (800351c <ComputeLimbAngle+0x19c>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fc fe95 	bl	80001d4 <__adddf3>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f7fd f845 	bl	8000540 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fc fe89 	bl	80001d4 <__adddf3>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4915      	ldr	r1, [pc, #84]	; (800351c <ComputeLimbAngle+0x19c>)
 80034c8:	e9c1 2300 	strd	r2, r3, [r1]

//	CM_Ankle.limbAngle = compFiltAngle + CM_Ankle.jointAngle[0]; ??
	CM_Knee.limbAngle = compFiltAngle - CM_Knee.jointAngle[0];
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <ComputeLimbAngle+0x19c>)
 80034ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <ComputeLimbAngle+0x188>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fc fe7a 	bl	80001d0 <__aeabi_dsub>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4909      	ldr	r1, [pc, #36]	; (8003508 <ComputeLimbAngle+0x188>)
 80034e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034f0:	00000000 	.word	0x00000000
 80034f4:	40000000 	.word	0x40000000
 80034f8:	54442d18 	.word	0x54442d18
 80034fc:	400921fb 	.word	0x400921fb
 8003500:	d2f1a9fc 	.word	0xd2f1a9fc
 8003504:	3f60624d 	.word	0x3f60624d
 8003508:	20000250 	.word	0x20000250
 800350c:	40668000 	.word	0x40668000
 8003510:	20000008 	.word	0x20000008
 8003514:	20000370 	.word	0x20000370
 8003518:	3ff00000 	.word	0x3ff00000
 800351c:	20000378 	.word	0x20000378

08003520 <RunStateMachine>:

void RunStateMachine(void)
{
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	static enum StateMachine_e state = stance;
	static uint8_t isCheckBoundsRequired = 0;

	switch(state)
 8003526:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <RunStateMachine+0x1f4>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b02      	cmp	r3, #2
 800352c:	f000 80c6 	beq.w	80036bc <RunStateMachine+0x19c>
 8003530:	2b02      	cmp	r3, #2
 8003532:	f300 80ea 	bgt.w	800370a <RunStateMachine+0x1ea>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <RunStateMachine+0x22>
 800353a:	2b01      	cmp	r3, #1
 800353c:	f000 8098 	beq.w	8003670 <RunStateMachine+0x150>
		if(CM_LoadCell_Filtered->bot[0] > CM_lcBot_upperBound)
			state = stance;

		break;
	}
}
 8003540:	e0e3      	b.n	800370a <RunStateMachine+0x1ea>
		CM_state = 1120;
 8003542:	4b75      	ldr	r3, [pc, #468]	; (8003718 <RunStateMachine+0x1f8>)
 8003544:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8003548:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.StanceCtrl.eqPoint;
 800354a:	4b74      	ldr	r3, [pc, #464]	; (800371c <RunStateMachine+0x1fc>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a74      	ldr	r2, [pc, #464]	; (8003720 <RunStateMachine+0x200>)
 8003550:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.StanceCtrl.kd;
 8003552:	4b72      	ldr	r3, [pc, #456]	; (800371c <RunStateMachine+0x1fc>)
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4a72      	ldr	r2, [pc, #456]	; (8003720 <RunStateMachine+0x200>)
 8003558:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.StanceCtrl.kp;
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <RunStateMachine+0x1fc>)
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	4a70      	ldr	r2, [pc, #448]	; (8003720 <RunStateMachine+0x200>)
 8003560:	6093      	str	r3, [r2, #8]
        if(CM_LoadCell_Filtered->bot[0] < CM_lcBot_lowerBound && CM_LoadCell_Filtered->top[0] > CM_lcTop_upperBound)
 8003562:	4b70      	ldr	r3, [pc, #448]	; (8003724 <RunStateMachine+0x204>)
 8003564:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <RunStateMachine+0x208>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ff8f 	bl	8000490 <__aeabi_f2d>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd fa53 	bl	8000a24 <__aeabi_dcmplt>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <RunStateMachine+0x8c>
 8003584:	4b67      	ldr	r3, [pc, #412]	; (8003724 <RunStateMachine+0x204>)
 8003586:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <RunStateMachine+0x20c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fc ff7e 	bl	8000490 <__aeabi_f2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4620      	mov	r0, r4
 800359a:	4629      	mov	r1, r5
 800359c:	f7fd fa60 	bl	8000a60 <__aeabi_dcmpgt>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <RunStateMachine+0x8c>
            isCheckBoundsRequired = 1;
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <RunStateMachine+0x210>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
		if(isCheckBoundsRequired)
 80035ac:	4b60      	ldr	r3, [pc, #384]	; (8003730 <RunStateMachine+0x210>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a9 	beq.w	8003708 <RunStateMachine+0x1e8>
			uint8_t lcBotWithinBounds = (CM_LoadCell_Filtered->bot[0] < CM_lcBot_upperBound) && (CM_LoadCell_Filtered->bot[0] > CM_lcBot_lowerBound);
 80035b6:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <RunStateMachine+0x204>)
 80035b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035bc:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <RunStateMachine+0x214>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ff65 	bl	8000490 <__aeabi_f2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd fa29 	bl	8000a24 <__aeabi_dcmplt>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <RunStateMachine+0xde>
 80035d8:	4b52      	ldr	r3, [pc, #328]	; (8003724 <RunStateMachine+0x204>)
 80035da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035de:	4b52      	ldr	r3, [pc, #328]	; (8003728 <RunStateMachine+0x208>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff54 	bl	8000490 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fd fa36 	bl	8000a60 <__aeabi_dcmpgt>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <RunStateMachine+0xde>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <RunStateMachine+0xe0>
 80035fe:	2300      	movs	r3, #0
 8003600:	71fb      	strb	r3, [r7, #7]
			uint8_t lcTopWithinBounds = (CM_LoadCell_Filtered->top[0] < CM_lcTop_upperBound) && (CM_LoadCell_Filtered->top[0] > CM_lcTop_lowerBound);
 8003602:	4b48      	ldr	r3, [pc, #288]	; (8003724 <RunStateMachine+0x204>)
 8003604:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003608:	4b48      	ldr	r3, [pc, #288]	; (800372c <RunStateMachine+0x20c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff3f 	bl	8000490 <__aeabi_f2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4620      	mov	r0, r4
 8003618:	4629      	mov	r1, r5
 800361a:	f7fd fa03 	bl	8000a24 <__aeabi_dcmplt>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <RunStateMachine+0x12a>
 8003624:	4b3f      	ldr	r3, [pc, #252]	; (8003724 <RunStateMachine+0x204>)
 8003626:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800362a:	4b43      	ldr	r3, [pc, #268]	; (8003738 <RunStateMachine+0x218>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc ff2e 	bl	8000490 <__aeabi_f2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4620      	mov	r0, r4
 800363a:	4629      	mov	r1, r5
 800363c:	f7fd fa10 	bl	8000a60 <__aeabi_dcmpgt>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <RunStateMachine+0x12a>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <RunStateMachine+0x12c>
 800364a:	2300      	movs	r3, #0
 800364c:	71bb      	strb	r3, [r7, #6]
			if(lcBotWithinBounds && lcTopWithinBounds)
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d059      	beq.n	8003708 <RunStateMachine+0x1e8>
 8003654:	79bb      	ldrb	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d056      	beq.n	8003708 <RunStateMachine+0x1e8>
				isCheckBoundsRequired = 0;
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <RunStateMachine+0x210>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
				lcBotWithinBounds = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	71fb      	strb	r3, [r7, #7]
				lcTopWithinBounds = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	71bb      	strb	r3, [r7, #6]
				state = swingFlexion;
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <RunStateMachine+0x1f4>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
		break;
 800366e:	e04b      	b.n	8003708 <RunStateMachine+0x1e8>
		CM_state = 1345;
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <RunStateMachine+0x1f8>)
 8003672:	f240 5241 	movw	r2, #1345	; 0x541
 8003676:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.SwingFlexCtrl.eqPoint;
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <RunStateMachine+0x1fc>)
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	4a28      	ldr	r2, [pc, #160]	; (8003720 <RunStateMachine+0x200>)
 800367e:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.SwingFlexCtrl.kd;
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <RunStateMachine+0x1fc>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <RunStateMachine+0x200>)
 8003686:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.SwingFlexCtrl.kp;
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <RunStateMachine+0x1fc>)
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <RunStateMachine+0x200>)
 800368e:	6093      	str	r3, [r2, #8]
		if(CM_Knee.jointSpeed > CM_speedThreshold)
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <RunStateMachine+0x1fc>)
 8003692:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <RunStateMachine+0x21c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc fef8 	bl	8000490 <__aeabi_f2d>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	f7fd f9da 	bl	8000a60 <__aeabi_dcmpgt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d100      	bne.n	80036b4 <RunStateMachine+0x194>
		break;
 80036b2:	e02a      	b.n	800370a <RunStateMachine+0x1ea>
			state = swingExtension;
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <RunStateMachine+0x1f4>)
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
		break;
 80036ba:	e026      	b.n	800370a <RunStateMachine+0x1ea>
		CM_state = 1570;
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <RunStateMachine+0x1f8>)
 80036be:	f240 6222 	movw	r2, #1570	; 0x622
 80036c2:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <RunStateMachine+0x1fc>)
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <RunStateMachine+0x200>)
 80036ca:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <RunStateMachine+0x1fc>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <RunStateMachine+0x200>)
 80036d2:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <RunStateMachine+0x1fc>)
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <RunStateMachine+0x200>)
 80036da:	6093      	str	r3, [r2, #8]
		if(CM_LoadCell_Filtered->bot[0] > CM_lcBot_upperBound)
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <RunStateMachine+0x204>)
 80036de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <RunStateMachine+0x214>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fed2 	bl	8000490 <__aeabi_f2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fd f9b4 	bl	8000a60 <__aeabi_dcmpgt>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d100      	bne.n	8003700 <RunStateMachine+0x1e0>
		break;
 80036fe:	e004      	b.n	800370a <RunStateMachine+0x1ea>
			state = stance;
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <RunStateMachine+0x1f4>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
		break;
 8003706:	e000      	b.n	800370a <RunStateMachine+0x1ea>
		break;
 8003708:	bf00      	nop
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bdb0      	pop	{r4, r5, r7, pc}
 8003712:	bf00      	nop
 8003714:	20000380 	.word	0x20000380
 8003718:	2000036a 	.word	0x2000036a
 800371c:	20000250 	.word	0x20000250
 8003720:	200000b4 	.word	0x200000b4
 8003724:	200002d8 	.word	0x200002d8
 8003728:	200001b8 	.word	0x200001b8
 800372c:	200001bc 	.word	0x200001bc
 8003730:	20000381 	.word	0x20000381
 8003734:	200001b4 	.word	0x200001b4
 8003738:	200001c0 	.word	0x200001c0
 800373c:	200001c4 	.word	0x200001c4

08003740 <RunImpedanceControl>:

void RunImpedanceControl(void)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <RunImpedanceControl+0xf4>)
 8003748:	617b      	str	r3, [r7, #20]
	float nomCurrent = 8.0f;						// is this number accurate??
 800374a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800374e:	613b      	str	r3, [r7, #16]
	float torqueConst = 60.0f / (2*M_PI * 100);		// Units in N*m/A, for Kv = 100 rpm/V
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <RunImpedanceControl+0xf8>)
 8003752:	60fb      	str	r3, [r7, #12]

	float errorPos = ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <RunImpedanceControl+0xfc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fe99 	bl	8000490 <__aeabi_f2d>
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <RunImpedanceControl+0x100>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f7fc fd34 	bl	80001d0 <__aeabi_dsub>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4610      	mov	r0, r2
 800376e:	4619      	mov	r1, r3
 8003770:	f7fd f996 	bl	8000aa0 <__aeabi_d2f>
 8003774:	4603      	mov	r3, r0
 8003776:	60bb      	str	r3, [r7, #8]

	//	CM_Ankle.jointTorque_nm = ProsCtrl.kp*errorPos - ProsCtrl.kd*CM_Ankle.jointSpeed * CM_gain; ??
	CM_Knee.jointTorque = (ProsCtrl.kp*errorPos - ProsCtrl.kd*CM_Knee.jointSpeed) * CM_gain;
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <RunImpedanceControl+0xfc>)
 800377a:	ed93 7a02 	vldr	s14, [r3, #8]
 800377e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003786:	ee17 0a90 	vmov	r0, s15
 800378a:	f7fc fe81 	bl	8000490 <__aeabi_f2d>
 800378e:	4604      	mov	r4, r0
 8003790:	460d      	mov	r5, r1
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <RunImpedanceControl+0xfc>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fe7a 	bl	8000490 <__aeabi_f2d>
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <RunImpedanceControl+0x100>)
 800379e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037a2:	f7fc fecd 	bl	8000540 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4620      	mov	r0, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	f7fc fd0f 	bl	80001d0 <__aeabi_dsub>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <RunImpedanceControl+0x104>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fe66 	bl	8000490 <__aeabi_f2d>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc feb8 	bl	8000540 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f962 	bl	8000aa0 <__aeabi_d2f>
 80037dc:	4603      	mov	r3, r0
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <RunImpedanceControl+0x100>)
 80037e0:	6213      	str	r3, [r2, #32]
	float kneeTorqueCorrected = -CM_Knee.jointTorque;										// Knee motor rotates opposite of coordinate system??
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <RunImpedanceControl+0x100>)
 80037e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80037e8:	eef1 7a67 	vneg.f32	s15, s15
 80037ec:	edc7 7a01 	vstr	s15, [r7, #4]

	int32_t motorTorque = kneeTorqueCorrected / (torqueConst * gearRatio * nomCurrent) * 1000;
 80037f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80037f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003804:	edd7 6a01 	vldr	s13, [r7, #4]
 8003808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003848 <RunImpedanceControl+0x108>
 8003810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003818:	ee17 3a90 	vmov	r3, s15
 800381c:	603b      	str	r3, [r7, #0]
	EPOS4_SetTorque(kneeCANID, motorTorque);
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <RunImpedanceControl+0x10c>)
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fcb5 	bl	8004194 <EPOS4_SetTorque>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}
 8003832:	bf00      	nop
 8003834:	42200000 	.word	0x42200000
 8003838:	3dc391d1 	.word	0x3dc391d1
 800383c:	200000b4 	.word	0x200000b4
 8003840:	20000250 	.word	0x20000250
 8003844:	20000014 	.word	0x20000014
 8003848:	447a0000 	.word	0x447a0000
 800384c:	20000000 	.word	0x20000000

08003850 <RunTestProgram>:

void RunTestProgram(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
	switch (testProgram)
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <RunTestProgram+0x104>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d876      	bhi.n	800394c <RunTestProgram+0xfc>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <RunTestProgram+0x14>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	0800394b 	.word	0x0800394b
 8003868:	0800394b 	.word	0x0800394b
 800386c:	08003879 	.word	0x08003879
 8003870:	0800388f 	.word	0x0800388f
 8003874:	080038c7 	.word	0x080038c7
		break;
	case readOnly:
		break;
	case constantMotorTorque100Nm:
	{
		int32_t torque = 100;
 8003878:	2364      	movs	r3, #100	; 0x64
 800387a:	607b      	str	r3, [r7, #4]
		EPOS4_SetTorque(kneeCANID, -torque);
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <RunTestProgram+0x108>)
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	425b      	negs	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fc84 	bl	8004194 <EPOS4_SetTorque>
		break;
 800388c:	e05e      	b.n	800394c <RunTestProgram+0xfc>
	}
	case magneticEncoderBias:
	{
		uint16_t i;

		uint32_t sum = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < 1000; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	83fb      	strh	r3, [r7, #30]
 8003896:	e00a      	b.n	80038ae <RunTestProgram+0x5e>
		{
			uint16_t bias = AS5145B_ReadPosition_Raw();
 8003898:	f000 fbcc 	bl	8004034 <AS5145B_ReadPosition_Raw>
 800389c:	4603      	mov	r3, r0
 800389e:	817b      	strh	r3, [r7, #10]
			sum += bias;
 80038a0:	897b      	ldrh	r3, [r7, #10]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4413      	add	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < 1000; i++)
 80038a8:	8bfb      	ldrh	r3, [r7, #30]
 80038aa:	3301      	adds	r3, #1
 80038ac:	83fb      	strh	r3, [r7, #30]
 80038ae:	8bfb      	ldrh	r3, [r7, #30]
 80038b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b4:	d3f0      	bcc.n	8003898 <RunTestProgram+0x48>
		}

		CM_kneeEncBias = sum / i;
 80038b6:	8bfb      	ldrh	r3, [r7, #30]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b26      	ldr	r3, [pc, #152]	; (800395c <RunTestProgram+0x10c>)
 80038c2:	801a      	strh	r2, [r3, #0]

		break;
 80038c4:	e042      	b.n	800394c <RunTestProgram+0xfc>
	}
	case impedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 80038c6:	4b26      	ldr	r3, [pc, #152]	; (8003960 <RunTestProgram+0x110>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02e      	beq.n	800392c <RunTestProgram+0xdc>
		{
			CM_gain = 1.0f;
 80038ce:	4b25      	ldr	r3, [pc, #148]	; (8003964 <RunTestProgram+0x114>)
 80038d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80038d4:	601a      	str	r2, [r3, #0]
			uint16_t i;
			float sum = 0.0f;
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	613b      	str	r3, [r7, #16]

			for(i = 0; i < 1000; i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	82fb      	strh	r3, [r7, #22]
 80038e0:	e00e      	b.n	8003900 <RunTestProgram+0xb0>
			{
				float pos = AS5145B_ReadPosition_Deg();
 80038e2:	f000 fbb5 	bl	8004050 <AS5145B_ReadPosition_Deg>
 80038e6:	ed87 0a03 	vstr	s0, [r7, #12]
				sum += pos;
 80038ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	3301      	adds	r3, #1
 80038fe:	82fb      	strh	r3, [r7, #22]
 8003900:	8afb      	ldrh	r3, [r7, #22]
 8003902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003906:	d3ec      	bcc.n	80038e2 <RunTestProgram+0x92>
			}

			CM_Knee.ImpCtrl.eqPoint = sum / i - kneeEncBias;
 8003908:	8afb      	ldrh	r3, [r7, #22]
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003912:	edd7 6a04 	vldr	s13, [r7, #16]
 8003916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <RunTestProgram+0x118>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <RunTestProgram+0x11c>)
 8003926:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			ProsCtrl.eqPoint = CM_Knee.ImpCtrl.eqPoint;

			RunImpedanceControl();
		}

		break;
 800392a:	e00f      	b.n	800394c <RunTestProgram+0xfc>
			ProsCtrl.kd = CM_Knee.ImpCtrl.kd;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <RunTestProgram+0x11c>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <RunTestProgram+0x120>)
 8003932:	6053      	str	r3, [r2, #4]
			ProsCtrl.kp = CM_Knee.ImpCtrl.kp;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <RunTestProgram+0x11c>)
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <RunTestProgram+0x120>)
 800393a:	6093      	str	r3, [r2, #8]
			ProsCtrl.eqPoint = CM_Knee.ImpCtrl.eqPoint;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <RunTestProgram+0x11c>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <RunTestProgram+0x120>)
 8003942:	6013      	str	r3, [r2, #0]
			RunImpedanceControl();
 8003944:	f7ff fefc 	bl	8003740 <RunImpedanceControl>
		break;
 8003948:	e000      	b.n	800394c <RunTestProgram+0xfc>
		break;
 800394a:	bf00      	nop
	}
	}
}
 800394c:	bf00      	nop
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200000a5 	.word	0x200000a5
 8003958:	20000000 	.word	0x20000000
 800395c:	20000368 	.word	0x20000368
 8003960:	20000010 	.word	0x20000010
 8003964:	20000014 	.word	0x20000014
 8003968:	200000ac 	.word	0x200000ac
 800396c:	20000250 	.word	0x20000250
 8003970:	200000b4 	.word	0x200000b4

08003974 <LL_AHB2_GRP1_EnableClock>:
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800397e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800398a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40021000 	.word	0x40021000

080039a4 <LL_APB1_GRP1_EnableClock>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000

080039d4 <LL_APB2_GRP1_EnableClock>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40021000 	.word	0x40021000

08003a04 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	605a      	str	r2, [r3, #4]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f023 0208 	bic.w	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003a52:	f107 0318 	add.w	r3, r7, #24
 8003a56:	2228      	movs	r2, #40	; 0x28
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fbc0 	bl	80061e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	463b      	mov	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003a70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a74:	f7ff ffae 	bl	80039d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7ff ff7b 	bl	8003974 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003a7e:	23e0      	movs	r3, #224	; 0xe0
 8003a80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a82:	2302      	movs	r3, #2
 8003a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003a92:	2305      	movs	r3, #5
 8003a94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a96:	463b      	mov	r3, r7
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9e:	f001 fd61 	bl	8005564 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003aa6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003aaa:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003aac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003ab0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003acc:	2307      	movs	r3, #7
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4807      	ldr	r0, [pc, #28]	; (8003af4 <MX_SPI1_Init+0xa8>)
 8003ad8:	f002 f9ac 	bl	8005e34 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003adc:	2100      	movs	r1, #0
 8003ade:	4805      	ldr	r0, [pc, #20]	; (8003af4 <MX_SPI1_Init+0xa8>)
 8003ae0:	f7ff ff90 	bl	8003a04 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003ae4:	4803      	ldr	r0, [pc, #12]	; (8003af4 <MX_SPI1_Init+0xa8>)
 8003ae6:	f7ff ffa0 	bl	8003a2a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	3740      	adds	r7, #64	; 0x40
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40013000 	.word	0x40013000

08003af8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b090      	sub	sp, #64	; 0x40
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003afe:	f107 0318 	add.w	r3, r7, #24
 8003b02:	2228      	movs	r2, #40	; 0x28
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fb6a 	bl	80061e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	60da      	str	r2, [r3, #12]
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b20:	f7ff ff40 	bl	80039a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003b24:	2002      	movs	r0, #2
 8003b26:	f7ff ff25 	bl	8003974 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 8003b2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b30:	2302      	movs	r3, #2
 8003b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b34:	2303      	movs	r3, #3
 8003b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003b40:	2305      	movs	r3, #5
 8003b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b44:	463b      	mov	r3, r7
 8003b46:	4619      	mov	r1, r3
 8003b48:	4815      	ldr	r0, [pc, #84]	; (8003ba0 <MX_SPI2_Init+0xa8>)
 8003b4a:	f001 fd0b 	bl	8005564 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b52:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b56:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b58:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b5c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b70:	2300      	movs	r3, #0
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003b78:	2307      	movs	r3, #7
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003b7c:	f107 0318 	add.w	r3, r7, #24
 8003b80:	4619      	mov	r1, r3
 8003b82:	4808      	ldr	r0, [pc, #32]	; (8003ba4 <MX_SPI2_Init+0xac>)
 8003b84:	f002 f956 	bl	8005e34 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4806      	ldr	r0, [pc, #24]	; (8003ba4 <MX_SPI2_Init+0xac>)
 8003b8c:	f7ff ff3a 	bl	8003a04 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <MX_SPI2_Init+0xac>)
 8003b92:	f7ff ff4a 	bl	8003a2a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b96:	bf00      	nop
 8003b98:	3740      	adds	r7, #64	; 0x40
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	48000400 	.word	0x48000400
 8003ba4:	40003800 	.word	0x40003800

08003ba8 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f043 0202 	orr.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	605a      	str	r2, [r3, #4]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d101      	bne.n	8003be0 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <NMI_Handler+0x4>

08003bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <HardFault_Handler+0x4>

08003bfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <MemManage_Handler+0x4>

08003c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <BusFault_Handler+0x4>

08003c06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <UsageFault_Handler+0x4>

08003c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0

/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8003c48:	4806      	ldr	r0, [pc, #24]	; (8003c64 <LPTIM2_IRQHandler+0x20>)
 8003c4a:	f7ff ffbd 	bl	8003bc8 <LL_LPTIM_IsActiveFlag_ARRM>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <LPTIM2_IRQHandler+0x24>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8003c5a:	4802      	ldr	r0, [pc, #8]	; (8003c64 <LPTIM2_IRQHandler+0x20>)
 8003c5c:	f7ff ffa4 	bl	8003ba8 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40009400 	.word	0x40009400
 8003c68:	200000a4 	.word	0x200000a4

08003c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <SystemInit+0x20>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <SystemInit+0x20>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <LL_RCC_SetUSARTClockSource>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <LL_RCC_SetUSARTClockSource+0x30>)
 8003c9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4905      	ldr	r1, [pc, #20]	; (8003cc0 <LL_RCC_SetUSARTClockSource+0x30>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000

08003cc4 <LL_AHB2_GRP1_EnableClock>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <LL_APB1_GRP1_EnableClock>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003cfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d00:	4907      	ldr	r1, [pc, #28]	; (8003d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40021000 	.word	0x40021000

08003d24 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08e      	sub	sp, #56	; 0x38
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	615a      	str	r2, [r3, #20]
 8003d88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8003d9a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003d9e:	f7ff ff77 	bl	8003c90 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003da2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003da6:	f7ff ffa5 	bl	8003cf4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003daa:	2001      	movs	r0, #1
 8003dac:	f7ff ff8a 	bl	8003cc4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003db0:	230c      	movs	r3, #12
 8003db2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003db4:	2302      	movs	r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003db8:	2303      	movs	r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd0:	f001 fbc8 	bl	8005564 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003dd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003dd8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003de6:	230c      	movs	r3, #12
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003dee:	2300      	movs	r3, #0
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	4619      	mov	r1, r3
 8003df8:	4806      	ldr	r0, [pc, #24]	; (8003e14 <MX_USART2_UART_Init+0xa4>)
 8003dfa:	f002 f8e3 	bl	8005fc4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <MX_USART2_UART_Init+0xa4>)
 8003e00:	f7ff ffa0 	bl	8003d44 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003e04:	4803      	ldr	r0, [pc, #12]	; (8003e14 <MX_USART2_UART_Init+0xa4>)
 8003e06:	f7ff ff8d 	bl	8003d24 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e0a:	bf00      	nop
 8003e0c:	3738      	adds	r7, #56	; 0x38
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40004400 	.word	0x40004400

08003e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e1c:	f7ff ff26 	bl	8003c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e20:	480c      	ldr	r0, [pc, #48]	; (8003e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e22:	490d      	ldr	r1, [pc, #52]	; (8003e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <LoopForever+0xe>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e28:	e002      	b.n	8003e30 <LoopCopyDataInit>

08003e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e2e:	3304      	adds	r3, #4

08003e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e34:	d3f9      	bcc.n	8003e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e38:	4c0a      	ldr	r4, [pc, #40]	; (8003e64 <LoopForever+0x16>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e3c:	e001      	b.n	8003e42 <LoopFillZerobss>

08003e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e40:	3204      	adds	r2, #4

08003e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e44:	d3fb      	bcc.n	8003e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e46:	f002 f999 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e4a:	f7fd fe05 	bl	8001a58 <main>

08003e4e <LoopForever>:

LoopForever:
    b LoopForever
 8003e4e:	e7fe      	b.n	8003e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e58:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003e5c:	080074a8 	.word	0x080074a8
  ldr r2, =_sbss
 8003e60:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003e64:	2000061c 	.word	0x2000061c

08003e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e68:	e7fe      	b.n	8003e68 <ADC1_2_IRQHandler>

08003e6a <LL_GPIO_IsInputPinSet>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d101      	bne.n	8003e86 <LL_GPIO_IsInputPinSet+0x1c>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_GPIO_IsInputPinSet+0x1e>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_GPIO_SetOutputPin>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	619a      	str	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_GPIO_ResetOutputPin>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(AS5145B_Init_t *AS5145B_Init)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 8003ed4:	2214      	movs	r2, #20
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <AS5145B_Init+0x3c>)
 8003eda:	f002 f973 	bl	80061c4 <memcpy>

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);		// Chip select pin initially high (Figure 13 in DS)
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <AS5145B_Init+0x3c>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <AS5145B_Init+0x3c>)
 8003ee4:	8a12      	ldrh	r2, [r2, #16]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ffd3 	bl	8003e94 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);		// Clock pin initially high (Figure 13 in DS)
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <AS5145B_Init+0x3c>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <AS5145B_Init+0x3c>)
 8003ef4:	89d2      	ldrh	r2, [r2, #14]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ffcb 	bl	8003e94 <LL_GPIO_SetOutputPin>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000384 	.word	0x20000384

08003f0c <AS5145B_ReadData>:

struct AS5145B_Data_s AS5145B_ReadData(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data;

	data.pos_raw = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	80bb      	strh	r3, [r7, #4]
	data.status = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003f1a:	4b45      	ldr	r3, [pc, #276]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4a44      	ldr	r2, [pc, #272]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f20:	8a12      	ldrh	r2, [r2, #16]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ffc3 	bl	8003eb0 <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 8003f2a:	f000 f8b3 	bl	8004094 <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for(int i = 12-1; i >= 0; i--)
 8003f2e:	230b      	movs	r3, #11
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e02d      	b.n	8003f90 <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f3a:	89d2      	ldrh	r2, [r2, #14]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ffb6 	bl	8003eb0 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003f44:	f000 f8a6 	bl	8004094 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003f48:	4b39      	ldr	r3, [pc, #228]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a38      	ldr	r2, [pc, #224]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f4e:	89d2      	ldrh	r2, [r2, #14]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff9e 	bl	8003e94 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003f58:	f000 f89c 	bl	8004094 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a33      	ldr	r2, [pc, #204]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f62:	8992      	ldrh	r2, [r2, #12]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ff7f 	bl	8003e6a <LL_GPIO_IsInputPinSet>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	73bb      	strb	r3, [r7, #14]
		data.pos_raw |= (temp) << i;
 8003f76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003f7a:	7bb9      	ldrb	r1, [r7, #14]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	80bb      	strh	r3, [r7, #4]
	for(int i = 12-1; i >= 0; i--)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	dace      	bge.n	8003f34 <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 8003f96:	2305      	movs	r3, #5
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e02e      	b.n	8003ffa <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <AS5145B_ReadData+0x124>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <AS5145B_ReadData+0x124>)
 8003fa2:	89d2      	ldrh	r2, [r2, #14]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff82 	bl	8003eb0 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003fac:	f000 f872 	bl	8004094 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <AS5145B_ReadData+0x124>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <AS5145B_ReadData+0x124>)
 8003fb6:	89d2      	ldrh	r2, [r2, #14]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff6a 	bl	8003e94 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003fc0:	f000 f868 	bl	8004094 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <AS5145B_ReadData+0x124>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <AS5145B_ReadData+0x124>)
 8003fca:	8992      	ldrh	r2, [r2, #12]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4b 	bl	8003e6a <LL_GPIO_IsInputPinSet>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;
 8003fde:	79bb      	ldrb	r3, [r7, #6]
 8003fe0:	b25a      	sxtb	r2, r3
 8003fe2:	7bf9      	ldrb	r1, [r7, #15]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	71bb      	strb	r3, [r7, #6]
	for(int i = 6-1; i >= 0; i--)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	dacd      	bge.n	8003f9c <AS5145B_ReadData+0x90>
	}

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <AS5145B_ReadData+0x124>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <AS5145B_ReadData+0x124>)
 8004006:	8a12      	ldrh	r2, [r2, #16]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff42 	bl	8003e94 <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 8004010:	f000 f840 	bl	8004094 <AS5145B_Delay_500ns>

	return data;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	2300      	movs	r3, #0
 800401a:	893a      	ldrh	r2, [r7, #8]
 800401c:	f362 030f 	bfi	r3, r2, #0, #16
 8004020:	897a      	ldrh	r2, [r7, #10]
 8004022:	f362 431f 	bfi	r3, r2, #16, #16
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000384 	.word	0x20000384

08004034 <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data = AS5145B_ReadData();
 800403a:	f7ff ff67 	bl	8003f0c <AS5145B_ReadData>
 800403e:	4603      	mov	r3, r0
 8004040:	607b      	str	r3, [r7, #4]
	return data.pos_raw;
 8004042:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004046:	b29b      	uxth	r3, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <AS5145B_ReadPosition_Deg>:

float AS5145B_ReadPosition_Deg(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
	uint16_t pos_raw = AS5145B_ReadPosition_Raw();
 8004056:	f7ff ffed 	bl	8004034 <AS5145B_ReadPosition_Raw>
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
	float pos_deg = (float) pos_raw * AS5145B_RAW2DEG;
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004068:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800408c <AS5145B_ReadPosition_Deg+0x3c>
 800406c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004070:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004090 <AS5145B_ReadPosition_Deg+0x40>
 8004074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004078:	edc7 7a00 	vstr	s15, [r7]
	return pos_deg;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	ee07 3a90 	vmov	s15, r3
}
 8004082:	eeb0 0a67 	vmov.f32	s0, s15
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	43b40000 	.word	0x43b40000
 8004090:	45800000 	.word	0x45800000

08004094 <AS5145B_Delay_500ns>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// See NOTES at the top of this file for more information
static void AS5145B_Delay_500ns(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	71fb      	strb	r3, [r7, #7]
 800409e:	e00c      	b.n	80040ba <AS5145B_Delay_500ns+0x26>
	{
		for(uint8_t j = 0; j < 3; j++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	71bb      	strb	r3, [r7, #6]
 80040a4:	e003      	b.n	80040ae <AS5145B_Delay_500ns+0x1a>
			__NOP();
 80040a6:	bf00      	nop
		for(uint8_t j = 0; j < 3; j++)
 80040a8:	79bb      	ldrb	r3, [r7, #6]
 80040aa:	3301      	adds	r3, #1
 80040ac:	71bb      	strb	r3, [r7, #6]
 80040ae:	79bb      	ldrb	r3, [r7, #6]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d9f8      	bls.n	80040a6 <AS5145B_Delay_500ns+0x12>
	for(uint8_t i = 0; i < 2; i++)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	3301      	adds	r3, #1
 80040b8:	71fb      	strb	r3, [r7, #7]
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d9ef      	bls.n	80040a0 <AS5145B_Delay_500ns+0xc>
	}
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80040d8:	f107 0008 	add.w	r0, r7, #8
 80040dc:	2306      	movs	r3, #6
 80040de:	2200      	movs	r2, #0
 80040e0:	f246 0140 	movw	r1, #24640	; 0x6040
 80040e4:	f000 f872 	bl	80041cc <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80040e8:	f107 0208 	add.w	r2, r7, #8
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2108      	movs	r1, #8
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fa76 	bl	80045e2 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80040f6:	200a      	movs	r0, #10
 80040f8:	f002 f808 	bl	800610c <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 80040fc:	f107 0008 	add.w	r0, r7, #8
 8004100:	230f      	movs	r3, #15
 8004102:	2200      	movs	r2, #0
 8004104:	f246 0140 	movw	r1, #24640	; 0x6040
 8004108:	f000 f860 	bl	80041cc <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 800410c:	f107 0208 	add.w	r2, r7, #8
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	2108      	movs	r1, #8
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fa64 	bl	80045e2 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800411a:	200a      	movs	r0, #10
 800411c:	f001 fff6 	bl	800610c <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 8004120:	f107 0008 	add.w	r0, r7, #8
 8004124:	230a      	movs	r3, #10
 8004126:	2200      	movs	r2, #0
 8004128:	f246 0160 	movw	r1, #24672	; 0x6060
 800412c:	f000 f84e 	bl	80041cc <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8004130:	f107 0208 	add.w	r2, r7, #8
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2108      	movs	r1, #8
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fa52 	bl	80045e2 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800413e:	200a      	movs	r0, #10
 8004140:	f001 ffe4 	bl	800610c <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 8004144:	f107 0008 	add.w	r0, r7, #8
 8004148:	2306      	movs	r3, #6
 800414a:	2200      	movs	r2, #0
 800414c:	f246 0140 	movw	r1, #24640	; 0x6040
 8004150:	f000 f83c 	bl	80041cc <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8004154:	f107 0208 	add.w	r2, r7, #8
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	2108      	movs	r1, #8
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa40 	bl	80045e2 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8004162:	200a      	movs	r0, #10
 8004164:	f001 ffd2 	bl	800610c <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8004168:	f107 0008 	add.w	r0, r7, #8
 800416c:	230f      	movs	r3, #15
 800416e:	2200      	movs	r2, #0
 8004170:	f246 0140 	movw	r1, #24640	; 0x6040
 8004174:	f000 f82a 	bl	80041cc <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8004178:	f107 0208 	add.w	r2, r7, #8
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2108      	movs	r1, #8
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fa2e 	bl	80045e2 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8004186:	200a      	movs	r0, #10
 8004188:	f001 ffc0 	bl	800610c <LL_mDelay>
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// For example, 100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f107 0008 	add.w	r0, r7, #8
 80041a6:	2200      	movs	r2, #0
 80041a8:	f246 0171 	movw	r1, #24689	; 0x6071
 80041ac:	f000 f80e 	bl	80041cc <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 80041b0:	f107 0208 	add.w	r2, r7, #8
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2108      	movs	r1, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fa12 	bl	80045e2 <CAN_transmit>
    EPOS4_usDelay(50);				// Can we do better??
 80041be:	2032      	movs	r0, #50	; 0x32
 80041c0:	f000 f83d 	bl	800423e <EPOS4_usDelay>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <EPOS4_DataFramer>:
    CAN_transmit(CAN_ID, 8, data);
    EPOS4_usDelay(1500);			// Can we do better??
}

void EPOS4_DataFramer(uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	817b      	strh	r3, [r7, #10]
 80041da:	4613      	mov	r3, r2
 80041dc:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2222      	movs	r2, #34	; 0x22
 80041e2:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	897a      	ldrh	r2, [r7, #10]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3302      	adds	r3, #2
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3303      	adds	r3, #3
 8004200:	7a7a      	ldrb	r2, [r7, #9]
 8004202:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3304      	adds	r3, #4
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0a1a      	lsrs	r2, r3, #8
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3305      	adds	r3, #5
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0c1a      	lsrs	r2, r3, #16
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3306      	adds	r3, #6
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0e1a      	lsrs	r2, r3, #24
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3307      	adds	r3, #7
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <EPOS4_usDelay>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// Can we lose this??
void EPOS4_usDelay(uint32_t us)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k = 0 ; k < us; k++)
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	e00c      	b.n	8004266 <EPOS4_usDelay+0x28>
    {
    	for(i = 0; i < 11; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e003      	b.n	800425a <EPOS4_usDelay+0x1c>
         __NOP();
 8004252:	bf00      	nop
    	for(i = 0; i < 11; i++)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b0a      	cmp	r3, #10
 800425e:	d9f8      	bls.n	8004252 <EPOS4_usDelay+0x14>
    for(k = 0 ; k < us; k++)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	3301      	adds	r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3ee      	bcc.n	800424c <EPOS4_usDelay+0xe>
    }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	330c      	adds	r3, #12
 800428c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_GPIO_SetOutputPin>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	619a      	str	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_GPIO_ResetOutputPin>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 80042dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <clearChipSelect+0x14>)
 80042e2:	f7ff ffdd 	bl	80042a0 <LL_GPIO_SetOutputPin>
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	48000400 	.word	0x48000400

080042f0 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 80042f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <setChipSelect+0x14>)
 80042fa:	f7ff ffdf 	bl	80042bc <LL_GPIO_ResetOutputPin>
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	48000400 	.word	0x48000400

08004308 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 800430e:	f7ff ffef 	bl	80042f0 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 8004312:	21c0      	movs	r1, #192	; 0xc0
 8004314:	480d      	ldr	r0, [pc, #52]	; (800434c <mcp25625_reset+0x44>)
 8004316:	f7ff ffb1 	bl	800427c <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 800431a:	bf00      	nop
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <mcp25625_reset+0x44>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8004328:	f7ff ffd6 	bl	80042d8 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800432c:	e002      	b.n	8004334 <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <mcp25625_reset+0x44>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <mcp25625_reset+0x44>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f6      	bne.n	800432e <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40003800 	.word	0x40003800

08004350 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	460a      	mov	r2, r1
 800435a:	71fb      	strb	r3, [r7, #7]
 800435c:	4613      	mov	r3, r2
 800435e:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 8004360:	f7ff ffc6 	bl	80042f0 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 8004364:	2102      	movs	r1, #2
 8004366:	4816      	ldr	r0, [pc, #88]	; (80043c0 <mcp25625_writeRegister+0x70>)
 8004368:	f7ff ff88 	bl	800427c <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	4619      	mov	r1, r3
 8004370:	4813      	ldr	r0, [pc, #76]	; (80043c0 <mcp25625_writeRegister+0x70>)
 8004372:	f7ff ff83 	bl	800427c <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 8004376:	79bb      	ldrb	r3, [r7, #6]
 8004378:	4619      	mov	r1, r3
 800437a:	4811      	ldr	r0, [pc, #68]	; (80043c0 <mcp25625_writeRegister+0x70>)
 800437c:	f7ff ff7e 	bl	800427c <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8004380:	bf00      	nop
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <mcp25625_writeRegister+0x70>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f9      	bne.n	8004382 <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 800438e:	bf00      	nop
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <mcp25625_writeRegister+0x70>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f9      	bne.n	8004390 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 800439c:	f7ff ff9c 	bl	80042d8 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80043a0:	e002      	b.n	80043a8 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <mcp25625_writeRegister+0x70>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <mcp25625_writeRegister+0x70>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f6      	bne.n	80043a2 <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40003800 	.word	0x40003800

080043c4 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 80043ce:	f7ff ff8f 	bl	80042f0 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 80043d2:	2103      	movs	r1, #3
 80043d4:	4814      	ldr	r0, [pc, #80]	; (8004428 <mcp25625_readRegister+0x64>)
 80043d6:	f7ff ff51 	bl	800427c <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4619      	mov	r1, r3
 80043de:	4812      	ldr	r0, [pc, #72]	; (8004428 <mcp25625_readRegister+0x64>)
 80043e0:	f7ff ff4c 	bl	800427c <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 80043e4:	2100      	movs	r1, #0
 80043e6:	4810      	ldr	r0, [pc, #64]	; (8004428 <mcp25625_readRegister+0x64>)
 80043e8:	f7ff ff48 	bl	800427c <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80043ec:	bf00      	nop
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <mcp25625_readRegister+0x64>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f9      	bne.n	80043ee <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80043fa:	bf00      	nop
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <mcp25625_readRegister+0x64>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f9      	bne.n	80043fc <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <mcp25625_readRegister+0x64>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <mcp25625_readRegister+0x64>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <mcp25625_readRegister+0x64>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();
 800441a:	f7ff ff5d 	bl	80042d8 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 800441e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40003800 	.word	0x40003800

0800442c <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	603a      	str	r2, [r7, #0]
 8004436:	71fb      	strb	r3, [r7, #7]
 8004438:	460b      	mov	r3, r1
 800443a:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 800443c:	f7ff ff58 	bl	80042f0 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	4619      	mov	r1, r3
 8004444:	481d      	ldr	r0, [pc, #116]	; (80044bc <mcp25625_loadTXB+0x90>)
 8004446:	f7ff ff19 	bl	800427c <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 800444a:	2300      	movs	r3, #0
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e011      	b.n	8004474 <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8004450:	bf00      	nop
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <mcp25625_loadTXB+0x90>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f9      	beq.n	8004452 <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	4814      	ldr	r0, [pc, #80]	; (80044bc <mcp25625_loadTXB+0x90>)
 800446a:	f7ff ff07 	bl	800427c <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	3301      	adds	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	79bb      	ldrb	r3, [r7, #6]
 8004478:	429a      	cmp	r2, r3
 800447a:	d3e9      	bcc.n	8004450 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 800447c:	bf00      	nop
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <mcp25625_loadTXB+0x90>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f9      	bne.n	800447e <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 800448a:	bf00      	nop
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <mcp25625_loadTXB+0x90>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f9      	bne.n	800448c <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8004498:	f7ff ff1e 	bl	80042d8 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 800449c:	e002      	b.n	80044a4 <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <mcp25625_loadTXB+0x90>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <mcp25625_loadTXB+0x90>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f6      	bne.n	800449e <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40003800 	.word	0x40003800

080044c0 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 80044c4:	2030      	movs	r0, #48	; 0x30
 80044c6:	f7ff ff7d 	bl	80043c4 <mcp25625_readRegister>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 80044d4:	2040      	movs	r0, #64	; 0x40
 80044d6:	f7ff ff75 	bl	80043c4 <mcp25625_readRegister>
 80044da:	4603      	mov	r3, r0
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}

080044e0 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 80044e4:	2050      	movs	r0, #80	; 0x50
 80044e6:	f7ff ff6d 	bl	80043c4 <mcp25625_readRegister>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	210d      	movs	r1, #13
 80044fc:	2044      	movs	r0, #68	; 0x44
 80044fe:	f7ff ff95 	bl	800442c <mcp25625_loadTXB>
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	210d      	movs	r1, #13
 8004516:	2042      	movs	r0, #66	; 0x42
 8004518:	f7ff ff88 	bl	800442c <mcp25625_loadTXB>
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	210d      	movs	r1, #13
 8004530:	2040      	movs	r0, #64	; 0x40
 8004532:	f7ff ff7b 	bl	800442c <mcp25625_loadTXB>
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 800453e:	b580      	push	{r7, lr}
 8004540:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8004542:	210b      	movs	r1, #11
 8004544:	2050      	movs	r0, #80	; 0x50
 8004546:	f7ff ff03 	bl	8004350 <mcp25625_writeRegister>
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}

0800454e <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 800454e:	b580      	push	{r7, lr}
 8004550:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8004552:	210b      	movs	r1, #11
 8004554:	2040      	movs	r0, #64	; 0x40
 8004556:	f7ff fefb 	bl	8004350 <mcp25625_writeRegister>
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}

0800455e <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 800455e:	b580      	push	{r7, lr}
 8004560:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8004562:	210b      	movs	r1, #11
 8004564:	2030      	movs	r0, #48	; 0x30
 8004566:	f7ff fef3 	bl	8004350 <mcp25625_writeRegister>
 800456a:	bf00      	nop
 800456c:	bd80      	pop	{r7, pc}

0800456e <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8004576:	f7ff ffb3 	bl	80044e0 <getTXB2CTRL>
 800457a:	4603      	mov	r3, r0
 800457c:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 800457e:	7b3b      	ldrb	r3, [r7, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ffaf 	bl	80044f0 <loadTXB2>
		setTXREQ2();
 8004592:	f7ff ffd4 	bl	800453e <setTXREQ2>
		return; // once txbuffer is loaded, return
 8004596:	e021      	b.n	80045dc <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8004598:	f7ff ff9a 	bl	80044d0 <getTXB1CTRL>
 800459c:	4603      	mov	r3, r0
 800459e:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 80045a0:	7b3b      	ldrb	r3, [r7, #12]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ffab 	bl	800450a <loadTXB1>
		setTXREQ1();
 80045b4:	f7ff ffcb 	bl	800454e <setTXREQ1>
		return; //once tx buffer is loaded, return
 80045b8:	e010      	b.n	80045dc <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 80045ba:	f7ff ff81 	bl	80044c0 <getTXB0CTRL>
 80045be:	4603      	mov	r3, r0
 80045c0:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 80045c2:	7b3b      	ldrb	r3, [r7, #12]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ffa7 	bl	8004524 <loadTXB0>
		setTXREQ0();
 80045d6:	f7ff ffc2 	bl	800455e <setTXREQ0>
		return; // once tx buffer is loaded, return
 80045da:	bf00      	nop
	}
}
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	603a      	str	r2, [r7, #0]
 80045ec:	80fb      	strh	r3, [r7, #6]
 80045ee:	460b      	mov	r3, r1
 80045f0:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	220d      	movs	r2, #13
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 fdf0 	bl	80061e0 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	b29b      	uxth	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	015b      	lsls	r3, r3, #5
 800460e:	b2db      	uxtb	r3, r3
 8004610:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8004612:	797b      	ldrb	r3, [r7, #5]
 8004614:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
 800461a:	e00b      	b.n	8004634 <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	441a      	add	r2, r3
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	3318      	adds	r3, #24
 8004628:	443b      	add	r3, r7
 800462a:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	3301      	adds	r3, #1
 8004632:	75fb      	strb	r3, [r7, #23]
 8004634:	7dfa      	ldrb	r2, [r7, #23]
 8004636:	797b      	ldrb	r3, [r7, #5]
 8004638:	429a      	cmp	r2, r3
 800463a:	d3ef      	bcc.n	800461c <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 800463c:	f107 0308 	add.w	r3, r7, #8
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff94 	bl	800456e <mcp25625_sendCAN>
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <mcp25625_init>:

void mcp25625_init (void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8004654:	f240 2276 	movw	r2, #630	; 0x276
 8004658:	2100      	movs	r1, #0
 800465a:	4804      	ldr	r0, [pc, #16]	; (800466c <mcp25625_init+0x1c>)
 800465c:	f001 fdc0 	bl	80061e0 <memset>
	clearChipSelect();
 8004660:	f7ff fe3a 	bl	80042d8 <clearChipSelect>
	mcp25625_reset();
 8004664:	f7ff fe50 	bl	8004308 <mcp25625_reset>
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000398 	.word	0x20000398

08004670 <CAN_configure>:

void CAN_configure()
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8004676:	23c0      	movs	r3, #192	; 0xc0
 8004678:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 800467a:	2389      	movs	r3, #137	; 0x89
 800467c:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 800467e:	2304      	movs	r3, #4
 8004680:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8004682:	2308      	movs	r3, #8
 8004684:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8004686:	f7ff ffe3 	bl	8004650 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 800468a:	7b3b      	ldrb	r3, [r7, #12]
 800468c:	4619      	mov	r1, r3
 800468e:	202a      	movs	r0, #42	; 0x2a
 8004690:	f7ff fe5e 	bl	8004350 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 8004694:	7a3b      	ldrb	r3, [r7, #8]
 8004696:	4619      	mov	r1, r3
 8004698:	2029      	movs	r0, #41	; 0x29
 800469a:	f7ff fe59 	bl	8004350 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 800469e:	793b      	ldrb	r3, [r7, #4]
 80046a0:	4619      	mov	r1, r3
 80046a2:	2028      	movs	r0, #40	; 0x28
 80046a4:	f7ff fe54 	bl	8004350 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 80046a8:	783b      	ldrb	r3, [r7, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	200f      	movs	r0, #15
 80046ae:	f7ff fe4f 	bl	8004350 <mcp25625_writeRegister>
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <LL_SPI_IsActiveFlag_RXNE>:
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_SPI_IsActiveFlag_TXE>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d101      	bne.n	80046f8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_SPI_IsActiveFlag_TXE+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_SPI_ReceiveData8>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	330c      	adds	r3, #12
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_SPI_TransmitData8>:
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	330c      	adds	r3, #12
 8004732:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	701a      	strb	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_GPIO_SetOutputPin>:
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	619a      	str	r2, [r3, #24]
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_GPIO_ResetOutputPin>:
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(SPI_TypeDef *spix, GPIO_TypeDef *cs_gpiox, uint16_t cs_pinx)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
	uint8_t whoAmI;

	mpu925x.spiHandle = spix;
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <MPU925x_Init+0x48>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6013      	str	r3, [r2, #0]
	mpu925x.CS_GPIOx = cs_gpiox;
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <MPU925x_Init+0x48>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6053      	str	r3, [r2, #4]
	mpu925x.CS_Pin = cs_pinx;
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <MPU925x_Init+0x48>)
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	8113      	strh	r3, [r2, #8]

	MPU925x_ReadRegs(MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 80047a0:	f107 0317 	add.w	r3, r7, #23
 80047a4:	2201      	movs	r2, #1
 80047a6:	4619      	mov	r1, r3
 80047a8:	2075      	movs	r0, #117	; 0x75
 80047aa:	f000 fa1f 	bl	8004bec <MPU925x_ReadRegs>

	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b71      	cmp	r3, #113	; 0x71
 80047b2:	d004      	beq.n	80047be <MPU925x_Init+0x3e>
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b73      	cmp	r3, #115	; 0x73
 80047b8:	d001      	beq.n	80047be <MPU925x_Init+0x3e>
		return 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <MPU925x_Init+0x40>

	return 0;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000610 	.word	0x20000610

080047cc <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(enum MPU925x_AccelSensitivity_e option)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d86d      	bhi.n	80048b8 <MPU925x_SetAccelSensitivity+0xec>
 80047dc:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <MPU925x_SetAccelSensitivity+0x18>)
 80047de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e2:	bf00      	nop
 80047e4:	080047f5 	.word	0x080047f5
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004857 	.word	0x08004857
 80047f0:	0800488d 	.word	0x0800488d
	{
	case mpu925x_accelSensitivity_2g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80047f4:	f107 030f 	add.w	r3, r7, #15
 80047f8:	2201      	movs	r2, #1
 80047fa:	4619      	mov	r1, r3
 80047fc:	201c      	movs	r0, #28
 80047fe:	f000 f9f5 	bl	8004bec <MPU925x_ReadRegs>
		data = data & ~0x18;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	f023 0318 	bic.w	r3, r3, #24
 8004808:	b2db      	uxtb	r3, r3
 800480a:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	4619      	mov	r1, r3
 8004810:	201c      	movs	r0, #28
 8004812:	f000 f995 	bl	8004b40 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <MPU925x_SetAccelSensitivity+0xf4>)
 8004818:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800481c:	601a      	str	r2, [r3, #0]
		break;
 800481e:	e04b      	b.n	80048b8 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_4g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004820:	f107 030f 	add.w	r3, r7, #15
 8004824:	2201      	movs	r2, #1
 8004826:	4619      	mov	r1, r3
 8004828:	201c      	movs	r0, #28
 800482a:	f000 f9df 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	b25b      	sxtb	r3, r3
 8004832:	f023 0318 	bic.w	r3, r3, #24
 8004836:	b25b      	sxtb	r3, r3
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	b25b      	sxtb	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	4619      	mov	r1, r3
 8004846:	201c      	movs	r0, #28
 8004848:	f000 f97a 	bl	8004b40 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <MPU925x_SetAccelSensitivity+0xf4>)
 800484e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8004852:	601a      	str	r2, [r3, #0]
		break;
 8004854:	e030      	b.n	80048b8 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_8g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8004856:	f107 030f 	add.w	r3, r7, #15
 800485a:	2201      	movs	r2, #1
 800485c:	4619      	mov	r1, r3
 800485e:	201c      	movs	r0, #28
 8004860:	f000 f9c4 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	b25b      	sxtb	r3, r3
 8004868:	f023 0318 	bic.w	r3, r3, #24
 800486c:	b25b      	sxtb	r3, r3
 800486e:	f043 0310 	orr.w	r3, r3, #16
 8004872:	b25b      	sxtb	r3, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	4619      	mov	r1, r3
 800487c:	201c      	movs	r0, #28
 800487e:	f000 f95f 	bl	8004b40 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <MPU925x_SetAccelSensitivity+0xf4>)
 8004884:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004888:	601a      	str	r2, [r3, #0]
		break;
 800488a:	e015      	b.n	80048b8 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_16g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 800488c:	f107 030f 	add.w	r3, r7, #15
 8004890:	2201      	movs	r2, #1
 8004892:	4619      	mov	r1, r3
 8004894:	201c      	movs	r0, #28
 8004896:	f000 f9a9 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	f043 0318 	orr.w	r3, r3, #24
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	4619      	mov	r1, r3
 80048a8:	201c      	movs	r0, #28
 80048aa:	f000 f949 	bl	8004b40 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <MPU925x_SetAccelSensitivity+0xf4>)
 80048b0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80048b4:	601a      	str	r2, [r3, #0]
		break;
 80048b6:	bf00      	nop
	}
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2000001c 	.word	0x2000001c

080048c4 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(enum MPU925x_GyroSensitivity_e option)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d86d      	bhi.n	80049b0 <MPU925x_SetGyroSensitivity+0xec>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <MPU925x_SetGyroSensitivity+0x18>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	08004919 	.word	0x08004919
 80048e4:	0800494f 	.word	0x0800494f
 80048e8:	08004985 	.word	0x08004985
	{
	case mpu925x_gyroSensitivity_250dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 80048ec:	f107 030f 	add.w	r3, r7, #15
 80048f0:	2201      	movs	r2, #1
 80048f2:	4619      	mov	r1, r3
 80048f4:	201b      	movs	r0, #27
 80048f6:	f000 f979 	bl	8004bec <MPU925x_ReadRegs>
		data = data & ~0x18;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	f023 0318 	bic.w	r3, r3, #24
 8004900:	b2db      	uxtb	r3, r3
 8004902:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	4619      	mov	r1, r3
 8004908:	201b      	movs	r0, #27
 800490a:	f000 f919 	bl	8004b40 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <MPU925x_SetGyroSensitivity+0xf4>)
 8004910:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8004914:	601a      	str	r2, [r3, #0]
		break;
 8004916:	e04b      	b.n	80049b0 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_500dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004918:	f107 030f 	add.w	r3, r7, #15
 800491c:	2201      	movs	r2, #1
 800491e:	4619      	mov	r1, r3
 8004920:	201b      	movs	r0, #27
 8004922:	f000 f963 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	b25b      	sxtb	r3, r3
 800492a:	f023 0318 	bic.w	r3, r3, #24
 800492e:	b25b      	sxtb	r3, r3
 8004930:	f043 0308 	orr.w	r3, r3, #8
 8004934:	b25b      	sxtb	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	4619      	mov	r1, r3
 800493e:	201b      	movs	r0, #27
 8004940:	f000 f8fe 	bl	8004b40 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <MPU925x_SetGyroSensitivity+0xf4>)
 8004946:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800494a:	601a      	str	r2, [r3, #0]
		break;
 800494c:	e030      	b.n	80049b0 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_1000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 800494e:	f107 030f 	add.w	r3, r7, #15
 8004952:	2201      	movs	r2, #1
 8004954:	4619      	mov	r1, r3
 8004956:	201b      	movs	r0, #27
 8004958:	f000 f948 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	b25b      	sxtb	r3, r3
 8004960:	f023 0318 	bic.w	r3, r3, #24
 8004964:	b25b      	sxtb	r3, r3
 8004966:	f043 0310 	orr.w	r3, r3, #16
 800496a:	b25b      	sxtb	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	4619      	mov	r1, r3
 8004974:	201b      	movs	r0, #27
 8004976:	f000 f8e3 	bl	8004b40 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <MPU925x_SetGyroSensitivity+0xf4>)
 800497c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004980:	601a      	str	r2, [r3, #0]
		break;
 8004982:	e015      	b.n	80049b0 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_2000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8004984:	f107 030f 	add.w	r3, r7, #15
 8004988:	2201      	movs	r2, #1
 800498a:	4619      	mov	r1, r3
 800498c:	201b      	movs	r0, #27
 800498e:	f000 f92d 	bl	8004bec <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	f043 0318 	orr.w	r3, r3, #24
 8004998:	b2db      	uxtb	r3, r3
 800499a:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	4619      	mov	r1, r3
 80049a0:	201b      	movs	r0, #27
 80049a2:	f000 f8cd 	bl	8004b40 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <MPU925x_SetGyroSensitivity+0xf4>)
 80049a8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80049ac:	601a      	str	r2, [r3, #0]
		break;
 80049ae:	bf00      	nop
	}
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000020 	.word	0x20000020

080049bc <MPU925x_ReadIMU>:
{
	MPU925x_WriteReg(MPU925X_REG_SMPLRT_DIV, divider);
}

struct MPU925x_IMUData_s MPU925x_ReadIMU(void)
{
 80049bc:	b5b0      	push	{r4, r5, r7, lr}
 80049be:	b096      	sub	sp, #88	; 0x58
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	struct MPU925x_IMUData_s IMUData;
	uint8_t data[14];

	MPU925x_ReadRegs(MPU925X_REG_ACCEL_XOUT_H, data, 14);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	220e      	movs	r2, #14
 80049ca:	4619      	mov	r1, r3
 80049cc:	203b      	movs	r0, #59	; 0x3b
 80049ce:	f000 f90d 	bl	8004bec <MPU925x_ReadRegs>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 80049d2:	7a3b      	ldrb	r3, [r7, #8]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	b21a      	sxth	r2, r3
 80049d8:	7a7b      	ldrb	r3, [r7, #9]
 80049da:	b21b      	sxth	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 80049e2:	7abb      	ldrb	r3, [r7, #10]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	b21a      	sxth	r2, r3
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 80049f2:	7b3b      	ldrb	r3, [r7, #12]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	b21a      	sxth	r2, r3
 80049f8:	7b7b      	ldrb	r3, [r7, #13]
 80049fa:	b21b      	sxth	r3, r3
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8004a02:	7c3b      	ldrb	r3, [r7, #16]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	b21a      	sxth	r2, r3
 8004a08:	7c7b      	ldrb	r3, [r7, #17]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8004a12:	7cbb      	ldrb	r3, [r7, #18]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	b21a      	sxth	r2, r3
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	b21b      	sxth	r3, r3
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8004a22:	7d3b      	ldrb	r3, [r7, #20]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	b21a      	sxth	r2, r3
 8004a28:	7d7b      	ldrb	r3, [r7, #21]
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMUData.ax = ax / accelSensitivity;
 8004a32:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	; (8004b38 <MPU925x_ReadIMU+0x17c>)
 8004a40:	edd3 7a00 	vldr	s15, [r3]
 8004a44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a48:	ee16 0a90 	vmov	r0, s13
 8004a4c:	f7fb fd20 	bl	8000490 <__aeabi_f2d>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMUData.ay = ay / accelSensitivity;
 8004a58:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a64:	4b34      	ldr	r3, [pc, #208]	; (8004b38 <MPU925x_ReadIMU+0x17c>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a6e:	ee16 0a90 	vmov	r0, s13
 8004a72:	f7fb fd0d 	bl	8000490 <__aeabi_f2d>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMUData.az = az / accelSensitivity;
 8004a7e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <MPU925x_ReadIMU+0x17c>)
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
 8004a90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004a94:	ee16 0a90 	vmov	r0, s13
 8004a98:	f7fb fcfa 	bl	8000490 <__aeabi_f2d>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMUData.gx = gx / gyroSensitivity;
 8004aa4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <MPU925x_ReadIMU+0x180>)
 8004ab2:	edd3 7a00 	vldr	s15, [r3]
 8004ab6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004aba:	ee16 0a90 	vmov	r0, s13
 8004abe:	f7fb fce7 	bl	8000490 <__aeabi_f2d>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMUData.gy = gy / gyroSensitivity;
 8004aca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ad6:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <MPU925x_ReadIMU+0x180>)
 8004ad8:	edd3 7a00 	vldr	s15, [r3]
 8004adc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ae0:	ee16 0a90 	vmov	r0, s13
 8004ae4:	f7fb fcd4 	bl	8000490 <__aeabi_f2d>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMUData.gz = gz / gyroSensitivity;
 8004af0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <MPU925x_ReadIMU+0x180>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b06:	ee16 0a90 	vmov	r0, s13
 8004b0a:	f7fb fcc1 	bl	8000490 <__aeabi_f2d>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMUData;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	461d      	mov	r5, r3
 8004b1a:	f107 0418 	add.w	r4, r7, #24
 8004b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	3758      	adds	r7, #88	; 0x58
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bdb0      	pop	{r4, r5, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	2000001c 	.word	0x2000001c
 8004b3c:	20000020 	.word	0x20000020

08004b40 <MPU925x_WriteReg>:

void MPU925x_WriteReg(uint8_t adress, uint8_t data)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	460a      	mov	r2, r1
 8004b4a:	71fb      	strb	r3, [r7, #7]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b56:	8912      	ldrh	r2, [r2, #8]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fe01 	bl	8004762 <LL_GPIO_ResetOutputPin>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8004b60:	bf00      	nop
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f8      	beq.n	8004b62 <MPU925x_WriteReg+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, adress);
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	79fa      	ldrb	r2, [r7, #7]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fdd2 	bl	8004722 <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8004b7e:	bf00      	nop
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f8      	beq.n	8004b80 <MPU925x_WriteReg+0x40>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8004b8e:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fdb7 	bl	8004706 <LL_SPI_ReceiveData8>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8004b98:	bf00      	nop
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f8      	beq.n	8004b9a <MPU925x_WriteReg+0x5a>
	LL_SPI_TransmitData8(mpu925x.spiHandle, data);
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	79ba      	ldrb	r2, [r7, #6]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fdb6 	bl	8004722 <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8004bb6:	bf00      	nop
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f8      	beq.n	8004bb8 <MPU925x_WriteReg+0x78>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fd9b 	bl	8004706 <LL_SPI_ReceiveData8>

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <MPU925x_WriteReg+0xa8>)
 8004bd6:	8912      	ldrh	r2, [r2, #8]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fdb3 	bl	8004746 <LL_GPIO_SetOutputPin>
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000610 	.word	0x20000610

08004bec <MPU925x_ReadRegs>:

void MPU925x_ReadRegs(uint8_t address, uint8_t *data, uint8_t bytes)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	71fb      	strb	r3, [r7, #7]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004bfc:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a2f      	ldr	r2, [pc, #188]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c02:	8912      	ldrh	r2, [r2, #8]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fdab 	bl	8004762 <LL_GPIO_ResetOutputPin>

	while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 8004c0c:	bf00      	nop
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fd64 	bl	80046e0 <LL_SPI_IsActiveFlag_TXE>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f7      	beq.n	8004c0e <MPU925x_ReadRegs+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, (address | 0x80));
 8004c1e:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f7ff fd78 	bl	8004722 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 8004c32:	bf00      	nop
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fd3e 	bl	80046ba <LL_SPI_IsActiveFlag_RXNE>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f7      	beq.n	8004c34 <MPU925x_ReadRegs+0x48>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);							// Read out bogus data
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fd5c 	bl	8004706 <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < bytes; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	e024      	b.n	8004c9e <MPU925x_ReadRegs+0xb2>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 8004c54:	bf00      	nop
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fd40 	bl	80046e0 <LL_SPI_IsActiveFlag_TXE>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f7      	beq.n	8004c56 <MPU925x_ReadRegs+0x6a>
		LL_SPI_TransmitData8(mpu925x.spiHandle, 0x00);				// Send out 8 bits to read 8 more bits
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fd58 	bl	8004722 <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 8004c72:	bf00      	nop
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fd1e 	bl	80046ba <LL_SPI_IsActiveFlag_RXNE>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f7      	beq.n	8004c74 <MPU925x_ReadRegs+0x88>
		data[i] = LL_SPI_ReceiveData8(mpu925x.spiHandle);
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	18d4      	adds	r4, r2, r3
 8004c8e:	4608      	mov	r0, r1
 8004c90:	f7ff fd39 	bl	8004706 <LL_SPI_ReceiveData8>
 8004c94:	4603      	mov	r3, r0
 8004c96:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < bytes; i++)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	79bb      	ldrb	r3, [r7, #6]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3d6      	bcc.n	8004c54 <MPU925x_ReadRegs+0x68>
	}

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <MPU925x_ReadRegs+0xd4>)
 8004cac:	8912      	ldrh	r2, [r2, #8]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fd48 	bl	8004746 <LL_GPIO_SetOutputPin>
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000610 	.word	0x20000610

08004cc4 <LL_ADC_REG_SetSequencerLength>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f023 020f 	bic.w	r2, r3, #15
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_IsEnabled>:
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <LL_ADC_IsEnabled+0x18>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <LL_ADC_IsEnabled+0x1a>
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004d1e:	481c      	ldr	r0, [pc, #112]	; (8004d90 <LL_ADC_CommonInit+0x80>)
 8004d20:	f7ff ffe3 	bl	8004cea <LL_ADC_IsEnabled>
 8004d24:	4604      	mov	r4, r0
 8004d26:	481b      	ldr	r0, [pc, #108]	; (8004d94 <LL_ADC_CommonInit+0x84>)
 8004d28:	f7ff ffdf 	bl	8004cea <LL_ADC_IsEnabled>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	431c      	orrs	r4, r3
 8004d30:	4819      	ldr	r0, [pc, #100]	; (8004d98 <LL_ADC_CommonInit+0x88>)
 8004d32:	f7ff ffda 	bl	8004cea <LL_ADC_IsEnabled>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4323      	orrs	r3, r4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d120      	bne.n	8004d80 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <LL_ADC_CommonInit+0x8c>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	6811      	ldr	r1, [r2, #0]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6852      	ldr	r2, [r2, #4]
 8004d56:	4311      	orrs	r1, r2
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	6892      	ldr	r2, [r2, #8]
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	e00b      	b.n	8004d84 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <LL_ADC_CommonInit+0x8c>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	e001      	b.n	8004d84 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd90      	pop	{r4, r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	50040000 	.word	0x50040000
 8004d94:	50040100 	.word	0x50040100
 8004d98:	50040200 	.word	0x50040200
 8004d9c:	ffc030e0 	.word	0xffc030e0

08004da0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff ff9b 	bl	8004cea <LL_ADC_IsEnabled>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d111      	bne.n	8004dde <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]
 8004ddc:	e001      	b.n	8004de2 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff75 	bl	8004cea <LL_ADC_IsEnabled>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d132      	bne.n	8004e6c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <LL_ADC_REG_Init+0x90>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	6892      	ldr	r2, [r2, #8]
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	68d2      	ldr	r2, [r2, #12]
 8004e24:	4311      	orrs	r1, r2
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	6912      	ldr	r2, [r2, #16]
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	6952      	ldr	r2, [r2, #20]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	e011      	b.n	8004e5e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <LL_ADC_REG_Init+0x90>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	4311      	orrs	r1, r2
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	6912      	ldr	r2, [r2, #16]
 8004e50:	4311      	orrs	r1, r2
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	6952      	ldr	r2, [r2, #20]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff2d 	bl	8004cc4 <LL_ADC_REG_SetSequencerLength>
 8004e6a:	e001      	b.n	8004e70 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	fff0c03c 	.word	0xfff0c03c

08004e80 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <LL_EXTI_EnableIT_0_31+0x20>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4904      	ldr	r1, [pc, #16]	; (8004ea0 <LL_EXTI_EnableIT_0_31+0x20>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40010400 	.word	0x40010400

08004ea4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <LL_EXTI_EnableIT_32_63+0x20>)
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <LL_EXTI_EnableIT_32_63+0x20>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	620b      	str	r3, [r1, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40010400 	.word	0x40010400

08004ec8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <LL_EXTI_DisableIT_0_31+0x24>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	4904      	ldr	r1, [pc, #16]	; (8004eec <LL_EXTI_DisableIT_0_31+0x24>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010400 	.word	0x40010400

08004ef0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <LL_EXTI_DisableIT_32_63+0x24>)
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	4904      	ldr	r1, [pc, #16]	; (8004f14 <LL_EXTI_DisableIT_32_63+0x24>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	620b      	str	r3, [r1, #32]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010400 	.word	0x40010400

08004f18 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]

}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40010400 	.word	0x40010400

08004f3c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f48:	4904      	ldr	r1, [pc, #16]	; (8004f5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40010400 	.word	0x40010400

08004f60 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	4904      	ldr	r1, [pc, #16]	; (8004f84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	604b      	str	r3, [r1, #4]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40010400 	.word	0x40010400

08004f88 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <LL_EXTI_DisableEvent_32_63+0x24>)
 8004f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	4904      	ldr	r1, [pc, #16]	; (8004fac <LL_EXTI_DisableEvent_32_63+0x24>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010400 	.word	0x40010400

08004fb0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]

}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe0:	4904      	ldr	r1, [pc, #16]	; (8004ff4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	43db      	mvns	r3, r3
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800500a:	4013      	ands	r3, r2
 800500c:	608b      	str	r3, [r1, #8]

}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010400 	.word	0x40010400

08005020 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800502a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	43db      	mvns	r3, r3
 8005030:	4904      	ldr	r1, [pc, #16]	; (8005044 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005032:	4013      	ands	r3, r2
 8005034:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010400 	.word	0x40010400

08005048 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4313      	orrs	r3, r2
 800505a:	60cb      	str	r3, [r1, #12]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40010400 	.word	0x40010400

0800506c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4904      	ldr	r1, [pc, #16]	; (800508c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4313      	orrs	r3, r2
 800507e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40010400 	.word	0x40010400

08005090 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	43db      	mvns	r3, r3
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60cb      	str	r3, [r1, #12]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010400 	.word	0x40010400

080050b8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	4904      	ldr	r1, [pc, #16]	; (80050dc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010400 	.word	0x40010400

080050e0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7a1b      	ldrb	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80d1 	beq.w	8005298 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7a5b      	ldrb	r3, [r3, #9]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d01c      	beq.n	8005140 <LL_EXTI_Init+0x60>
 8005106:	2b02      	cmp	r3, #2
 8005108:	dc25      	bgt.n	8005156 <LL_EXTI_Init+0x76>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <LL_EXTI_Init+0x34>
 800510e:	2b01      	cmp	r3, #1
 8005110:	d00b      	beq.n	800512a <LL_EXTI_Init+0x4a>
 8005112:	e020      	b.n	8005156 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff ff21 	bl	8004f60 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff feac 	bl	8004e80 <LL_EXTI_EnableIT_0_31>
          break;
 8005128:	e018      	b.n	800515c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff feca 	bl	8004ec8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff feed 	bl	8004f18 <LL_EXTI_EnableEvent_0_31>
          break;
 800513e:	e00d      	b.n	800515c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fe9b 	bl	8004e80 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fee2 	bl	8004f18 <LL_EXTI_EnableEvent_0_31>
          break;
 8005154:	e002      	b.n	800515c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8005156:	2301      	movs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
          break;
 800515a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7a9b      	ldrb	r3, [r3, #10]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d030      	beq.n	80051c6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7a9b      	ldrb	r3, [r3, #10]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d01c      	beq.n	80051a6 <LL_EXTI_Init+0xc6>
 800516c:	2b03      	cmp	r3, #3
 800516e:	dc25      	bgt.n	80051bc <LL_EXTI_Init+0xdc>
 8005170:	2b01      	cmp	r3, #1
 8005172:	d002      	beq.n	800517a <LL_EXTI_Init+0x9a>
 8005174:	2b02      	cmp	r3, #2
 8005176:	d00b      	beq.n	8005190 <LL_EXTI_Init+0xb0>
 8005178:	e020      	b.n	80051bc <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ff86 	bl	8005090 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff11 	bl	8004fb0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800518e:	e01b      	b.n	80051c8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff2f 	bl	8004ff8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff52 	bl	8005048 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80051a4:	e010      	b.n	80051c8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ff00 	bl	8004fb0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff47 	bl	8005048 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80051ba:	e005      	b.n	80051c8 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	60fb      	str	r3, [r7, #12]
            break;
 80051c4:	e000      	b.n	80051c8 <LL_EXTI_Init+0xe8>
        }
      }
 80051c6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d078      	beq.n	80052c2 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7a5b      	ldrb	r3, [r3, #9]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d01c      	beq.n	8005212 <LL_EXTI_Init+0x132>
 80051d8:	2b02      	cmp	r3, #2
 80051da:	dc25      	bgt.n	8005228 <LL_EXTI_Init+0x148>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <LL_EXTI_Init+0x106>
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d00b      	beq.n	80051fc <LL_EXTI_Init+0x11c>
 80051e4:	e020      	b.n	8005228 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fecc 	bl	8004f88 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fe55 	bl	8004ea4 <LL_EXTI_EnableIT_32_63>
          break;
 80051fa:	e01a      	b.n	8005232 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fe75 	bl	8004ef0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe96 	bl	8004f3c <LL_EXTI_EnableEvent_32_63>
          break;
 8005210:	e00f      	b.n	8005232 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fe44 	bl	8004ea4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff fe8b 	bl	8004f3c <LL_EXTI_EnableEvent_32_63>
          break;
 8005226:	e004      	b.n	8005232 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
          break;
 8005230:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7a9b      	ldrb	r3, [r3, #10]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d043      	beq.n	80052c2 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7a9b      	ldrb	r3, [r3, #10]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d01c      	beq.n	800527c <LL_EXTI_Init+0x19c>
 8005242:	2b03      	cmp	r3, #3
 8005244:	dc25      	bgt.n	8005292 <LL_EXTI_Init+0x1b2>
 8005246:	2b01      	cmp	r3, #1
 8005248:	d002      	beq.n	8005250 <LL_EXTI_Init+0x170>
 800524a:	2b02      	cmp	r3, #2
 800524c:	d00b      	beq.n	8005266 <LL_EXTI_Init+0x186>
 800524e:	e020      	b.n	8005292 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff2f 	bl	80050b8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff feb8 	bl	8004fd4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8005264:	e02e      	b.n	80052c4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fed8 	bl	8005020 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fef9 	bl	800506c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800527a:	e023      	b.n	80052c4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fea7 	bl	8004fd4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff feee 	bl	800506c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005290:	e018      	b.n	80052c4 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
            break;
 8005296:	e015      	b.n	80052c4 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fe13 	bl	8004ec8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fe5a 	bl	8004f60 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fe1d 	bl	8004ef0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fe64 	bl	8004f88 <LL_EXTI_DisableEvent_32_63>
 80052c0:	e000      	b.n	80052c4 <LL_EXTI_Init+0x1e4>
      }
 80052c2:	bf00      	nop
  }

  return status;
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <LL_GPIO_SetPinMode>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b08b      	sub	sp, #44	; 0x2c
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	613b      	str	r3, [r7, #16]
  return result;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80052f4:	2320      	movs	r3, #32
 80052f6:	e003      	b.n	8005300 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fab3 f383 	clz	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2103      	movs	r1, #3
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	61fb      	str	r3, [r7, #28]
  return result;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005322:	2320      	movs	r3, #32
 8005324:	e003      	b.n	800532e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	b2db      	uxtb	r3, r3
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	431a      	orrs	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]
}
 800533c:	bf00      	nop
 800533e:	372c      	adds	r7, #44	; 0x2c
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_GPIO_SetPinOutputType>:
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	43db      	mvns	r3, r3
 800535c:	401a      	ands	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	605a      	str	r2, [r3, #4]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_GPIO_SetPinSpeed>:
{
 8005378:	b480      	push	{r7}
 800537a:	b08b      	sub	sp, #44	; 0x2c
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	613b      	str	r3, [r7, #16]
  return result;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800539e:	2320      	movs	r3, #32
 80053a0:	e003      	b.n	80053aa <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	fab3 f383 	clz	r3, r3
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	2103      	movs	r1, #3
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	401a      	ands	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	61fb      	str	r3, [r7, #28]
  return result;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e003      	b.n	80053d8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	fa01 f303 	lsl.w	r3, r1, r3
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	609a      	str	r2, [r3, #8]
}
 80053e6:	bf00      	nop
 80053e8:	372c      	adds	r7, #44	; 0x2c
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <LL_GPIO_SetPinPull>:
{
 80053f2:	b480      	push	{r7}
 80053f4:	b08b      	sub	sp, #44	; 0x2c
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	613b      	str	r3, [r7, #16]
  return result;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005418:	2320      	movs	r3, #32
 800541a:	e003      	b.n	8005424 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	fab3 f383 	clz	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2103      	movs	r1, #3
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	61fb      	str	r3, [r7, #28]
  return result;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005446:	2320      	movs	r3, #32
 8005448:	e003      	b.n	8005452 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	b2db      	uxtb	r3, r3
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	431a      	orrs	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	60da      	str	r2, [r3, #12]
}
 8005460:	bf00      	nop
 8005462:	372c      	adds	r7, #44	; 0x2c
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_GPIO_SetAFPin_0_7>:
{
 800546c:	b480      	push	{r7}
 800546e:	b08b      	sub	sp, #44	; 0x2c
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1a      	ldr	r2, [r3, #32]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa93 f3a3 	rbit	r3, r3
 8005486:	613b      	str	r3, [r7, #16]
  return result;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005492:	2320      	movs	r3, #32
 8005494:	e003      	b.n	800549e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	fab3 f383 	clz	r3, r3
 800549c:	b2db      	uxtb	r3, r3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	210f      	movs	r1, #15
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	401a      	ands	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	fa93 f3a3 	rbit	r3, r3
 80054b4:	61fb      	str	r3, [r7, #28]
  return result;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80054c0:	2320      	movs	r3, #32
 80054c2:	e003      	b.n	80054cc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	372c      	adds	r7, #44	; 0x2c
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_GPIO_SetAFPin_8_15>:
{
 80054e6:	b480      	push	{r7}
 80054e8:	b08b      	sub	sp, #44	; 0x2c
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fa93 f3a3 	rbit	r3, r3
 8005502:	613b      	str	r3, [r7, #16]
  return result;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800550e:	2320      	movs	r3, #32
 8005510:	e003      	b.n	800551a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	fab3 f383 	clz	r3, r3
 8005518:	b2db      	uxtb	r3, r3
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	210f      	movs	r1, #15
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	401a      	ands	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	61fb      	str	r3, [r7, #28]
  return result;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800553e:	2320      	movs	r3, #32
 8005540:	e003      	b.n	800554a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005558:	bf00      	nop
 800555a:	372c      	adds	r7, #44	; 0x2c
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	60fb      	str	r3, [r7, #12]
  return result;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <LL_GPIO_Init+0x26>
    return 32U;
 8005586:	2320      	movs	r3, #32
 8005588:	e003      	b.n	8005592 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005594:	e048      	b.n	8005628 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	2101      	movs	r1, #1
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d03a      	beq.n	8005622 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d003      	beq.n	80055bc <LL_GPIO_Init+0x58>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d10e      	bne.n	80055da <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	461a      	mov	r2, r3
 80055c2:	69b9      	ldr	r1, [r7, #24]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fed7 	bl	8005378 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	461a      	mov	r2, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff feb7 	bl	8005348 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	461a      	mov	r2, r3
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ff05 	bl	80053f2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d111      	bne.n	8005614 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2bff      	cmp	r3, #255	; 0xff
 80055f4:	d807      	bhi.n	8005606 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	461a      	mov	r2, r3
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ff34 	bl	800546c <LL_GPIO_SetAFPin_0_7>
 8005604:	e006      	b.n	8005614 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	461a      	mov	r2, r3
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff69 	bl	80054e6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	461a      	mov	r2, r3
 800561a:	69b9      	ldr	r1, [r7, #24]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fe56 	bl	80052ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3301      	adds	r3, #1
 8005626:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1af      	bne.n	8005596 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <LL_RCC_HSI_IsReady>:
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <LL_RCC_HSI_IsReady+0x24>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005650:	d101      	bne.n	8005656 <LL_RCC_HSI_IsReady+0x16>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <LL_RCC_HSI_IsReady+0x18>
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000

08005668 <LL_RCC_LSE_IsReady>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800566c:	4b07      	ldr	r3, [pc, #28]	; (800568c <LL_RCC_LSE_IsReady+0x24>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d101      	bne.n	800567e <LL_RCC_LSE_IsReady+0x16>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <LL_RCC_LSE_IsReady+0x18>
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000

08005690 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d101      	bne.n	80056a4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40021000 	.word	0x40021000

080056b4 <LL_RCC_MSI_GetRange>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <LL_RCC_MSI_GetRange+0x18>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000

080056d0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80056d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80056de:	4618      	mov	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40021000 	.word	0x40021000

080056ec <LL_RCC_GetSysClkSource>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <LL_RCC_GetSysClkSource+0x18>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000

08005708 <LL_RCC_GetAHBPrescaler>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <LL_RCC_GetAHBPrescaler+0x18>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000

08005724 <LL_RCC_GetAPB1Prescaler>:
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <LL_RCC_GetAPB1Prescaler+0x18>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000

08005740 <LL_RCC_GetAPB2Prescaler>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000

0800575c <LL_RCC_GetUSARTClockSource>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <LL_RCC_GetUSARTClockSource+0x24>)
 8005766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	401a      	ands	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	4313      	orrs	r3, r2
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40021000 	.word	0x40021000

08005784 <LL_RCC_GetUARTClockSource>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <LL_RCC_GetUARTClockSource+0x24>)
 800578e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	401a      	ands	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	041b      	lsls	r3, r3, #16
 800579a:	4313      	orrs	r3, r2
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40021000 	.word	0x40021000

080057ac <LL_RCC_PLL_GetMainSource>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0303 	and.w	r3, r3, #3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000

080057c8 <LL_RCC_PLL_GetN>:
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <LL_RCC_PLL_GetN+0x18>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40021000 	.word	0x40021000

080057e4 <LL_RCC_PLL_GetR>:
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <LL_RCC_PLL_GetR+0x18>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <LL_RCC_PLL_GetDivider>:
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <LL_RCC_PLL_GetDivider+0x18>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000

0800581c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d137      	bne.n	800589e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff94 	bl	800575c <LL_RCC_GetUSARTClockSource>
 8005834:	4603      	mov	r3, r0
 8005836:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800583a:	2b03      	cmp	r3, #3
 800583c:	f200 80b3 	bhi.w	80059a6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005887 	.word	0x08005887
 800584c:	08005859 	.word	0x08005859
 8005850:	08005861 	.word	0x08005861
 8005854:	08005873 	.word	0x08005873
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005858:	f000 f95c 	bl	8005b14 <RCC_GetSystemClockFreq>
 800585c:	60f8      	str	r0, [r7, #12]
        break;
 800585e:	e0b5      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005860:	f7ff feee 	bl	8005640 <LL_RCC_HSI_IsReady>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 809f 	beq.w	80059aa <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800586c:	4b5a      	ldr	r3, [pc, #360]	; (80059d8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800586e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005870:	e09b      	b.n	80059aa <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005872:	f7ff fef9 	bl	8005668 <LL_RCC_LSE_IsReady>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8098 	beq.w	80059ae <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800587e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005882:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005884:	e093      	b.n	80059ae <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005886:	f000 f945 	bl	8005b14 <RCC_GetSystemClockFreq>
 800588a:	4603      	mov	r3, r0
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f9d1 	bl	8005c34 <RCC_GetHCLKClockFreq>
 8005892:	4603      	mov	r3, r0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f9f7 	bl	8005c88 <RCC_GetPCLK2ClockFreq>
 800589a:	60f8      	str	r0, [r7, #12]
        break;
 800589c:	e096      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	d146      	bne.n	8005932 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff ff59 	bl	800575c <LL_RCC_GetUSARTClockSource>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d87e      	bhi.n	80059b2 <LL_RCC_GetUSARTClockFreq+0x196>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <LL_RCC_GetUSARTClockFreq+0xa0>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	0800591b 	.word	0x0800591b
 80058c0:	080059b3 	.word	0x080059b3
 80058c4:	080059b3 	.word	0x080059b3
 80058c8:	080059b3 	.word	0x080059b3
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080059b3 	.word	0x080059b3
 80058d4:	080059b3 	.word	0x080059b3
 80058d8:	080059b3 	.word	0x080059b3
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	080059b3 	.word	0x080059b3
 80058e4:	080059b3 	.word	0x080059b3
 80058e8:	080059b3 	.word	0x080059b3
 80058ec:	08005909 	.word	0x08005909
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80058f0:	f000 f910 	bl	8005b14 <RCC_GetSystemClockFreq>
 80058f4:	60f8      	str	r0, [r7, #12]
        break;
 80058f6:	e069      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80058f8:	f7ff fea2 	bl	8005640 <LL_RCC_HSI_IsReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d059      	beq.n	80059b6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005902:	4b35      	ldr	r3, [pc, #212]	; (80059d8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005904:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005906:	e056      	b.n	80059b6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005908:	f7ff feae 	bl	8005668 <LL_RCC_LSE_IsReady>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d053      	beq.n	80059ba <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005916:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005918:	e04f      	b.n	80059ba <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800591a:	f000 f8fb 	bl	8005b14 <RCC_GetSystemClockFreq>
 800591e:	4603      	mov	r3, r0
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f987 	bl	8005c34 <RCC_GetHCLKClockFreq>
 8005926:	4603      	mov	r3, r0
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f999 	bl	8005c60 <RCC_GetPCLK1ClockFreq>
 800592e:	60f8      	str	r0, [r7, #12]
        break;
 8005930:	e04c      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d142      	bne.n	80059be <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff0f 	bl	800575c <LL_RCC_GetUSARTClockSource>
 800593e:	4603      	mov	r3, r0
 8005940:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005944:	d01a      	beq.n	800597c <LL_RCC_GetUSARTClockFreq+0x160>
 8005946:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800594a:	d83a      	bhi.n	80059c2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00c      	beq.n	800596c <LL_RCC_GetUSARTClockFreq+0x150>
 8005952:	4a22      	ldr	r2, [pc, #136]	; (80059dc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d834      	bhi.n	80059c2 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005958:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800595c:	d017      	beq.n	800598e <LL_RCC_GetUSARTClockFreq+0x172>
 800595e:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d12e      	bne.n	80059c2 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005964:	f000 f8d6 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005968:	60f8      	str	r0, [r7, #12]
          break;
 800596a:	e02f      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800596c:	f7ff fe68 	bl	8005640 <LL_RCC_HSI_IsReady>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d027      	beq.n	80059c6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005976:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005978:	60fb      	str	r3, [r7, #12]
          }
          break;
 800597a:	e024      	b.n	80059c6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800597c:	f7ff fe74 	bl	8005668 <LL_RCC_LSE_IsReady>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800598c:	e01d      	b.n	80059ca <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800598e:	f000 f8c1 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005992:	4603      	mov	r3, r0
 8005994:	4618      	mov	r0, r3
 8005996:	f000 f94d 	bl	8005c34 <RCC_GetHCLKClockFreq>
 800599a:	4603      	mov	r3, r0
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f95f 	bl	8005c60 <RCC_GetPCLK1ClockFreq>
 80059a2:	60f8      	str	r0, [r7, #12]
          break;
 80059a4:	e012      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059a6:	bf00      	nop
 80059a8:	e010      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059aa:	bf00      	nop
 80059ac:	e00e      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059ae:	bf00      	nop
 80059b0:	e00c      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059b2:	bf00      	nop
 80059b4:	e00a      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059b6:	bf00      	nop
 80059b8:	e008      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80059ba:	bf00      	nop
 80059bc:	e006      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80059be:	bf00      	nop
 80059c0:	e004      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80059ca:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80059cc:	68fb      	ldr	r3, [r7, #12]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	00300020 	.word	0x00300020
 80059e0:	00300010 	.word	0x00300010

080059e4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2bc0      	cmp	r3, #192	; 0xc0
 80059f4:	d136      	bne.n	8005a64 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fec4 	bl	8005784 <LL_RCC_GetUARTClockSource>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005a02:	d01a      	beq.n	8005a3a <LL_RCC_GetUARTClockFreq+0x56>
 8005a04:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005a08:	d82e      	bhi.n	8005a68 <LL_RCC_GetUARTClockFreq+0x84>
 8005a0a:	4a3d      	ldr	r2, [pc, #244]	; (8005b00 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00c      	beq.n	8005a2a <LL_RCC_GetUARTClockFreq+0x46>
 8005a10:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d828      	bhi.n	8005a68 <LL_RCC_GetUARTClockFreq+0x84>
 8005a16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a1a:	d017      	beq.n	8005a4c <LL_RCC_GetUARTClockFreq+0x68>
 8005a1c:	4a39      	ldr	r2, [pc, #228]	; (8005b04 <LL_RCC_GetUARTClockFreq+0x120>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d122      	bne.n	8005a68 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005a22:	f000 f877 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005a26:	60f8      	str	r0, [r7, #12]
        break;
 8005a28:	e023      	b.n	8005a72 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005a2a:	f7ff fe09 	bl	8005640 <LL_RCC_HSI_IsReady>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01b      	beq.n	8005a6c <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005a34:	4b34      	ldr	r3, [pc, #208]	; (8005b08 <LL_RCC_GetUARTClockFreq+0x124>)
 8005a36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a38:	e018      	b.n	8005a6c <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005a3a:	f7ff fe15 	bl	8005668 <LL_RCC_LSE_IsReady>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a48:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a4a:	e011      	b.n	8005a70 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a4c:	f000 f862 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f8ee 	bl	8005c34 <RCC_GetHCLKClockFreq>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 f900 	bl	8005c60 <RCC_GetPCLK1ClockFreq>
 8005a60:	60f8      	str	r0, [r7, #12]
        break;
 8005a62:	e006      	b.n	8005a72 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005a64:	bf00      	nop
 8005a66:	e004      	b.n	8005a72 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e002      	b.n	8005a72 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a6c:	bf00      	nop
 8005a6e:	e000      	b.n	8005a72 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005a70:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a78:	d136      	bne.n	8005ae8 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fe82 	bl	8005784 <LL_RCC_GetUARTClockSource>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005a86:	d01a      	beq.n	8005abe <LL_RCC_GetUARTClockFreq+0xda>
 8005a88:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005a8c:	d82e      	bhi.n	8005aec <LL_RCC_GetUARTClockFreq+0x108>
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <LL_RCC_GetUARTClockFreq+0x128>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00c      	beq.n	8005aae <LL_RCC_GetUARTClockFreq+0xca>
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <LL_RCC_GetUARTClockFreq+0x128>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d828      	bhi.n	8005aec <LL_RCC_GetUARTClockFreq+0x108>
 8005a9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a9e:	d017      	beq.n	8005ad0 <LL_RCC_GetUARTClockFreq+0xec>
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <LL_RCC_GetUARTClockFreq+0x12c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d122      	bne.n	8005aec <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005aa6:	f000 f835 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005aaa:	60f8      	str	r0, [r7, #12]
        break;
 8005aac:	e023      	b.n	8005af6 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005aae:	f7ff fdc7 	bl	8005640 <LL_RCC_HSI_IsReady>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <LL_RCC_GetUARTClockFreq+0x124>)
 8005aba:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005abc:	e018      	b.n	8005af0 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005abe:	f7ff fdd3 	bl	8005668 <LL_RCC_LSE_IsReady>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005acc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ace:	e011      	b.n	8005af4 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ad0:	f000 f820 	bl	8005b14 <RCC_GetSystemClockFreq>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f8ac 	bl	8005c34 <RCC_GetHCLKClockFreq>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f8be 	bl	8005c60 <RCC_GetPCLK1ClockFreq>
 8005ae4:	60f8      	str	r0, [r7, #12]
        break;
 8005ae6:	e006      	b.n	8005af6 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8005ae8:	bf00      	nop
 8005aea:	e004      	b.n	8005af6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005aec:	bf00      	nop
 8005aee:	e002      	b.n	8005af6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005af4:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	00c00080 	.word	0x00c00080
 8005b04:	00c00040 	.word	0x00c00040
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	03000200 	.word	0x03000200
 8005b10:	03000100 	.word	0x03000100

08005b14 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005b1a:	f7ff fde7 	bl	80056ec <LL_RCC_GetSysClkSource>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d851      	bhi.n	8005bc8 <RCC_GetSystemClockFreq+0xb4>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <RCC_GetSystemClockFreq+0x18>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005bc9 	.word	0x08005bc9
 8005b34:	08005bc9 	.word	0x08005bc9
 8005b38:	08005bc9 	.word	0x08005bc9
 8005b3c:	08005bb5 	.word	0x08005bb5
 8005b40:	08005bc9 	.word	0x08005bc9
 8005b44:	08005bc9 	.word	0x08005bc9
 8005b48:	08005bc9 	.word	0x08005bc9
 8005b4c:	08005bbb 	.word	0x08005bbb
 8005b50:	08005bc9 	.word	0x08005bc9
 8005b54:	08005bc9 	.word	0x08005bc9
 8005b58:	08005bc9 	.word	0x08005bc9
 8005b5c:	08005bc1 	.word	0x08005bc1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005b60:	f7ff fd96 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d111      	bne.n	8005b8e <RCC_GetSystemClockFreq+0x7a>
 8005b6a:	f7ff fd91 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <RCC_GetSystemClockFreq+0x6a>
 8005b74:	f7ff fd9e 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	e003      	b.n	8005b86 <RCC_GetSystemClockFreq+0x72>
 8005b7e:	f7ff fda7 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005b82:	4603      	mov	r3, r0
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <RCC_GetSystemClockFreq+0x114>)
 8005b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8c:	e010      	b.n	8005bb0 <RCC_GetSystemClockFreq+0x9c>
 8005b8e:	f7ff fd7f 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <RCC_GetSystemClockFreq+0x8e>
 8005b98:	f7ff fd8c 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	e003      	b.n	8005baa <RCC_GetSystemClockFreq+0x96>
 8005ba2:	f7ff fd95 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <RCC_GetSystemClockFreq+0x114>)
 8005bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005bb2:	e033      	b.n	8005c1c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <RCC_GetSystemClockFreq+0x118>)
 8005bb6:	607b      	str	r3, [r7, #4]
      break;
 8005bb8:	e030      	b.n	8005c1c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005bba:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <RCC_GetSystemClockFreq+0x11c>)
 8005bbc:	607b      	str	r3, [r7, #4]
      break;
 8005bbe:	e02d      	b.n	8005c1c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005bc0:	f000 f876 	bl	8005cb0 <RCC_PLL_GetFreqDomain_SYS>
 8005bc4:	6078      	str	r0, [r7, #4]
      break;
 8005bc6:	e029      	b.n	8005c1c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005bc8:	f7ff fd62 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d111      	bne.n	8005bf6 <RCC_GetSystemClockFreq+0xe2>
 8005bd2:	f7ff fd5d 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <RCC_GetSystemClockFreq+0xd2>
 8005bdc:	f7ff fd6a 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005be0:	4603      	mov	r3, r0
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	e003      	b.n	8005bee <RCC_GetSystemClockFreq+0xda>
 8005be6:	f7ff fd73 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005bea:	4603      	mov	r3, r0
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	4a0e      	ldr	r2, [pc, #56]	; (8005c28 <RCC_GetSystemClockFreq+0x114>)
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	e010      	b.n	8005c18 <RCC_GetSystemClockFreq+0x104>
 8005bf6:	f7ff fd4b 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <RCC_GetSystemClockFreq+0xf6>
 8005c00:	f7ff fd58 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005c04:	4603      	mov	r3, r0
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	e003      	b.n	8005c12 <RCC_GetSystemClockFreq+0xfe>
 8005c0a:	f7ff fd61 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	4a05      	ldr	r2, [pc, #20]	; (8005c28 <RCC_GetSystemClockFreq+0x114>)
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005c1a:	bf00      	nop
  }

  return frequency;
 8005c1c:	687b      	ldr	r3, [r7, #4]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	08007400 	.word	0x08007400
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	007a1200 	.word	0x007a1200

08005c34 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005c3c:	f7ff fd64 	bl	8005708 <LL_RCC_GetAHBPrescaler>
 8005c40:	4603      	mov	r3, r0
 8005c42:	091b      	lsrs	r3, r3, #4
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <RCC_GetHCLKClockFreq+0x28>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	40d3      	lsrs	r3, r2
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	080073e8 	.word	0x080073e8

08005c60 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c68:	f7ff fd5c 	bl	8005724 <LL_RCC_GetAPB1Prescaler>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <RCC_GetPCLK1ClockFreq+0x24>)
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	40d3      	lsrs	r3, r2
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	080073f8 	.word	0x080073f8

08005c88 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c90:	f7ff fd56 	bl	8005740 <LL_RCC_GetAPB2Prescaler>
 8005c94:	4603      	mov	r3, r0
 8005c96:	0adb      	lsrs	r3, r3, #11
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <RCC_GetPCLK2ClockFreq+0x24>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	40d3      	lsrs	r3, r2
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	080073f8 	.word	0x080073f8

08005cb0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005cb6:	f7ff fd79 	bl	80057ac <LL_RCC_PLL_GetMainSource>
 8005cba:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d036      	beq.n	8005d30 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d836      	bhi.n	8005d36 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d003      	beq.n	8005cd6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d02a      	beq.n	8005d2a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8005cd4:	e02f      	b.n	8005d36 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005cd6:	f7ff fcdb 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d111      	bne.n	8005d04 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005ce0:	f7ff fcd6 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8005cea:	f7ff fce3 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	e003      	b.n	8005cfc <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005cf4:	f7ff fcec 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	e010      	b.n	8005d26 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005d04:	f7ff fcc4 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005d0e:	f7ff fcd1 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005d12:	4603      	mov	r3, r0
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	e003      	b.n	8005d20 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005d18:	f7ff fcda 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d26:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005d28:	e02f      	b.n	8005d8a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005d2a:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005d2c:	607b      	str	r3, [r7, #4]
      break;
 8005d2e:	e02c      	b.n	8005d8a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8005d32:	607b      	str	r3, [r7, #4]
      break;
 8005d34:	e029      	b.n	8005d8a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d36:	f7ff fcab 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d111      	bne.n	8005d64 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005d40:	f7ff fca6 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005d4a:	f7ff fcb3 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	e003      	b.n	8005d5c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005d54:	f7ff fcbc 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d62:	e010      	b.n	8005d86 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005d64:	f7ff fc94 	bl	8005690 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005d6e:	f7ff fca1 	bl	80056b4 <LL_RCC_MSI_GetRange>
 8005d72:	4603      	mov	r3, r0
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	e003      	b.n	8005d80 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005d78:	f7ff fcaa 	bl	80056d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d86:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005d88:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d8a:	f7ff fd39 	bl	8005800 <LL_RCC_PLL_GetDivider>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	3301      	adds	r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	fbb2 f4f3 	udiv	r4, r2, r3
 8005d9a:	f7ff fd15 	bl	80057c8 <LL_RCC_PLL_GetN>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	fb03 f404 	mul.w	r4, r3, r4
 8005da4:	f7ff fd1e 	bl	80057e4 <LL_RCC_PLL_GetR>
 8005da8:	4603      	mov	r3, r0
 8005daa:	0e5b      	lsrs	r3, r3, #25
 8005dac:	3301      	adds	r3, #1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd90      	pop	{r4, r7, pc}
 8005dbc:	08007400 	.word	0x08007400
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200

08005dc8 <LL_SPI_IsEnabled>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d101      	bne.n	8005de0 <LL_SPI_IsEnabled+0x18>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <LL_SPI_IsEnabled+0x1a>
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_SPI_SetRxFIFOThreshold>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	605a      	str	r2, [r3, #4]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <LL_SPI_SetCRCPolynomial>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	611a      	str	r2, [r3, #16]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ffc0 	bl	8005dc8 <LL_SPI_IsEnabled>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d145      	bne.n	8005eda <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e56:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	6811      	ldr	r1, [r2, #0]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	4311      	orrs	r1, r2
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	68d2      	ldr	r2, [r2, #12]
 8005e68:	4311      	orrs	r1, r2
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	6912      	ldr	r2, [r2, #16]
 8005e6e:	4311      	orrs	r1, r2
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	6952      	ldr	r2, [r2, #20]
 8005e74:	4311      	orrs	r1, r2
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	6992      	ldr	r2, [r2, #24]
 8005e7a:	4311      	orrs	r1, r2
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	69d2      	ldr	r2, [r2, #28]
 8005e80:	4311      	orrs	r1, r2
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	6a12      	ldr	r2, [r2, #32]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e96:	f023 0304 	bic.w	r3, r3, #4
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	6891      	ldr	r1, [r2, #8]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	6952      	ldr	r2, [r2, #20]
 8005ea2:	0c12      	lsrs	r2, r2, #16
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb4:	d204      	bcs.n	8005ec0 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8005eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ff97 	bl	8005dee <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec8:	d105      	bne.n	8005ed6 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff ff9f 	bl	8005e14 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <LL_USART_IsEnabled>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <LL_USART_IsEnabled+0x18>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <LL_USART_IsEnabled+0x1a>
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <LL_USART_SetStopBitsLength>:
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <LL_USART_SetHWFlowCtrl>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_USART_SetBaudRate>:
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d11a      	bne.n	8005fa2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	005a      	lsls	r2, r3, #1
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	441a      	add	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	60da      	str	r2, [r3, #12]
}
 8005fa0:	e00a      	b.n	8005fb8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	085a      	lsrs	r2, r3, #1
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	441a      	add	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	60da      	str	r2, [r3, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff ff84 	bl	8005ee4 <LL_USART_IsEnabled>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d15b      	bne.n	800609a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <LL_USART_Init+0xe0>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	6851      	ldr	r1, [r2, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	68d2      	ldr	r2, [r2, #12]
 8005ff2:	4311      	orrs	r1, r2
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	6912      	ldr	r2, [r2, #16]
 8005ff8:	4311      	orrs	r1, r2
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	6992      	ldr	r2, [r2, #24]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff7c 	bl	8005f0a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff89 	bl	8005f30 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <LL_USART_Init+0xe4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d104      	bne.n	8006030 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006026:	2003      	movs	r0, #3
 8006028:	f7ff fbf8 	bl	800581c <LL_RCC_GetUSARTClockFreq>
 800602c:	60b8      	str	r0, [r7, #8]
 800602e:	e023      	b.n	8006078 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <LL_USART_Init+0xe8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d104      	bne.n	8006042 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006038:	200c      	movs	r0, #12
 800603a:	f7ff fbef 	bl	800581c <LL_RCC_GetUSARTClockFreq>
 800603e:	60b8      	str	r0, [r7, #8]
 8006040:	e01a      	b.n	8006078 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <LL_USART_Init+0xec>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d104      	bne.n	8006054 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800604a:	2030      	movs	r0, #48	; 0x30
 800604c:	f7ff fbe6 	bl	800581c <LL_RCC_GetUSARTClockFreq>
 8006050:	60b8      	str	r0, [r7, #8]
 8006052:	e011      	b.n	8006078 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a17      	ldr	r2, [pc, #92]	; (80060b4 <LL_USART_Init+0xf0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d104      	bne.n	8006066 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800605c:	20c0      	movs	r0, #192	; 0xc0
 800605e:	f7ff fcc1 	bl	80059e4 <LL_RCC_GetUARTClockFreq>
 8006062:	60b8      	str	r0, [r7, #8]
 8006064:	e008      	b.n	8006078 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <LL_USART_Init+0xf4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d104      	bne.n	8006078 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800606e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006072:	f7ff fcb7 	bl	80059e4 <LL_RCC_GetUARTClockFreq>
 8006076:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff5e 	bl	8005f56 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	efff69f3 	.word	0xefff69f3
 80060a8:	40013800 	.word	0x40013800
 80060ac:	40004400 	.word	0x40004400
 80060b0:	40004800 	.word	0x40004800
 80060b4:	40004c00 	.word	0x40004c00
 80060b8:	40005000 	.word	0x40005000

080060bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ce:	4a07      	ldr	r2, [pc, #28]	; (80060ec <LL_InitTick+0x30>)
 80060d0:	3b01      	subs	r3, #1
 80060d2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <LL_InitTick+0x30>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060da:	4b04      	ldr	r3, [pc, #16]	; (80060ec <LL_InitTick+0x30>)
 80060dc:	2205      	movs	r2, #5
 80060de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	e000e010 	.word	0xe000e010

080060f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80060f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff ffdd 	bl	80060bc <LL_InitTick>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <LL_mDelay+0x4c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800611e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d00c      	beq.n	8006142 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800612e:	e008      	b.n	8006142 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <LL_mDelay+0x4c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3b01      	subs	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f3      	bne.n	8006130 <LL_mDelay+0x24>
    }
  }
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e010 	.word	0xe000e010

0800615c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <LL_SetSystemCoreClock+0x1c>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000018 	.word	0x20000018

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f001 f91e 	bl	80073d0 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	080074a0 	.word	0x080074a0
 80061b8:	080074a0 	.word	0x080074a0
 80061bc:	080074a0 	.word	0x080074a0
 80061c0:	080074a4 	.word	0x080074a4

080061c4 <memcpy>:
 80061c4:	440a      	add	r2, r1
 80061c6:	4291      	cmp	r1, r2
 80061c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061cc:	d100      	bne.n	80061d0 <memcpy+0xc>
 80061ce:	4770      	bx	lr
 80061d0:	b510      	push	{r4, lr}
 80061d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061da:	4291      	cmp	r1, r2
 80061dc:	d1f9      	bne.n	80061d2 <memcpy+0xe>
 80061de:	bd10      	pop	{r4, pc}

080061e0 <memset>:
 80061e0:	4402      	add	r2, r0
 80061e2:	4603      	mov	r3, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <atan>:
 80061f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ec55 4b10 	vmov	r4, r5, d0
 80061f8:	4bc3      	ldr	r3, [pc, #780]	; (8006508 <atan+0x318>)
 80061fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80061fe:	429e      	cmp	r6, r3
 8006200:	46ab      	mov	fp, r5
 8006202:	dd18      	ble.n	8006236 <atan+0x46>
 8006204:	4bc1      	ldr	r3, [pc, #772]	; (800650c <atan+0x31c>)
 8006206:	429e      	cmp	r6, r3
 8006208:	dc01      	bgt.n	800620e <atan+0x1e>
 800620a:	d109      	bne.n	8006220 <atan+0x30>
 800620c:	b144      	cbz	r4, 8006220 <atan+0x30>
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7f9 ffdd 	bl	80001d4 <__adddf3>
 800621a:	4604      	mov	r4, r0
 800621c:	460d      	mov	r5, r1
 800621e:	e006      	b.n	800622e <atan+0x3e>
 8006220:	f1bb 0f00 	cmp.w	fp, #0
 8006224:	f300 8131 	bgt.w	800648a <atan+0x29a>
 8006228:	a59b      	add	r5, pc, #620	; (adr r5, 8006498 <atan+0x2a8>)
 800622a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800622e:	ec45 4b10 	vmov	d0, r4, r5
 8006232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	4bb6      	ldr	r3, [pc, #728]	; (8006510 <atan+0x320>)
 8006238:	429e      	cmp	r6, r3
 800623a:	dc14      	bgt.n	8006266 <atan+0x76>
 800623c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006240:	429e      	cmp	r6, r3
 8006242:	dc0d      	bgt.n	8006260 <atan+0x70>
 8006244:	a396      	add	r3, pc, #600	; (adr r3, 80064a0 <atan+0x2b0>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	ee10 0a10 	vmov	r0, s0
 800624e:	4629      	mov	r1, r5
 8006250:	f7f9 ffc0 	bl	80001d4 <__adddf3>
 8006254:	4baf      	ldr	r3, [pc, #700]	; (8006514 <atan+0x324>)
 8006256:	2200      	movs	r2, #0
 8006258:	f7fa fc02 	bl	8000a60 <__aeabi_dcmpgt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d1e6      	bne.n	800622e <atan+0x3e>
 8006260:	f04f 3aff 	mov.w	sl, #4294967295
 8006264:	e02b      	b.n	80062be <atan+0xce>
 8006266:	f000 f963 	bl	8006530 <fabs>
 800626a:	4bab      	ldr	r3, [pc, #684]	; (8006518 <atan+0x328>)
 800626c:	429e      	cmp	r6, r3
 800626e:	ec55 4b10 	vmov	r4, r5, d0
 8006272:	f300 80bf 	bgt.w	80063f4 <atan+0x204>
 8006276:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800627a:	429e      	cmp	r6, r3
 800627c:	f300 80a0 	bgt.w	80063c0 <atan+0x1d0>
 8006280:	ee10 2a10 	vmov	r2, s0
 8006284:	ee10 0a10 	vmov	r0, s0
 8006288:	462b      	mov	r3, r5
 800628a:	4629      	mov	r1, r5
 800628c:	f7f9 ffa2 	bl	80001d4 <__adddf3>
 8006290:	4ba0      	ldr	r3, [pc, #640]	; (8006514 <atan+0x324>)
 8006292:	2200      	movs	r2, #0
 8006294:	f7f9 ff9c 	bl	80001d0 <__aeabi_dsub>
 8006298:	2200      	movs	r2, #0
 800629a:	4606      	mov	r6, r0
 800629c:	460f      	mov	r7, r1
 800629e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7f9 ff95 	bl	80001d4 <__adddf3>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa fa6f 	bl	8000794 <__aeabi_ddiv>
 80062b6:	f04f 0a00 	mov.w	sl, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	460d      	mov	r5, r1
 80062be:	4622      	mov	r2, r4
 80062c0:	462b      	mov	r3, r5
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	f7fa f93b 	bl	8000540 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4680      	mov	r8, r0
 80062d0:	4689      	mov	r9, r1
 80062d2:	f7fa f935 	bl	8000540 <__aeabi_dmul>
 80062d6:	a374      	add	r3, pc, #464	; (adr r3, 80064a8 <atan+0x2b8>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f7fa f92e 	bl	8000540 <__aeabi_dmul>
 80062e4:	a372      	add	r3, pc, #456	; (adr r3, 80064b0 <atan+0x2c0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ff73 	bl	80001d4 <__adddf3>
 80062ee:	4632      	mov	r2, r6
 80062f0:	463b      	mov	r3, r7
 80062f2:	f7fa f925 	bl	8000540 <__aeabi_dmul>
 80062f6:	a370      	add	r3, pc, #448	; (adr r3, 80064b8 <atan+0x2c8>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff6a 	bl	80001d4 <__adddf3>
 8006300:	4632      	mov	r2, r6
 8006302:	463b      	mov	r3, r7
 8006304:	f7fa f91c 	bl	8000540 <__aeabi_dmul>
 8006308:	a36d      	add	r3, pc, #436	; (adr r3, 80064c0 <atan+0x2d0>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7f9 ff61 	bl	80001d4 <__adddf3>
 8006312:	4632      	mov	r2, r6
 8006314:	463b      	mov	r3, r7
 8006316:	f7fa f913 	bl	8000540 <__aeabi_dmul>
 800631a:	a36b      	add	r3, pc, #428	; (adr r3, 80064c8 <atan+0x2d8>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7f9 ff58 	bl	80001d4 <__adddf3>
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	f7fa f90a 	bl	8000540 <__aeabi_dmul>
 800632c:	a368      	add	r3, pc, #416	; (adr r3, 80064d0 <atan+0x2e0>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7f9 ff4f 	bl	80001d4 <__adddf3>
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	f7fa f901 	bl	8000540 <__aeabi_dmul>
 800633e:	a366      	add	r3, pc, #408	; (adr r3, 80064d8 <atan+0x2e8>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa f8f8 	bl	8000540 <__aeabi_dmul>
 8006350:	a363      	add	r3, pc, #396	; (adr r3, 80064e0 <atan+0x2f0>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ff3b 	bl	80001d0 <__aeabi_dsub>
 800635a:	4632      	mov	r2, r6
 800635c:	463b      	mov	r3, r7
 800635e:	f7fa f8ef 	bl	8000540 <__aeabi_dmul>
 8006362:	a361      	add	r3, pc, #388	; (adr r3, 80064e8 <atan+0x2f8>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7f9 ff32 	bl	80001d0 <__aeabi_dsub>
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	f7fa f8e6 	bl	8000540 <__aeabi_dmul>
 8006374:	a35e      	add	r3, pc, #376	; (adr r3, 80064f0 <atan+0x300>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ff29 	bl	80001d0 <__aeabi_dsub>
 800637e:	4632      	mov	r2, r6
 8006380:	463b      	mov	r3, r7
 8006382:	f7fa f8dd 	bl	8000540 <__aeabi_dmul>
 8006386:	a35c      	add	r3, pc, #368	; (adr r3, 80064f8 <atan+0x308>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff20 	bl	80001d0 <__aeabi_dsub>
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	f7fa f8d4 	bl	8000540 <__aeabi_dmul>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7f9 ff18 	bl	80001d4 <__adddf3>
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7fa f8ca 	bl	8000540 <__aeabi_dmul>
 80063ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	d14b      	bne.n	800644e <atan+0x25e>
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7f9 ff09 	bl	80001d0 <__aeabi_dsub>
 80063be:	e72c      	b.n	800621a <atan+0x2a>
 80063c0:	ee10 0a10 	vmov	r0, s0
 80063c4:	4b53      	ldr	r3, [pc, #332]	; (8006514 <atan+0x324>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7f9 ff01 	bl	80001d0 <__aeabi_dsub>
 80063ce:	4b51      	ldr	r3, [pc, #324]	; (8006514 <atan+0x324>)
 80063d0:	4606      	mov	r6, r0
 80063d2:	460f      	mov	r7, r1
 80063d4:	2200      	movs	r2, #0
 80063d6:	4620      	mov	r0, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	f7f9 fefb 	bl	80001d4 <__adddf3>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4630      	mov	r0, r6
 80063e4:	4639      	mov	r1, r7
 80063e6:	f7fa f9d5 	bl	8000794 <__aeabi_ddiv>
 80063ea:	f04f 0a01 	mov.w	sl, #1
 80063ee:	4604      	mov	r4, r0
 80063f0:	460d      	mov	r5, r1
 80063f2:	e764      	b.n	80062be <atan+0xce>
 80063f4:	4b49      	ldr	r3, [pc, #292]	; (800651c <atan+0x32c>)
 80063f6:	429e      	cmp	r6, r3
 80063f8:	da1d      	bge.n	8006436 <atan+0x246>
 80063fa:	ee10 0a10 	vmov	r0, s0
 80063fe:	4b48      	ldr	r3, [pc, #288]	; (8006520 <atan+0x330>)
 8006400:	2200      	movs	r2, #0
 8006402:	4629      	mov	r1, r5
 8006404:	f7f9 fee4 	bl	80001d0 <__aeabi_dsub>
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <atan+0x330>)
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	2200      	movs	r2, #0
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7fa f894 	bl	8000540 <__aeabi_dmul>
 8006418:	4b3e      	ldr	r3, [pc, #248]	; (8006514 <atan+0x324>)
 800641a:	2200      	movs	r2, #0
 800641c:	f7f9 feda 	bl	80001d4 <__adddf3>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa f9b4 	bl	8000794 <__aeabi_ddiv>
 800642c:	f04f 0a02 	mov.w	sl, #2
 8006430:	4604      	mov	r4, r0
 8006432:	460d      	mov	r5, r1
 8006434:	e743      	b.n	80062be <atan+0xce>
 8006436:	462b      	mov	r3, r5
 8006438:	ee10 2a10 	vmov	r2, s0
 800643c:	4939      	ldr	r1, [pc, #228]	; (8006524 <atan+0x334>)
 800643e:	2000      	movs	r0, #0
 8006440:	f7fa f9a8 	bl	8000794 <__aeabi_ddiv>
 8006444:	f04f 0a03 	mov.w	sl, #3
 8006448:	4604      	mov	r4, r0
 800644a:	460d      	mov	r5, r1
 800644c:	e737      	b.n	80062be <atan+0xce>
 800644e:	4b36      	ldr	r3, [pc, #216]	; (8006528 <atan+0x338>)
 8006450:	4e36      	ldr	r6, [pc, #216]	; (800652c <atan+0x33c>)
 8006452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006456:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800645a:	e9da 2300 	ldrd	r2, r3, [sl]
 800645e:	f7f9 feb7 	bl	80001d0 <__aeabi_dsub>
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	f7f9 feb3 	bl	80001d0 <__aeabi_dsub>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006472:	f7f9 fead 	bl	80001d0 <__aeabi_dsub>
 8006476:	f1bb 0f00 	cmp.w	fp, #0
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	f6bf aed6 	bge.w	800622e <atan+0x3e>
 8006482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006486:	461d      	mov	r5, r3
 8006488:	e6d1      	b.n	800622e <atan+0x3e>
 800648a:	a51d      	add	r5, pc, #116	; (adr r5, 8006500 <atan+0x310>)
 800648c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006490:	e6cd      	b.n	800622e <atan+0x3e>
 8006492:	bf00      	nop
 8006494:	f3af 8000 	nop.w
 8006498:	54442d18 	.word	0x54442d18
 800649c:	bff921fb 	.word	0xbff921fb
 80064a0:	8800759c 	.word	0x8800759c
 80064a4:	7e37e43c 	.word	0x7e37e43c
 80064a8:	e322da11 	.word	0xe322da11
 80064ac:	3f90ad3a 	.word	0x3f90ad3a
 80064b0:	24760deb 	.word	0x24760deb
 80064b4:	3fa97b4b 	.word	0x3fa97b4b
 80064b8:	a0d03d51 	.word	0xa0d03d51
 80064bc:	3fb10d66 	.word	0x3fb10d66
 80064c0:	c54c206e 	.word	0xc54c206e
 80064c4:	3fb745cd 	.word	0x3fb745cd
 80064c8:	920083ff 	.word	0x920083ff
 80064cc:	3fc24924 	.word	0x3fc24924
 80064d0:	5555550d 	.word	0x5555550d
 80064d4:	3fd55555 	.word	0x3fd55555
 80064d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80064dc:	bfa2b444 	.word	0xbfa2b444
 80064e0:	52defd9a 	.word	0x52defd9a
 80064e4:	3fadde2d 	.word	0x3fadde2d
 80064e8:	af749a6d 	.word	0xaf749a6d
 80064ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80064f0:	fe231671 	.word	0xfe231671
 80064f4:	3fbc71c6 	.word	0x3fbc71c6
 80064f8:	9998ebc4 	.word	0x9998ebc4
 80064fc:	3fc99999 	.word	0x3fc99999
 8006500:	54442d18 	.word	0x54442d18
 8006504:	3ff921fb 	.word	0x3ff921fb
 8006508:	440fffff 	.word	0x440fffff
 800650c:	7ff00000 	.word	0x7ff00000
 8006510:	3fdbffff 	.word	0x3fdbffff
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	3ff2ffff 	.word	0x3ff2ffff
 800651c:	40038000 	.word	0x40038000
 8006520:	3ff80000 	.word	0x3ff80000
 8006524:	bff00000 	.word	0xbff00000
 8006528:	08007450 	.word	0x08007450
 800652c:	08007430 	.word	0x08007430

08006530 <fabs>:
 8006530:	ec51 0b10 	vmov	r0, r1, d0
 8006534:	ee10 2a10 	vmov	r2, s0
 8006538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800653c:	ec43 2b10 	vmov	d0, r2, r3
 8006540:	4770      	bx	lr
	...

08006544 <pow>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	ed2d 8b02 	vpush	{d8}
 800654a:	eeb0 8a40 	vmov.f32	s16, s0
 800654e:	eef0 8a60 	vmov.f32	s17, s1
 8006552:	ec55 4b11 	vmov	r4, r5, d1
 8006556:	f000 f893 	bl	8006680 <__ieee754_pow>
 800655a:	4622      	mov	r2, r4
 800655c:	462b      	mov	r3, r5
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	ec57 6b10 	vmov	r6, r7, d0
 8006566:	f7fa fa85 	bl	8000a74 <__aeabi_dcmpun>
 800656a:	2800      	cmp	r0, #0
 800656c:	d13b      	bne.n	80065e6 <pow+0xa2>
 800656e:	ec51 0b18 	vmov	r0, r1, d8
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	f7fa fa4b 	bl	8000a10 <__aeabi_dcmpeq>
 800657a:	b1b8      	cbz	r0, 80065ac <pow+0x68>
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7fa fa44 	bl	8000a10 <__aeabi_dcmpeq>
 8006588:	2800      	cmp	r0, #0
 800658a:	d146      	bne.n	800661a <pow+0xd6>
 800658c:	ec45 4b10 	vmov	d0, r4, r5
 8006590:	f000 fe86 	bl	80072a0 <finite>
 8006594:	b338      	cbz	r0, 80065e6 <pow+0xa2>
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f7fa fa41 	bl	8000a24 <__aeabi_dcmplt>
 80065a2:	b300      	cbz	r0, 80065e6 <pow+0xa2>
 80065a4:	f000 ff0e 	bl	80073c4 <__errno>
 80065a8:	2322      	movs	r3, #34	; 0x22
 80065aa:	e01b      	b.n	80065e4 <pow+0xa0>
 80065ac:	ec47 6b10 	vmov	d0, r6, r7
 80065b0:	f000 fe76 	bl	80072a0 <finite>
 80065b4:	b9e0      	cbnz	r0, 80065f0 <pow+0xac>
 80065b6:	eeb0 0a48 	vmov.f32	s0, s16
 80065ba:	eef0 0a68 	vmov.f32	s1, s17
 80065be:	f000 fe6f 	bl	80072a0 <finite>
 80065c2:	b1a8      	cbz	r0, 80065f0 <pow+0xac>
 80065c4:	ec45 4b10 	vmov	d0, r4, r5
 80065c8:	f000 fe6a 	bl	80072a0 <finite>
 80065cc:	b180      	cbz	r0, 80065f0 <pow+0xac>
 80065ce:	4632      	mov	r2, r6
 80065d0:	463b      	mov	r3, r7
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f7fa fa4d 	bl	8000a74 <__aeabi_dcmpun>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d0e2      	beq.n	80065a4 <pow+0x60>
 80065de:	f000 fef1 	bl	80073c4 <__errno>
 80065e2:	2321      	movs	r3, #33	; 0x21
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	ecbd 8b02 	vpop	{d8}
 80065ea:	ec47 6b10 	vmov	d0, r6, r7
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa fa0a 	bl	8000a10 <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d0f2      	beq.n	80065e6 <pow+0xa2>
 8006600:	eeb0 0a48 	vmov.f32	s0, s16
 8006604:	eef0 0a68 	vmov.f32	s1, s17
 8006608:	f000 fe4a 	bl	80072a0 <finite>
 800660c:	2800      	cmp	r0, #0
 800660e:	d0ea      	beq.n	80065e6 <pow+0xa2>
 8006610:	ec45 4b10 	vmov	d0, r4, r5
 8006614:	f000 fe44 	bl	80072a0 <finite>
 8006618:	e7c3      	b.n	80065a2 <pow+0x5e>
 800661a:	4f01      	ldr	r7, [pc, #4]	; (8006620 <pow+0xdc>)
 800661c:	2600      	movs	r6, #0
 800661e:	e7e2      	b.n	80065e6 <pow+0xa2>
 8006620:	3ff00000 	.word	0x3ff00000

08006624 <sqrt>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	ed2d 8b02 	vpush	{d8}
 800662a:	ec55 4b10 	vmov	r4, r5, d0
 800662e:	f000 fd55 	bl	80070dc <__ieee754_sqrt>
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	eeb0 8a40 	vmov.f32	s16, s0
 800663e:	eef0 8a60 	vmov.f32	s17, s1
 8006642:	f7fa fa17 	bl	8000a74 <__aeabi_dcmpun>
 8006646:	b990      	cbnz	r0, 800666e <sqrt+0x4a>
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa f9e8 	bl	8000a24 <__aeabi_dcmplt>
 8006654:	b158      	cbz	r0, 800666e <sqrt+0x4a>
 8006656:	f000 feb5 	bl	80073c4 <__errno>
 800665a:	2321      	movs	r3, #33	; 0x21
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	2300      	movs	r3, #0
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7fa f895 	bl	8000794 <__aeabi_ddiv>
 800666a:	ec41 0b18 	vmov	d8, r0, r1
 800666e:	eeb0 0a48 	vmov.f32	s0, s16
 8006672:	eef0 0a68 	vmov.f32	s1, s17
 8006676:	ecbd 8b02 	vpop	{d8}
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	0000      	movs	r0, r0
	...

08006680 <__ieee754_pow>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b06 	vpush	{d8-d10}
 8006688:	b089      	sub	sp, #36	; 0x24
 800668a:	ed8d 1b00 	vstr	d1, [sp]
 800668e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006692:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006696:	ea58 0102 	orrs.w	r1, r8, r2
 800669a:	ec57 6b10 	vmov	r6, r7, d0
 800669e:	d115      	bne.n	80066cc <__ieee754_pow+0x4c>
 80066a0:	19b3      	adds	r3, r6, r6
 80066a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80066a6:	4152      	adcs	r2, r2
 80066a8:	4299      	cmp	r1, r3
 80066aa:	4b89      	ldr	r3, [pc, #548]	; (80068d0 <__ieee754_pow+0x250>)
 80066ac:	4193      	sbcs	r3, r2
 80066ae:	f080 84d2 	bcs.w	8007056 <__ieee754_pow+0x9d6>
 80066b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7f9 fd8b 	bl	80001d4 <__adddf3>
 80066be:	ec41 0b10 	vmov	d0, r0, r1
 80066c2:	b009      	add	sp, #36	; 0x24
 80066c4:	ecbd 8b06 	vpop	{d8-d10}
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066cc:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <__ieee754_pow+0x254>)
 80066ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80066d2:	429c      	cmp	r4, r3
 80066d4:	ee10 aa10 	vmov	sl, s0
 80066d8:	463d      	mov	r5, r7
 80066da:	dc06      	bgt.n	80066ea <__ieee754_pow+0x6a>
 80066dc:	d101      	bne.n	80066e2 <__ieee754_pow+0x62>
 80066de:	2e00      	cmp	r6, #0
 80066e0:	d1e7      	bne.n	80066b2 <__ieee754_pow+0x32>
 80066e2:	4598      	cmp	r8, r3
 80066e4:	dc01      	bgt.n	80066ea <__ieee754_pow+0x6a>
 80066e6:	d10f      	bne.n	8006708 <__ieee754_pow+0x88>
 80066e8:	b172      	cbz	r2, 8006708 <__ieee754_pow+0x88>
 80066ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80066ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80066f2:	ea55 050a 	orrs.w	r5, r5, sl
 80066f6:	d1dc      	bne.n	80066b2 <__ieee754_pow+0x32>
 80066f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80066fc:	18db      	adds	r3, r3, r3
 80066fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006702:	4152      	adcs	r2, r2
 8006704:	429d      	cmp	r5, r3
 8006706:	e7d0      	b.n	80066aa <__ieee754_pow+0x2a>
 8006708:	2d00      	cmp	r5, #0
 800670a:	da3b      	bge.n	8006784 <__ieee754_pow+0x104>
 800670c:	4b72      	ldr	r3, [pc, #456]	; (80068d8 <__ieee754_pow+0x258>)
 800670e:	4598      	cmp	r8, r3
 8006710:	dc51      	bgt.n	80067b6 <__ieee754_pow+0x136>
 8006712:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006716:	4598      	cmp	r8, r3
 8006718:	f340 84ac 	ble.w	8007074 <__ieee754_pow+0x9f4>
 800671c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006720:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006724:	2b14      	cmp	r3, #20
 8006726:	dd0f      	ble.n	8006748 <__ieee754_pow+0xc8>
 8006728:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800672c:	fa22 f103 	lsr.w	r1, r2, r3
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	4293      	cmp	r3, r2
 8006736:	f040 849d 	bne.w	8007074 <__ieee754_pow+0x9f4>
 800673a:	f001 0101 	and.w	r1, r1, #1
 800673e:	f1c1 0302 	rsb	r3, r1, #2
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	b182      	cbz	r2, 8006768 <__ieee754_pow+0xe8>
 8006746:	e05f      	b.n	8006808 <__ieee754_pow+0x188>
 8006748:	2a00      	cmp	r2, #0
 800674a:	d15b      	bne.n	8006804 <__ieee754_pow+0x184>
 800674c:	f1c3 0314 	rsb	r3, r3, #20
 8006750:	fa48 f103 	asr.w	r1, r8, r3
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	4543      	cmp	r3, r8
 800675a:	f040 8488 	bne.w	800706e <__ieee754_pow+0x9ee>
 800675e:	f001 0101 	and.w	r1, r1, #1
 8006762:	f1c1 0302 	rsb	r3, r1, #2
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <__ieee754_pow+0x25c>)
 800676a:	4598      	cmp	r8, r3
 800676c:	d132      	bne.n	80067d4 <__ieee754_pow+0x154>
 800676e:	f1b9 0f00 	cmp.w	r9, #0
 8006772:	f280 8478 	bge.w	8007066 <__ieee754_pow+0x9e6>
 8006776:	4959      	ldr	r1, [pc, #356]	; (80068dc <__ieee754_pow+0x25c>)
 8006778:	4632      	mov	r2, r6
 800677a:	463b      	mov	r3, r7
 800677c:	2000      	movs	r0, #0
 800677e:	f7fa f809 	bl	8000794 <__aeabi_ddiv>
 8006782:	e79c      	b.n	80066be <__ieee754_pow+0x3e>
 8006784:	2300      	movs	r3, #0
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	2a00      	cmp	r2, #0
 800678a:	d13d      	bne.n	8006808 <__ieee754_pow+0x188>
 800678c:	4b51      	ldr	r3, [pc, #324]	; (80068d4 <__ieee754_pow+0x254>)
 800678e:	4598      	cmp	r8, r3
 8006790:	d1ea      	bne.n	8006768 <__ieee754_pow+0xe8>
 8006792:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006796:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800679a:	ea53 030a 	orrs.w	r3, r3, sl
 800679e:	f000 845a 	beq.w	8007056 <__ieee754_pow+0x9d6>
 80067a2:	4b4f      	ldr	r3, [pc, #316]	; (80068e0 <__ieee754_pow+0x260>)
 80067a4:	429c      	cmp	r4, r3
 80067a6:	dd08      	ble.n	80067ba <__ieee754_pow+0x13a>
 80067a8:	f1b9 0f00 	cmp.w	r9, #0
 80067ac:	f2c0 8457 	blt.w	800705e <__ieee754_pow+0x9de>
 80067b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067b4:	e783      	b.n	80066be <__ieee754_pow+0x3e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e7e5      	b.n	8006786 <__ieee754_pow+0x106>
 80067ba:	f1b9 0f00 	cmp.w	r9, #0
 80067be:	f04f 0000 	mov.w	r0, #0
 80067c2:	f04f 0100 	mov.w	r1, #0
 80067c6:	f6bf af7a 	bge.w	80066be <__ieee754_pow+0x3e>
 80067ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80067ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067d2:	e774      	b.n	80066be <__ieee754_pow+0x3e>
 80067d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80067d8:	d106      	bne.n	80067e8 <__ieee754_pow+0x168>
 80067da:	4632      	mov	r2, r6
 80067dc:	463b      	mov	r3, r7
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 fead 	bl	8000540 <__aeabi_dmul>
 80067e6:	e76a      	b.n	80066be <__ieee754_pow+0x3e>
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <__ieee754_pow+0x264>)
 80067ea:	4599      	cmp	r9, r3
 80067ec:	d10c      	bne.n	8006808 <__ieee754_pow+0x188>
 80067ee:	2d00      	cmp	r5, #0
 80067f0:	db0a      	blt.n	8006808 <__ieee754_pow+0x188>
 80067f2:	ec47 6b10 	vmov	d0, r6, r7
 80067f6:	b009      	add	sp, #36	; 0x24
 80067f8:	ecbd 8b06 	vpop	{d8-d10}
 80067fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	f000 bc6c 	b.w	80070dc <__ieee754_sqrt>
 8006804:	2300      	movs	r3, #0
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	ec47 6b10 	vmov	d0, r6, r7
 800680c:	f7ff fe90 	bl	8006530 <fabs>
 8006810:	ec51 0b10 	vmov	r0, r1, d0
 8006814:	f1ba 0f00 	cmp.w	sl, #0
 8006818:	d129      	bne.n	800686e <__ieee754_pow+0x1ee>
 800681a:	b124      	cbz	r4, 8006826 <__ieee754_pow+0x1a6>
 800681c:	4b2f      	ldr	r3, [pc, #188]	; (80068dc <__ieee754_pow+0x25c>)
 800681e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006822:	429a      	cmp	r2, r3
 8006824:	d123      	bne.n	800686e <__ieee754_pow+0x1ee>
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	da05      	bge.n	8006838 <__ieee754_pow+0x1b8>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	2000      	movs	r0, #0
 8006832:	492a      	ldr	r1, [pc, #168]	; (80068dc <__ieee754_pow+0x25c>)
 8006834:	f7f9 ffae 	bl	8000794 <__aeabi_ddiv>
 8006838:	2d00      	cmp	r5, #0
 800683a:	f6bf af40 	bge.w	80066be <__ieee754_pow+0x3e>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006844:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006848:	4323      	orrs	r3, r4
 800684a:	d108      	bne.n	800685e <__ieee754_pow+0x1de>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	f7f9 fcbc 	bl	80001d0 <__aeabi_dsub>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	e78f      	b.n	800677e <__ieee754_pow+0xfe>
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	2b01      	cmp	r3, #1
 8006862:	f47f af2c 	bne.w	80066be <__ieee754_pow+0x3e>
 8006866:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800686a:	4619      	mov	r1, r3
 800686c:	e727      	b.n	80066be <__ieee754_pow+0x3e>
 800686e:	0feb      	lsrs	r3, r5, #31
 8006870:	3b01      	subs	r3, #1
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	9a06      	ldr	r2, [sp, #24]
 8006876:	9b04      	ldr	r3, [sp, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	d102      	bne.n	8006882 <__ieee754_pow+0x202>
 800687c:	4632      	mov	r2, r6
 800687e:	463b      	mov	r3, r7
 8006880:	e7e6      	b.n	8006850 <__ieee754_pow+0x1d0>
 8006882:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <__ieee754_pow+0x268>)
 8006884:	4598      	cmp	r8, r3
 8006886:	f340 80fb 	ble.w	8006a80 <__ieee754_pow+0x400>
 800688a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800688e:	4598      	cmp	r8, r3
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <__ieee754_pow+0x260>)
 8006892:	dd0c      	ble.n	80068ae <__ieee754_pow+0x22e>
 8006894:	429c      	cmp	r4, r3
 8006896:	dc0f      	bgt.n	80068b8 <__ieee754_pow+0x238>
 8006898:	f1b9 0f00 	cmp.w	r9, #0
 800689c:	da0f      	bge.n	80068be <__ieee754_pow+0x23e>
 800689e:	2000      	movs	r0, #0
 80068a0:	b009      	add	sp, #36	; 0x24
 80068a2:	ecbd 8b06 	vpop	{d8-d10}
 80068a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f000 bcf0 	b.w	800728e <__math_oflow>
 80068ae:	429c      	cmp	r4, r3
 80068b0:	dbf2      	blt.n	8006898 <__ieee754_pow+0x218>
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <__ieee754_pow+0x25c>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	dd19      	ble.n	80068ec <__ieee754_pow+0x26c>
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	dcef      	bgt.n	800689e <__ieee754_pow+0x21e>
 80068be:	2000      	movs	r0, #0
 80068c0:	b009      	add	sp, #36	; 0x24
 80068c2:	ecbd 8b06 	vpop	{d8-d10}
 80068c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f000 bcd7 	b.w	800727c <__math_uflow>
 80068ce:	bf00      	nop
 80068d0:	fff00000 	.word	0xfff00000
 80068d4:	7ff00000 	.word	0x7ff00000
 80068d8:	433fffff 	.word	0x433fffff
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	3fefffff 	.word	0x3fefffff
 80068e4:	3fe00000 	.word	0x3fe00000
 80068e8:	41e00000 	.word	0x41e00000
 80068ec:	4b60      	ldr	r3, [pc, #384]	; (8006a70 <__ieee754_pow+0x3f0>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	f7f9 fc6e 	bl	80001d0 <__aeabi_dsub>
 80068f4:	a354      	add	r3, pc, #336	; (adr r3, 8006a48 <__ieee754_pow+0x3c8>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	4604      	mov	r4, r0
 80068fc:	460d      	mov	r5, r1
 80068fe:	f7f9 fe1f 	bl	8000540 <__aeabi_dmul>
 8006902:	a353      	add	r3, pc, #332	; (adr r3, 8006a50 <__ieee754_pow+0x3d0>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	4606      	mov	r6, r0
 800690a:	460f      	mov	r7, r1
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe16 	bl	8000540 <__aeabi_dmul>
 8006914:	4b57      	ldr	r3, [pc, #348]	; (8006a74 <__ieee754_pow+0x3f4>)
 8006916:	4682      	mov	sl, r0
 8006918:	468b      	mov	fp, r1
 800691a:	2200      	movs	r2, #0
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7f9 fe0e 	bl	8000540 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	a14b      	add	r1, pc, #300	; (adr r1, 8006a58 <__ieee754_pow+0x3d8>)
 800692a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800692e:	f7f9 fc4f 	bl	80001d0 <__aeabi_dsub>
 8006932:	4622      	mov	r2, r4
 8006934:	462b      	mov	r3, r5
 8006936:	f7f9 fe03 	bl	8000540 <__aeabi_dmul>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	2000      	movs	r0, #0
 8006940:	494d      	ldr	r1, [pc, #308]	; (8006a78 <__ieee754_pow+0x3f8>)
 8006942:	f7f9 fc45 	bl	80001d0 <__aeabi_dsub>
 8006946:	4622      	mov	r2, r4
 8006948:	4680      	mov	r8, r0
 800694a:	4689      	mov	r9, r1
 800694c:	462b      	mov	r3, r5
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fdf5 	bl	8000540 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fdef 	bl	8000540 <__aeabi_dmul>
 8006962:	a33f      	add	r3, pc, #252	; (adr r3, 8006a60 <__ieee754_pow+0x3e0>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fdea 	bl	8000540 <__aeabi_dmul>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4650      	mov	r0, sl
 8006972:	4659      	mov	r1, fp
 8006974:	f7f9 fc2c 	bl	80001d0 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4680      	mov	r8, r0
 800697e:	4689      	mov	r9, r1
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7f9 fc26 	bl	80001d4 <__adddf3>
 8006988:	2000      	movs	r0, #0
 800698a:	4632      	mov	r2, r6
 800698c:	463b      	mov	r3, r7
 800698e:	4604      	mov	r4, r0
 8006990:	460d      	mov	r5, r1
 8006992:	f7f9 fc1d 	bl	80001d0 <__aeabi_dsub>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7f9 fc17 	bl	80001d0 <__aeabi_dsub>
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	9a06      	ldr	r2, [sp, #24]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4313      	orrs	r3, r2
 80069aa:	4682      	mov	sl, r0
 80069ac:	468b      	mov	fp, r1
 80069ae:	f040 81e7 	bne.w	8006d80 <__ieee754_pow+0x700>
 80069b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006a68 <__ieee754_pow+0x3e8>
 80069b6:	eeb0 8a47 	vmov.f32	s16, s14
 80069ba:	eef0 8a67 	vmov.f32	s17, s15
 80069be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069c2:	2600      	movs	r6, #0
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069cc:	f7f9 fc00 	bl	80001d0 <__aeabi_dsub>
 80069d0:	4622      	mov	r2, r4
 80069d2:	462b      	mov	r3, r5
 80069d4:	f7f9 fdb4 	bl	8000540 <__aeabi_dmul>
 80069d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	f7f9 fdac 	bl	8000540 <__aeabi_dmul>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fbf0 	bl	80001d4 <__adddf3>
 80069f4:	4632      	mov	r2, r6
 80069f6:	463b      	mov	r3, r7
 80069f8:	4680      	mov	r8, r0
 80069fa:	4689      	mov	r9, r1
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7f9 fd9e 	bl	8000540 <__aeabi_dmul>
 8006a04:	460b      	mov	r3, r1
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7f9 fbe0 	bl	80001d4 <__adddf3>
 8006a14:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <__ieee754_pow+0x3fc>)
 8006a16:	4299      	cmp	r1, r3
 8006a18:	ec45 4b19 	vmov	d9, r4, r5
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	460f      	mov	r7, r1
 8006a20:	468b      	mov	fp, r1
 8006a22:	f340 82f1 	ble.w	8007008 <__ieee754_pow+0x988>
 8006a26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006a2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006a2e:	4303      	orrs	r3, r0
 8006a30:	f000 81e4 	beq.w	8006dfc <__ieee754_pow+0x77c>
 8006a34:	ec51 0b18 	vmov	r0, r1, d8
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f7f9 fff2 	bl	8000a24 <__aeabi_dcmplt>
 8006a40:	3800      	subs	r0, #0
 8006a42:	bf18      	it	ne
 8006a44:	2001      	movne	r0, #1
 8006a46:	e72b      	b.n	80068a0 <__ieee754_pow+0x220>
 8006a48:	60000000 	.word	0x60000000
 8006a4c:	3ff71547 	.word	0x3ff71547
 8006a50:	f85ddf44 	.word	0xf85ddf44
 8006a54:	3e54ae0b 	.word	0x3e54ae0b
 8006a58:	55555555 	.word	0x55555555
 8006a5c:	3fd55555 	.word	0x3fd55555
 8006a60:	652b82fe 	.word	0x652b82fe
 8006a64:	3ff71547 	.word	0x3ff71547
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	bff00000 	.word	0xbff00000
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	3fd00000 	.word	0x3fd00000
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	408fffff 	.word	0x408fffff
 8006a80:	4bd5      	ldr	r3, [pc, #852]	; (8006dd8 <__ieee754_pow+0x758>)
 8006a82:	402b      	ands	r3, r5
 8006a84:	2200      	movs	r2, #0
 8006a86:	b92b      	cbnz	r3, 8006a94 <__ieee754_pow+0x414>
 8006a88:	4bd4      	ldr	r3, [pc, #848]	; (8006ddc <__ieee754_pow+0x75c>)
 8006a8a:	f7f9 fd59 	bl	8000540 <__aeabi_dmul>
 8006a8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006a92:	460c      	mov	r4, r1
 8006a94:	1523      	asrs	r3, r4, #20
 8006a96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a9a:	4413      	add	r3, r2
 8006a9c:	9305      	str	r3, [sp, #20]
 8006a9e:	4bd0      	ldr	r3, [pc, #832]	; (8006de0 <__ieee754_pow+0x760>)
 8006aa0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006aa4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006aae:	dd08      	ble.n	8006ac2 <__ieee754_pow+0x442>
 8006ab0:	4bcc      	ldr	r3, [pc, #816]	; (8006de4 <__ieee754_pow+0x764>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	f340 8162 	ble.w	8006d7c <__ieee754_pow+0x6fc>
 8006ab8:	9b05      	ldr	r3, [sp, #20]
 8006aba:	3301      	adds	r3, #1
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006ac2:	2400      	movs	r4, #0
 8006ac4:	00e3      	lsls	r3, r4, #3
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	4bc7      	ldr	r3, [pc, #796]	; (8006de8 <__ieee754_pow+0x768>)
 8006aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ace:	ed93 7b00 	vldr	d7, [r3]
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	ec53 2b17 	vmov	r2, r3, d7
 8006ad8:	eeb0 9a47 	vmov.f32	s18, s14
 8006adc:	eef0 9a67 	vmov.f32	s19, s15
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	f7f9 fb75 	bl	80001d0 <__aeabi_dsub>
 8006ae6:	4652      	mov	r2, sl
 8006ae8:	4606      	mov	r6, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	462b      	mov	r3, r5
 8006aee:	ec51 0b19 	vmov	r0, r1, d9
 8006af2:	f7f9 fb6f 	bl	80001d4 <__adddf3>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	2000      	movs	r0, #0
 8006afc:	49bb      	ldr	r1, [pc, #748]	; (8006dec <__ieee754_pow+0x76c>)
 8006afe:	f7f9 fe49 	bl	8000794 <__aeabi_ddiv>
 8006b02:	ec41 0b1a 	vmov	d10, r0, r1
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 fd17 	bl	8000540 <__aeabi_dmul>
 8006b12:	2300      	movs	r3, #0
 8006b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b18:	9302      	str	r3, [sp, #8]
 8006b1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b1e:	46ab      	mov	fp, r5
 8006b20:	106d      	asrs	r5, r5, #1
 8006b22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006b26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006b2a:	ec41 0b18 	vmov	d8, r0, r1
 8006b2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006b32:	2200      	movs	r2, #0
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	4614      	mov	r4, r2
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	f7f9 fd00 	bl	8000540 <__aeabi_dmul>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fb42 	bl	80001d0 <__aeabi_dsub>
 8006b4c:	ec53 2b19 	vmov	r2, r3, d9
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fb3a 	bl	80001d0 <__aeabi_dsub>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4650      	mov	r0, sl
 8006b62:	4659      	mov	r1, fp
 8006b64:	f7f9 fb34 	bl	80001d0 <__aeabi_dsub>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f7f9 fce8 	bl	8000540 <__aeabi_dmul>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 fb2a 	bl	80001d0 <__aeabi_dsub>
 8006b7c:	ec53 2b1a 	vmov	r2, r3, d10
 8006b80:	f7f9 fcde 	bl	8000540 <__aeabi_dmul>
 8006b84:	ec53 2b18 	vmov	r2, r3, d8
 8006b88:	ec41 0b19 	vmov	d9, r0, r1
 8006b8c:	ec51 0b18 	vmov	r0, r1, d8
 8006b90:	f7f9 fcd6 	bl	8000540 <__aeabi_dmul>
 8006b94:	a37c      	add	r3, pc, #496	; (adr r3, 8006d88 <__ieee754_pow+0x708>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	460d      	mov	r5, r1
 8006b9e:	f7f9 fccf 	bl	8000540 <__aeabi_dmul>
 8006ba2:	a37b      	add	r3, pc, #492	; (adr r3, 8006d90 <__ieee754_pow+0x710>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb14 	bl	80001d4 <__adddf3>
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	f7f9 fcc6 	bl	8000540 <__aeabi_dmul>
 8006bb4:	a378      	add	r3, pc, #480	; (adr r3, 8006d98 <__ieee754_pow+0x718>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fb0b 	bl	80001d4 <__adddf3>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	f7f9 fcbd 	bl	8000540 <__aeabi_dmul>
 8006bc6:	a376      	add	r3, pc, #472	; (adr r3, 8006da0 <__ieee754_pow+0x720>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fb02 	bl	80001d4 <__adddf3>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f7f9 fcb4 	bl	8000540 <__aeabi_dmul>
 8006bd8:	a373      	add	r3, pc, #460	; (adr r3, 8006da8 <__ieee754_pow+0x728>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 faf9 	bl	80001d4 <__adddf3>
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	f7f9 fcab 	bl	8000540 <__aeabi_dmul>
 8006bea:	a371      	add	r3, pc, #452	; (adr r3, 8006db0 <__ieee754_pow+0x730>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 faf0 	bl	80001d4 <__adddf3>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fc9e 	bl	8000540 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4630      	mov	r0, r6
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	f7f9 fc98 	bl	8000540 <__aeabi_dmul>
 8006c10:	4642      	mov	r2, r8
 8006c12:	4604      	mov	r4, r0
 8006c14:	460d      	mov	r5, r1
 8006c16:	464b      	mov	r3, r9
 8006c18:	ec51 0b18 	vmov	r0, r1, d8
 8006c1c:	f7f9 fada 	bl	80001d4 <__adddf3>
 8006c20:	ec53 2b19 	vmov	r2, r3, d9
 8006c24:	f7f9 fc8c 	bl	8000540 <__aeabi_dmul>
 8006c28:	4622      	mov	r2, r4
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	f7f9 fad2 	bl	80001d4 <__adddf3>
 8006c30:	4642      	mov	r2, r8
 8006c32:	4682      	mov	sl, r0
 8006c34:	468b      	mov	fp, r1
 8006c36:	464b      	mov	r3, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 fc80 	bl	8000540 <__aeabi_dmul>
 8006c40:	4b6b      	ldr	r3, [pc, #428]	; (8006df0 <__ieee754_pow+0x770>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	f7f9 fac4 	bl	80001d4 <__adddf3>
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	465b      	mov	r3, fp
 8006c50:	f7f9 fac0 	bl	80001d4 <__adddf3>
 8006c54:	2000      	movs	r0, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4640      	mov	r0, r8
 8006c60:	4649      	mov	r1, r9
 8006c62:	f7f9 fc6d 	bl	8000540 <__aeabi_dmul>
 8006c66:	4b62      	ldr	r3, [pc, #392]	; (8006df0 <__ieee754_pow+0x770>)
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4689      	mov	r9, r1
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 faad 	bl	80001d0 <__aeabi_dsub>
 8006c76:	4632      	mov	r2, r6
 8006c78:	463b      	mov	r3, r7
 8006c7a:	f7f9 faa9 	bl	80001d0 <__aeabi_dsub>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4650      	mov	r0, sl
 8006c84:	4659      	mov	r1, fp
 8006c86:	f7f9 faa3 	bl	80001d0 <__aeabi_dsub>
 8006c8a:	ec53 2b18 	vmov	r2, r3, d8
 8006c8e:	f7f9 fc57 	bl	8000540 <__aeabi_dmul>
 8006c92:	4622      	mov	r2, r4
 8006c94:	4606      	mov	r6, r0
 8006c96:	460f      	mov	r7, r1
 8006c98:	462b      	mov	r3, r5
 8006c9a:	ec51 0b19 	vmov	r0, r1, d9
 8006c9e:	f7f9 fc4f 	bl	8000540 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 fa93 	bl	80001d4 <__adddf3>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	f7f9 fa8b 	bl	80001d4 <__adddf3>
 8006cbe:	a33e      	add	r3, pc, #248	; (adr r3, 8006db8 <__ieee754_pow+0x738>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	f7f9 fc39 	bl	8000540 <__aeabi_dmul>
 8006cce:	4642      	mov	r2, r8
 8006cd0:	ec41 0b18 	vmov	d8, r0, r1
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 fa79 	bl	80001d0 <__aeabi_dsub>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	f7f9 fa73 	bl	80001d0 <__aeabi_dsub>
 8006cea:	a335      	add	r3, pc, #212	; (adr r3, 8006dc0 <__ieee754_pow+0x740>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fc26 	bl	8000540 <__aeabi_dmul>
 8006cf4:	a334      	add	r3, pc, #208	; (adr r3, 8006dc8 <__ieee754_pow+0x748>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fc1d 	bl	8000540 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fa61 	bl	80001d4 <__adddf3>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	4b37      	ldr	r3, [pc, #220]	; (8006df4 <__ieee754_pow+0x774>)
 8006d16:	4413      	add	r3, r2
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fa5a 	bl	80001d4 <__adddf3>
 8006d20:	4682      	mov	sl, r0
 8006d22:	9805      	ldr	r0, [sp, #20]
 8006d24:	468b      	mov	fp, r1
 8006d26:	f7f9 fba1 	bl	800046c <__aeabi_i2d>
 8006d2a:	9a07      	ldr	r2, [sp, #28]
 8006d2c:	4b32      	ldr	r3, [pc, #200]	; (8006df8 <__ieee754_pow+0x778>)
 8006d2e:	4413      	add	r3, r2
 8006d30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4652      	mov	r2, sl
 8006d3a:	465b      	mov	r3, fp
 8006d3c:	ec51 0b18 	vmov	r0, r1, d8
 8006d40:	f7f9 fa48 	bl	80001d4 <__adddf3>
 8006d44:	4642      	mov	r2, r8
 8006d46:	464b      	mov	r3, r9
 8006d48:	f7f9 fa44 	bl	80001d4 <__adddf3>
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	f7f9 fa40 	bl	80001d4 <__adddf3>
 8006d54:	2000      	movs	r0, #0
 8006d56:	4632      	mov	r2, r6
 8006d58:	463b      	mov	r3, r7
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	f7f9 fa37 	bl	80001d0 <__aeabi_dsub>
 8006d62:	4642      	mov	r2, r8
 8006d64:	464b      	mov	r3, r9
 8006d66:	f7f9 fa33 	bl	80001d0 <__aeabi_dsub>
 8006d6a:	ec53 2b18 	vmov	r2, r3, d8
 8006d6e:	f7f9 fa2f 	bl	80001d0 <__aeabi_dsub>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4650      	mov	r0, sl
 8006d78:	4659      	mov	r1, fp
 8006d7a:	e610      	b.n	800699e <__ieee754_pow+0x31e>
 8006d7c:	2401      	movs	r4, #1
 8006d7e:	e6a1      	b.n	8006ac4 <__ieee754_pow+0x444>
 8006d80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006dd0 <__ieee754_pow+0x750>
 8006d84:	e617      	b.n	80069b6 <__ieee754_pow+0x336>
 8006d86:	bf00      	nop
 8006d88:	4a454eef 	.word	0x4a454eef
 8006d8c:	3fca7e28 	.word	0x3fca7e28
 8006d90:	93c9db65 	.word	0x93c9db65
 8006d94:	3fcd864a 	.word	0x3fcd864a
 8006d98:	a91d4101 	.word	0xa91d4101
 8006d9c:	3fd17460 	.word	0x3fd17460
 8006da0:	518f264d 	.word	0x518f264d
 8006da4:	3fd55555 	.word	0x3fd55555
 8006da8:	db6fabff 	.word	0xdb6fabff
 8006dac:	3fdb6db6 	.word	0x3fdb6db6
 8006db0:	33333303 	.word	0x33333303
 8006db4:	3fe33333 	.word	0x3fe33333
 8006db8:	e0000000 	.word	0xe0000000
 8006dbc:	3feec709 	.word	0x3feec709
 8006dc0:	dc3a03fd 	.word	0xdc3a03fd
 8006dc4:	3feec709 	.word	0x3feec709
 8006dc8:	145b01f5 	.word	0x145b01f5
 8006dcc:	be3e2fe0 	.word	0xbe3e2fe0
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	3ff00000 	.word	0x3ff00000
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	43400000 	.word	0x43400000
 8006de0:	0003988e 	.word	0x0003988e
 8006de4:	000bb679 	.word	0x000bb679
 8006de8:	08007470 	.word	0x08007470
 8006dec:	3ff00000 	.word	0x3ff00000
 8006df0:	40080000 	.word	0x40080000
 8006df4:	08007490 	.word	0x08007490
 8006df8:	08007480 	.word	0x08007480
 8006dfc:	a3b5      	add	r3, pc, #724	; (adr r3, 80070d4 <__ieee754_pow+0xa54>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 f9e5 	bl	80001d4 <__adddf3>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	ec41 0b1a 	vmov	d10, r0, r1
 8006e10:	462b      	mov	r3, r5
 8006e12:	4630      	mov	r0, r6
 8006e14:	4639      	mov	r1, r7
 8006e16:	f7f9 f9db 	bl	80001d0 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	ec51 0b1a 	vmov	r0, r1, d10
 8006e22:	f7f9 fe1d 	bl	8000a60 <__aeabi_dcmpgt>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f47f ae04 	bne.w	8006a34 <__ieee754_pow+0x3b4>
 8006e2c:	4aa4      	ldr	r2, [pc, #656]	; (80070c0 <__ieee754_pow+0xa40>)
 8006e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f340 8108 	ble.w	8007048 <__ieee754_pow+0x9c8>
 8006e38:	151b      	asrs	r3, r3, #20
 8006e3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e42:	fa4a f303 	asr.w	r3, sl, r3
 8006e46:	445b      	add	r3, fp
 8006e48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006e4c:	4e9d      	ldr	r6, [pc, #628]	; (80070c4 <__ieee754_pow+0xa44>)
 8006e4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006e52:	4116      	asrs	r6, r2
 8006e54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006e58:	2000      	movs	r0, #0
 8006e5a:	ea23 0106 	bic.w	r1, r3, r6
 8006e5e:	f1c2 0214 	rsb	r2, r2, #20
 8006e62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006e66:	fa4a fa02 	asr.w	sl, sl, r2
 8006e6a:	f1bb 0f00 	cmp.w	fp, #0
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	bfb8      	it	lt
 8006e78:	f1ca 0a00 	rsblt	sl, sl, #0
 8006e7c:	f7f9 f9a8 	bl	80001d0 <__aeabi_dsub>
 8006e80:	ec41 0b19 	vmov	d9, r0, r1
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	ec51 0b19 	vmov	r0, r1, d9
 8006e8c:	f7f9 f9a2 	bl	80001d4 <__adddf3>
 8006e90:	a37b      	add	r3, pc, #492	; (adr r3, 8007080 <__ieee754_pow+0xa00>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	2000      	movs	r0, #0
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	f7f9 fb50 	bl	8000540 <__aeabi_dmul>
 8006ea0:	ec53 2b19 	vmov	r2, r3, d9
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	460f      	mov	r7, r1
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 f990 	bl	80001d0 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 f98a 	bl	80001d0 <__aeabi_dsub>
 8006ebc:	a372      	add	r3, pc, #456	; (adr r3, 8007088 <__ieee754_pow+0xa08>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 fb3d 	bl	8000540 <__aeabi_dmul>
 8006ec6:	a372      	add	r3, pc, #456	; (adr r3, 8007090 <__ieee754_pow+0xa10>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4689      	mov	r9, r1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f7f9 fb34 	bl	8000540 <__aeabi_dmul>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f7f9 f978 	bl	80001d4 <__adddf3>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	f7f9 f970 	bl	80001d4 <__adddf3>
 8006ef4:	4632      	mov	r2, r6
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4689      	mov	r9, r1
 8006efc:	f7f9 f968 	bl	80001d0 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 f962 	bl	80001d0 <__aeabi_dsub>
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	464b      	mov	r3, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 fb12 	bl	8000540 <__aeabi_dmul>
 8006f1c:	a35e      	add	r3, pc, #376	; (adr r3, 8007098 <__ieee754_pow+0xa18>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	4604      	mov	r4, r0
 8006f24:	460d      	mov	r5, r1
 8006f26:	f7f9 fb0b 	bl	8000540 <__aeabi_dmul>
 8006f2a:	a35d      	add	r3, pc, #372	; (adr r3, 80070a0 <__ieee754_pow+0xa20>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f7f9 f94e 	bl	80001d0 <__aeabi_dsub>
 8006f34:	4622      	mov	r2, r4
 8006f36:	462b      	mov	r3, r5
 8006f38:	f7f9 fb02 	bl	8000540 <__aeabi_dmul>
 8006f3c:	a35a      	add	r3, pc, #360	; (adr r3, 80070a8 <__ieee754_pow+0xa28>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f947 	bl	80001d4 <__adddf3>
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f7f9 faf9 	bl	8000540 <__aeabi_dmul>
 8006f4e:	a358      	add	r3, pc, #352	; (adr r3, 80070b0 <__ieee754_pow+0xa30>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 f93c 	bl	80001d0 <__aeabi_dsub>
 8006f58:	4622      	mov	r2, r4
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	f7f9 faf0 	bl	8000540 <__aeabi_dmul>
 8006f60:	a355      	add	r3, pc, #340	; (adr r3, 80070b8 <__ieee754_pow+0xa38>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 f935 	bl	80001d4 <__adddf3>
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	f7f9 fae7 	bl	8000540 <__aeabi_dmul>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 f929 	bl	80001d0 <__aeabi_dsub>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	460d      	mov	r5, r1
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fad9 	bl	8000540 <__aeabi_dmul>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	ec41 0b19 	vmov	d9, r0, r1
 8006f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f7f9 f918 	bl	80001d0 <__aeabi_dsub>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	ec51 0b19 	vmov	r0, r1, d9
 8006fa8:	f7f9 fbf4 	bl	8000794 <__aeabi_ddiv>
 8006fac:	4632      	mov	r2, r6
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	f7f9 fac2 	bl	8000540 <__aeabi_dmul>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	f7f9 f908 	bl	80001d4 <__adddf3>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f900 	bl	80001d0 <__aeabi_dsub>
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	f7f9 f8fc 	bl	80001d0 <__aeabi_dsub>
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4602      	mov	r2, r0
 8006fdc:	493a      	ldr	r1, [pc, #232]	; (80070c8 <__ieee754_pow+0xa48>)
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f7f9 f8f6 	bl	80001d0 <__aeabi_dsub>
 8006fe4:	ec41 0b10 	vmov	d0, r0, r1
 8006fe8:	ee10 3a90 	vmov	r3, s1
 8006fec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff4:	da2b      	bge.n	800704e <__ieee754_pow+0x9ce>
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f000 f95e 	bl	80072b8 <scalbn>
 8006ffc:	ec51 0b10 	vmov	r0, r1, d0
 8007000:	ec53 2b18 	vmov	r2, r3, d8
 8007004:	f7ff bbed 	b.w	80067e2 <__ieee754_pow+0x162>
 8007008:	4b30      	ldr	r3, [pc, #192]	; (80070cc <__ieee754_pow+0xa4c>)
 800700a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800700e:	429e      	cmp	r6, r3
 8007010:	f77f af0c 	ble.w	8006e2c <__ieee754_pow+0x7ac>
 8007014:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <__ieee754_pow+0xa50>)
 8007016:	440b      	add	r3, r1
 8007018:	4303      	orrs	r3, r0
 800701a:	d009      	beq.n	8007030 <__ieee754_pow+0x9b0>
 800701c:	ec51 0b18 	vmov	r0, r1, d8
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	f7f9 fcfe 	bl	8000a24 <__aeabi_dcmplt>
 8007028:	3800      	subs	r0, #0
 800702a:	bf18      	it	ne
 800702c:	2001      	movne	r0, #1
 800702e:	e447      	b.n	80068c0 <__ieee754_pow+0x240>
 8007030:	4622      	mov	r2, r4
 8007032:	462b      	mov	r3, r5
 8007034:	f7f9 f8cc 	bl	80001d0 <__aeabi_dsub>
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	f7f9 fd06 	bl	8000a4c <__aeabi_dcmpge>
 8007040:	2800      	cmp	r0, #0
 8007042:	f43f aef3 	beq.w	8006e2c <__ieee754_pow+0x7ac>
 8007046:	e7e9      	b.n	800701c <__ieee754_pow+0x99c>
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	e71a      	b.n	8006e84 <__ieee754_pow+0x804>
 800704e:	ec51 0b10 	vmov	r0, r1, d0
 8007052:	4619      	mov	r1, r3
 8007054:	e7d4      	b.n	8007000 <__ieee754_pow+0x980>
 8007056:	491c      	ldr	r1, [pc, #112]	; (80070c8 <__ieee754_pow+0xa48>)
 8007058:	2000      	movs	r0, #0
 800705a:	f7ff bb30 	b.w	80066be <__ieee754_pow+0x3e>
 800705e:	2000      	movs	r0, #0
 8007060:	2100      	movs	r1, #0
 8007062:	f7ff bb2c 	b.w	80066be <__ieee754_pow+0x3e>
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	f7ff bb28 	b.w	80066be <__ieee754_pow+0x3e>
 800706e:	9204      	str	r2, [sp, #16]
 8007070:	f7ff bb7a 	b.w	8006768 <__ieee754_pow+0xe8>
 8007074:	2300      	movs	r3, #0
 8007076:	f7ff bb64 	b.w	8006742 <__ieee754_pow+0xc2>
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w
 8007080:	00000000 	.word	0x00000000
 8007084:	3fe62e43 	.word	0x3fe62e43
 8007088:	fefa39ef 	.word	0xfefa39ef
 800708c:	3fe62e42 	.word	0x3fe62e42
 8007090:	0ca86c39 	.word	0x0ca86c39
 8007094:	be205c61 	.word	0xbe205c61
 8007098:	72bea4d0 	.word	0x72bea4d0
 800709c:	3e663769 	.word	0x3e663769
 80070a0:	c5d26bf1 	.word	0xc5d26bf1
 80070a4:	3ebbbd41 	.word	0x3ebbbd41
 80070a8:	af25de2c 	.word	0xaf25de2c
 80070ac:	3f11566a 	.word	0x3f11566a
 80070b0:	16bebd93 	.word	0x16bebd93
 80070b4:	3f66c16c 	.word	0x3f66c16c
 80070b8:	5555553e 	.word	0x5555553e
 80070bc:	3fc55555 	.word	0x3fc55555
 80070c0:	3fe00000 	.word	0x3fe00000
 80070c4:	000fffff 	.word	0x000fffff
 80070c8:	3ff00000 	.word	0x3ff00000
 80070cc:	4090cbff 	.word	0x4090cbff
 80070d0:	3f6f3400 	.word	0x3f6f3400
 80070d4:	652b82fe 	.word	0x652b82fe
 80070d8:	3c971547 	.word	0x3c971547

080070dc <__ieee754_sqrt>:
 80070dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	ec55 4b10 	vmov	r4, r5, d0
 80070e4:	4e55      	ldr	r6, [pc, #340]	; (800723c <__ieee754_sqrt+0x160>)
 80070e6:	43ae      	bics	r6, r5
 80070e8:	ee10 0a10 	vmov	r0, s0
 80070ec:	ee10 3a10 	vmov	r3, s0
 80070f0:	462a      	mov	r2, r5
 80070f2:	4629      	mov	r1, r5
 80070f4:	d110      	bne.n	8007118 <__ieee754_sqrt+0x3c>
 80070f6:	ee10 2a10 	vmov	r2, s0
 80070fa:	462b      	mov	r3, r5
 80070fc:	f7f9 fa20 	bl	8000540 <__aeabi_dmul>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 f864 	bl	80001d4 <__adddf3>
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	ec45 4b10 	vmov	d0, r4, r5
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	2d00      	cmp	r5, #0
 800711a:	dc10      	bgt.n	800713e <__ieee754_sqrt+0x62>
 800711c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007120:	4330      	orrs	r0, r6
 8007122:	d0f5      	beq.n	8007110 <__ieee754_sqrt+0x34>
 8007124:	b15d      	cbz	r5, 800713e <__ieee754_sqrt+0x62>
 8007126:	ee10 2a10 	vmov	r2, s0
 800712a:	462b      	mov	r3, r5
 800712c:	ee10 0a10 	vmov	r0, s0
 8007130:	f7f9 f84e 	bl	80001d0 <__aeabi_dsub>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	f7f9 fb2c 	bl	8000794 <__aeabi_ddiv>
 800713c:	e7e6      	b.n	800710c <__ieee754_sqrt+0x30>
 800713e:	1512      	asrs	r2, r2, #20
 8007140:	d074      	beq.n	800722c <__ieee754_sqrt+0x150>
 8007142:	07d4      	lsls	r4, r2, #31
 8007144:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007148:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800714c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007150:	bf5e      	ittt	pl
 8007152:	0fda      	lsrpl	r2, r3, #31
 8007154:	005b      	lslpl	r3, r3, #1
 8007156:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800715a:	2400      	movs	r4, #0
 800715c:	0fda      	lsrs	r2, r3, #31
 800715e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007162:	107f      	asrs	r7, r7, #1
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	2516      	movs	r5, #22
 8007168:	4620      	mov	r0, r4
 800716a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800716e:	1886      	adds	r6, r0, r2
 8007170:	428e      	cmp	r6, r1
 8007172:	bfde      	ittt	le
 8007174:	1b89      	suble	r1, r1, r6
 8007176:	18b0      	addle	r0, r6, r2
 8007178:	18a4      	addle	r4, r4, r2
 800717a:	0049      	lsls	r1, r1, #1
 800717c:	3d01      	subs	r5, #1
 800717e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007182:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007186:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800718a:	d1f0      	bne.n	800716e <__ieee754_sqrt+0x92>
 800718c:	462a      	mov	r2, r5
 800718e:	f04f 0e20 	mov.w	lr, #32
 8007192:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007196:	4281      	cmp	r1, r0
 8007198:	eb06 0c05 	add.w	ip, r6, r5
 800719c:	dc02      	bgt.n	80071a4 <__ieee754_sqrt+0xc8>
 800719e:	d113      	bne.n	80071c8 <__ieee754_sqrt+0xec>
 80071a0:	459c      	cmp	ip, r3
 80071a2:	d811      	bhi.n	80071c8 <__ieee754_sqrt+0xec>
 80071a4:	f1bc 0f00 	cmp.w	ip, #0
 80071a8:	eb0c 0506 	add.w	r5, ip, r6
 80071ac:	da43      	bge.n	8007236 <__ieee754_sqrt+0x15a>
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	db41      	blt.n	8007236 <__ieee754_sqrt+0x15a>
 80071b2:	f100 0801 	add.w	r8, r0, #1
 80071b6:	1a09      	subs	r1, r1, r0
 80071b8:	459c      	cmp	ip, r3
 80071ba:	bf88      	it	hi
 80071bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80071c0:	eba3 030c 	sub.w	r3, r3, ip
 80071c4:	4432      	add	r2, r6
 80071c6:	4640      	mov	r0, r8
 80071c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80071cc:	f1be 0e01 	subs.w	lr, lr, #1
 80071d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80071d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071dc:	d1db      	bne.n	8007196 <__ieee754_sqrt+0xba>
 80071de:	430b      	orrs	r3, r1
 80071e0:	d006      	beq.n	80071f0 <__ieee754_sqrt+0x114>
 80071e2:	1c50      	adds	r0, r2, #1
 80071e4:	bf13      	iteet	ne
 80071e6:	3201      	addne	r2, #1
 80071e8:	3401      	addeq	r4, #1
 80071ea:	4672      	moveq	r2, lr
 80071ec:	f022 0201 	bicne.w	r2, r2, #1
 80071f0:	1063      	asrs	r3, r4, #1
 80071f2:	0852      	lsrs	r2, r2, #1
 80071f4:	07e1      	lsls	r1, r4, #31
 80071f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071fe:	bf48      	it	mi
 8007200:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007204:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007208:	4614      	mov	r4, r2
 800720a:	e781      	b.n	8007110 <__ieee754_sqrt+0x34>
 800720c:	0ad9      	lsrs	r1, r3, #11
 800720e:	3815      	subs	r0, #21
 8007210:	055b      	lsls	r3, r3, #21
 8007212:	2900      	cmp	r1, #0
 8007214:	d0fa      	beq.n	800720c <__ieee754_sqrt+0x130>
 8007216:	02cd      	lsls	r5, r1, #11
 8007218:	d50a      	bpl.n	8007230 <__ieee754_sqrt+0x154>
 800721a:	f1c2 0420 	rsb	r4, r2, #32
 800721e:	fa23 f404 	lsr.w	r4, r3, r4
 8007222:	1e55      	subs	r5, r2, #1
 8007224:	4093      	lsls	r3, r2
 8007226:	4321      	orrs	r1, r4
 8007228:	1b42      	subs	r2, r0, r5
 800722a:	e78a      	b.n	8007142 <__ieee754_sqrt+0x66>
 800722c:	4610      	mov	r0, r2
 800722e:	e7f0      	b.n	8007212 <__ieee754_sqrt+0x136>
 8007230:	0049      	lsls	r1, r1, #1
 8007232:	3201      	adds	r2, #1
 8007234:	e7ef      	b.n	8007216 <__ieee754_sqrt+0x13a>
 8007236:	4680      	mov	r8, r0
 8007238:	e7bd      	b.n	80071b6 <__ieee754_sqrt+0xda>
 800723a:	bf00      	nop
 800723c:	7ff00000 	.word	0x7ff00000

08007240 <with_errno>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	460d      	mov	r5, r1
 8007246:	4616      	mov	r6, r2
 8007248:	f000 f8bc 	bl	80073c4 <__errno>
 800724c:	4629      	mov	r1, r5
 800724e:	6006      	str	r6, [r0, #0]
 8007250:	4620      	mov	r0, r4
 8007252:	bd70      	pop	{r4, r5, r6, pc}

08007254 <xflow>:
 8007254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007256:	4614      	mov	r4, r2
 8007258:	461d      	mov	r5, r3
 800725a:	b108      	cbz	r0, 8007260 <xflow+0xc>
 800725c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007260:	e9cd 2300 	strd	r2, r3, [sp]
 8007264:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007268:	4620      	mov	r0, r4
 800726a:	4629      	mov	r1, r5
 800726c:	f7f9 f968 	bl	8000540 <__aeabi_dmul>
 8007270:	2222      	movs	r2, #34	; 0x22
 8007272:	b003      	add	sp, #12
 8007274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007278:	f7ff bfe2 	b.w	8007240 <with_errno>

0800727c <__math_uflow>:
 800727c:	b508      	push	{r3, lr}
 800727e:	2200      	movs	r2, #0
 8007280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007284:	f7ff ffe6 	bl	8007254 <xflow>
 8007288:	ec41 0b10 	vmov	d0, r0, r1
 800728c:	bd08      	pop	{r3, pc}

0800728e <__math_oflow>:
 800728e:	b508      	push	{r3, lr}
 8007290:	2200      	movs	r2, #0
 8007292:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007296:	f7ff ffdd 	bl	8007254 <xflow>
 800729a:	ec41 0b10 	vmov	d0, r0, r1
 800729e:	bd08      	pop	{r3, pc}

080072a0 <finite>:
 80072a0:	b082      	sub	sp, #8
 80072a2:	ed8d 0b00 	vstr	d0, [sp]
 80072a6:	9801      	ldr	r0, [sp, #4]
 80072a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80072ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80072b0:	0fc0      	lsrs	r0, r0, #31
 80072b2:	b002      	add	sp, #8
 80072b4:	4770      	bx	lr
	...

080072b8 <scalbn>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	ec55 4b10 	vmov	r4, r5, d0
 80072be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80072c2:	4606      	mov	r6, r0
 80072c4:	462b      	mov	r3, r5
 80072c6:	b99a      	cbnz	r2, 80072f0 <scalbn+0x38>
 80072c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072cc:	4323      	orrs	r3, r4
 80072ce:	d036      	beq.n	800733e <scalbn+0x86>
 80072d0:	4b39      	ldr	r3, [pc, #228]	; (80073b8 <scalbn+0x100>)
 80072d2:	4629      	mov	r1, r5
 80072d4:	ee10 0a10 	vmov	r0, s0
 80072d8:	2200      	movs	r2, #0
 80072da:	f7f9 f931 	bl	8000540 <__aeabi_dmul>
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <scalbn+0x104>)
 80072e0:	429e      	cmp	r6, r3
 80072e2:	4604      	mov	r4, r0
 80072e4:	460d      	mov	r5, r1
 80072e6:	da10      	bge.n	800730a <scalbn+0x52>
 80072e8:	a32b      	add	r3, pc, #172	; (adr r3, 8007398 <scalbn+0xe0>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	e03a      	b.n	8007366 <scalbn+0xae>
 80072f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80072f4:	428a      	cmp	r2, r1
 80072f6:	d10c      	bne.n	8007312 <scalbn+0x5a>
 80072f8:	ee10 2a10 	vmov	r2, s0
 80072fc:	4620      	mov	r0, r4
 80072fe:	4629      	mov	r1, r5
 8007300:	f7f8 ff68 	bl	80001d4 <__adddf3>
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	e019      	b.n	800733e <scalbn+0x86>
 800730a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800730e:	460b      	mov	r3, r1
 8007310:	3a36      	subs	r2, #54	; 0x36
 8007312:	4432      	add	r2, r6
 8007314:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007318:	428a      	cmp	r2, r1
 800731a:	dd08      	ble.n	800732e <scalbn+0x76>
 800731c:	2d00      	cmp	r5, #0
 800731e:	a120      	add	r1, pc, #128	; (adr r1, 80073a0 <scalbn+0xe8>)
 8007320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007324:	da1c      	bge.n	8007360 <scalbn+0xa8>
 8007326:	a120      	add	r1, pc, #128	; (adr r1, 80073a8 <scalbn+0xf0>)
 8007328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800732c:	e018      	b.n	8007360 <scalbn+0xa8>
 800732e:	2a00      	cmp	r2, #0
 8007330:	dd08      	ble.n	8007344 <scalbn+0x8c>
 8007332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800733a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800733e:	ec45 4b10 	vmov	d0, r4, r5
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007348:	da19      	bge.n	800737e <scalbn+0xc6>
 800734a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800734e:	429e      	cmp	r6, r3
 8007350:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007354:	dd0a      	ble.n	800736c <scalbn+0xb4>
 8007356:	a112      	add	r1, pc, #72	; (adr r1, 80073a0 <scalbn+0xe8>)
 8007358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e2      	bne.n	8007326 <scalbn+0x6e>
 8007360:	a30f      	add	r3, pc, #60	; (adr r3, 80073a0 <scalbn+0xe8>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f9 f8eb 	bl	8000540 <__aeabi_dmul>
 800736a:	e7cb      	b.n	8007304 <scalbn+0x4c>
 800736c:	a10a      	add	r1, pc, #40	; (adr r1, 8007398 <scalbn+0xe0>)
 800736e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0b8      	beq.n	80072e8 <scalbn+0x30>
 8007376:	a10e      	add	r1, pc, #56	; (adr r1, 80073b0 <scalbn+0xf8>)
 8007378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737c:	e7b4      	b.n	80072e8 <scalbn+0x30>
 800737e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007382:	3236      	adds	r2, #54	; 0x36
 8007384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800738c:	4620      	mov	r0, r4
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <scalbn+0x108>)
 8007390:	2200      	movs	r2, #0
 8007392:	e7e8      	b.n	8007366 <scalbn+0xae>
 8007394:	f3af 8000 	nop.w
 8007398:	c2f8f359 	.word	0xc2f8f359
 800739c:	01a56e1f 	.word	0x01a56e1f
 80073a0:	8800759c 	.word	0x8800759c
 80073a4:	7e37e43c 	.word	0x7e37e43c
 80073a8:	8800759c 	.word	0x8800759c
 80073ac:	fe37e43c 	.word	0xfe37e43c
 80073b0:	c2f8f359 	.word	0xc2f8f359
 80073b4:	81a56e1f 	.word	0x81a56e1f
 80073b8:	43500000 	.word	0x43500000
 80073bc:	ffff3cb0 	.word	0xffff3cb0
 80073c0:	3c900000 	.word	0x3c900000

080073c4 <__errno>:
 80073c4:	4b01      	ldr	r3, [pc, #4]	; (80073cc <__errno+0x8>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000024 	.word	0x20000024

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
