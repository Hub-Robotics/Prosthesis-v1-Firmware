
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000010  080047b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080047b8  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b71  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002832  00000000  00000000  00030bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027462  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114df  00000000  00000000  0005c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed804  00000000  00000000  0006d891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ac  00000000  00000000  0015b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004738 	.word	0x08004738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004738 	.word	0x08004738

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delay_us>:
#include "EPOS4.h"

// Can we lose this??
static void delay_us(uint32_t us)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	e00c      	b.n	80004f4 <delay_us+0x28>
    {
    	for(i=0;i<11;i++)
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	e003      	b.n	80004e8 <delay_us+0x1c>
         __NOP();  // Timed at 48 MHz clock
 80004e0:	bf00      	nop
    	for(i=0;i<11;i++)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b0a      	cmp	r3, #10
 80004ec:	d9f8      	bls.n	80004e0 <delay_us+0x14>
    for(k=0;k<us;k++)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d3ee      	bcc.n	80004da <delay_us+0xe>
    }
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <EPOS4_data_framer>:

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value)
{
 800050a:	b480      	push	{r7}
 800050c:	b085      	sub	sp, #20
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	817b      	strh	r3, [r7, #10]
 8000518:	4613      	mov	r3, r2
 800051a:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 Application Notes
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2222      	movs	r2, #34	; 0x22
 8000520:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	897a      	ldrh	r2, [r7, #10]
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 800052c:	897b      	ldrh	r3, [r7, #10]
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	b29a      	uxth	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	3302      	adds	r3, #2
 8000536:	b2d2      	uxtb	r2, r2
 8000538:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	3303      	adds	r3, #3
 800053e:	7a7a      	ldrb	r2, [r7, #9]
 8000540:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3304      	adds	r3, #4
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	0a1a      	lsrs	r2, r3, #8
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3305      	adds	r3, #5
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0c1a      	lsrs	r2, r3, #16
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3306      	adds	r3, #6
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	0e1a      	lsrs	r2, r3, #24
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3307      	adds	r3, #7
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	701a      	strb	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <EPOS4_set_operation_mode>:

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000588:	f107 0008 	add.w	r0, r7, #8
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	f246 0160 	movw	r1, #24672	; 0x6060
 8000594:	f7ff ffb9 	bl	800050a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000598:	f107 0208 	add.w	r2, r7, #8
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	2108      	movs	r1, #8
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fbe4 	bl	8000d6e <CAN_transmit>
    delay_us(10000);
 80005a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80005aa:	f7ff ff8f 	bl	80004cc <delay_us>
//    HAL_Delay(10);
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <EPOS4_enable>:

void EPOS4_enable(uint16_t CAN_ID)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	4603      	mov	r3, r0
 80005be:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
    EPOS4_data_framer(data, 0x6040, 0x00, 0x06);
 80005c0:	f107 0008 	add.w	r0, r7, #8
 80005c4:	2306      	movs	r3, #6
 80005c6:	2200      	movs	r2, #0
 80005c8:	f246 0140 	movw	r1, #24640	; 0x6040
 80005cc:	f7ff ff9d 	bl	800050a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 80005d0:	f107 0208 	add.w	r2, r7, #8
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	2108      	movs	r1, #8
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fbc8 	bl	8000d6e <CAN_transmit>
    delay_us(10000);
 80005de:	f242 7010 	movw	r0, #10000	; 0x2710
 80005e2:	f7ff ff73 	bl	80004cc <delay_us>
//    HAL_Delay(10);

    EPOS4_enable2(CAN_ID);
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f804 	bl	80005f6 <EPOS4_enable2>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <EPOS4_enable2>:


void EPOS4_enable2(uint16_t CAN_ID)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b084      	sub	sp, #16
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);
 8000600:	f107 0008 	add.w	r0, r7, #8
 8000604:	230f      	movs	r3, #15
 8000606:	2200      	movs	r2, #0
 8000608:	f246 0140 	movw	r1, #24640	; 0x6040
 800060c:	f7ff ff7d 	bl	800050a <EPOS4_data_framer>
    CAN_transmit(CAN_ID, 8, data);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	2108      	movs	r1, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fba8 	bl	8000d6e <CAN_transmit>
    delay_us(10000);
 800061e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000622:	f7ff ff53 	bl	80004cc <delay_us>
//    HAL_Delay(10);
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <EPOS4_CST_apply_torque>:
//    HAL_Delay(10);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b084      	sub	sp, #16
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	6039      	str	r1, [r7, #0]
 8000638:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 800063a:	f107 0008 	add.w	r0, r7, #8
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	f246 0171 	movw	r1, #24689	; 0x6071
 8000646:	f7ff ff60 	bl	800050a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	2108      	movs	r1, #8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb8b 	bl	8000d6e <CAN_transmit>
    delay_us(50); //1500
 8000658:	2032      	movs	r0, #50	; 0x32
 800065a:	f7ff ff37 	bl	80004cc <delay_us>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <EPOS4_clear_errors>:
    CAN_transmit(CAN_ID, 8, data);
    delay_us(1500);
}

void EPOS4_clear_errors(uint16_t CAN_ID)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	4603      	mov	r3, r0
 800066e:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
    EPOS4_data_framer(data, 0x6040, 0x00, 0x80);
 8000670:	f107 0008 	add.w	r0, r7, #8
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	2200      	movs	r2, #0
 8000678:	f246 0140 	movw	r1, #24640	; 0x6040
 800067c:	f7ff ff45 	bl	800050a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000680:	f107 0208 	add.w	r2, r7, #8
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	2108      	movs	r1, #8
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb70 	bl	8000d6e <CAN_transmit>
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a3d      	ldr	r2, [pc, #244]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <MX_GPIO_Init+0x110>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <MX_GPIO_Init+0x110>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Oscope_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000714:	4825      	ldr	r0, [pc, #148]	; (80007ac <MX_GPIO_Init+0x114>)
 8000716:	f001 f905 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f001 f8fe 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	481c      	ldr	r0, [pc, #112]	; (80007b0 <MX_GPIO_Init+0x118>)
 8000740:	f000 ff46 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Oscope_Pin;
 8000744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Oscope_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_GPIO_Init+0x114>)
 800075e:	f000 ff37 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0x114>)
 800077c:	f000 ff28 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 ff18 	bl	80015d0 <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000800 	.word	0x48000800

080007b4 <MX_LPTIM2_Init>:

LPTIM_HandleTypeDef hlptim2;

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_LPTIM2_Init+0x54>)
 80007bc:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d0:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_LPTIM2_Init+0x50>)
 80007f2:	f001 f8c9 	bl	8001988 <HAL_LPTIM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f916 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40009400 	.word	0x40009400

0800080c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a6      	sub	sp, #152	; 0x98
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2288      	movs	r2, #136	; 0x88
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f003 ff83 	bl	8004728 <memset>
  if(lptimHandle->Instance==LPTIM2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_LPTIM_MspInit+0x70>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d123      	bne.n	8000874 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSE;
 8000832:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000836:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fa57 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8000848:	f000 f8f0 	bl	8000a2c <Error_Handler>
    }

    /* LPTIM2 clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_LPTIM_MspInit+0x74>)
 800084e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000850:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <HAL_LPTIM_MspInit+0x74>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_LPTIM_MspInit+0x74>)
 800085a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2042      	movs	r0, #66	; 0x42
 800086a:	f000 fe7a 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 800086e:	2042      	movs	r0, #66	; 0x42
 8000870:	f000 fe93 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3798      	adds	r7, #152	; 0x98
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40009400 	.word	0x40009400
 8000880:	40021000 	.word	0x40021000

08000884 <delay_us>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
// Can we lose this??
static void delay_us(uint32_t us)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	e00c      	b.n	80008ac <delay_us+0x28>
    {
    	for(i=0;i<11;i++)
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e003      	b.n	80008a0 <delay_us+0x1c>
         __NOP();  // Timed at 48 MHz clock
 8000898:	bf00      	nop
    	for(i=0;i<11;i++)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b0a      	cmp	r3, #10
 80008a4:	d9f8      	bls.n	8000898 <delay_us+0x14>
    for(k=0;k<us;k++)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3ee      	bcc.n	8000892 <delay_us+0xe>
    }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fcf3 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f849 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f7ff fee1 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d6:	f000 fc37 	bl	8001148 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80008da:	f000 fab5 	bl	8000e48 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 80008de:	f7ff ff69 	bl	80007b4 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 80008e2:	f000 faef 	bl	8000ec4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Start LPTIM2 timer interrupt at 512 Hz and check for errors
  if ( HAL_LPTIM_Counter_Start_IT( &hlptim2, 0x3F ) != HAL_OK )		// Timer frequency = Clock_Freq * Prescaler / Period
 80008e6:	213f      	movs	r1, #63	; 0x3f
 80008e8:	481c      	ldr	r0, [pc, #112]	; (800095c <main+0x98>)
 80008ea:	f001 f8ef 	bl	8001acc <HAL_LPTIM_Counter_Start_IT>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <main+0x34>
  	  Error_Handler();
 80008f4:	f000 f89a 	bl	8000a2c <Error_Handler>

  // Configure devices for motor control
  CAN_configure();							// Configure MCP25625
 80008f8:	f000 fa80 	bl	8000dfc <CAN_configure>
  EPOS4_enable(CAN_ID);						// Enable EPOS4
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <main+0x9c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe57 	bl	80005b6 <EPOS4_enable>
  EPOS4_set_operation_mode(CAN_ID, 0x0A);	// Set EPOS4 to torque mode
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <main+0x9c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	210a      	movs	r1, #10
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe33 	bl	800057c <EPOS4_set_operation_mode>
  EPOS4_clear_errors(CAN_ID);				// Clear errors from EPOS4??
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <main+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fea2 	bl	8000666 <EPOS4_clear_errors>
  delay_us(1500);
 8000922:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000926:	f7ff ffad 	bl	8000884 <delay_us>
//  HAL_Delay(2);								// Can we lose this??
  EPOS4_enable(CAN_ID);						// Why is this enabled again??
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <main+0x9c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe40 	bl	80005b6 <EPOS4_enable>

  // Remove spikes from beginning (can we lose this??)
  for ( int jj = 1; jj < 1000; ++jj );
 8000936:	2301      	movs	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e002      	b.n	8000942 <main+0x7e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000948:	dbf8      	blt.n	800093c <main+0x78>

  EPOS4_CST_apply_torque(CAN_ID,100);
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <main+0x9c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	2164      	movs	r1, #100	; 0x64
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe6b 	bl	800062e <EPOS4_CST_apply_torque>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x94>
 800095a:	bf00      	nop
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000000 	.word	0x20000000

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2244      	movs	r2, #68	; 0x44
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fed8 	bl	8004728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000986:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098a:	f001 fb5b 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000994:	f000 f84a 	bl	8000a2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000998:	f001 fb36 	bl	8002008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <SystemClock_Config+0xc4>)
 800099e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009a2:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <SystemClock_Config+0xc4>)
 80009a4:	f023 0318 	bic.w	r3, r3, #24
 80009a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009ac:	2314      	movs	r3, #20
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009bc:	23b0      	movs	r3, #176	; 0xb0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c4:	2301      	movs	r3, #1
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 6;
 80009c8:	2306      	movs	r3, #6
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009cc:	2328      	movs	r3, #40	; 0x28
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009d0:	2307      	movs	r3, #7
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80009d8:	2304      	movs	r3, #4
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fb85 	bl	80020f0 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f81e 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2303      	movs	r3, #3
 80009f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 ff4b 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a18:	f000 f808 	bl	8000a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a1c:	f002 fc52 	bl	80032c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a20:	bf00      	nop
 8000a22:	3758      	adds	r7, #88	; 0x58
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <clearChipSelect>:
// ??
__STATIC_INLINE void LL_SPI_TransmitData8 ( SPI_TypeDef *SPIx, uint8_t TxData ) {
  *((__IO uint8_t *)&SPIx->DR) = TxData; }

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET ); }
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <clearChipSelect+0x14>)
 8000a44:	f000 ff6e 	bl	8001924 <HAL_GPIO_WritePin>
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000400 	.word	0x48000400

08000a50 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET ); }
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <setChipSelect+0x14>)
 8000a5c:	f000 ff62 	bl	8001924 <HAL_GPIO_WritePin>
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000400 	.word	0x48000400

08000a68 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	// Declare variables
	uint8_t data = CMD_RESET;
 8000a6e:	23c0      	movs	r3, #192	; 0xc0
 8000a70:	71fb      	strb	r3, [r7, #7]

	// Transmit message
	setChipSelect();										// Enable CS pin
 8000a72:	f7ff ffed 	bl	8000a50 <setChipSelect>
//	HAL_SPI_Transmit( &hspi2, &data, 1, HAL_MAX_DELAY );	// Transmit message
//	LL_SPI_TransmitData8(SPI2, CMD_RESET);

	SPI2->DR = CMD_RESET;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <mcp25625_reset+0x30>)
 8000a78:	22c0      	movs	r2, #192	; 0xc0
 8000a7a:	60da      	str	r2, [r3, #12]

//	*((__IO uint8_t *)&hspi2.Instance->DR) = CMD_RESET;
//    hspi2.Instance->DR = CMD_RESET;
	while ((SPI2->SR & SPI_SR_BSY)); 						// Wait for status register to not be busy
 8000a7c:	bf00      	nop
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <mcp25625_reset+0x30>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f9      	bne.n	8000a7e <mcp25625_reset+0x16>
	clearChipSelect();										// Disable CS pin
 8000a8a:	f7ff ffd5 	bl	8000a38 <clearChipSelect>
//		(void)dummy;						// suppress unused variable warning
//	}
//
//	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
//	delay_us(50);
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40003800 	.word	0x40003800

08000a9c <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	// Declare variables
	uint8_t data = CMD_WRITE;
 8000aac:	2302      	movs	r3, #2
 8000aae:	73bb      	strb	r3, [r7, #14]

	//
	setChipSelect();
 8000ab0:	f7ff ffce 	bl	8000a50 <setChipSelect>

	// 4 byte fifo, so this can all go through in one shot
	HAL_SPI_Transmit( &hspi2, &data, 1, HAL_MAX_DELAY );
 8000ab4:	f107 010e 	add.w	r1, r7, #14
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	2201      	movs	r2, #1
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <mcp25625_writeRegister+0x84>)
 8000ac0:	f002 fe85 	bl	80037ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi2, &reg, 1, HAL_MAX_DELAY );
 8000ac4:	1df9      	adds	r1, r7, #7
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2201      	movs	r2, #1
 8000acc:	4814      	ldr	r0, [pc, #80]	; (8000b20 <mcp25625_writeRegister+0x84>)
 8000ace:	f002 fe7e 	bl	80037ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi2, &value, 1, HAL_MAX_DELAY );
 8000ad2:	1db9      	adds	r1, r7, #6
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <mcp25625_writeRegister+0x84>)
 8000adc:	f002 fe77 	bl	80037ce <HAL_SPI_Transmit>

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// transmit fifo empty?
 8000ae0:	bf00      	nop
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <mcp25625_writeRegister+0x88>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f9      	bne.n	8000ae2 <mcp25625_writeRegister+0x46>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8000aee:	bf00      	nop
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <mcp25625_writeRegister+0x88>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1f9      	bne.n	8000af0 <mcp25625_writeRegister+0x54>
	clearChipSelect();
 8000afc:	f7ff ff9c 	bl	8000a38 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8000b00:	e002      	b.n	8000b08 <mcp25625_writeRegister+0x6c>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <mcp25625_writeRegister+0x88>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <mcp25625_writeRegister+0x88>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f6      	bne.n	8000b02 <mcp25625_writeRegister+0x66>
		(void)dummy;						// suppress unused variable warning
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000340 	.word	0x20000340
 8000b24:	40003800 	.word	0x40003800

08000b28 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint8_t data   = CMD_READ;
 8000b32:	2303      	movs	r3, #3
 8000b34:	737b      	strb	r3, [r7, #13]
	uint8_t result = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
	setChipSelect();
 8000b3a:	f7ff ff89 	bl	8000a50 <setChipSelect>

	// 4 byte fifo, so this can all go through in one shot
	HAL_SPI_Transmit( &hspi2, &data, 1, HAL_MAX_DELAY );
 8000b3e:	f107 010d 	add.w	r1, r7, #13
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2201      	movs	r2, #1
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <mcp25625_readRegister+0x80>)
 8000b4a:	f002 fe40 	bl	80037ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi2, &reg, 1, HAL_MAX_DELAY );
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <mcp25625_readRegister+0x80>)
 8000b58:	f002 fe39 	bl	80037ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi2, 0x00, 1, HAL_MAX_DELAY );	// dummy value to transfer the response
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2201      	movs	r2, #1
 8000b62:	2100      	movs	r1, #0
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <mcp25625_readRegister+0x80>)
 8000b66:	f002 fe32 	bl	80037ce <HAL_SPI_Transmit>

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	//transmit fifo empty?
 8000b6a:	bf00      	nop
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <mcp25625_readRegister+0x84>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1f9      	bne.n	8000b6c <mcp25625_readRegister+0x44>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8000b78:	bf00      	nop
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <mcp25625_readRegister+0x84>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f9      	bne.n	8000b7a <mcp25625_readRegister+0x52>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <mcp25625_readRegister+0x84>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	73bb      	strb	r3, [r7, #14]
	dummy         = SPI2->DR;				// second byte is from address
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <mcp25625_readRegister+0x84>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	73bb      	strb	r3, [r7, #14]
	result        = SPI2->DR;				// actual result value
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <mcp25625_readRegister+0x84>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	73fb      	strb	r3, [r7, #15]

	clearChipSelect();
 8000b98:	f7ff ff4e 	bl	8000a38 <clearChipSelect>

	(void)dummy;						// suppress unused variable warning
	return result;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000340 	.word	0x20000340
 8000bac:	40003800 	.word	0x40003800

08000bb0 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	603a      	str	r2, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	71bb      	strb	r3, [r7, #6]

	setChipSelect();
 8000bc0:	f7ff ff46 	bl	8000a50 <setChipSelect>

	HAL_SPI_Transmit( &hspi2, &reg, 1, HAL_MAX_DELAY );
 8000bc4:	1df9      	adds	r1, r7, #7
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	2201      	movs	r2, #1
 8000bcc:	481d      	ldr	r0, [pc, #116]	; (8000c44 <mcp25625_loadTXB+0x94>)
 8000bce:	f002 fdfe 	bl	80037ce <HAL_SPI_Transmit>
	for ( uint8_t i = 0; i < length; i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e012      	b.n	8000bfe <mcp25625_loadTXB+0x4e>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8000bd8:	bf00      	nop
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <mcp25625_loadTXB+0x98>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f9      	beq.n	8000bda <mcp25625_loadTXB+0x2a>
		HAL_SPI_Transmit( &hspi2, &data[i], 1, HAL_MAX_DELAY );
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	18d1      	adds	r1, r2, r3
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <mcp25625_loadTXB+0x94>)
 8000bf4:	f002 fdeb 	bl	80037ce <HAL_SPI_Transmit>
	for ( uint8_t i = 0; i < length; i++)
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	7bfa      	ldrb	r2, [r7, #15]
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3e8      	bcc.n	8000bd8 <mcp25625_loadTXB+0x28>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8000c06:	bf00      	nop
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <mcp25625_loadTXB+0x98>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f9      	bne.n	8000c08 <mcp25625_loadTXB+0x58>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8000c14:	bf00      	nop
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <mcp25625_loadTXB+0x98>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f9      	bne.n	8000c16 <mcp25625_loadTXB+0x66>
	clearChipSelect();
 8000c22:	f7ff ff09 	bl	8000a38 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8000c26:	e002      	b.n	8000c2e <mcp25625_loadTXB+0x7e>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <mcp25625_loadTXB+0x98>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <mcp25625_loadTXB+0x98>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f6      	bne.n	8000c28 <mcp25625_loadTXB+0x78>
		(void)dummy;						// suppress unused variable warning
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000340 	.word	0x20000340
 8000c48:	40003800 	.word	0x40003800

08000c4c <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8000c50:	2030      	movs	r0, #48	; 0x30
 8000c52:	f7ff ff69 	bl	8000b28 <mcp25625_readRegister>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 8000c60:	2040      	movs	r0, #64	; 0x40
 8000c62:	f7ff ff61 	bl	8000b28 <mcp25625_readRegister>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 8000c70:	2050      	movs	r0, #80	; 0x50
 8000c72:	f7ff ff59 	bl	8000b28 <mcp25625_readRegister>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	210d      	movs	r1, #13
 8000c88:	2044      	movs	r0, #68	; 0x44
 8000c8a:	f7ff ff91 	bl	8000bb0 <mcp25625_loadTXB>
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	210d      	movs	r1, #13
 8000ca2:	2042      	movs	r0, #66	; 0x42
 8000ca4:	f7ff ff84 	bl	8000bb0 <mcp25625_loadTXB>
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	210d      	movs	r1, #13
 8000cbc:	2040      	movs	r0, #64	; 0x40
 8000cbe:	f7ff ff77 	bl	8000bb0 <mcp25625_loadTXB>
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8000cce:	210b      	movs	r1, #11
 8000cd0:	2050      	movs	r0, #80	; 0x50
 8000cd2:	f7ff fee3 	bl	8000a9c <mcp25625_writeRegister>
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8000cde:	210b      	movs	r1, #11
 8000ce0:	2040      	movs	r0, #64	; 0x40
 8000ce2:	f7ff fedb 	bl	8000a9c <mcp25625_writeRegister>
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8000cee:	210b      	movs	r1, #11
 8000cf0:	2030      	movs	r0, #48	; 0x30
 8000cf2:	f7ff fed3 	bl	8000a9c <mcp25625_writeRegister>
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8000d02:	f7ff ffb3 	bl	8000c6c <getTXB2CTRL>
 8000d06:	4603      	mov	r3, r0
 8000d08:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8000d0a:	7b3b      	ldrb	r3, [r7, #12]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d106      	bne.n	8000d24 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffaf 	bl	8000c7c <loadTXB2>
		setTXREQ2();
 8000d1e:	f7ff ffd4 	bl	8000cca <setTXREQ2>
		return; // once txbuffer is loaded, return
 8000d22:	e021      	b.n	8000d68 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8000d24:	f7ff ff9a 	bl	8000c5c <getTXB1CTRL>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8000d2c:	7b3b      	ldrb	r3, [r7, #12]
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffab 	bl	8000c96 <loadTXB1>
		setTXREQ1();
 8000d40:	f7ff ffcb 	bl	8000cda <setTXREQ1>
		return; //once tx buffer is loaded, return
 8000d44:	e010      	b.n	8000d68 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8000d46:	f7ff ff81 	bl	8000c4c <getTXB0CTRL>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8000d4e:	7b3b      	ldrb	r3, [r7, #12]
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d106      	bne.n	8000d68 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffa7 	bl	8000cb0 <loadTXB0>
		setTXREQ0();
 8000d62:	f7ff ffc2 	bl	8000cea <setTXREQ0>
		return; // once tx buffer is loaded, return
 8000d66:	bf00      	nop
	}
}
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	603a      	str	r2, [r7, #0]
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	220d      	movs	r2, #13
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fcce 	bl	8004728 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8000d9e:	797b      	ldrb	r3, [r7, #5]
 8000da0:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]
 8000da6:	e00b      	b.n	8000dc0 <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	441a      	add	r2, r3
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	3318      	adds	r3, #24
 8000db4:	443b      	add	r3, r7
 8000db6:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	75fb      	strb	r3, [r7, #23]
 8000dc0:	7dfa      	ldrb	r2, [r7, #23]
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3ef      	bcc.n	8000da8 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff94 	bl	8000cfa <mcp25625_sendCAN>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <mcp25625_init>:

void mcp25625_init (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8000de0:	f240 2276 	movw	r2, #630	; 0x276
 8000de4:	2100      	movs	r1, #0
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <mcp25625_init+0x1c>)
 8000de8:	f003 fc9e 	bl	8004728 <memset>
	clearChipSelect();
 8000dec:	f7ff fe24 	bl	8000a38 <clearChipSelect>
	mcp25625_reset();
 8000df0:	f7ff fe3a 	bl	8000a68 <mcp25625_reset>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000064 	.word	0x20000064

08000dfc <CAN_configure>:

void CAN_configure()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8000e06:	2389      	movs	r3, #137	; 0x89
 8000e08:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8000e12:	f7ff ffe3 	bl	8000ddc <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	202a      	movs	r0, #42	; 0x2a
 8000e1c:	f7ff fe3e 	bl	8000a9c <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 8000e20:	7a3b      	ldrb	r3, [r7, #8]
 8000e22:	4619      	mov	r1, r3
 8000e24:	2029      	movs	r0, #41	; 0x29
 8000e26:	f7ff fe39 	bl	8000a9c <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 8000e2a:	793b      	ldrb	r3, [r7, #4]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f7ff fe34 	bl	8000a9c <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 8000e34:	783b      	ldrb	r3, [r7, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f7ff fe2f 	bl	8000a9c <mcp25625_writeRegister>

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_SPI1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e7e:	2208      	movs	r2, #8
 8000e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea8:	f002 fbee 	bl	8003688 <HAL_SPI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff fdbb 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002dc 	.word	0x200002dc
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <MX_SPI2_Init+0x78>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000ede:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ee2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000efa:	2208      	movs	r2, #8
 8000efc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_SPI2_Init+0x74>)
 8000f24:	f002 fbb0 	bl	8003688 <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f7ff fd7d 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000340 	.word	0x20000340
 8000f3c:	40003800 	.word	0x40003800

08000f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a3d      	ldr	r2, [pc, #244]	; (8001054 <HAL_SPI_MspInit+0x114>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d129      	bne.n	8000fb6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a36      	ldr	r2, [pc, #216]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f92:	23e0      	movs	r3, #224	; 0xe0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f000 fb0e 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fb4:	e049      	b.n	800104a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_SPI_MspInit+0x11c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d144      	bne.n	800104a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fca:	6593      	str	r3, [r2, #88]	; 0x58
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_SPI_MspInit+0x118>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001008:	230c      	movs	r3, #12
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001018:	2305      	movs	r3, #5
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	480f      	ldr	r0, [pc, #60]	; (8001060 <HAL_SPI_MspInit+0x120>)
 8001024:	f000 fad4 	bl	80015d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103a:	2305      	movs	r3, #5
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_SPI_MspInit+0x124>)
 8001046:	f000 fac3 	bl	80015d0 <HAL_GPIO_Init>
}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	; 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	40021000 	.word	0x40021000
 800105c:	40003800 	.word	0x40003800
 8001060:	48000800 	.word	0x48000800
 8001064:	48000400 	.word	0x48000400

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f936 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

	HAL_GPIO_TogglePin(Oscope_GPIO_Port, Oscope_Pin);
 8001108:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <LPTIM2_IRQHandler+0x18>)
 800110e:	f000 fc21 	bl	8001954 <HAL_GPIO_TogglePin>


  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <LPTIM2_IRQHandler+0x1c>)
 8001114:	f000 fd58 	bl	8001bc8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	48000400 	.word	0x48000400
 8001120:	2000002c 	.word	0x2000002c

08001124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <MX_USART2_UART_Init+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 800118c:	f002 fdf2 	bl	8003d74 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001196:	f7ff fc49 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200003a4 	.word	0x200003a4
 80011a4:	40004400 	.word	0x40004400

080011a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ac      	sub	sp, #176	; 0xb0
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2288      	movs	r2, #136	; 0x88
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 faad 	bl	8004728 <memset>
  if(uartHandle->Instance==USART2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <HAL_UART_MspInit+0xb0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d13b      	bne.n	8001250 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fd83 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f0:	f7ff fc1c 	bl	8000a2c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_UART_MspInit+0xb4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_UART_MspInit+0xb4>)
 80011fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_UART_MspInit+0xb4>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_UART_MspInit+0xb4>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_UART_MspInit+0xb4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_UART_MspInit+0xb4>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001224:	230c      	movs	r3, #12
 8001226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f000 f9c0 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001250:	bf00      	nop
 8001252:	37b0      	adds	r7, #176	; 0xb0
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40004400 	.word	0x40004400
 800125c:	40021000 	.word	0x40021000

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ff5e 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 fa27 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fb17 	bl	80008c4 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012a4:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 80012a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012ac:	2000042c 	.word	0x2000042c

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_Init+0x3c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_Init+0x3c>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 f93e 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f80f 	bl	80012f4 <HAL_InitTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	e001      	b.n	80012e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e2:	f7ff fec1 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_InitTick+0x6c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d023      	beq.n	8001350 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_InitTick+0x70>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_InitTick+0x6c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f949 	bl	80015b6 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10f      	bne.n	800134a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d809      	bhi.n	8001344 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f913 	bl	8001562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_InitTick+0x74>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e007      	b.n	8001354 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e004      	b.n	8001354 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e001      	b.n	8001354 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c
 8001364:	20000004 	.word	0x20000004
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c
 8001390:	20000428 	.word	0x20000428

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000428 	.word	0x20000428

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff3e 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff31 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e17f      	b.n	80018e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8171 	beq.w	80018da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d118      	bne.n	80016b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	6939      	ldr	r1, [r7, #16]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80ac 	beq.w	80018da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a5e      	ldr	r2, [pc, #376]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <HAL_GPIO_Init+0x330>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800179a:	4a5a      	ldr	r2, [pc, #360]	; (8001904 <HAL_GPIO_Init+0x334>)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017c4:	d025      	beq.n	8001812 <HAL_GPIO_Init+0x242>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x338>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01f      	beq.n	800180e <HAL_GPIO_Init+0x23e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x33c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x23a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x340>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x236>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_GPIO_Init+0x344>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x232>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_GPIO_Init+0x348>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x22e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_GPIO_Init+0x34c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x22a>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00c      	b.n	8001814 <HAL_GPIO_Init+0x244>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e00a      	b.n	8001814 <HAL_GPIO_Init+0x244>
 80017fe:	2305      	movs	r3, #5
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001802:	2304      	movs	r3, #4
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x244>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x244>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x244>
 8001812:	2300      	movs	r3, #0
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001824:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_GPIO_Init+0x334>)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_GPIO_Init+0x350>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_GPIO_Init+0x350>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_GPIO_Init+0x350>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f ae78 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	48000400 	.word	0x48000400
 800190c:	48000800 	.word	0x48000800
 8001910:	48000c00 	.word	0x48000c00
 8001914:	48001000 	.word	0x48001000
 8001918:	48001400 	.word	0x48001400
 800191c:	48001800 	.word	0x48001800
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001940:	e002      	b.n	8001948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	041a      	lsls	r2, r3, #16
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	43d9      	mvns	r1, r3
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	400b      	ands	r3, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08f      	b.n	8001aba <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe ff29 	bl	800080c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d004      	beq.n	80019dc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019da:	d103      	bne.n	80019e4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 031e 	bic.w	r3, r3, #30
 80019e2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d005      	beq.n	80019fc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019fa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_LPTIM_Init+0x13c>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a0c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001a12:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001a18:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001a1e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d004      	beq.n	8001a50 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a4e:	d107      	bne.n	8001a60 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00a      	beq.n	8001a82 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a74:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001a7a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_LPTIM_Init+0x140>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	621a      	str	r2, [r3, #32]
 8001aa4:	e004      	b.n	8001ab0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aae:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	ff19f1fe 	.word	0xff19f1fe
 8001ac8:	40007c00 	.word	0x40007c00

08001acc <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <HAL_LPTIM_Counter_Start_IT+0xf4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d106      	bne.n	8001af6 <HAL_LPTIM_Counter_Start_IT+0x2a>
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a35      	ldr	r2, [pc, #212]	; (8001bc4 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e005      	b.n	8001b02 <HAL_LPTIM_Counter_Start_IT+0x36>
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_LPTIM_Counter_Start_IT+0xf8>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d00c      	beq.n	8001b24 <HAL_LPTIM_Counter_Start_IT+0x58>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b12:	d107      	bne.n	8001b24 <HAL_LPTIM_Counter_Start_IT+0x58>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8001b22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001b44:	2110      	movs	r1, #16
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f92e 	bl	8001da8 <LPTIM_WaitForFlag>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d101      	bne.n	8001b56 <HAL_LPTIM_Counter_Start_IT+0x8a>
  {
    return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e02f      	b.n	8001bb6 <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f956 	bl	8001e08 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f914 	bl	8001d8a <HAL_LPTIM_GetState>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d101      	bne.n	8001b6c <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e024      	b.n	8001bb6 <HAL_LPTIM_Counter_Start_IT+0xea>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0210 	orr.w	r2, r2, #16
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0204 	orr.w	r2, r2, #4
 8001baa:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40007c00 	.word	0x40007c00
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10d      	bne.n	8001bfa <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d106      	bne.n	8001bfa <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f882 	bl	8001cfe <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d10d      	bne.n	8001c24 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d106      	bne.n	8001c24 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f877 	bl	8001d12 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d10d      	bne.n	8001c4e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d106      	bne.n	8001c4e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2204      	movs	r2, #4
 8001c46:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f86c 	bl	8001d26 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d10d      	bne.n	8001c78 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d106      	bne.n	8001c78 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f861 	bl	8001d3a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d10d      	bne.n	8001ca2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d106      	bne.n	8001ca2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f856 	bl	8001d4e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d10d      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d106      	bne.n	8001ccc <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f84b 	bl	8001d62 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d106      	bne.n	8001cf6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f840 	bl	8001d76 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001d98:	b2db      	uxtb	r3, r3
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <LPTIM_WaitForFlag+0x58>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <LPTIM_WaitForFlag+0x5c>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0b9b      	lsrs	r3, r3, #14
 8001dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4013      	ands	r3, r2
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d002      	beq.n	8001df2 <LPTIM_WaitForFlag+0x4a>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ec      	bne.n	8001dcc <LPTIM_WaitForFlag+0x24>

  return result;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000004 	.word	0x20000004
 8001e04:	d1b71759 	.word	0xd1b71759

08001e08 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e14:	f3ef 8310 	mrs	r3, PRIMASK
 8001e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	2301      	movs	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f383 8810 	msr	PRIMASK, r3
}
 8001e28:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a73      	ldr	r2, [pc, #460]	; (8001ffc <LPTIM_Disable+0x1f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d003      	beq.n	8001e3c <LPTIM_Disable+0x34>
 8001e34:	4a72      	ldr	r2, [pc, #456]	; (8002000 <LPTIM_Disable+0x1f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001e3a:	e00d      	b.n	8001e58 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001e3c:	4b71      	ldr	r3, [pc, #452]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001e48:	e006      	b.n	8001e58 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001e56:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <LPTIM_Disable+0x1f4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <LPTIM_Disable+0x8a>
 8001e8a:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <LPTIM_Disable+0x1f8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001e90:	e019      	b.n	8001ec6 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001e92:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	4a5b      	ldr	r2, [pc, #364]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e9c:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001e9e:	4b59      	ldr	r3, [pc, #356]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	4a58      	ldr	r2, [pc, #352]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8001eaa:	e00c      	b.n	8001ec6 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001ebe:	f023 0320 	bic.w	r3, r3, #32
 8001ec2:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8001ec4:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <LPTIM_Disable+0xca>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d075      	beq.n	8001fbe <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a49      	ldr	r2, [pc, #292]	; (8001ffc <LPTIM_Disable+0x1f4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <LPTIM_Disable+0xdc>
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <LPTIM_Disable+0x1f8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001ee2:	e011      	b.n	8001f08 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	4a46      	ldr	r2, [pc, #280]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001eec:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001ef4:	e008      	b.n	8001f08 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8001ef6:	4b43      	ldr	r3, [pc, #268]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efc:	4a41      	ldr	r2, [pc, #260]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001efe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001f06:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001f26:	2108      	movs	r1, #8
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff3d 	bl	8001da8 <LPTIM_WaitForFlag>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d103      	bne.n	8001f3c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001f62:	2110      	movs	r1, #16
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff1f 	bl	8001da8 <LPTIM_WaitForFlag>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d103      	bne.n	8001f78 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <LPTIM_Disable+0x1f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <LPTIM_Disable+0x18a>
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <LPTIM_Disable+0x1f8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00b      	beq.n	8001fa8 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001f90:	e016      	b.n	8001fc0 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f9c:	4919      	ldr	r1, [pc, #100]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001fa6:	e00b      	b.n	8001fc0 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb2:	4914      	ldr	r1, [pc, #80]	; (8002004 <LPTIM_Disable+0x1fc>)
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001fbc:	e000      	b.n	8001fc0 <LPTIM_Disable+0x1b8>
    }
  }
 8001fbe:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a3a      	ldr	r2, [r7, #32]
 8001fde:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	621a      	str	r2, [r3, #32]
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40007c00 	.word	0x40007c00
 8002000:	40009400 	.word	0x40009400
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWREx_GetVoltageRange+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40007000 	.word	0x40007000

08002044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002052:	d130      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002060:	d038      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2232      	movs	r2, #50	; 0x32
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002088:	e002      	b.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b01      	subs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d102      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f2      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b0:	d110      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e00f      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d007      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40007000 	.word	0x40007000
 80020e8:	20000004 	.word	0x20000004
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3ca      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4b97      	ldr	r3, [pc, #604]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4b94      	ldr	r3, [pc, #592]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80e4 	beq.w	80022ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_RCC_OscConfig+0x4a>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	f040 808b 	bne.w	8002248 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b01      	cmp	r3, #1
 8002136:	f040 8087 	bne.w	8002248 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x62>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e3a2      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <HAL_RCC_OscConfig+0x7c>
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216a:	e005      	b.n	8002178 <HAL_RCC_OscConfig+0x88>
 800216c:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002178:	4293      	cmp	r3, r2
 800217a:	d223      	bcs.n	80021c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fd55 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e383      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002190:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a72      	ldr	r2, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	496d      	ldr	r1, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4968      	ldr	r1, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e025      	b.n	8002210 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4960      	ldr	r1, [pc, #384]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e2:	4b5f      	ldr	r3, [pc, #380]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	495b      	ldr	r1, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fd15 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e343      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002210:	f000 fc4a 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	4950      	ldr	r1, [pc, #320]	; (8002364 <HAL_RCC_OscConfig+0x274>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_RCC_OscConfig+0x278>)
 800222e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002230:	4b4e      	ldr	r3, [pc, #312]	; (800236c <HAL_RCC_OscConfig+0x27c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f85d 	bl	80012f4 <HAL_InitTick>
 800223a:	4603      	mov	r3, r0
 800223c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d052      	beq.n	80022ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	e327      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d032      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a42      	ldr	r2, [pc, #264]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225c:	f7ff f89a 	bl	8001394 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002264:	f7ff f896 	bl	8001394 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e310      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a36      	ldr	r2, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4931      	ldr	r1, [pc, #196]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	492c      	ldr	r1, [pc, #176]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e01a      	b.n	80022ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f867 	bl	8001394 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ca:	f7ff f863 	bl	8001394 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e2dd      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x1da>
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d074      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x21a>
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d10e      	bne.n	8002322 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d10b      	bne.n	8002322 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d064      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d160      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e2ba      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x24a>
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e026      	b.n	8002388 <HAL_RCC_OscConfig+0x298>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002342:	d115      	bne.n	8002370 <HAL_RCC_OscConfig+0x280>
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 800234a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <HAL_RCC_OscConfig+0x270>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e014      	b.n	8002388 <HAL_RCC_OscConfig+0x298>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	08004750 	.word	0x08004750
 8002368:	20000004 	.word	0x20000004
 800236c:	20000008 	.word	0x20000008
 8002370:	4ba0      	ldr	r3, [pc, #640]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a9f      	ldr	r2, [pc, #636]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b9d      	ldr	r3, [pc, #628]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a9c      	ldr	r2, [pc, #624]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f800 	bl	8001394 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fffc 	bl	8001394 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e276      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023aa:	4b92      	ldr	r3, [pc, #584]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x2a8>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ffec 	bl	8001394 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe ffe8 	bl	8001394 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e262      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d2:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x2d0>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d060      	beq.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x310>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d119      	bne.n	800242e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d116      	bne.n	800242e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002400:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_OscConfig+0x328>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e23f      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	4973      	ldr	r1, [pc, #460]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242c:	e040      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d023      	beq.n	800247e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002436:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe ffa7 	bl	8001394 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe ffa3 	bl	8001394 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e21d      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245c:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	495f      	ldr	r1, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	e018      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe ff83 	bl	8001394 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe ff7f 	bl	8001394 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1f9      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03c      	beq.n	8002536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c4:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ca:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe ff5e 	bl	8001394 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024dc:	f7fe ff5a 	bl	8001394 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1d4      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ee:	4b41      	ldr	r3, [pc, #260]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCC_OscConfig+0x3ec>
 80024fc:	e01b      	b.n	8002536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe ff41 	bl	8001394 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe ff3d 	bl	8001394 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1b7      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a6 	beq.w	8002690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 800255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256c:	2301      	movs	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCC_OscConfig+0x508>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d118      	bne.n	80025ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_RCC_OscConfig+0x508>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x508>)
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002588:	f7fe ff04 	bl	8001394 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7fe ff00 	bl	8001394 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e17a      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCC_OscConfig+0x508>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d8>
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c6:	e029      	b.n	800261c <HAL_RCC_OscConfig+0x52c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d115      	bne.n	80025fc <HAL_RCC_OscConfig+0x50c>
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x52c>
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	4b9c      	ldr	r3, [pc, #624]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	4a9b      	ldr	r2, [pc, #620]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800260c:	4b98      	ldr	r3, [pc, #608]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	4a97      	ldr	r2, [pc, #604]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d016      	beq.n	8002652 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe feb6 	bl	8001394 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe feb2 	bl	8001394 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e12a      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ed      	beq.n	800262c <HAL_RCC_OscConfig+0x53c>
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fe9f 	bl	8001394 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fe9b 	bl	8001394 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e113      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ed      	bne.n	800265a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267e:	7ffb      	ldrb	r3, [r7, #31]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b7a      	ldr	r3, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4a79      	ldr	r2, [pc, #484]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80fe 	beq.w	8002896 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	2b02      	cmp	r3, #2
 80026a0:	f040 80d0 	bne.w	8002844 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026a4:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d130      	bne.n	800271a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	3b01      	subs	r3, #1
 80026c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d127      	bne.n	800271a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d11f      	bne.n	800271a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e4:	2a07      	cmp	r2, #7
 80026e6:	bf14      	ite	ne
 80026e8:	2201      	movne	r2, #1
 80026ea:	2200      	moveq	r2, #0
 80026ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d113      	bne.n	800271a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d109      	bne.n	800271a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d06e      	beq.n	80027f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d069      	beq.n	80027f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0ad      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800273c:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a4b      	ldr	r2, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002746:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7fe fe24 	bl	8001394 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fe20 	bl	8001394 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e09a      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800276e:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	4b40      	ldr	r3, [pc, #256]	; (8002874 <HAL_RCC_OscConfig+0x784>)
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800277e:	3a01      	subs	r2, #1
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002788:	0212      	lsls	r2, r2, #8
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002790:	0852      	lsrs	r2, r2, #1
 8002792:	3a01      	subs	r2, #1
 8002794:	0552      	lsls	r2, r2, #21
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279c:	0852      	lsrs	r2, r2, #1
 800279e:	3a01      	subs	r2, #1
 80027a0:	0652      	lsls	r2, r2, #25
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a8:	0912      	lsrs	r2, r2, #4
 80027aa:	0452      	lsls	r2, r2, #17
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4930      	ldr	r1, [pc, #192]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027cc:	f7fe fde2 	bl	8001394 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fdde 	bl	8001394 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e058      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f2:	e050      	b.n	8002896 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04f      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d148      	bne.n	8002896 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800281c:	f7fe fdba 	bl	8001394 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fdb6 	bl	8001394 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e030      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x734>
 8002842:	e028      	b.n	8002896 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d023      	beq.n	8002892 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_RCC_OscConfig+0x780>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fd9d 	bl	8001394 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e00c      	b.n	8002878 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fd99 	bl	8001394 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d905      	bls.n	8002878 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e013      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
 8002870:	40021000 	.word	0x40021000
 8002874:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x7b0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ec      	bne.n	800285e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_OscConfig+0x7b0>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4905      	ldr	r1, [pc, #20]	; (80028a0 <HAL_RCC_OscConfig+0x7b0>)
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x7b4>)
 800288c:	4013      	ands	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
 8002890:	e001      	b.n	8002896 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	feeefffc 	.word	0xfeeefffc

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0e7      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4970      	ldr	r1, [pc, #448]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cf      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d010      	beq.n	800291a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	429a      	cmp	r2, r3
 8002906:	d908      	bls.n	800291a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4960      	ldr	r1, [pc, #384]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04c      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0a6      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d115      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e09a      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295e:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e08e      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e086      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4943      	ldr	r1, [pc, #268]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fd00 	bl	8001394 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fcfc 	bl	8001394 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e06e      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	429a      	cmp	r2, r3
 80029da:	d208      	bcs.n	80029ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	492b      	ldr	r1, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d210      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 0207 	bic.w	r2, r3, #7
 8002a04:	4923      	ldr	r1, [pc, #140]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e036      	b.n	8002a8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4918      	ldr	r1, [pc, #96]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4910      	ldr	r1, [pc, #64]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a5c:	f000 f824 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	490b      	ldr	r1, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x1f4>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fc37 	bl	80012f4 <HAL_InitTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08004750 	.word	0x08004750
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d11e      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d134      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d003      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0xac>
 8002b4c:	e005      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b50:	617b      	str	r3, [r7, #20]
      break;
 8002b52:	e005      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8002b56:	617b      	str	r3, [r7, #20]
      break;
 8002b58:	e002      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	617b      	str	r3, [r7, #20]
      break;
 8002b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	0e5b      	lsrs	r3, r3, #25
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	3301      	adds	r3, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08004768 	.word	0x08004768
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	007a1200 	.word	0x007a1200

08002bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4904      	ldr	r1, [pc, #16]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08004760 	.word	0x08004760

08002c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c08:	f7ff ffda 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0adb      	lsrs	r3, r3, #11
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4904      	ldr	r1, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08004760 	.word	0x08004760

08002c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f9ee 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
 8002c4e:	e014      	b.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c68:	f7ff f9de 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c80:	d10b      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d919      	bls.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8c:	d902      	bls.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e013      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e010      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d902      	bls.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e00a      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d102      	bne.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cac:	2302      	movs	r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e004      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d101      	bne.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0207 	bic.w	r2, r3, #7
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40022000 	.word	0x40022000

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d041      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d14:	d02a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d1a:	d824      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d20:	d008      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d26:	d81e      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d30:	d010      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d32:	e018      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d34:	4b86      	ldr	r3, [pc, #536]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a85      	ldr	r2, [pc, #532]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d40:	e015      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 facb 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d52:	e00c      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3320      	adds	r3, #32
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fbb6 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d64:	e003      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	74fb      	strb	r3, [r7, #19]
      break;
 8002d6a:	e000      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d74:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d82:	4973      	ldr	r1, [pc, #460]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d8a:	e001      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d041      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002da4:	d02a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002daa:	d824      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db6:	d81e      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dc2:	e018      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc4:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a61      	ldr	r2, [pc, #388]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dd0:	e015      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa83 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de2:	e00c      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3320      	adds	r3, #32
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb6e 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002df4:	e003      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dfa:	e000      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e12:	494f      	ldr	r1, [pc, #316]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a0 	beq.w	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	4a40      	ldr	r2, [pc, #256]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6593      	str	r3, [r2, #88]	; 0x58
 8002e54:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e70:	f7fe fa90 	bl	8001394 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e76:	e009      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fe fa8c 	bl	8001394 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	74fb      	strb	r3, [r7, #19]
        break;
 8002e8a:	e005      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ef      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d15c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01f      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d019      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fa4b 	bl	8001394 <HAL_GetTick>
 8002efe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f00:	e00b      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe fa47 	bl	8001394 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d902      	bls.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	74fb      	strb	r3, [r7, #19]
            break;
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ec      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	4904      	ldr	r1, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f46:	e009      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	74bb      	strb	r3, [r7, #18]
 8002f4c:	e006      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5c:	7c7b      	ldrb	r3, [r7, #17]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b9e      	ldr	r3, [pc, #632]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	4a9d      	ldr	r2, [pc, #628]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f7a:	4b98      	ldr	r3, [pc, #608]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f023 0203 	bic.w	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	4994      	ldr	r1, [pc, #592]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 020c 	bic.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	498c      	ldr	r1, [pc, #560]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fbe:	4b87      	ldr	r3, [pc, #540]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4983      	ldr	r1, [pc, #524]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	497b      	ldr	r1, [pc, #492]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	4972      	ldr	r1, [pc, #456]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	496a      	ldr	r1, [pc, #424]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	4961      	ldr	r1, [pc, #388]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003068:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	4959      	ldr	r1, [pc, #356]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	4950      	ldr	r1, [pc, #320]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	4948      	ldr	r1, [pc, #288]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ce:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	493f      	ldr	r1, [pc, #252]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d028      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	4937      	ldr	r1, [pc, #220]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800310e:	d106      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800311a:	60d3      	str	r3, [r2, #12]
 800311c:	e011      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003126:	d10c      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f8d8 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d028      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	491f      	ldr	r1, [pc, #124]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316c:	d106      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003178:	60d3      	str	r3, [r2, #12]
 800317a:	e011      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f8a9 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02b      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ca:	d109      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a02      	ldr	r2, [pc, #8]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d6:	60d3      	str	r3, [r2, #12]
 80031d8:	e014      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f877 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d02f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800321e:	4928      	ldr	r1, [pc, #160]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322e:	d10d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2102      	movs	r1, #2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f854 	bl	80032e4 <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d014      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
 800324a:	e011      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003254:	d10c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3320      	adds	r3, #32
 800325a:	2102      	movs	r1, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f935 	bl	80034cc <RCCEx_PLLSAI2_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800328a:	490d      	ldr	r1, [pc, #52]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000

080032e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f2:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0203 	and.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d10d      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
       ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
       ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d047      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	e044      	b.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d018      	beq.n	800336a <RCCEx_PLLSAI1_Config+0x86>
 8003338:	2b03      	cmp	r3, #3
 800333a:	d825      	bhi.n	8003388 <RCCEx_PLLSAI1_Config+0xa4>
 800333c:	2b01      	cmp	r3, #1
 800333e:	d002      	beq.n	8003346 <RCCEx_PLLSAI1_Config+0x62>
 8003340:	2b02      	cmp	r3, #2
 8003342:	d009      	beq.n	8003358 <RCCEx_PLLSAI1_Config+0x74>
 8003344:	e020      	b.n	8003388 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003346:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11d      	bne.n	800338e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e01a      	b.n	800338e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003358:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e013      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003376:	4b54      	ldr	r3, [pc, #336]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003386:	e006      	b.n	8003396 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e004      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003396:	bf00      	nop
    }

    if(status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	430b      	orrs	r3, r1
 80033b4:	4944      	ldr	r1, [pc, #272]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17d      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033c0:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd ffe2 	bl	8001394 <HAL_GetTick>
 80033d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033d2:	e009      	b.n	80033e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d4:	f7fd ffde 	bl	8001394 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	73fb      	strb	r3, [r7, #15]
        break;
 80033e6:	e005      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e8:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ef      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d160      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003400:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6892      	ldr	r2, [r2, #8]
 8003410:	0211      	lsls	r1, r2, #8
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	0912      	lsrs	r2, r2, #4
 8003418:	0452      	lsls	r2, r2, #17
 800341a:	430a      	orrs	r2, r1
 800341c:	492a      	ldr	r1, [pc, #168]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
 8003422:	e027      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d112      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003432:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	0211      	lsls	r1, r2, #8
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6912      	ldr	r2, [r2, #16]
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0552      	lsls	r2, r2, #21
 8003446:	430a      	orrs	r2, r1
 8003448:	491f      	ldr	r1, [pc, #124]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
 800344e:	e011      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	0211      	lsls	r1, r2, #8
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6952      	ldr	r2, [r2, #20]
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	3a01      	subs	r2, #1
 800346a:	0652      	lsls	r2, r2, #25
 800346c:	430a      	orrs	r2, r1
 800346e:	4916      	ldr	r1, [pc, #88]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800347e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fd ff88 	bl	8001394 <HAL_GetTick>
 8003484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003486:	e009      	b.n	800349c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003488:	f7fd ff84 	bl	8001394 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d902      	bls.n	800349c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	73fb      	strb	r3, [r7, #15]
          break;
 800349a:	e005      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ef      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	4904      	ldr	r1, [pc, #16]	; (80034c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034da:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
       ||
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
       ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d047      	beq.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	e044      	b.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d018      	beq.n	8003552 <RCCEx_PLLSAI2_Config+0x86>
 8003520:	2b03      	cmp	r3, #3
 8003522:	d825      	bhi.n	8003570 <RCCEx_PLLSAI2_Config+0xa4>
 8003524:	2b01      	cmp	r3, #1
 8003526:	d002      	beq.n	800352e <RCCEx_PLLSAI2_Config+0x62>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d009      	beq.n	8003540 <RCCEx_PLLSAI2_Config+0x74>
 800352c:	e020      	b.n	8003570 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800352e:	4b55      	ldr	r3, [pc, #340]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11d      	bne.n	8003576 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353e:	e01a      	b.n	8003576 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e013      	b.n	800357a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003552:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800356e:	e006      	b.n	800357e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e004      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800357e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003586:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	430b      	orrs	r3, r1
 800359c:	4939      	ldr	r1, [pc, #228]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d167      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a35      	ldr	r2, [pc, #212]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd feee 	bl	8001394 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ba:	e009      	b.n	80035d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035bc:	f7fd feea 	bl	8001394 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d902      	bls.n	80035d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	73fb      	strb	r3, [r7, #15]
        break;
 80035ce:	e005      	b.n	80035dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ef      	bne.n	80035bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d14a      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d111      	bne.n	800360c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035e8:	4b26      	ldr	r3, [pc, #152]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	0211      	lsls	r1, r2, #8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	0912      	lsrs	r2, r2, #4
 8003600:	0452      	lsls	r2, r2, #17
 8003602:	430a      	orrs	r2, r1
 8003604:	491f      	ldr	r1, [pc, #124]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	614b      	str	r3, [r1, #20]
 800360a:	e011      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6892      	ldr	r2, [r2, #8]
 800361c:	0211      	lsls	r1, r2, #8
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6912      	ldr	r2, [r2, #16]
 8003622:	0852      	lsrs	r2, r2, #1
 8003624:	3a01      	subs	r2, #1
 8003626:	0652      	lsls	r2, r2, #25
 8003628:	430a      	orrs	r2, r1
 800362a:	4916      	ldr	r1, [pc, #88]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fd feaa 	bl	8001394 <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003642:	e009      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003644:	f7fd fea6 	bl	8001394 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d902      	bls.n	8003658 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	73fb      	strb	r3, [r7, #15]
          break;
 8003656:	e005      	b.n	8003664 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ef      	beq.n	8003644 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4904      	ldr	r1, [pc, #16]	; (8003684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e095      	b.n	80037c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036aa:	d009      	beq.n	80036c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
 80036b2:	e005      	b.n	80036c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fc30 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003700:	d902      	bls.n	8003708 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e002      	b.n	800370e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003716:	d007      	beq.n	8003728 <HAL_SPI_Init+0xa0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	ea42 0103 	orr.w	r1, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	0c1b      	lsrs	r3, r3, #16
 8003784:	f003 0204 	and.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_SPI_Transmit+0x22>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e158      	b.n	8003aa2 <HAL_SPI_Transmit+0x2d4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f8:	f7fd fdcc 	bl	8001394 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d002      	beq.n	8003814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003812:	e13d      	b.n	8003a90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Transmit+0x52>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003824:	e134      	b.n	8003a90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2203      	movs	r2, #3
 800382a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	d10f      	bne.n	8003892 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003880:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003890:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d007      	beq.n	80038b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b8:	d94b      	bls.n	8003952 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Transmit+0xfa>
 80038c2:	8afb      	ldrh	r3, [r7, #22]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d13e      	bne.n	8003946 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038ec:	e02b      	b.n	8003946 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d112      	bne.n	8003922 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003920:	e011      	b.n	8003946 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003922:	f7fd fd37 	bl	8001394 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d803      	bhi.n	800393a <HAL_SPI_Transmit+0x16c>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d102      	bne.n	8003940 <HAL_SPI_Transmit+0x172>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003944:	e0a4      	b.n	8003a90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ce      	bne.n	80038ee <HAL_SPI_Transmit+0x120>
 8003950:	e07c      	b.n	8003a4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_SPI_Transmit+0x192>
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d170      	bne.n	8003a42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d912      	bls.n	8003990 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	1c9a      	adds	r2, r3, #2
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b02      	subs	r3, #2
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800398e:	e058      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039b6:	e044      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d12b      	bne.n	8003a1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d912      	bls.n	80039f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	881a      	ldrh	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b02      	subs	r3, #2
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f4:	e025      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1c:	e011      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a1e:	f7fd fcb9 	bl	8001394 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d803      	bhi.n	8003a36 <HAL_SPI_Transmit+0x268>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d102      	bne.n	8003a3c <HAL_SPI_Transmit+0x26e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a40:	e026      	b.n	8003a90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1b5      	bne.n	80039b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6839      	ldr	r1, [r7, #0]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f949 	bl	8003ce8 <SPI_EndRxTxTransaction>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e000      	b.n	8003a90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003abc:	f7fd fc6a 	bl	8001394 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003acc:	f7fd fc62 	bl	8001394 <HAL_GetTick>
 8003ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	e054      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d050      	beq.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aec:	f7fd fc52 	bl	8001394 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d902      	bls.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13d      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d111      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d004      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d107      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d10f      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e017      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d19b      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000004 	.word	0x20000004

08003bbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bce:	f7fd fbe1 	bl	8001394 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bde:	f7fd fbd9 	bl	8001394 <HAL_GetTick>
 8003be2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bec:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00da      	lsls	r2, r3, #3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	0d1b      	lsrs	r3, r3, #20
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c04:	e060      	b.n	8003cc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c0c:	d107      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d050      	beq.n	8003cc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c26:	f7fd fbb5 	bl	8001394 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d902      	bls.n	8003c3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d13d      	bne.n	8003cb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c54:	d111      	bne.n	8003c7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5e:	d004      	beq.n	8003c6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d107      	bne.n	8003c7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c82:	d10f      	bne.n	8003ca4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e010      	b.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d196      	bne.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000004 	.word	0x20000004

08003ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff ff5b 	bl	8003bbc <SPI_WaitFifoStateUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e027      	b.n	8003d6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fec0 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e014      	b.n	8003d6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff34 	bl	8003bbc <SPI_WaitFifoStateUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e000      	b.n	8003d6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e040      	b.n	8003e08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd fa06 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f82c 	bl	8003e10 <UART_SetConfig>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e022      	b.n	8003e08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fad8 	bl	8004380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb5f 	bl	80044c4 <UART_CheckIdleState>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4ba4      	ldr	r3, [pc, #656]	; (80040d0 <UART_SetConfig+0x2c0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a99      	ldr	r2, [pc, #612]	; (80040d4 <UART_SetConfig+0x2c4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a90      	ldr	r2, [pc, #576]	; (80040d8 <UART_SetConfig+0x2c8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d126      	bne.n	8003ee8 <UART_SetConfig+0xd8>
 8003e9a:	4b90      	ldr	r3, [pc, #576]	; (80040dc <UART_SetConfig+0x2cc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d81b      	bhi.n	8003ee0 <UART_SetConfig+0xd0>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0xa0>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ed1 	.word	0x08003ed1
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed9 	.word	0x08003ed9
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e116      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e112      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e10e      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ed8:	2308      	movs	r3, #8
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e10a      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e106      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <UART_SetConfig+0x2d0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d138      	bne.n	8003f64 <UART_SetConfig+0x154>
 8003ef2:	4b7a      	ldr	r3, [pc, #488]	; (80040dc <UART_SetConfig+0x2cc>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d82d      	bhi.n	8003f5c <UART_SetConfig+0x14c>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0xf8>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f5d 	.word	0x08003f5d
 8003f18:	08003f4d 	.word	0x08003f4d
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f5d 	.word	0x08003f5d
 8003f24:	08003f5d 	.word	0x08003f5d
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	08003f5d 	.word	0x08003f5d
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e0d8      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f44:	2302      	movs	r3, #2
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e0d4      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e0d0      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e0cc      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f62:	e0c8      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5e      	ldr	r2, [pc, #376]	; (80040e4 <UART_SetConfig+0x2d4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d125      	bne.n	8003fba <UART_SetConfig+0x1aa>
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	; (80040dc <UART_SetConfig+0x2cc>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f78:	2b30      	cmp	r3, #48	; 0x30
 8003f7a:	d016      	beq.n	8003faa <UART_SetConfig+0x19a>
 8003f7c:	2b30      	cmp	r3, #48	; 0x30
 8003f7e:	d818      	bhi.n	8003fb2 <UART_SetConfig+0x1a2>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d00a      	beq.n	8003f9a <UART_SetConfig+0x18a>
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d814      	bhi.n	8003fb2 <UART_SetConfig+0x1a2>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <UART_SetConfig+0x182>
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d008      	beq.n	8003fa2 <UART_SetConfig+0x192>
 8003f90:	e00f      	b.n	8003fb2 <UART_SetConfig+0x1a2>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f98:	e0ad      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa0:	e0a9      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa8:	e0a5      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003faa:	2308      	movs	r3, #8
 8003fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb0:	e0a1      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb8:	e09d      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4a      	ldr	r2, [pc, #296]	; (80040e8 <UART_SetConfig+0x2d8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d125      	bne.n	8004010 <UART_SetConfig+0x200>
 8003fc4:	4b45      	ldr	r3, [pc, #276]	; (80040dc <UART_SetConfig+0x2cc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fce:	2bc0      	cmp	r3, #192	; 0xc0
 8003fd0:	d016      	beq.n	8004000 <UART_SetConfig+0x1f0>
 8003fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fd4:	d818      	bhi.n	8004008 <UART_SetConfig+0x1f8>
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d00a      	beq.n	8003ff0 <UART_SetConfig+0x1e0>
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d814      	bhi.n	8004008 <UART_SetConfig+0x1f8>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <UART_SetConfig+0x1d8>
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d008      	beq.n	8003ff8 <UART_SetConfig+0x1e8>
 8003fe6:	e00f      	b.n	8004008 <UART_SetConfig+0x1f8>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e082      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e07e      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e07a      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004000:	2308      	movs	r3, #8
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e076      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e072      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a35      	ldr	r2, [pc, #212]	; (80040ec <UART_SetConfig+0x2dc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d12a      	bne.n	8004070 <UART_SetConfig+0x260>
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <UART_SetConfig+0x2cc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004028:	d01a      	beq.n	8004060 <UART_SetConfig+0x250>
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d81b      	bhi.n	8004068 <UART_SetConfig+0x258>
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d00c      	beq.n	8004050 <UART_SetConfig+0x240>
 8004036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403a:	d815      	bhi.n	8004068 <UART_SetConfig+0x258>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <UART_SetConfig+0x238>
 8004040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004044:	d008      	beq.n	8004058 <UART_SetConfig+0x248>
 8004046:	e00f      	b.n	8004068 <UART_SetConfig+0x258>
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e052      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e04e      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e04a      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e046      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e042      	b.n	80040f6 <UART_SetConfig+0x2e6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <UART_SetConfig+0x2c4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d13a      	bne.n	80040f0 <UART_SetConfig+0x2e0>
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <UART_SetConfig+0x2cc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004088:	d01a      	beq.n	80040c0 <UART_SetConfig+0x2b0>
 800408a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800408e:	d81b      	bhi.n	80040c8 <UART_SetConfig+0x2b8>
 8004090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004094:	d00c      	beq.n	80040b0 <UART_SetConfig+0x2a0>
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409a:	d815      	bhi.n	80040c8 <UART_SetConfig+0x2b8>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <UART_SetConfig+0x298>
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d008      	beq.n	80040b8 <UART_SetConfig+0x2a8>
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x2b8>
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ae:	e022      	b.n	80040f6 <UART_SetConfig+0x2e6>
 80040b0:	2302      	movs	r3, #2
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b6:	e01e      	b.n	80040f6 <UART_SetConfig+0x2e6>
 80040b8:	2304      	movs	r3, #4
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040be:	e01a      	b.n	80040f6 <UART_SetConfig+0x2e6>
 80040c0:	2308      	movs	r3, #8
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c6:	e016      	b.n	80040f6 <UART_SetConfig+0x2e6>
 80040c8:	2310      	movs	r3, #16
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ce:	e012      	b.n	80040f6 <UART_SetConfig+0x2e6>
 80040d0:	efff69f3 	.word	0xefff69f3
 80040d4:	40008000 	.word	0x40008000
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40004400 	.word	0x40004400
 80040e4:	40004800 	.word	0x40004800
 80040e8:	40004c00 	.word	0x40004c00
 80040ec:	40005000 	.word	0x40005000
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a9f      	ldr	r2, [pc, #636]	; (8004378 <UART_SetConfig+0x568>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d17a      	bne.n	80041f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004104:	2b08      	cmp	r3, #8
 8004106:	d824      	bhi.n	8004152 <UART_SetConfig+0x342>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x300>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004135 	.word	0x08004135
 8004114:	08004153 	.word	0x08004153
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004153 	.word	0x08004153
 8004120:	08004143 	.word	0x08004143
 8004124:	08004153 	.word	0x08004153
 8004128:	08004153 	.word	0x08004153
 800412c:	08004153 	.word	0x08004153
 8004130:	0800414b 	.word	0x0800414b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe fd50 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8004138:	61f8      	str	r0, [r7, #28]
        break;
 800413a:	e010      	b.n	800415e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800413c:	4b8f      	ldr	r3, [pc, #572]	; (800437c <UART_SetConfig+0x56c>)
 800413e:	61fb      	str	r3, [r7, #28]
        break;
 8004140:	e00d      	b.n	800415e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004142:	f7fe fcb1 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8004146:	61f8      	str	r0, [r7, #28]
        break;
 8004148:	e009      	b.n	800415e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414e:	61fb      	str	r3, [r7, #28]
        break;
 8004150:	e005      	b.n	800415e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800415c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80fb 	beq.w	800435c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	429a      	cmp	r2, r3
 8004174:	d305      	bcc.n	8004182 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	429a      	cmp	r2, r3
 8004180:	d903      	bls.n	800418a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004188:	e0e8      	b.n	800435c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2200      	movs	r2, #0
 800418e:	461c      	mov	r4, r3
 8004190:	4615      	mov	r5, r2
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	022b      	lsls	r3, r5, #8
 800419c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80041a0:	0222      	lsls	r2, r4, #8
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	6849      	ldr	r1, [r1, #4]
 80041a6:	0849      	lsrs	r1, r1, #1
 80041a8:	2000      	movs	r0, #0
 80041aa:	4688      	mov	r8, r1
 80041ac:	4681      	mov	r9, r0
 80041ae:	eb12 0a08 	adds.w	sl, r2, r8
 80041b2:	eb43 0b09 	adc.w	fp, r3, r9
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c4:	4650      	mov	r0, sl
 80041c6:	4659      	mov	r1, fp
 80041c8:	f7fb fffe 	bl	80001c8 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041da:	d308      	bcc.n	80041ee <UART_SetConfig+0x3de>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e2:	d204      	bcs.n	80041ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e0b6      	b.n	800435c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041f4:	e0b2      	b.n	800435c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d15e      	bne.n	80042be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004204:	2b08      	cmp	r3, #8
 8004206:	d828      	bhi.n	800425a <UART_SetConfig+0x44a>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0x400>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004235 	.word	0x08004235
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800425b 	.word	0x0800425b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800425b 	.word	0x0800425b
 8004228:	0800425b 	.word	0x0800425b
 800422c:	0800425b 	.word	0x0800425b
 8004230:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fe fcd0 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8004238:	61f8      	str	r0, [r7, #28]
        break;
 800423a:	e014      	b.n	8004266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7fe fce2 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 8004240:	61f8      	str	r0, [r7, #28]
        break;
 8004242:	e010      	b.n	8004266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b4d      	ldr	r3, [pc, #308]	; (800437c <UART_SetConfig+0x56c>)
 8004246:	61fb      	str	r3, [r7, #28]
        break;
 8004248:	e00d      	b.n	8004266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fe fc2d 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800424e:	61f8      	str	r0, [r7, #28]
        break;
 8004250:	e009      	b.n	8004266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	61fb      	str	r3, [r7, #28]
        break;
 8004258:	e005      	b.n	8004266 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d077      	beq.n	800435c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005a      	lsls	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	441a      	add	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d916      	bls.n	80042b6 <UART_SetConfig+0x4a6>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428e:	d212      	bcs.n	80042b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f023 030f 	bic.w	r3, r3, #15
 8004298:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	8afb      	ldrh	r3, [r7, #22]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	8afa      	ldrh	r2, [r7, #22]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e052      	b.n	800435c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042bc:	e04e      	b.n	800435c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d827      	bhi.n	8004316 <UART_SetConfig+0x506>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x4bc>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004317 	.word	0x08004317
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004317 	.word	0x08004317
 80042e4:	08004317 	.word	0x08004317
 80042e8:	08004317 	.word	0x08004317
 80042ec:	0800430f 	.word	0x0800430f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fc72 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 80042f4:	61f8      	str	r0, [r7, #28]
        break;
 80042f6:	e014      	b.n	8004322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7fe fc84 	bl	8002c04 <HAL_RCC_GetPCLK2Freq>
 80042fc:	61f8      	str	r0, [r7, #28]
        break;
 80042fe:	e010      	b.n	8004322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <UART_SetConfig+0x56c>)
 8004302:	61fb      	str	r3, [r7, #28]
        break;
 8004304:	e00d      	b.n	8004322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fe fbcf 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800430a:	61f8      	str	r0, [r7, #28]
        break;
 800430c:	e009      	b.n	8004322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	61fb      	str	r3, [r7, #28]
        break;
 8004314:	e005      	b.n	8004322 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004320:	bf00      	nop
    }

    if (pclk != 0U)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d019      	beq.n	800435c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	085a      	lsrs	r2, r3, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b0f      	cmp	r3, #15
 8004340:	d909      	bls.n	8004356 <UART_SetConfig+0x546>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d205      	bcs.n	8004356 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e002      	b.n	800435c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	; 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	40008000 	.word	0x40008000
 800437c:	00f42400 	.word	0x00f42400

08004380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01a      	beq.n	8004496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d10a      	bne.n	8004496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d4:	f7fc ff5e 	bl	8001394 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10e      	bne.n	8004506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f82d 	bl	8004556 <UART_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e023      	b.n	800454e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d10e      	bne.n	8004532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f817 	bl	8004556 <UART_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00d      	b.n	800454e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b09c      	sub	sp, #112	; 0x70
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004566:	e0a5      	b.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	f000 80a1 	beq.w	80046b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fc ff0f 	bl	8001394 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <UART_WaitOnFlagUntilTimeout+0x32>
 8004582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004584:	2b00      	cmp	r3, #0
 8004586:	d13e      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800459c:	667b      	str	r3, [r7, #100]	; 0x64
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045da:	64ba      	str	r2, [r7, #72]	; 0x48
 80045dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e067      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d04f      	beq.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004622:	d147      	bne.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
 800464e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e6      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	613b      	str	r3, [r7, #16]
   return(result);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004680:	623a      	str	r2, [r7, #32]
 8004682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	69f9      	ldr	r1, [r7, #28]
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	61bb      	str	r3, [r7, #24]
   return(result);
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e010      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4013      	ands	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f43f af4a 	beq.w	8004568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3770      	adds	r7, #112	; 0x70
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4d0d      	ldr	r5, [pc, #52]	; (8004718 <__libc_init_array+0x38>)
 80046e4:	4c0d      	ldr	r4, [pc, #52]	; (800471c <__libc_init_array+0x3c>)
 80046e6:	1b64      	subs	r4, r4, r5
 80046e8:	10a4      	asrs	r4, r4, #2
 80046ea:	2600      	movs	r6, #0
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	4d0b      	ldr	r5, [pc, #44]	; (8004720 <__libc_init_array+0x40>)
 80046f2:	4c0c      	ldr	r4, [pc, #48]	; (8004724 <__libc_init_array+0x44>)
 80046f4:	f000 f820 	bl	8004738 <_init>
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	2600      	movs	r6, #0
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	080047a0 	.word	0x080047a0
 800471c:	080047a0 	.word	0x080047a0
 8004720:	080047a0 	.word	0x080047a0
 8004724:	080047a4 	.word	0x080047a4

08004728 <memset>:
 8004728:	4402      	add	r2, r0
 800472a:	4603      	mov	r3, r0
 800472c:	4293      	cmp	r3, r2
 800472e:	d100      	bne.n	8004732 <memset+0xa>
 8004730:	4770      	bx	lr
 8004732:	f803 1b01 	strb.w	r1, [r3], #1
 8004736:	e7f9      	b.n	800472c <memset+0x4>

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
