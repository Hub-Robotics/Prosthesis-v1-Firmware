
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002d28  08002d28  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d28  08002d28  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000004  08002d34  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08002d34  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088fa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c28  00000000  00000000  0002892e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b6  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d9e  00000000  00000000  0004cb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b316f  00000000  00000000  000558c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108a33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  00108a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cc8 	.word	0x08002cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002cc8 	.word	0x08002cc8

080001c8 <delay_us>:
#include "EPOS4.h"

// Can we lose this??
static void delay_us(uint32_t us)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80001d0:	2300      	movs	r3, #0
 80001d2:	60bb      	str	r3, [r7, #8]
 80001d4:	e00c      	b.n	80001f0 <delay_us+0x28>
    {
    	for(i=0;i<11;i++)
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	e003      	b.n	80001e4 <delay_us+0x1c>
         __NOP();  // Timed at 48 MHz clock
 80001dc:	bf00      	nop
    	for(i=0;i<11;i++)
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	3301      	adds	r3, #1
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2b0a      	cmp	r3, #10
 80001e8:	d9f8      	bls.n	80001dc <delay_us+0x14>
    for(k=0;k<us;k++)
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d3ee      	bcc.n	80001d6 <delay_us+0xe>
    }
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr

08000206 <EPOS4_data_framer>:

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value)
{
 8000206:	b480      	push	{r7}
 8000208:	b085      	sub	sp, #20
 800020a:	af00      	add	r7, sp, #0
 800020c:	60f8      	str	r0, [r7, #12]
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	460b      	mov	r3, r1
 8000212:	817b      	strh	r3, [r7, #10]
 8000214:	4613      	mov	r3, r2
 8000216:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2222      	movs	r2, #34	; 0x22
 800021c:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	897a      	ldrh	r2, [r7, #10]
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 8000228:	897b      	ldrh	r3, [r7, #10]
 800022a:	0a1b      	lsrs	r3, r3, #8
 800022c:	b29a      	uxth	r2, r3
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3302      	adds	r3, #2
 8000232:	b2d2      	uxtb	r2, r2
 8000234:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3303      	adds	r3, #3
 800023a:	7a7a      	ldrb	r2, [r7, #9]
 800023c:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3304      	adds	r3, #4
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	0a1a      	lsrs	r2, r3, #8
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3305      	adds	r3, #5
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	0c1a      	lsrs	r2, r3, #16
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3306      	adds	r3, #6
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	0e1a      	lsrs	r2, r3, #24
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	3307      	adds	r3, #7
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <EPOS4_set_operation_mode>:

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000284:	f107 0008 	add.w	r0, r7, #8
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2200      	movs	r2, #0
 800028c:	f246 0160 	movw	r1, #24672	; 0x6060
 8000290:	f7ff ffb9 	bl	8000206 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000294:	f107 0208 	add.w	r2, r7, #8
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	2108      	movs	r1, #8
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f8ac 	bl	80013fa <CAN_transmit>
    delay_us(10000);
 80002a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80002a6:	f7ff ff8f 	bl	80001c8 <delay_us>
//    HAL_Delay(10);
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <EPOS4_enable>:

void EPOS4_enable(uint16_t CAN_ID)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	4603      	mov	r3, r0
 80002ba:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
    EPOS4_data_framer(data, 0x6040, 0x00, 0x06);
 80002bc:	f107 0008 	add.w	r0, r7, #8
 80002c0:	2306      	movs	r3, #6
 80002c2:	2200      	movs	r2, #0
 80002c4:	f246 0140 	movw	r1, #24640	; 0x6040
 80002c8:	f7ff ff9d 	bl	8000206 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	2108      	movs	r1, #8
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 f890 	bl	80013fa <CAN_transmit>
    delay_us(10000);
 80002da:	f242 7010 	movw	r0, #10000	; 0x2710
 80002de:	f7ff ff73 	bl	80001c8 <delay_us>
//    HAL_Delay(10);

    EPOS4_enable2(CAN_ID);
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f804 	bl	80002f2 <EPOS4_enable2>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <EPOS4_enable2>:


void EPOS4_enable2(uint16_t CAN_ID)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b084      	sub	sp, #16
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	4603      	mov	r3, r0
 80002fa:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);
 80002fc:	f107 0008 	add.w	r0, r7, #8
 8000300:	230f      	movs	r3, #15
 8000302:	2200      	movs	r2, #0
 8000304:	f246 0140 	movw	r1, #24640	; 0x6040
 8000308:	f7ff ff7d 	bl	8000206 <EPOS4_data_framer>
    CAN_transmit(CAN_ID, 8, data);
 800030c:	f107 0208 	add.w	r2, r7, #8
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	2108      	movs	r1, #8
 8000314:	4618      	mov	r0, r3
 8000316:	f001 f870 	bl	80013fa <CAN_transmit>
    delay_us(10000);
 800031a:	f242 7010 	movw	r0, #10000	; 0x2710
 800031e:	f7ff ff53 	bl	80001c8 <delay_us>
//    HAL_Delay(10);
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
 8000332:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	691a      	ldr	r2, [r3, #16]
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	4013      	ands	r3, r2
 800033c:	683a      	ldr	r2, [r7, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d101      	bne.n	8000346 <LL_GPIO_IsInputPinSet+0x1c>
 8000342:	2301      	movs	r3, #1
 8000344:	e000      	b.n	8000348 <LL_GPIO_IsInputPinSet+0x1e>
 8000346:	2300      	movs	r3, #0
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	683a      	ldr	r2, [r7, #0]
 8000362:	619a      	str	r2, [r3, #24]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	683a      	ldr	r2, [r7, #0]
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <AS5145B_ReadPosition_Deg>:
 * APPLICATION FUNCTIONS
 ******************************************************************************/

// Get angular position in degrees
uint16_t AS5145B_ReadPosition_Deg ( Enc_t *dev )
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	// Declare variables
	uint8_t  DataPrecision = 12;	// 12 bit device
 8000394:	230c      	movs	r3, #12
 8000396:	74fb      	strb	r3, [r7, #19]
	uint16_t pos           = 0;		// Angular position
 8000398:	2300      	movs	r3, #0
 800039a:	83fb      	strh	r3, [r7, #30]
	uint8_t  Flags[6];				// ??

	// Enable CSn pin
	LL_GPIO_ResetOutputPin( dev->CSn_GPIOx, dev->CSn_Pin );
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	899b      	ldrh	r3, [r3, #12]
 80003a4:	4619      	mov	r1, r3
 80003a6:	4610      	mov	r0, r2
 80003a8:	f7ff ffe2 	bl	8000370 <LL_GPIO_ResetOutputPin>
//	delay_us(1);

	// Get angular position in ADC (sensor feeds out position MSB first)
	for ( int i = DataPrecision - 1; i >= 0; i-- )
 80003ac:	7cfb      	ldrb	r3, [r7, #19]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e029      	b.n	8000408 <AS5145B_ReadPosition_Deg+0x7c>
	{
		LL_GPIO_ResetOutputPin( dev->CLK_GPIOx, dev->CLK_Pin );						// Set clock low
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	89db      	ldrh	r3, [r3, #14]
 80003bc:	4619      	mov	r1, r3
 80003be:	4610      	mov	r0, r2
 80003c0:	f7ff ffd6 	bl	8000370 <LL_GPIO_ResetOutputPin>
//		delay_us(1);
		LL_GPIO_SetOutputPin( dev->CLK_GPIOx, dev->CLK_Pin );						// Set clock high
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685a      	ldr	r2, [r3, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	89db      	ldrh	r3, [r3, #14]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4610      	mov	r0, r2
 80003d0:	f7ff ffc0 	bl	8000354 <LL_GPIO_SetOutputPin>
//		delay_us(1);
		uint8_t temp  = LL_GPIO_IsInputPinSet( dev->DO_GPIOx, dev->DO_Pin ) & 0x01;	// Read data bit
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	8a1b      	ldrh	r3, [r3, #16]
 80003dc:	4619      	mov	r1, r3
 80003de:	4610      	mov	r0, r2
 80003e0:	f7ff ffa3 	bl	800032a <LL_GPIO_IsInputPinSet>
 80003e4:	4603      	mov	r3, r0
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	747b      	strb	r3, [r7, #17]
		pos          |= (temp) << i;												// Assign and shift bit
 80003ee:	7c7a      	ldrb	r2, [r7, #17]
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	b21a      	sxth	r2, r3
 80003f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	b21b      	sxth	r3, r3
 8000400:	83fb      	strh	r3, [r7, #30]
	for ( int i = DataPrecision - 1; i >= 0; i-- )
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	3b01      	subs	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	2b00      	cmp	r3, #0
 800040c:	dad2      	bge.n	80003b4 <AS5145B_ReadPosition_Deg+0x28>
	}

	// Read/clear status bits
	for ( int i = 0; i < 6; i++ )
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e033      	b.n	800047c <AS5145B_ReadPosition_Deg+0xf0>
	{
		LL_GPIO_ResetOutputPin( dev->CLK_GPIOx, dev->CLK_Pin );						// Set clock low
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	685a      	ldr	r2, [r3, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	89db      	ldrh	r3, [r3, #14]
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f7ff ffa6 	bl	8000370 <LL_GPIO_ResetOutputPin>
//		delay_us(1);
		LL_GPIO_SetOutputPin( dev->CLK_GPIOx, dev->CLK_Pin );						// Set clock high
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	89db      	ldrh	r3, [r3, #14]
 800042c:	4619      	mov	r1, r3
 800042e:	4610      	mov	r0, r2
 8000430:	f7ff ff90 	bl	8000354 <LL_GPIO_SetOutputPin>
//		delay_us(1);
		uint8_t temp  = LL_GPIO_IsInputPinSet( dev->DO_GPIOx, dev->DO_Pin ) & 0x01;	// Read data bit
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	8a1b      	ldrh	r3, [r3, #16]
 800043c:	4619      	mov	r1, r3
 800043e:	4610      	mov	r0, r2
 8000440:	f7ff ff73 	bl	800032a <LL_GPIO_IsInputPinSet>
 8000444:	4603      	mov	r3, r0
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	74bb      	strb	r3, [r7, #18]
		Flags[i]     |= (temp) << i;												// Assign and shift bit
 800044e:	f107 0208 	add.w	r2, r7, #8
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b25a      	sxtb	r2, r3
 800045a:	7cb9      	ldrb	r1, [r7, #18]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	b25b      	sxtb	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b25b      	sxtb	r3, r3
 8000468:	b2d9      	uxtb	r1, r3
 800046a:	f107 0208 	add.w	r2, r7, #8
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	4413      	add	r3, r2
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	for ( int i = 0; i < 6; i++ )
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	2b05      	cmp	r3, #5
 8000480:	ddc8      	ble.n	8000414 <AS5145B_ReadPosition_Deg+0x88>
	}

	// Disable CSn pin
	LL_GPIO_SetOutputPin( dev->CSn_GPIOx, dev->CSn_Pin );
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	899b      	ldrh	r3, [r3, #12]
 800048a:	4619      	mov	r1, r3
 800048c:	4610      	mov	r0, r2
 800048e:	f7ff ff61 	bl	8000354 <LL_GPIO_SetOutputPin>

	// Convert from ADC to degrees
	pos *= ADC2DEG;
 8000492:	2300      	movs	r3, #0
 8000494:	83fb      	strh	r3, [r7, #30]

	// Return
	return pos;
 8000496:	8bfb      	ldrh	r3, [r7, #30]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ac:	4907      	ldr	r1, [pc, #28]	; (80004cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <LL_SYSCFG_SetEXTISource+0x68>)
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	3302      	adds	r3, #2
 80004e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	43db      	mvns	r3, r3
 80004ec:	ea02 0103 	and.w	r1, r2, r3
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	fa93 f3a3 	rbit	r3, r3
 80004fc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d101      	bne.n	800050c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000508:	2320      	movs	r3, #32
 800050a:	e003      	b.n	8000514 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	fab3 f383 	clz	r3, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	fa03 f202 	lsl.w	r2, r3, r2
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <LL_SYSCFG_SetEXTISource+0x68>)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	430a      	orrs	r2, r1
 8000524:	3302      	adds	r3, #2
 8000526:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800052a:	bf00      	nop
 800052c:	371c      	adds	r7, #28
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40010000 	.word	0x40010000

0800053c <LL_GPIO_SetPinMode>:
{
 800053c:	b480      	push	{r7}
 800053e:	b08b      	sub	sp, #44	; 0x2c
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	fa93 f3a3 	rbit	r3, r3
 8000556:	613b      	str	r3, [r7, #16]
  return result;
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000562:	2320      	movs	r3, #32
 8000564:	e003      	b.n	800056e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	fab3 f383 	clz	r3, r3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057e:	6a3b      	ldr	r3, [r7, #32]
 8000580:	fa93 f3a3 	rbit	r3, r3
 8000584:	61fb      	str	r3, [r7, #28]
  return result;
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d101      	bne.n	8000594 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000590:	2320      	movs	r3, #32
 8000592:	e003      	b.n	800059c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	fab3 f383 	clz	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	431a      	orrs	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	372c      	adds	r7, #44	; 0x2c
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_GPIO_SetPinPull>:
{
 80005b6:	b480      	push	{r7}
 80005b8:	b08b      	sub	sp, #44	; 0x2c
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	fa93 f3a3 	rbit	r3, r3
 80005d0:	613b      	str	r3, [r7, #16]
  return result;
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80005dc:	2320      	movs	r3, #32
 80005de:	e003      	b.n	80005e8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fab3 f383 	clz	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	2103      	movs	r1, #3
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	401a      	ands	r2, r3
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	fa93 f3a3 	rbit	r3, r3
 80005fe:	61fb      	str	r3, [r7, #28]
  return result;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800060a:	2320      	movs	r3, #32
 800060c:	e003      	b.n	8000616 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	fab3 f383 	clz	r3, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	431a      	orrs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	60da      	str	r2, [r3, #12]
}
 8000624:	bf00      	nop
 8000626:	372c      	adds	r7, #44	; 0x2c
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <LL_GPIO_ResetOutputPin>:
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800066e:	2004      	movs	r0, #4
 8000670:	f7ff ff16 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000674:	2080      	movs	r0, #128	; 0x80
 8000676:	f7ff ff13 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff10 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff ff0d 	bl	80004a0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, Oscope_Pin|SPI2_CS_Pin|Enc_CLK_Pin);
 8000686:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800068a:	483f      	ldr	r0, [pc, #252]	; (8000788 <MX_GPIO_Init+0x13c>)
 800068c:	f7ff ffd0 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Enc_CSn_GPIO_Port, Enc_CSn_Pin);
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	483e      	ldr	r0, [pc, #248]	; (800078c <MX_GPIO_Init+0x140>)
 8000694:	f7ff ffcc 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f7ff ffc6 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80006a4:	493a      	ldr	r1, [pc, #232]	; (8000790 <MX_GPIO_Init+0x144>)
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff12 	bl	80004d0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 faa9 	bl	8001c24 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	482c      	ldr	r0, [pc, #176]	; (800078c <MX_GPIO_Init+0x140>)
 80006da:	f7ff ff6c 	bl	80005b6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	4829      	ldr	r0, [pc, #164]	; (800078c <MX_GPIO_Init+0x140>)
 80006e6:	f7ff ff29 	bl	800053c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Oscope_Pin|Enc_CLK_Pin;
 80006ea:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80006ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f0:	2301      	movs	r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4820      	ldr	r0, [pc, #128]	; (8000788 <MX_GPIO_Init+0x13c>)
 8000706:	f001 fccf 	bl	80020a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000710:	2301      	movs	r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4818      	ldr	r0, [pc, #96]	; (8000788 <MX_GPIO_Init+0x13c>)
 8000726:	f001 fcbf 	bl	80020a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Enc_CSn_Pin;
 800072a:	2340      	movs	r3, #64	; 0x40
 800072c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800072e:	2301      	movs	r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Enc_CSn_GPIO_Port, &GPIO_InitStruct);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0x140>)
 8000744:	f001 fcb0 	bl	80020a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Enc_DO_Pin;
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Enc_DO_GPIO_Port, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_GPIO_Init+0x140>)
 800075a:	f001 fca5 	bl	80020a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000764:	2301      	movs	r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 fc94 	bl	80020a8 <LL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	48000400 	.word	0x48000400
 800078c:	48000800 	.word	0x48000800
 8000790:	00f00003 	.word	0x00f00003

08000794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_GetPriorityGrouping+0x18>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 0307 	and.w	r3, r3, #7
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	db0b      	blt.n	80007da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 021f 	and.w	r2, r3, #31
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <__NVIC_EnableIRQ+0x38>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	60da      	str	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60da      	str	r2, [r3, #12]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	431a      	orrs	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60da      	str	r2, [r3, #12]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	431a      	orrs	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	f023 0203 	bic.w	r2, r3, #3
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	621a      	str	r2, [r3, #32]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60da      	str	r2, [r3, #12]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f023 0201 	bic.w	r2, r3, #1
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60da      	str	r2, [r3, #12]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <LL_RCC_SetLPTIMClockSource+0x30>)
 80009b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	43db      	mvns	r3, r3
 80009c2:	401a      	ands	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	041b      	lsls	r3, r3, #16
 80009c8:	4904      	ldr	r1, [pc, #16]	; (80009dc <LL_RCC_SetLPTIMClockSource+0x30>)
 80009ca:	4313      	orrs	r3, r2
 80009cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000

080009e0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <LL_APB1_GRP2_EnableClock+0x2c>)
 80009ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <LL_APB1_GRP2_EnableClock+0x2c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <LL_APB1_GRP2_EnableClock+0x2c>)
 80009f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4013      	ands	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8000a14:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8000a18:	f7ff ffc8 	bl	80009ac <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f7ff ffdf 	bl	80009e0 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a22:	f7ff feb7 	bl	8000794 <__NVIC_GetPriorityGrouping>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff07 	bl	8000840 <NVIC_EncodePriority>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4619      	mov	r1, r3
 8000a36:	2042      	movs	r0, #66	; 0x42
 8000a38:	f7ff fed8 	bl	80007ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8000a3c:	2042      	movs	r0, #66	; 0x42
 8000a3e:	f7ff feb7 	bl	80007b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000a42:	2100      	movs	r1, #0
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a46:	f7ff ff9d 	bl	8000984 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a4e:	f7ff ff63 	bl	8000918 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a56:	f7ff ff4c 	bl	80008f2 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a5e:	f7ff ff22 	bl	80008a6 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a66:	f7ff ff31 	bl	80008cc <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a6c:	f7ff ff7a 	bl	8000964 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 8000a70:	2100      	movs	r1, #0
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <MX_LPTIM2_Init+0x6c>)
 8000a74:	f7ff ff63 	bl	800093e <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40009400 	.word	0x40009400

08000a80 <__NVIC_SetPriorityGrouping>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <LL_LPTIM_Enable>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_LPTIM_StartCounter>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	f023 0206 	bic.w	r2, r3, #6
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	611a      	str	r2, [r3, #16]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_LPTIM_SetAutoReload>:
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f043 0202 	orr.w	r2, r3, #2
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_RCC_LSE_Enable>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <LL_RCC_LSE_Enable+0x20>)
 8000b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <LL_RCC_LSE_Enable+0x20>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <LL_RCC_LSE_SetDriveCapability>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b86:	f023 0218 	bic.w	r2, r3, #24
 8000b8a:	4905      	ldr	r1, [pc, #20]	; (8000ba0 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <LL_RCC_LSE_IsReady>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <LL_RCC_LSE_IsReady+0x24>)
 8000baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d101      	bne.n	8000bba <LL_RCC_LSE_IsReady+0x16>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <LL_RCC_LSE_IsReady+0x18>
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <LL_RCC_MSI_Enable>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <LL_RCC_MSI_Enable+0x1c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <LL_RCC_MSI_Enable+0x1c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <LL_RCC_MSI_IsReady>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <LL_RCC_MSI_IsReady+0x20>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d101      	bne.n	8000c00 <LL_RCC_MSI_IsReady+0x14>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <LL_RCC_MSI_IsReady+0x16>
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000

08000c10 <LL_RCC_MSI_EnablePLLMode>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <LL_RCC_MSI_EnableRangeSelection>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <LL_RCC_MSI_SetRange>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_RCC_MSI_SetRange+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_RCC_MSI_SetRange+0x24>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000

08000c78 <LL_RCC_MSI_SetCalibTrimming>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	604b      	str	r3, [r1, #4]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_RCC_SetSysClkSource>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LL_RCC_SetSysClkSource+0x24>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f023 0203 	bic.w	r2, r3, #3
 8000cb4:	4904      	ldr	r1, [pc, #16]	; (8000cc8 <LL_RCC_SetSysClkSource+0x24>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_GetSysClkSource>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <LL_RCC_GetSysClkSource+0x18>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_RCC_SetAHBPrescaler>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000

08000d10 <LL_RCC_SetAPB1Prescaler>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_RCC_SetAPB2Prescaler>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d48:	4904      	ldr	r1, [pc, #16]	; (8000d5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <LL_RCC_PLL_Enable+0x1c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <LL_RCC_PLL_Enable+0x1c>)
 8000d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <LL_RCC_PLL_IsReady+0x24>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d90:	d101      	bne.n	8000d96 <LL_RCC_PLL_IsReady+0x16>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <LL_RCC_PLL_IsReady+0x18>
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	68f9      	ldr	r1, [r7, #12]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	4311      	orrs	r1, r2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	0212      	lsls	r2, r2, #8
 8000dc8:	4311      	orrs	r1, r2
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	4904      	ldr	r1, [pc, #16]	; (8000de0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	f9ff808c 	.word	0xf9ff808c

08000de8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <LL_APB1_GRP1_EnableClock>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000

08000e38 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000

08000e68 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LL_FLASH_SetLatency+0x24>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f023 0207 	bic.w	r2, r3, #7
 8000e78:	4904      	ldr	r1, [pc, #16]	; (8000e8c <LL_FLASH_SetLatency+0x24>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40022000 	.word	0x40022000

08000e90 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <LL_FLASH_GetLatency+0x18>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0307 	and.w	r3, r3, #7
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000ebc:	4904      	ldr	r1, [pc, #16]	; (8000ed0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
	// Defines
	#define EPOS4_Mode		0x0A	// Constant torque mode
	#define LPTIM2_Period	0x3F	// Period for LPTIM2

	// Declare variables
	uint16_t CAN_ID = 0x601;	// CAN ID for EPOS4
 8000f1a:	f240 6301 	movw	r3, #1537	; 0x601
 8000f1e:	837b      	strh	r3, [r7, #26]

	// Handles
	Enc_t enc;

	// Assign magnetic encoder handle
	enc.CSn_GPIOx = Enc_CSn_GPIO_Port;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <main+0xb4>)
 8000f22:	607b      	str	r3, [r7, #4]
	enc.CSn_Pin   = Enc_CSn_Pin;
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	823b      	strh	r3, [r7, #16]
	enc.CLK_GPIOx = Enc_CLK_GPIO_Port;
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <main+0xb8>)
 8000f2a:	60bb      	str	r3, [r7, #8]
	enc.CLK_Pin   = Enc_CLK_Pin;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	827b      	strh	r3, [r7, #18]
	enc.DO_GPIOx  = Enc_DO_GPIO_Port;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <main+0xb4>)
 8000f32:	60fb      	str	r3, [r7, #12]
	enc.DO_Pin    = Enc_DO_Pin;
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff7d 	bl	8000e38 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f42:	f7ff ff61 	bl	8000e08 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f7ff fd9a 	bl	8000a80 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f844 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f7ff fb7c 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f54:	f000 fcb8 	bl	80018c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f58:	f000 fb28 	bl	80015ac <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8000f5c:	f7ff fd58 	bl	8000a10 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8000f60:	f000 fb7a 	bl	8001658 <MX_SPI2_Init>
/******************************************************************************
* USER INITIALIZATIONS
******************************************************************************/

	// Start LPTIM2 interrupt
	LL_LPTIM_Enable(LPTIM2);												// Initially enable timer
 8000f64:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <main+0xbc>)
 8000f66:	f7ff fdaf 	bl	8000ac8 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);											// Enable timer interrupt mode
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <main+0xbc>)
 8000f6c:	f7ff fde2 	bl	8000b34 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload( LPTIM2, LPTIM2_Period );						// Set auto reload register with period
 8000f70:	213f      	movs	r1, #63	; 0x3f
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <main+0xbc>)
 8000f74:	f7ff fdcb 	bl	8000b0e <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter( LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);		// Start counter
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <main+0xbc>)
 8000f7c:	f7ff fdb4 	bl	8000ae8 <LL_LPTIM_StartCounter>

	// Enable peripherals
	LL_SPI_Enable(SPI2);
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <main+0xc0>)
 8000f82:	f7ff ffb7 	bl	8000ef4 <LL_SPI_Enable>

	// Configure devices
	CAN_configure();									// Configure MCP25625
 8000f86:	f000 fa7f 	bl	8001488 <CAN_configure>
	EPOS4_enable(CAN_ID);								// Enable EPOS4
 8000f8a:	8b7b      	ldrh	r3, [r7, #26]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f990 	bl	80002b2 <EPOS4_enable>
	EPOS4_set_operation_mode( CAN_ID, EPOS4_Mode );		// Set EPOS4 to torque mode
 8000f92:	8b7b      	ldrh	r3, [r7, #26]
 8000f94:	210a      	movs	r1, #10
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f96e 	bl	8000278 <EPOS4_set_operation_mode>
	EPOS4_enable(CAN_ID);								// Why is this enabled again?? (it is needed at the moment)
 8000f9c:	8b7b      	ldrh	r3, [r7, #26]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f987 	bl	80002b2 <EPOS4_enable>

	// Remove spikes from beginning (can we do better??)
	for ( int jj = 1; jj < 1000; ++jj );
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	e002      	b.n	8000fb0 <main+0x9c>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb6:	dbf8      	blt.n	8000faa <main+0x96>
//	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);

	// Read magnetic encoder in degrees
	while (1)
	{
		uint16_t pos = AS5145B_ReadPosition_Deg(&enc);	// Read angular position in degrees
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f9e6 	bl	800038c <AS5145B_ReadPosition_Deg>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	833b      	strh	r3, [r7, #24]
	{
 8000fc4:	e7f8      	b.n	8000fb8 <main+0xa4>
 8000fc6:	bf00      	nop
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	40009400 	.word	0x40009400
 8000fd4:	40003800 	.word	0x40003800

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f7ff ff43 	bl	8000e68 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ff54 	bl	8000e90 <LL_FLASH_GetLatency>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d1fa      	bne.n	8000fe4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff2:	f7ff ff5b 	bl	8000eac <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8000ff6:	f7ff fde9 	bl	8000bcc <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff fdf6 	bl	8000bec <LL_RCC_MSI_IsReady>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d1fa      	bne.n	8000ffc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001006:	f7ff fe13 	bl	8000c30 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 800100a:	20b0      	movs	r0, #176	; 0xb0
 800100c:	f7ff fe20 	bl	8000c50 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fe31 	bl	8000c78 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001016:	f7ff ff5d 	bl	8000ed4 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fdac 	bl	8000b78 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001020:	f7ff fd98 	bl	8000b54 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001024:	bf00      	nop
 8001026:	f7ff fdbd 	bl	8000ba4 <LL_RCC_LSE_IsReady>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d1fa      	bne.n	8001026 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001030:	f7ff fdee 	bl	8000c10 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001038:	2228      	movs	r2, #40	; 0x28
 800103a:	2150      	movs	r1, #80	; 0x50
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff feb3 	bl	8000da8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001042:	f7ff fed1 	bl	8000de8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001046:	f7ff fe8b 	bl	8000d60 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800104a:	bf00      	nop
 800104c:	f7ff fe98 	bl	8000d80 <LL_RCC_PLL_IsReady>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d1fa      	bne.n	800104c <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff fe24 	bl	8000ca4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800105c:	bf00      	nop
 800105e:	f7ff fe35 	bl	8000ccc <LL_RCC_GetSysClkSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d1fa      	bne.n	800105e <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fe3d 	bl	8000ce8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800106e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001072:	f7ff fe4d 	bl	8000d10 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001076:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800107a:	f7ff fe5d 	bl	8000d38 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <SystemClock_Config+0xb8>)
 8001080:	f001 fdd8 	bl	8002c34 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <SystemClock_Config+0xb8>)
 8001086:	f001 fde3 	bl	8002c50 <LL_SetSystemCoreClock>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	04c4b400 	.word	0x04c4b400

08001094 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	330c      	adds	r3, #12
 80010a4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_GPIO_SetOutputPin>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	619a      	str	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_GPIO_ResetOutputPin>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 80010f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <clearChipSelect+0x14>)
 80010fa:	f7ff ffdd 	bl	80010b8 <LL_GPIO_SetOutputPin>
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	48000400 	.word	0x48000400

08001108 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 800110c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <setChipSelect+0x14>)
 8001112:	f7ff ffdf 	bl	80010d4 <LL_GPIO_ResetOutputPin>
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	48000400 	.word	0x48000400

08001120 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8001126:	f7ff ffef 	bl	8001108 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 800112a:	21c0      	movs	r1, #192	; 0xc0
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <mcp25625_reset+0x44>)
 800112e:	f7ff ffb1 	bl	8001094 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8001132:	bf00      	nop
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <mcp25625_reset+0x44>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f9      	bne.n	8001134 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8001140:	f7ff ffd6 	bl	80010f0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8001144:	e002      	b.n	800114c <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <mcp25625_reset+0x44>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <mcp25625_reset+0x44>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f6      	bne.n	8001146 <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40003800 	.word	0x40003800

08001168 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 8001178:	f7ff ffc6 	bl	8001108 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 800117c:	2102      	movs	r1, #2
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <mcp25625_writeRegister+0x70>)
 8001180:	f7ff ff88 	bl	8001094 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <mcp25625_writeRegister+0x70>)
 800118a:	f7ff ff83 	bl	8001094 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	4619      	mov	r1, r3
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <mcp25625_writeRegister+0x70>)
 8001194:	f7ff ff7e 	bl	8001094 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8001198:	bf00      	nop
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <mcp25625_writeRegister+0x70>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80011a6:	bf00      	nop
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <mcp25625_writeRegister+0x70>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f9      	bne.n	80011a8 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 80011b4:	f7ff ff9c 	bl	80010f0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80011b8:	e002      	b.n	80011c0 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <mcp25625_writeRegister+0x70>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <mcp25625_writeRegister+0x70>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f6      	bne.n	80011ba <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40003800 	.word	0x40003800

080011dc <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 80011e6:	f7ff ff8f 	bl	8001108 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 80011ea:	2103      	movs	r1, #3
 80011ec:	4814      	ldr	r0, [pc, #80]	; (8001240 <mcp25625_readRegister+0x64>)
 80011ee:	f7ff ff51 	bl	8001094 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <mcp25625_readRegister+0x64>)
 80011f8:	f7ff ff4c 	bl	8001094 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 80011fc:	2100      	movs	r1, #0
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <mcp25625_readRegister+0x64>)
 8001200:	f7ff ff48 	bl	8001094 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8001204:	bf00      	nop
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <mcp25625_readRegister+0x64>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f9      	bne.n	8001206 <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8001212:	bf00      	nop
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <mcp25625_readRegister+0x64>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f9      	bne.n	8001214 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <mcp25625_readRegister+0x64>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <mcp25625_readRegister+0x64>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <mcp25625_readRegister+0x64>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();						// Disable CS
 8001232:	f7ff ff5d 	bl	80010f0 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 8001236:	7bbb      	ldrb	r3, [r7, #14]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003800 	.word	0x40003800

08001244 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	603a      	str	r2, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	460b      	mov	r3, r1
 8001252:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 8001254:	f7ff ff58 	bl	8001108 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4619      	mov	r1, r3
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <mcp25625_loadTXB+0x90>)
 800125e:	f7ff ff19 	bl	8001094 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e011      	b.n	800128c <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8001268:	bf00      	nop
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <mcp25625_loadTXB+0x90>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f9      	beq.n	800126a <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <mcp25625_loadTXB+0x90>)
 8001282:	f7ff ff07 	bl	8001094 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3e9      	bcc.n	8001268 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8001294:	bf00      	nop
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <mcp25625_loadTXB+0x90>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 80012a2:	bf00      	nop
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <mcp25625_loadTXB+0x90>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f9      	bne.n	80012a4 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 80012b0:	f7ff ff1e 	bl	80010f0 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 80012b4:	e002      	b.n	80012bc <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <mcp25625_loadTXB+0x90>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <mcp25625_loadTXB+0x90>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f6      	bne.n	80012b6 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40003800 	.word	0x40003800

080012d8 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 80012dc:	2030      	movs	r0, #48	; 0x30
 80012de:	f7ff ff7d 	bl	80011dc <mcp25625_readRegister>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ff75 	bl	80011dc <mcp25625_readRegister>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 80012fc:	2050      	movs	r0, #80	; 0x50
 80012fe:	f7ff ff6d 	bl	80011dc <mcp25625_readRegister>
 8001302:	4603      	mov	r3, r0
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}

08001308 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	210d      	movs	r1, #13
 8001314:	2044      	movs	r0, #68	; 0x44
 8001316:	f7ff ff95 	bl	8001244 <mcp25625_loadTXB>
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	210d      	movs	r1, #13
 800132e:	2042      	movs	r0, #66	; 0x42
 8001330:	f7ff ff88 	bl	8001244 <mcp25625_loadTXB>
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	210d      	movs	r1, #13
 8001348:	2040      	movs	r0, #64	; 0x40
 800134a:	f7ff ff7b 	bl	8001244 <mcp25625_loadTXB>
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 800135a:	210b      	movs	r1, #11
 800135c:	2050      	movs	r0, #80	; 0x50
 800135e:	f7ff ff03 	bl	8001168 <mcp25625_writeRegister>
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}

08001366 <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 800136a:	210b      	movs	r1, #11
 800136c:	2040      	movs	r0, #64	; 0x40
 800136e:	f7ff fefb 	bl	8001168 <mcp25625_writeRegister>
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 800137a:	210b      	movs	r1, #11
 800137c:	2030      	movs	r0, #48	; 0x30
 800137e:	f7ff fef3 	bl	8001168 <mcp25625_writeRegister>
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 800138e:	f7ff ffb3 	bl	80012f8 <getTXB2CTRL>
 8001392:	4603      	mov	r3, r0
 8001394:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffaf 	bl	8001308 <loadTXB2>
		setTXREQ2();
 80013aa:	f7ff ffd4 	bl	8001356 <setTXREQ2>
		return; // once txbuffer is loaded, return
 80013ae:	e021      	b.n	80013f4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 80013b0:	f7ff ff9a 	bl	80012e8 <getTXB1CTRL>
 80013b4:	4603      	mov	r3, r0
 80013b6:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 80013b8:	7b3b      	ldrb	r3, [r7, #12]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffab 	bl	8001322 <loadTXB1>
		setTXREQ1();
 80013cc:	f7ff ffcb 	bl	8001366 <setTXREQ1>
		return; //once tx buffer is loaded, return
 80013d0:	e010      	b.n	80013f4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 80013d2:	f7ff ff81 	bl	80012d8 <getTXB0CTRL>
 80013d6:	4603      	mov	r3, r0
 80013d8:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 80013da:	7b3b      	ldrb	r3, [r7, #12]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ffa7 	bl	800133c <loadTXB0>
		setTXREQ0();
 80013ee:	f7ff ffc2 	bl	8001376 <setTXREQ0>
		return; // once tx buffer is loaded, return
 80013f2:	bf00      	nop
	}
}
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	603a      	str	r2, [r7, #0]
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	460b      	mov	r3, r1
 8001408:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	220d      	movs	r2, #13
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fc50 	bl	8002cb8 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	b2db      	uxtb	r3, r3
 8001428:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	e00b      	b.n	800144c <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	441a      	add	r2, r3
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	3318      	adds	r3, #24
 8001440:	443b      	add	r3, r7
 8001442:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	3301      	adds	r3, #1
 800144a:	75fb      	strb	r3, [r7, #23]
 800144c:	7dfa      	ldrb	r2, [r7, #23]
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3ef      	bcc.n	8001434 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff94 	bl	8001386 <mcp25625_sendCAN>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <mcp25625_init>:

void mcp25625_init (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 800146c:	f240 2276 	movw	r2, #630	; 0x276
 8001470:	2100      	movs	r1, #0
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <mcp25625_init+0x1c>)
 8001474:	f001 fc20 	bl	8002cb8 <memset>
	clearChipSelect();
 8001478:	f7ff fe3a 	bl	80010f0 <clearChipSelect>
	mcp25625_reset();
 800147c:	f7ff fe50 	bl	8001120 <mcp25625_reset>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000020 	.word	0x20000020

08001488 <CAN_configure>:

void CAN_configure()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8001492:	2389      	movs	r3, #137	; 0x89
 8001494:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8001496:	2304      	movs	r3, #4
 8001498:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 800149a:	2308      	movs	r3, #8
 800149c:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 800149e:	f7ff ffe3 	bl	8001468 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 80014a2:	7b3b      	ldrb	r3, [r7, #12]
 80014a4:	4619      	mov	r1, r3
 80014a6:	202a      	movs	r0, #42	; 0x2a
 80014a8:	f7ff fe5e 	bl	8001168 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 80014ac:	7a3b      	ldrb	r3, [r7, #8]
 80014ae:	4619      	mov	r1, r3
 80014b0:	2029      	movs	r0, #41	; 0x29
 80014b2:	f7ff fe59 	bl	8001168 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 80014b6:	793b      	ldrb	r3, [r7, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	2028      	movs	r0, #40	; 0x28
 80014bc:	f7ff fe54 	bl	8001168 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 80014c0:	783b      	ldrb	r3, [r7, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	200f      	movs	r0, #15
 80014c6:	f7ff fe4f 	bl	8001168 <mcp25625_writeRegister>

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <LL_AHB2_GRP1_EnableClock>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000

08001504 <LL_APB1_GRP1_EnableClock>:
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800150e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_APB1_GRP1_EnableClock+0x2c>)
 800151a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000

08001534 <LL_APB2_GRP1_EnableClock>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800153e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_APB2_GRP1_EnableClock+0x2c>)
 800154a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_SPI_SetStandard>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 0210 	bic.w	r2, r3, #16
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	605a      	str	r2, [r3, #4]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_SPI_DisableNSSPulseMgt>:
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 0208 	bic.w	r2, r3, #8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b090      	sub	sp, #64	; 0x40
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	2228      	movs	r2, #40	; 0x28
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fb7c 	bl	8002cb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80015d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015d4:	f7ff ffae 	bl	8001534 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff ff7b 	bl	80014d4 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80015de:	23e0      	movs	r3, #224	; 0xe0
 80015e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015e2:	2302      	movs	r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80015f2:	2305      	movs	r3, #5
 80015f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f000 fd53 	bl	80020a8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001606:	f44f 7382 	mov.w	r3, #260	; 0x104
 800160a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800160c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001610:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001612:	2302      	movs	r3, #2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800161a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001620:	2308      	movs	r3, #8
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800162c:	2307      	movs	r3, #7
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <MX_SPI1_Init+0xa8>)
 8001638:	f001 f99e 	bl	8002978 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800163c:	2100      	movs	r1, #0
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_SPI1_Init+0xa8>)
 8001640:	f7ff ff90 	bl	8001564 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <MX_SPI1_Init+0xa8>)
 8001646:	f7ff ffa0 	bl	800158a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40013000 	.word	0x40013000

08001658 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b090      	sub	sp, #64	; 0x40
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2228      	movs	r2, #40	; 0x28
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fb26 	bl	8002cb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800167c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001680:	f7ff ff40 	bl	8001504 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001684:	2002      	movs	r0, #2
 8001686:	f7ff ff25 	bl	80014d4 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800168a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800168e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001690:	2302      	movs	r3, #2
 8001692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4815      	ldr	r0, [pc, #84]	; (8001700 <MX_SPI2_Init+0xa8>)
 80016aa:	f000 fcfd 	bl	80020a8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80016b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016b6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80016b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016bc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80016c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80016cc:	2308      	movs	r3, #8
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80016d8:	2307      	movs	r3, #7
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <MX_SPI2_Init+0xac>)
 80016e4:	f001 f948 	bl	8002978 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80016e8:	2100      	movs	r1, #0
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_SPI2_Init+0xac>)
 80016ec:	f7ff ff3a 	bl	8001564 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_SPI2_Init+0xac>)
 80016f2:	f7ff ff4a 	bl	800158a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3740      	adds	r7, #64	; 0x40
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	48000400 	.word	0x48000400
 8001704:	40003800 	.word	0x40003800

08001708 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b02      	cmp	r3, #2
 800173a:	d101      	bne.n	8001740 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <HardFault_Handler+0x4>

0800175a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <BusFault_Handler+0x4>

08001766 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <LPTIM2_IRQHandler+0x1c>)
 80017aa:	f7ff ffbd 	bl	8001728 <LL_LPTIM_IsActiveFlag_ARRM>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <LPTIM2_IRQHandler+0x16>
	{
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);    		// Clear ARR interrupt flag
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <LPTIM2_IRQHandler+0x1c>)
 80017b6:	f7ff ffa7 	bl	8001708 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40009400 	.word	0x40009400

080017c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <LL_RCC_SetUSARTClockSource>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <LL_RCC_SetUSARTClockSource+0x30>)
 80017f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4905      	ldr	r1, [pc, #20]	; (8001818 <LL_RCC_SetUSARTClockSource+0x30>)
 8001804:	4313      	orrs	r3, r2
 8001806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <LL_AHB2_GRP1_EnableClock>:
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4013      	ands	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000

0800184c <LL_APB1_GRP1_EnableClock>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001862:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000

0800187c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80018f2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80018f6:	f7ff ff77 	bl	80017e8 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80018fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018fe:	f7ff ffa5 	bl	800184c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff ff8a 	bl	800181c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001908:	230c      	movs	r3, #12
 800190a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800190c:	2302      	movs	r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800191c:	2307      	movs	r3, #7
 800191e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f000 fbbe 	bl	80020a8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800192c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001930:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800193e:	230c      	movs	r3, #12
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_USART2_UART_Init+0xa4>)
 8001952:	f001 f8d9 	bl	8002b08 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART2_UART_Init+0xa4>)
 8001958:	f7ff ffa0 	bl	800189c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_USART2_UART_Init+0xa4>)
 800195e:	f7ff ff8d 	bl	800187c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3738      	adds	r7, #56	; 0x38
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40004400 	.word	0x40004400

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff ff26 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f001 f967 	bl	8002c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fab7 	bl	8000f14 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80019b4:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 80019b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80019bc:	20000298 	.word	0x20000298

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>
	...

080019c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <LL_EXTI_EnableIT_32_63+0x20>)
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4904      	ldr	r1, [pc, #16]	; (8001a08 <LL_EXTI_EnableIT_32_63+0x20>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	620b      	str	r3, [r1, #32]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40010400 	.word	0x40010400

08001a0c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <LL_EXTI_DisableIT_0_31+0x24>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <LL_EXTI_DisableIT_0_31+0x24>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40010400 	.word	0x40010400

08001a34 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <LL_EXTI_DisableIT_32_63+0x24>)
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4904      	ldr	r1, [pc, #16]	; (8001a58 <LL_EXTI_DisableIT_32_63+0x24>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	620b      	str	r3, [r1, #32]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40010400 	.word	0x40010400

08001a5c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4904      	ldr	r1, [pc, #16]	; (8001a7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40010400 	.word	0x40010400

08001a80 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8c:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40010400 	.word	0x40010400

08001acc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4904      	ldr	r1, [pc, #16]	; (8001af0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40010400 	.word	0x40010400

08001af4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40010400 	.word	0x40010400

08001b18 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b24:	4904      	ldr	r1, [pc, #16]	; (8001b38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40010400 	.word	0x40010400

08001b3c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4904      	ldr	r1, [pc, #16]	; (8001b60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]

}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40010400 	.word	0x40010400

08001b64 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40010400 	.word	0x40010400

08001b8c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40010400 	.word	0x40010400

08001bb0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	60cb      	str	r3, [r1, #12]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010400 	.word	0x40010400

08001bfc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4904      	ldr	r1, [pc, #16]	; (8001c20 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010400 	.word	0x40010400

08001c24 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7a1b      	ldrb	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80d1 	beq.w	8001ddc <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7a5b      	ldrb	r3, [r3, #9]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d01c      	beq.n	8001c84 <LL_EXTI_Init+0x60>
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	dc25      	bgt.n	8001c9a <LL_EXTI_Init+0x76>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <LL_EXTI_Init+0x34>
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00b      	beq.n	8001c6e <LL_EXTI_Init+0x4a>
 8001c56:	e020      	b.n	8001c9a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff21 	bl	8001aa4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff feac 	bl	80019c4 <LL_EXTI_EnableIT_0_31>
          break;
 8001c6c:	e018      	b.n	8001ca0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff feca 	bl	8001a0c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff feed 	bl	8001a5c <LL_EXTI_EnableEvent_0_31>
          break;
 8001c82:	e00d      	b.n	8001ca0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fe9b 	bl	80019c4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fee2 	bl	8001a5c <LL_EXTI_EnableEvent_0_31>
          break;
 8001c98:	e002      	b.n	8001ca0 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
          break;
 8001c9e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7a9b      	ldrb	r3, [r3, #10]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d030      	beq.n	8001d0a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7a9b      	ldrb	r3, [r3, #10]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d01c      	beq.n	8001cea <LL_EXTI_Init+0xc6>
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	dc25      	bgt.n	8001d00 <LL_EXTI_Init+0xdc>
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d002      	beq.n	8001cbe <LL_EXTI_Init+0x9a>
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00b      	beq.n	8001cd4 <LL_EXTI_Init+0xb0>
 8001cbc:	e020      	b.n	8001d00 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff86 	bl	8001bd4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff11 	bl	8001af4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001cd2:	e01b      	b.n	8001d0c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff2f 	bl	8001b3c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff52 	bl	8001b8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001ce8:	e010      	b.n	8001d0c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff00 	bl	8001af4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff47 	bl	8001b8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001cfe:	e005      	b.n	8001d0c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
            break;
 8001d08:	e000      	b.n	8001d0c <LL_EXTI_Init+0xe8>
        }
      }
 8001d0a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d078      	beq.n	8001e06 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7a5b      	ldrb	r3, [r3, #9]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d01c      	beq.n	8001d56 <LL_EXTI_Init+0x132>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	dc25      	bgt.n	8001d6c <LL_EXTI_Init+0x148>
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <LL_EXTI_Init+0x106>
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d00b      	beq.n	8001d40 <LL_EXTI_Init+0x11c>
 8001d28:	e020      	b.n	8001d6c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fecc 	bl	8001acc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fe55 	bl	80019e8 <LL_EXTI_EnableIT_32_63>
          break;
 8001d3e:	e01a      	b.n	8001d76 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fe75 	bl	8001a34 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fe96 	bl	8001a80 <LL_EXTI_EnableEvent_32_63>
          break;
 8001d54:	e00f      	b.n	8001d76 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe44 	bl	80019e8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe8b 	bl	8001a80 <LL_EXTI_EnableEvent_32_63>
          break;
 8001d6a:	e004      	b.n	8001d76 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
          break;
 8001d74:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7a9b      	ldrb	r3, [r3, #10]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d043      	beq.n	8001e06 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7a9b      	ldrb	r3, [r3, #10]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d01c      	beq.n	8001dc0 <LL_EXTI_Init+0x19c>
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	dc25      	bgt.n	8001dd6 <LL_EXTI_Init+0x1b2>
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d002      	beq.n	8001d94 <LL_EXTI_Init+0x170>
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d00b      	beq.n	8001daa <LL_EXTI_Init+0x186>
 8001d92:	e020      	b.n	8001dd6 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff2f 	bl	8001bfc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff feb8 	bl	8001b18 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001da8:	e02e      	b.n	8001e08 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fed8 	bl	8001b64 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fef9 	bl	8001bb0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001dbe:	e023      	b.n	8001e08 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fea7 	bl	8001b18 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff feee 	bl	8001bb0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001dd4:	e018      	b.n	8001e08 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
            break;
 8001dda:	e015      	b.n	8001e08 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe13 	bl	8001a0c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe5a 	bl	8001aa4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe1d 	bl	8001a34 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fe64 	bl	8001acc <LL_EXTI_DisableEvent_32_63>
 8001e04:	e000      	b.n	8001e08 <LL_EXTI_Init+0x1e4>
      }
 8001e06:	bf00      	nop
  }

  return status;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LL_GPIO_SetPinMode>:
{
 8001e12:	b480      	push	{r7}
 8001e14:	b08b      	sub	sp, #44	; 0x2c
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	613b      	str	r3, [r7, #16]
  return result;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e003      	b.n	8001e44 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2103      	movs	r1, #3
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	372c      	adds	r7, #44	; 0x2c
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_GPIO_SetPinOutputType>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_GPIO_SetPinSpeed>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b08b      	sub	sp, #44	; 0x2c
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	613b      	str	r3, [r7, #16]
  return result;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	401a      	ands	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	61fb      	str	r3, [r7, #28]
  return result;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	431a      	orrs	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	609a      	str	r2, [r3, #8]
}
 8001f2a:	bf00      	nop
 8001f2c:	372c      	adds	r7, #44	; 0x2c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_GPIO_SetPinPull>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b08b      	sub	sp, #44	; 0x2c
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	613b      	str	r3, [r7, #16]
  return result;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	60da      	str	r2, [r3, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	372c      	adds	r7, #44	; 0x2c
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_GPIO_SetAFPin_0_7>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b08b      	sub	sp, #44	; 0x2c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	613b      	str	r3, [r7, #16]
  return result;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e003      	b.n	8001fe2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	401a      	ands	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	; 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_GPIO_SetAFPin_8_15>:
{
 800202a:	b480      	push	{r7}
 800202c:	b08b      	sub	sp, #44	; 0x2c
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	613b      	str	r3, [r7, #16]
  return result;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	210f      	movs	r1, #15
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	401a      	ands	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	61fb      	str	r3, [r7, #28]
  return result;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800209c:	bf00      	nop
 800209e:	372c      	adds	r7, #44	; 0x2c
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	60fb      	str	r3, [r7, #12]
  return result;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <LL_GPIO_Init+0x26>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80020d8:	e048      	b.n	800216c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03a      	beq.n	8002166 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d003      	beq.n	8002100 <LL_GPIO_Init+0x58>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d10e      	bne.n	800211e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	461a      	mov	r2, r3
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fed7 	bl	8001ebc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6819      	ldr	r1, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	461a      	mov	r2, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff feb7 	bl	8001e8c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	461a      	mov	r2, r3
 8002124:	69b9      	ldr	r1, [r7, #24]
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff05 	bl	8001f36 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d111      	bne.n	8002158 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2bff      	cmp	r3, #255	; 0xff
 8002138:	d807      	bhi.n	800214a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	461a      	mov	r2, r3
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff34 	bl	8001fb0 <LL_GPIO_SetAFPin_0_7>
 8002148:	e006      	b.n	8002158 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	461a      	mov	r2, r3
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff69 	bl	800202a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	461a      	mov	r2, r3
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fe56 	bl	8001e12 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1af      	bne.n	80020da <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <LL_RCC_HSI_IsReady>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <LL_RCC_HSI_IsReady+0x24>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d101      	bne.n	800219a <LL_RCC_HSI_IsReady+0x16>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_RCC_HSI_IsReady+0x18>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <LL_RCC_LSE_IsReady>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <LL_RCC_LSE_IsReady+0x24>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d101      	bne.n	80021c2 <LL_RCC_LSE_IsReady+0x16>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_RCC_LSE_IsReady+0x18>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d101      	bne.n	80021e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000

080021f8 <LL_RCC_MSI_GetRange>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <LL_RCC_MSI_GetRange+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000

08002214 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800221a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000

08002230 <LL_RCC_GetSysClkSource>:
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <LL_RCC_GetSysClkSource+0x18>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <LL_RCC_GetAHBPrescaler>:
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_RCC_GetAHBPrescaler+0x18>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <LL_RCC_GetAPB1Prescaler>:
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <LL_RCC_GetAPB1Prescaler+0x18>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <LL_RCC_GetAPB2Prescaler>:
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <LL_RCC_GetAPB2Prescaler+0x18>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000

080022a0 <LL_RCC_GetUSARTClockSource>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <LL_RCC_GetUSARTClockSource+0x24>)
 80022aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	4313      	orrs	r3, r2
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000

080022c8 <LL_RCC_GetUARTClockSource>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <LL_RCC_GetUARTClockSource+0x24>)
 80022d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	4313      	orrs	r3, r2
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40021000 	.word	0x40021000

080022f0 <LL_RCC_PLL_GetMainSource>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <LL_RCC_PLL_GetMainSource+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0303 	and.w	r3, r3, #3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000

0800230c <LL_RCC_PLL_GetN>:
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <LL_RCC_PLL_GetN+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_PLL_GetR>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <LL_RCC_PLL_GetR+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_PLL_GetDivider>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <LL_RCC_PLL_GetDivider+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d137      	bne.n	80023e2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff94 	bl	80022a0 <LL_RCC_GetUSARTClockSource>
 8002378:	4603      	mov	r3, r0
 800237a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800237e:	2b03      	cmp	r3, #3
 8002380:	f200 80b3 	bhi.w	80024ea <LL_RCC_GetUSARTClockFreq+0x18a>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023cb 	.word	0x080023cb
 8002390:	0800239d 	.word	0x0800239d
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800239c:	f000 f95c 	bl	8002658 <RCC_GetSystemClockFreq>
 80023a0:	60f8      	str	r0, [r7, #12]
        break;
 80023a2:	e0b5      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80023a4:	f7ff feee 	bl	8002184 <LL_RCC_HSI_IsReady>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 809f 	beq.w	80024ee <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80023b0:	4b5a      	ldr	r3, [pc, #360]	; (800251c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80023b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023b4:	e09b      	b.n	80024ee <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80023b6:	f7ff fef9 	bl	80021ac <LL_RCC_LSE_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8098 	beq.w	80024f2 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023c8:	e093      	b.n	80024f2 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023ca:	f000 f945 	bl	8002658 <RCC_GetSystemClockFreq>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f9d1 	bl	8002778 <RCC_GetHCLKClockFreq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f9f7 	bl	80027cc <RCC_GetPCLK2ClockFreq>
 80023de:	60f8      	str	r0, [r7, #12]
        break;
 80023e0:	e096      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	d146      	bne.n	8002476 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff59 	bl	80022a0 <LL_RCC_GetUSARTClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d87e      	bhi.n	80024f6 <LL_RCC_GetUSARTClockFreq+0x196>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	0800245f 	.word	0x0800245f
 8002404:	080024f7 	.word	0x080024f7
 8002408:	080024f7 	.word	0x080024f7
 800240c:	080024f7 	.word	0x080024f7
 8002410:	08002435 	.word	0x08002435
 8002414:	080024f7 	.word	0x080024f7
 8002418:	080024f7 	.word	0x080024f7
 800241c:	080024f7 	.word	0x080024f7
 8002420:	0800243d 	.word	0x0800243d
 8002424:	080024f7 	.word	0x080024f7
 8002428:	080024f7 	.word	0x080024f7
 800242c:	080024f7 	.word	0x080024f7
 8002430:	0800244d 	.word	0x0800244d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002434:	f000 f910 	bl	8002658 <RCC_GetSystemClockFreq>
 8002438:	60f8      	str	r0, [r7, #12]
        break;
 800243a:	e069      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800243c:	f7ff fea2 	bl	8002184 <LL_RCC_HSI_IsReady>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d059      	beq.n	80024fa <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002448:	60fb      	str	r3, [r7, #12]
        }
        break;
 800244a:	e056      	b.n	80024fa <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800244c:	f7ff feae 	bl	80021ac <LL_RCC_LSE_IsReady>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d053      	beq.n	80024fe <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8002456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800245c:	e04f      	b.n	80024fe <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800245e:	f000 f8fb 	bl	8002658 <RCC_GetSystemClockFreq>
 8002462:	4603      	mov	r3, r0
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f987 	bl	8002778 <RCC_GetHCLKClockFreq>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f999 	bl	80027a4 <RCC_GetPCLK1ClockFreq>
 8002472:	60f8      	str	r0, [r7, #12]
        break;
 8002474:	e04c      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d142      	bne.n	8002502 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff0f 	bl	80022a0 <LL_RCC_GetUSARTClockSource>
 8002482:	4603      	mov	r3, r0
 8002484:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002488:	d01a      	beq.n	80024c0 <LL_RCC_GetUSARTClockFreq+0x160>
 800248a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800248e:	d83a      	bhi.n	8002506 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00c      	beq.n	80024b0 <LL_RCC_GetUSARTClockFreq+0x150>
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d834      	bhi.n	8002506 <LL_RCC_GetUSARTClockFreq+0x1a6>
 800249c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024a0:	d017      	beq.n	80024d2 <LL_RCC_GetUSARTClockFreq+0x172>
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d12e      	bne.n	8002506 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80024a8:	f000 f8d6 	bl	8002658 <RCC_GetSystemClockFreq>
 80024ac:	60f8      	str	r0, [r7, #12]
          break;
 80024ae:	e02f      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80024b0:	f7ff fe68 	bl	8002184 <LL_RCC_HSI_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d027      	beq.n	800250a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80024bc:	60fb      	str	r3, [r7, #12]
          }
          break;
 80024be:	e024      	b.n	800250a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80024c0:	f7ff fe74 	bl	80021ac <LL_RCC_LSE_IsReady>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 80024ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ce:	60fb      	str	r3, [r7, #12]
          }
          break;
 80024d0:	e01d      	b.n	800250e <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024d2:	f000 f8c1 	bl	8002658 <RCC_GetSystemClockFreq>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f94d 	bl	8002778 <RCC_GetHCLKClockFreq>
 80024de:	4603      	mov	r3, r0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f95f 	bl	80027a4 <RCC_GetPCLK1ClockFreq>
 80024e6:	60f8      	str	r0, [r7, #12]
          break;
 80024e8:	e012      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024ea:	bf00      	nop
 80024ec:	e010      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024ee:	bf00      	nop
 80024f0:	e00e      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024f2:	bf00      	nop
 80024f4:	e00c      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024f6:	bf00      	nop
 80024f8:	e00a      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024fa:	bf00      	nop
 80024fc:	e008      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80024fe:	bf00      	nop
 8002500:	e006      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8002502:	bf00      	nop
 8002504:	e004      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 800250e:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	00f42400 	.word	0x00f42400
 8002520:	00300020 	.word	0x00300020
 8002524:	00300010 	.word	0x00300010

08002528 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2bc0      	cmp	r3, #192	; 0xc0
 8002538:	d136      	bne.n	80025a8 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fec4 	bl	80022c8 <LL_RCC_GetUARTClockSource>
 8002540:	4603      	mov	r3, r0
 8002542:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002546:	d01a      	beq.n	800257e <LL_RCC_GetUARTClockFreq+0x56>
 8002548:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800254c:	d82e      	bhi.n	80025ac <LL_RCC_GetUARTClockFreq+0x84>
 800254e:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00c      	beq.n	800256e <LL_RCC_GetUARTClockFreq+0x46>
 8002554:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d828      	bhi.n	80025ac <LL_RCC_GetUARTClockFreq+0x84>
 800255a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800255e:	d017      	beq.n	8002590 <LL_RCC_GetUARTClockFreq+0x68>
 8002560:	4a39      	ldr	r2, [pc, #228]	; (8002648 <LL_RCC_GetUARTClockFreq+0x120>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d122      	bne.n	80025ac <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002566:	f000 f877 	bl	8002658 <RCC_GetSystemClockFreq>
 800256a:	60f8      	str	r0, [r7, #12]
        break;
 800256c:	e023      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800256e:	f7ff fe09 	bl	8002184 <LL_RCC_HSI_IsReady>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <LL_RCC_GetUARTClockFreq+0x124>)
 800257a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800257c:	e018      	b.n	80025b0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800257e:	f7ff fe15 	bl	80021ac <LL_RCC_LSE_IsReady>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8002588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800258e:	e011      	b.n	80025b4 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002590:	f000 f862 	bl	8002658 <RCC_GetSystemClockFreq>
 8002594:	4603      	mov	r3, r0
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8ee 	bl	8002778 <RCC_GetHCLKClockFreq>
 800259c:	4603      	mov	r3, r0
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f900 	bl	80027a4 <RCC_GetPCLK1ClockFreq>
 80025a4:	60f8      	str	r0, [r7, #12]
        break;
 80025a6:	e006      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80025b4:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025bc:	d136      	bne.n	800262c <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fe82 	bl	80022c8 <LL_RCC_GetUARTClockSource>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80025ca:	d01a      	beq.n	8002602 <LL_RCC_GetUARTClockFreq+0xda>
 80025cc:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80025d0:	d82e      	bhi.n	8002630 <LL_RCC_GetUARTClockFreq+0x108>
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <LL_RCC_GetUARTClockFreq+0x128>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00c      	beq.n	80025f2 <LL_RCC_GetUARTClockFreq+0xca>
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <LL_RCC_GetUARTClockFreq+0x128>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d828      	bhi.n	8002630 <LL_RCC_GetUARTClockFreq+0x108>
 80025de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025e2:	d017      	beq.n	8002614 <LL_RCC_GetUARTClockFreq+0xec>
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <LL_RCC_GetUARTClockFreq+0x12c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d122      	bne.n	8002630 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80025ea:	f000 f835 	bl	8002658 <RCC_GetSystemClockFreq>
 80025ee:	60f8      	str	r0, [r7, #12]
        break;
 80025f0:	e023      	b.n	800263a <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80025f2:	f7ff fdc7 	bl	8002184 <LL_RCC_HSI_IsReady>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <LL_RCC_GetUARTClockFreq+0x124>)
 80025fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002600:	e018      	b.n	8002634 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002602:	f7ff fdd3 	bl	80021ac <LL_RCC_LSE_IsReady>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 800260c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002610:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002612:	e011      	b.n	8002638 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002614:	f000 f820 	bl	8002658 <RCC_GetSystemClockFreq>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f8ac 	bl	8002778 <RCC_GetHCLKClockFreq>
 8002620:	4603      	mov	r3, r0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8be 	bl	80027a4 <RCC_GetPCLK1ClockFreq>
 8002628:	60f8      	str	r0, [r7, #12]
        break;
 800262a:	e006      	b.n	800263a <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 800262c:	bf00      	nop
 800262e:	e004      	b.n	800263a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8002630:	bf00      	nop
 8002632:	e002      	b.n	800263a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8002638:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00c00080 	.word	0x00c00080
 8002648:	00c00040 	.word	0x00c00040
 800264c:	00f42400 	.word	0x00f42400
 8002650:	03000200 	.word	0x03000200
 8002654:	03000100 	.word	0x03000100

08002658 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800265e:	f7ff fde7 	bl	8002230 <LL_RCC_GetSysClkSource>
 8002662:	4603      	mov	r3, r0
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d851      	bhi.n	800270c <RCC_GetSystemClockFreq+0xb4>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <RCC_GetSystemClockFreq+0x18>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	080026a5 	.word	0x080026a5
 8002674:	0800270d 	.word	0x0800270d
 8002678:	0800270d 	.word	0x0800270d
 800267c:	0800270d 	.word	0x0800270d
 8002680:	080026f9 	.word	0x080026f9
 8002684:	0800270d 	.word	0x0800270d
 8002688:	0800270d 	.word	0x0800270d
 800268c:	0800270d 	.word	0x0800270d
 8002690:	080026ff 	.word	0x080026ff
 8002694:	0800270d 	.word	0x0800270d
 8002698:	0800270d 	.word	0x0800270d
 800269c:	0800270d 	.word	0x0800270d
 80026a0:	08002705 	.word	0x08002705
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80026a4:	f7ff fd96 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d111      	bne.n	80026d2 <RCC_GetSystemClockFreq+0x7a>
 80026ae:	f7ff fd91 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <RCC_GetSystemClockFreq+0x6a>
 80026b8:	f7ff fd9e 	bl	80021f8 <LL_RCC_MSI_GetRange>
 80026bc:	4603      	mov	r3, r0
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	e003      	b.n	80026ca <RCC_GetSystemClockFreq+0x72>
 80026c2:	f7ff fda7 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <RCC_GetSystemClockFreq+0x114>)
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	e010      	b.n	80026f4 <RCC_GetSystemClockFreq+0x9c>
 80026d2:	f7ff fd7f 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <RCC_GetSystemClockFreq+0x8e>
 80026dc:	f7ff fd8c 	bl	80021f8 <LL_RCC_MSI_GetRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	e003      	b.n	80026ee <RCC_GetSystemClockFreq+0x96>
 80026e6:	f7ff fd95 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 80026ea:	4603      	mov	r3, r0
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <RCC_GetSystemClockFreq+0x114>)
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80026f6:	e033      	b.n	8002760 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <RCC_GetSystemClockFreq+0x118>)
 80026fa:	607b      	str	r3, [r7, #4]
      break;
 80026fc:	e030      	b.n	8002760 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <RCC_GetSystemClockFreq+0x11c>)
 8002700:	607b      	str	r3, [r7, #4]
      break;
 8002702:	e02d      	b.n	8002760 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002704:	f000 f876 	bl	80027f4 <RCC_PLL_GetFreqDomain_SYS>
 8002708:	6078      	str	r0, [r7, #4]
      break;
 800270a:	e029      	b.n	8002760 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800270c:	f7ff fd62 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d111      	bne.n	800273a <RCC_GetSystemClockFreq+0xe2>
 8002716:	f7ff fd5d 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <RCC_GetSystemClockFreq+0xd2>
 8002720:	f7ff fd6a 	bl	80021f8 <LL_RCC_MSI_GetRange>
 8002724:	4603      	mov	r3, r0
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	e003      	b.n	8002732 <RCC_GetSystemClockFreq+0xda>
 800272a:	f7ff fd73 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 800272e:	4603      	mov	r3, r0
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <RCC_GetSystemClockFreq+0x114>)
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	e010      	b.n	800275c <RCC_GetSystemClockFreq+0x104>
 800273a:	f7ff fd4b 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <RCC_GetSystemClockFreq+0xf6>
 8002744:	f7ff fd58 	bl	80021f8 <LL_RCC_MSI_GetRange>
 8002748:	4603      	mov	r3, r0
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	e003      	b.n	8002756 <RCC_GetSystemClockFreq+0xfe>
 800274e:	f7ff fd61 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 8002752:	4603      	mov	r3, r0
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <RCC_GetSystemClockFreq+0x114>)
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800275e:	bf00      	nop
  }

  return frequency;
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	08002cf8 	.word	0x08002cf8
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200

08002778 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002780:	f7ff fd64 	bl	800224c <LL_RCC_GetAHBPrescaler>
 8002784:	4603      	mov	r3, r0
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <RCC_GetHCLKClockFreq+0x28>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	461a      	mov	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	40d3      	lsrs	r3, r2
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	08002ce0 	.word	0x08002ce0

080027a4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027ac:	f7ff fd5c 	bl	8002268 <LL_RCC_GetAPB1Prescaler>
 80027b0:	4603      	mov	r3, r0
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <RCC_GetPCLK1ClockFreq+0x24>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	40d3      	lsrs	r3, r2
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	08002cf0 	.word	0x08002cf0

080027cc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80027d4:	f7ff fd56 	bl	8002284 <LL_RCC_GetAPB2Prescaler>
 80027d8:	4603      	mov	r3, r0
 80027da:	0adb      	lsrs	r3, r3, #11
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <RCC_GetPCLK2ClockFreq+0x24>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	461a      	mov	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	40d3      	lsrs	r3, r2
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	08002cf0 	.word	0x08002cf0

080027f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80027fa:	f7ff fd79 	bl	80022f0 <LL_RCC_PLL_GetMainSource>
 80027fe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d036      	beq.n	8002874 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d836      	bhi.n	800287a <RCC_PLL_GetFreqDomain_SYS+0x86>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d003      	beq.n	800281a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d02a      	beq.n	800286e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002818:	e02f      	b.n	800287a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800281a:	f7ff fcdb 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8002824:	f7ff fcd6 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800282e:	f7ff fce3 	bl	80021f8 <LL_RCC_MSI_GetRange>
 8002832:	4603      	mov	r3, r0
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	e003      	b.n	8002840 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002838:	f7ff fcec 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 800283c:	4603      	mov	r3, r0
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	e010      	b.n	800286a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002848:	f7ff fcc4 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002852:	f7ff fcd1 	bl	80021f8 <LL_RCC_MSI_GetRange>
 8002856:	4603      	mov	r3, r0
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	e003      	b.n	8002864 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800285c:	f7ff fcda 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 8002860:	4603      	mov	r3, r0
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800286c:	e02f      	b.n	80028ce <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002870:	607b      	str	r3, [r7, #4]
      break;
 8002872:	e02c      	b.n	80028ce <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8002876:	607b      	str	r3, [r7, #4]
      break;
 8002878:	e029      	b.n	80028ce <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800287a:	f7ff fcab 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002884:	f7ff fca6 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800288e:	f7ff fcb3 	bl	80021f8 <LL_RCC_MSI_GetRange>
 8002892:	4603      	mov	r3, r0
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	e003      	b.n	80028a0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002898:	f7ff fcbc 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 800289c:	4603      	mov	r3, r0
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	e010      	b.n	80028ca <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80028a8:	f7ff fc94 	bl	80021d4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80028b2:	f7ff fca1 	bl	80021f8 <LL_RCC_MSI_GetRange>
 80028b6:	4603      	mov	r3, r0
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	e003      	b.n	80028c4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80028bc:	f7ff fcaa 	bl	8002214 <LL_RCC_MSI_GetRangeAfterStandby>
 80028c0:	4603      	mov	r3, r0
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80028cc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028ce:	f7ff fd39 	bl	8002344 <LL_RCC_PLL_GetDivider>
 80028d2:	4603      	mov	r3, r0
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	3301      	adds	r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	fbb2 f4f3 	udiv	r4, r2, r3
 80028de:	f7ff fd15 	bl	800230c <LL_RCC_PLL_GetN>
 80028e2:	4603      	mov	r3, r0
 80028e4:	fb03 f404 	mul.w	r4, r3, r4
 80028e8:	f7ff fd1e 	bl	8002328 <LL_RCC_PLL_GetR>
 80028ec:	4603      	mov	r3, r0
 80028ee:	0e5b      	lsrs	r3, r3, #25
 80028f0:	3301      	adds	r3, #1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	08002cf8 	.word	0x08002cf8
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <LL_SPI_IsEnabled>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d101      	bne.n	8002924 <LL_SPI_IsEnabled+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_SPI_IsEnabled+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_SPI_SetRxFIFOThreshold>:
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_SPI_SetCRCPolynomial>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	611a      	str	r2, [r3, #16]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffc0 	bl	800290c <LL_SPI_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d145      	bne.n	8002a1e <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800299a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6852      	ldr	r2, [r2, #4]
 80029a6:	4311      	orrs	r1, r2
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	4311      	orrs	r1, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6912      	ldr	r2, [r2, #16]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6952      	ldr	r2, [r2, #20]
 80029b8:	4311      	orrs	r1, r2
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	6992      	ldr	r2, [r2, #24]
 80029be:	4311      	orrs	r1, r2
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	69d2      	ldr	r2, [r2, #28]
 80029c4:	4311      	orrs	r1, r2
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	6a12      	ldr	r2, [r2, #32]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029da:	f023 0304 	bic.w	r3, r3, #4
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6891      	ldr	r1, [r2, #8]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6952      	ldr	r2, [r2, #20]
 80029e6:	0c12      	lsrs	r2, r2, #16
 80029e8:	430a      	orrs	r2, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f8:	d204      	bcs.n	8002a04 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80029fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff97 	bl	8002932 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0c:	d105      	bne.n	8002a1a <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff9f 	bl	8002958 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LL_USART_IsEnabled>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <LL_USART_IsEnabled+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_USART_IsEnabled+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_USART_SetStopBitsLength>:
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_USART_SetHWFlowCtrl>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_USART_SetBaudRate>:
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d11a      	bne.n	8002ae6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	005a      	lsls	r2, r3, #1
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	441a      	add	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	60da      	str	r2, [r3, #12]
}
 8002ae4:	e00a      	b.n	8002afc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	085a      	lsrs	r2, r3, #1
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	441a      	add	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	60da      	str	r2, [r3, #12]
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff84 	bl	8002a28 <LL_USART_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d15b      	bne.n	8002bde <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <LL_USART_Init+0xe0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	6851      	ldr	r1, [r2, #4]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	6912      	ldr	r2, [r2, #16]
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	6992      	ldr	r2, [r2, #24]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff7c 	bl	8002a4e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff89 	bl	8002a74 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a21      	ldr	r2, [pc, #132]	; (8002bec <LL_USART_Init+0xe4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d104      	bne.n	8002b74 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	f7ff fbf8 	bl	8002360 <LL_RCC_GetUSARTClockFreq>
 8002b70:	60b8      	str	r0, [r7, #8]
 8002b72:	e023      	b.n	8002bbc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <LL_USART_Init+0xe8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d104      	bne.n	8002b86 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002b7c:	200c      	movs	r0, #12
 8002b7e:	f7ff fbef 	bl	8002360 <LL_RCC_GetUSARTClockFreq>
 8002b82:	60b8      	str	r0, [r7, #8]
 8002b84:	e01a      	b.n	8002bbc <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <LL_USART_Init+0xec>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d104      	bne.n	8002b98 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002b8e:	2030      	movs	r0, #48	; 0x30
 8002b90:	f7ff fbe6 	bl	8002360 <LL_RCC_GetUSARTClockFreq>
 8002b94:	60b8      	str	r0, [r7, #8]
 8002b96:	e011      	b.n	8002bbc <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <LL_USART_Init+0xf0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d104      	bne.n	8002baa <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002ba0:	20c0      	movs	r0, #192	; 0xc0
 8002ba2:	f7ff fcc1 	bl	8002528 <LL_RCC_GetUARTClockFreq>
 8002ba6:	60b8      	str	r0, [r7, #8]
 8002ba8:	e008      	b.n	8002bbc <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <LL_USART_Init+0xf4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d104      	bne.n	8002bbc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002bb2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002bb6:	f7ff fcb7 	bl	8002528 <LL_RCC_GetUARTClockFreq>
 8002bba:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff5e 	bl	8002a9a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	efff69f3 	.word	0xefff69f3
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40004400 	.word	0x40004400
 8002bf4:	40004800 	.word	0x40004800
 8002bf8:	40004c00 	.word	0x40004c00
 8002bfc:	40005000 	.word	0x40005000

08002c00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <LL_InitTick+0x30>)
 8002c14:	3b01      	subs	r3, #1
 8002c16:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <LL_InitTick+0x30>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <LL_InitTick+0x30>)
 8002c20:	2205      	movs	r2, #5
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffdd 	bl	8002c00 <LL_InitTick>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <LL_SetSystemCoreClock+0x1c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <__libc_init_array>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	4d0d      	ldr	r5, [pc, #52]	; (8002ca8 <__libc_init_array+0x38>)
 8002c74:	4c0d      	ldr	r4, [pc, #52]	; (8002cac <__libc_init_array+0x3c>)
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	42a6      	cmp	r6, r4
 8002c7e:	d109      	bne.n	8002c94 <__libc_init_array+0x24>
 8002c80:	4d0b      	ldr	r5, [pc, #44]	; (8002cb0 <__libc_init_array+0x40>)
 8002c82:	4c0c      	ldr	r4, [pc, #48]	; (8002cb4 <__libc_init_array+0x44>)
 8002c84:	f000 f820 	bl	8002cc8 <_init>
 8002c88:	1b64      	subs	r4, r4, r5
 8002c8a:	10a4      	asrs	r4, r4, #2
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	42a6      	cmp	r6, r4
 8002c90:	d105      	bne.n	8002c9e <__libc_init_array+0x2e>
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c98:	4798      	blx	r3
 8002c9a:	3601      	adds	r6, #1
 8002c9c:	e7ee      	b.n	8002c7c <__libc_init_array+0xc>
 8002c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca2:	4798      	blx	r3
 8002ca4:	3601      	adds	r6, #1
 8002ca6:	e7f2      	b.n	8002c8e <__libc_init_array+0x1e>
 8002ca8:	08002d28 	.word	0x08002d28
 8002cac:	08002d28 	.word	0x08002d28
 8002cb0:	08002d28 	.word	0x08002d28
 8002cb4:	08002d2c 	.word	0x08002d2c

08002cb8 <memset>:
 8002cb8:	4402      	add	r2, r0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <memset+0xa>
 8002cc0:	4770      	bx	lr
 8002cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc6:	e7f9      	b.n	8002cbc <memset+0x4>

08002cc8 <_init>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr

08002cd4 <_fini>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	bf00      	nop
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr
