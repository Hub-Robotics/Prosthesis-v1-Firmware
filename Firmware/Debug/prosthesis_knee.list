
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  08008808  08008808  00018808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009580  08009580  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08009580  08009580  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009580  08009580  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08009588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b0  200000b0  08009638  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002960  08009638  00022960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec33  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c90  00000000  00000000  0002ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000319a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00032a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265a8  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105fe  00000000  00000000  00059f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c894a  00000000  00000000  0006a4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004884  00000000  00000000  00132e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087f0 	.word	0x080087f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	080087f0 	.word	0x080087f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3330      	adds	r3, #48	; 0x30
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	4413      	add	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	211f      	movs	r1, #31
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	0e9b      	lsrs	r3, r3, #26
 8000afe:	f003 011f 	and.w	r1, r3, #31
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b12:	bf00      	nop
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b087      	sub	sp, #28
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	0e5b      	lsrs	r3, r3, #25
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	4413      	add	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	0d1b      	lsrs	r3, r3, #20
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	401a      	ands	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	0d1b      	lsrs	r3, r3, #20
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	431a      	orrs	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0318 	and.w	r3, r3, #24
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b98:	40d9      	lsrs	r1, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	0007ffff 	.word	0x0007ffff

08000bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6093      	str	r3, [r2, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000cca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000cce:	f7ff ff9b 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cd6:	f7ff ffad 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cda:	2004      	movs	r0, #4
 8000cdc:	f7ff ffaa 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4831      	ldr	r0, [pc, #196]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cf2:	f005 fe35 	bl	8006960 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482a      	ldr	r0, [pc, #168]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d12:	f005 fa43 	bl	800619c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d36:	f005 fa57 	bl	80061e8 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d4a:	f005 f9df 	bl	800610c <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d52:	f7ff fea5 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d58:	f7ff ff30 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000d5c:	4817      	ldr	r0, [pc, #92]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d5e:	f7ff ff3f 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC1_Init+0x13c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	099b      	lsrs	r3, r3, #6
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0x140>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	099a      	lsrs	r2, r3, #6
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0x144>)
 8000d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d84:	e002      	b.n	8000d8c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f9      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000d94:	2106      	movs	r1, #6
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d98:	f7ff fe95 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000da2:	f7ff febc 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000da6:	227f      	movs	r2, #127	; 0x7f
 8000da8:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000dac:	f7ff fee2 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	50040300 	.word	0x50040300
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	053e2d63 	.word	0x053e2d63
 8000dcc:	cccccccd 	.word	0xcccccccd
 8000dd0:	0c900008 	.word	0x0c900008

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000e16:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000e1a:	f7ff fef5 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000e1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e22:	f7ff ff07 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f7ff ff04 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4830      	ldr	r0, [pc, #192]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e3e:	f005 fd8f 	bl	8006960 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000e42:	2108      	movs	r1, #8
 8000e44:	482e      	ldr	r0, [pc, #184]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e46:	f7ff ff0d 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4829      	ldr	r0, [pc, #164]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e5e:	f005 f99d 	bl	800619c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e82:	f005 f9b1 	bl	80061e8 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481d      	ldr	r0, [pc, #116]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e92:	f005 f93b 	bl	800610c <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000e96:	2100      	movs	r1, #0
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e9a:	f7ff fe01 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea0:	f7ff fe8c 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea6:	f7ff fe9b 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ADC2_Init+0x138>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	099b      	lsrs	r3, r3, #6
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <MX_ADC2_Init+0x13c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	099a      	lsrs	r2, r3, #6
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_ADC2_Init+0x140>)
 8000ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ecc:	e002      	b.n	8000ed4 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000edc:	2106      	movs	r1, #6
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ee0:	f7ff fdf1 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff fe18 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000eee:	227f      	movs	r2, #127	; 0x7f
 8000ef0:	4909      	ldr	r1, [pc, #36]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ef4:	f7ff fe3e 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	48000800 	.word	0x48000800
 8000f04:	50040100 	.word	0x50040100
 8000f08:	50040300 	.word	0x50040300
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	053e2d63 	.word	0x053e2d63
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	10c00010 	.word	0x10c00010

08000f1c <LL_AHB2_GRP1_EnableClock>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	43db      	mvns	r3, r3
 8000f68:	ea02 0103 	and.w	r1, r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000f84:	2320      	movs	r3, #32
 8000f86:	e003      	b.n	8000f90 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	fa03 f202 	lsl.w	r2, r3, r2
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <LL_GPIO_SetPinMode>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	613b      	str	r3, [r7, #16]
  return result;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61fb      	str	r3, [r7, #28]
  return result;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800100c:	2320      	movs	r3, #32
 800100e:	e003      	b.n	8001018 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_GPIO_SetPinPull>:
{
 8001032:	b480      	push	{r7}
 8001034:	b08b      	sub	sp, #44	; 0x2c
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	613b      	str	r3, [r7, #16]
  return result;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001058:	2320      	movs	r3, #32
 800105a:	e003      	b.n	8001064 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	61fb      	str	r3, [r7, #28]
  return result;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001086:	2320      	movs	r3, #32
 8001088:	e003      	b.n	8001092 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	431a      	orrs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	372c      	adds	r7, #44	; 0x2c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff ff16 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	f7ff ff13 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff10 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff ff0d 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin);
 8001102:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8001106:	483f      	ldr	r0, [pc, #252]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001108:	f7ff ffd0 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENC_CSn_GPIO_Port, ENC_CSn_Pin);
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <MX_GPIO_Init+0x140>)
 8001110:	f7ff ffcc 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff ffc6 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001120:	493a      	ldr	r1, [pc, #232]	; (800120c <MX_GPIO_Init+0x144>)
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff12 	bl	8000f4c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800113e:	2302      	movs	r3, #2
 8001140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4618      	mov	r0, r3
 800114a:	f005 f9c7 	bl	80064dc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	482c      	ldr	r0, [pc, #176]	; (8001208 <MX_GPIO_Init+0x140>)
 8001156:	f7ff ff6c 	bl	8001032 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <MX_GPIO_Init+0x140>)
 8001162:	f7ff ff29 	bl	8000fb8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|ENC_CLK_Pin;
 8001166:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4820      	ldr	r0, [pc, #128]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001182:	f005 fbed 	bl	8006960 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118c:	2301      	movs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_GPIO_Init+0x13c>)
 80011a2:	f005 fbdd 	bl	8006960 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CSn_Pin;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011aa:	2301      	movs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_CSn_GPIO_Port, &GPIO_InitStruct);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011c0:	f005 fbce 	bl	8006960 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_DO_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_DO_GPIO_Port, &GPIO_InitStruct);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0x140>)
 80011d6:	f005 fbc3 	bl	8006960 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e0:	2301      	movs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f005 fbb2 	bl	8006960 <LL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	00f00003 	.word	0x00f00003

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f023 0203 	bic.w	r2, r3, #3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 0201 	bic.w	r2, r3, #1
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60da      	str	r2, [r3, #12]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <LL_RCC_SetLPTIMClockSource>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	4904      	ldr	r1, [pc, #16]	; (8001458 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001446:	4313      	orrs	r3, r2
 8001448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000

0800145c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001490:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001494:	f7ff ffc8 	bl	8001428 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001498:	2020      	movs	r0, #32
 800149a:	f7ff ffdf 	bl	800145c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800149e:	f7ff feb7 	bl	8001210 <__NVIC_GetPriorityGrouping>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff07 	bl	80012bc <NVIC_EncodePriority>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	2042      	movs	r0, #66	; 0x42
 80014b4:	f7ff fed8 	bl	8001268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80014b8:	2042      	movs	r0, #66	; 0x42
 80014ba:	f7ff feb7 	bl	800122c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80014be:	2100      	movs	r1, #0
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014c2:	f7ff ff9d 	bl	8001400 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014c6:	2100      	movs	r1, #0
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014ca:	f7ff ff63 	bl	8001394 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014ce:	2100      	movs	r1, #0
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014d2:	f7ff ff4c 	bl	800136e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014d6:	2100      	movs	r1, #0
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014da:	f7ff ff22 	bl	8001322 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014de:	2100      	movs	r1, #0
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014e2:	f7ff ff31 	bl	8001348 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014e8:	f7ff ff7a 	bl	80013e0 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014f0:	f7ff ff63 	bl	80013ba <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40009400 	.word	0x40009400

080014fc <__NVIC_SetPriorityGrouping>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_LPTIM_Enable>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_LPTIM_StartCounter>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f023 0206 	bic.w	r2, r3, #6
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_LPTIM_SetAutoReload>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	041b      	lsls	r3, r3, #16
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f043 0202 	orr.w	r2, r3, #2
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_RCC_LSE_Enable>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <LL_RCC_LSE_Enable+0x20>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <LL_RCC_LSE_Enable+0x20>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_LSE_SetDriveCapability>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	f023 0218 	bic.w	r2, r3, #24
 800162e:	4905      	ldr	r1, [pc, #20]	; (8001644 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_LSE_IsReady>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <LL_RCC_LSE_IsReady+0x24>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d101      	bne.n	800165e <LL_RCC_LSE_IsReady+0x16>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_LSE_IsReady+0x18>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_MSI_Enable>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <LL_RCC_MSI_Enable+0x1c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <LL_RCC_MSI_Enable+0x1c>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_MSI_IsReady>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <LL_RCC_MSI_IsReady+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d101      	bne.n	80016a4 <LL_RCC_MSI_IsReady+0x14>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_RCC_MSI_IsReady+0x16>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_MSI_EnablePLLMode>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_MSI_EnableRangeSelection>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_RCC_MSI_SetRange>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LL_RCC_MSI_SetRange+0x24>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	4904      	ldr	r1, [pc, #16]	; (8001718 <LL_RCC_MSI_SetRange+0x24>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <LL_RCC_MSI_SetCalibTrimming>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <LL_RCC_SetSysClkSource>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <LL_RCC_SetSysClkSource+0x24>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 0203 	bic.w	r2, r3, #3
 8001758:	4904      	ldr	r1, [pc, #16]	; (800176c <LL_RCC_SetSysClkSource+0x24>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <LL_RCC_GetSysClkSource>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <LL_RCC_GetSysClkSource+0x18>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <LL_RCC_SetAHBPrescaler>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <LL_RCC_SetAHBPrescaler+0x24>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000

080017b4 <LL_RCC_SetAPB1Prescaler>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_SetAPB2Prescaler>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_RCC_PLL_Enable+0x1c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <LL_RCC_PLL_Enable+0x1c>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <LL_RCC_PLL_IsReady+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001834:	d101      	bne.n	800183a <LL_RCC_PLL_IsReady+0x16>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_RCC_PLL_IsReady+0x18>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001860:	4013      	ands	r3, r2
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	0212      	lsls	r2, r2, #8
 800186c:	4311      	orrs	r1, r2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	4904      	ldr	r1, [pc, #16]	; (8001884 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	f9ff808c 	.word	0xf9ff808c

0800188c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <LL_APB1_GRP1_EnableClock>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4013      	ands	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000

0800190c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <LL_FLASH_SetLatency+0x24>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 0207 	bic.w	r2, r3, #7
 800191c:	4904      	ldr	r1, [pc, #16]	; (8001930 <LL_FLASH_SetLatency+0x24>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40022000 	.word	0x40022000

08001934 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <LL_FLASH_GetLatency+0x18>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000

08001950 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <LL_SYSTICK_EnableIT+0x1c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <LL_SYSTICK_EnableIT+0x1c>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40007000 	.word	0x40007000

08001998 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40007000 	.word	0x40007000

080019b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ff7c 	bl	80018dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019e8:	f7ff ff60 	bl	80018ac <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff fd85 	bl	80014fc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f2:	f000 f873 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f6:	f7ff fb67 	bl	80010c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019fa:	f001 fdc5 	bl	8003588 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019fe:	f001 fb61 	bl	80030c4 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001a02:	f7ff fd43 	bl	800148c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001a06:	f001 fbb3 	bl	8003170 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001a0a:	f7ff f9e3 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a0e:	f7ff f93b 	bl	8000c88 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t MagEnc;
	MagEnc.DO_GPIOx = ENC_DO_GPIO_Port;
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <main+0xe0>)
 8001a14:	603b      	str	r3, [r7, #0]
	MagEnc.CLK_GPIOx = ENC_CLK_GPIO_Port;
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <main+0xe4>)
 8001a18:	607b      	str	r3, [r7, #4]
	MagEnc.CSn_GPIOx = ENC_CSn_GPIO_Port;
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <main+0xe0>)
 8001a1c:	60bb      	str	r3, [r7, #8]
	MagEnc.DO_Pin = ENC_DO_Pin;
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	81bb      	strh	r3, [r7, #12]
	MagEnc.CLK_Pin = ENC_CLK_Pin;
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	81fb      	strh	r3, [r7, #14]
	MagEnc.CSn_Pin = ENC_CSn_Pin;
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	823b      	strh	r3, [r7, #16]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001a2a:	f7ff ff91 	bl	8001950 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001a2e:	4824      	ldr	r0, [pc, #144]	; (8001ac0 <main+0xe8>)
 8001a30:	f7ff fd9c 	bl	800156c <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001a34:	4822      	ldr	r0, [pc, #136]	; (8001ac0 <main+0xe8>)
 8001a36:	f7ff fdcf 	bl	80015d8 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001a3a:	213f      	movs	r1, #63	; 0x3f
 8001a3c:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <main+0xe8>)
 8001a3e:	f7ff fdb8 	bl	80015b2 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001a42:	2104      	movs	r1, #4
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <main+0xe8>)
 8001a46:	f7ff fda1 	bl	800158c <LL_LPTIM_StartCounter>

	LL_SPI_Enable(SPI1);
 8001a4a:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <main+0xec>)
 8001a4c:	f7ff ffb4 	bl	80019b8 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001a50:	481d      	ldr	r0, [pc, #116]	; (8001ac8 <main+0xf0>)
 8001a52:	f7ff ffb1 	bl	80019b8 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001a56:	481d      	ldr	r0, [pc, #116]	; (8001acc <main+0xf4>)
 8001a58:	f7ff fd74 	bl	8001544 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001a5c:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <main+0xf8>)
 8001a5e:	f7ff fd71 	bl	8001544 <LL_ADC_Enable>

	CAN_configure();
 8001a62:	f002 fa11 	bl	8003e88 <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <main+0xfc>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 ff3b 	bl	80038e6 <EPOS4_SetCSTMode>
	AS5145B_Init(&MagEnc);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fe36 	bl	80036e4 <AS5145B_Init>
	systick_app_timer_module_init();
 8001a78:	f001 fd0a 	bl	8003490 <systick_app_timer_module_init>
	mpu9255_init(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f004 faab 	bl	8005fd8 <mpu9255_init>
	readTimer_event_handler();
 8001a82:	f004 fa1b 	bl	8005ebc <readTimer_event_handler>

	InitProsthesisControl();
 8001a86:	f000 f905 	bl	8001c94 <InitProsthesisControl>

	// Remove spikes from beginning
	for ( uint16_t i = 0; i < 1000; i++ );
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	82fb      	strh	r3, [r7, #22]
 8001a8e:	e002      	b.n	8001a96 <main+0xbe>
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	3301      	adds	r3, #1
 8001a94:	82fb      	strh	r3, [r7, #22]
 8001a96:	8afb      	ldrh	r3, [r7, #22]
 8001a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9c:	d3f8      	bcc.n	8001a90 <main+0xb8>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(None);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f934 	bl	8001d0c <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if (isProsthesisControlRequired)
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <main+0x100>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0fb      	beq.n	8001aa4 <main+0xcc>
	  {
		  RunProsthesisControl();
 8001aac:	f000 f948 	bl	8001d40 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <main+0x100>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	  if (isProsthesisControlRequired)
 8001ab6:	e7f5      	b.n	8001aa4 <main+0xcc>
 8001ab8:	48000800 	.word	0x48000800
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	40009400 	.word	0x40009400
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	40003800 	.word	0x40003800
 8001acc:	50040000 	.word	0x50040000
 8001ad0:	50040100 	.word	0x50040100
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	200000cc 	.word	0x200000cc

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff13 	bl	800190c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ff24 	bl	8001934 <LL_FLASH_GetLatency>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d1fa      	bne.n	8001ae8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001af2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af6:	f7ff ff3b 	bl	8001970 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001afa:	f7ff fdb9 	bl	8001670 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001afe:	bf00      	nop
 8001b00:	f7ff fdc6 	bl	8001690 <LL_RCC_MSI_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d1fa      	bne.n	8001b00 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001b0a:	f7ff fde3 	bl	80016d4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001b0e:	20b0      	movs	r0, #176	; 0xb0
 8001b10:	f7ff fdf0 	bl	80016f4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fe01 	bl	800171c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001b1a:	f7ff ff3d 	bl	8001998 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fd7c 	bl	800161c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001b24:	f7ff fd68 	bl	80015f8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001b28:	bf00      	nop
 8001b2a:	f7ff fd8d 	bl	8001648 <LL_RCC_LSE_IsReady>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d1fa      	bne.n	8001b2a <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001b34:	f7ff fdbe 	bl	80016b4 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3c:	2228      	movs	r2, #40	; 0x28
 8001b3e:	2150      	movs	r1, #80	; 0x50
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fe83 	bl	800184c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b46:	f7ff fea1 	bl	800188c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b4a:	f7ff fe5b 	bl	8001804 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b4e:	bf00      	nop
 8001b50:	f7ff fe68 	bl	8001824 <LL_RCC_PLL_IsReady>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d1fa      	bne.n	8001b50 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f7ff fdf4 	bl	8001748 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b60:	bf00      	nop
 8001b62:	f7ff fe05 	bl	8001770 <LL_RCC_GetSysClkSource>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d1fa      	bne.n	8001b62 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fe0d 	bl	800178c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b72:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b76:	f7ff fe1d 	bl	80017b4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b7e:	f7ff fe2d 	bl	80017dc <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001b82:	4804      	ldr	r0, [pc, #16]	; (8001b94 <SystemClock_Config+0xb8>)
 8001b84:	f005 fcb2 	bl	80074ec <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <SystemClock_Config+0xb8>)
 8001b8a:	f005 fce5 	bl	8007558 <LL_SetSystemCoreClock>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	04c4b400 	.word	0x04c4b400

08001b98 <LL_GPIO_SetOutputPin>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	619a      	str	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_GPIO_ResetOutputPin>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	b29b      	uxth	r3, r3
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2204      	movs	r2, #4
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// This is to localize variables that are subject to change during testing
void InitProsthesisControl(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
	CM_ImpCtrl.kd = 0.0f;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <InitProsthesisControl+0x58>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
	CM_ImpCtrl.kp = 0.0f;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <InitProsthesisControl+0x58>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
	CM_StanceCtrl.eqPoint_deg = 0.0f;		// Vanderbilt = -4.99 deg
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <InitProsthesisControl+0x5c>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	CM_StanceCtrl.kd = 0.0f;				// Vanderbilt = 0 N*m/(deg/s)
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <InitProsthesisControl+0x5c>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
	CM_StanceCtrl.kp = 0.0f;				// 2.50 used to keep heat down in EPOS, Vanderbilt = 4.97 N*m/deg
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <InitProsthesisControl+0x5c>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
	CM_SwingCtrl.eqPoint_deg = -35.0f;		// Vanderbilt = -35.0 deg
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <InitProsthesisControl+0x60>)
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <InitProsthesisControl+0x64>)
 8001cc4:	601a      	str	r2, [r3, #0]
	CM_SwingCtrl.kd = 0.00f;				// 0.05 used to get zero overshoot and 0.5 sec settling time, Vanderbilt = 0 N*m/(deg/s)
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <InitProsthesisControl+0x60>)
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
	CM_SwingCtrl.kp = 0.00f;				// 0.45 on the bench "feels" right, Vanderbilt = 0.65 N*m/deg
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <InitProsthesisControl+0x60>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]

	CM_lcBot_staticUpperLimit = 2200;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <InitProsthesisControl+0x68>)
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <InitProsthesisControl+0x6c>)
 8001cda:	601a      	str	r2, [r3, #0]
	CM_lcTop_staticUpperLimit = 2370;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <InitProsthesisControl+0x70>)
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <InitProsthesisControl+0x74>)
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000138 	.word	0x20000138
 8001cf0:	20000144 	.word	0x20000144
 8001cf4:	20000150 	.word	0x20000150
 8001cf8:	c20c0000 	.word	0xc20c0000
 8001cfc:	20000130 	.word	0x20000130
 8001d00:	45098000 	.word	0x45098000
 8001d04:	20000134 	.word	0x20000134
 8001d08:	45142000 	.word	0x45142000

08001d0c <RequireTestProgram>:

void RequireTestProgram(enum TestPrograms_e option)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <RequireTestProgram+0x2c>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	7013      	strb	r3, [r2, #0]

	if(testProgram != None)
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <RequireTestProgram+0x2c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <RequireTestProgram+0x30>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200000cd 	.word	0x200000cd
 8001d3c:	20000111 	.word	0x20000111

08001d40 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	GetInputs();
 8001d44:	f000 f828 	bl	8001d98 <GetInputs>
	ProcessInputs();
 8001d48:	f000 f886 	bl	8001e58 <ProcessInputs>

	if(isTestProgramRequired)
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <RunProsthesisControl+0x4c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <RunProsthesisControl+0x1a>
	{
		RunTestProgram();
 8001d54:	f000 fe90 	bl	8002a78 <RunTestProgram>
 8001d58:	e003      	b.n	8001d62 <RunProsthesisControl+0x22>
	}
	else
	{
		RunStateMachine();
 8001d5a:	f000 fdbd 	bl	80028d8 <RunStateMachine>
		RunImpedanceControl();
 8001d5e:	f000 fe2f 	bl	80029c0 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <RunProsthesisControl+0x50>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <RunProsthesisControl+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <RunProsthesisControl+0x54>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
	{
		isSecond = 0;
	}
}
 8001d76:	e006      	b.n	8001d86 <RunProsthesisControl+0x46>
	else if(isSecond)
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <RunProsthesisControl+0x54>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <RunProsthesisControl+0x46>
		isSecond = 0;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <RunProsthesisControl+0x54>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000111 	.word	0x20000111
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000110 	.word	0x20000110

08001d98 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
	CM_jointAngle_deg[0] = AS5145B_ReadPosition_Deg() - encBias_deg;
 8001d9e:	f001 fd63 	bl	8003868 <AS5145B_ReadPosition_Deg>
 8001da2:	eeb0 7a40 	vmov.f32	s14, s0
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <GetInputs+0x70>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <GetInputs+0x74>)
 8001db2:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->bot[0] = ReadLoadCell(ADC2);
 8001db6:	4816      	ldr	r0, [pc, #88]	; (8001e10 <GetInputs+0x78>)
 8001db8:	f000 f832 	bl	8001e20 <ReadLoadCell>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <GetInputs+0x7c>)
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->top[0] = ReadLoadCell(ADC1);
 8001dcc:	4812      	ldr	r0, [pc, #72]	; (8001e18 <GetInputs+0x80>)
 8001dce:	f000 f827 	bl	8001e20 <ReadLoadCell>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <GetInputs+0x7c>)
 8001dde:	edc3 7a03 	vstr	s15, [r3, #12]
	IMU_Data = IMU_read();
 8001de2:	4c0e      	ldr	r4, [pc, #56]	; (8001e1c <GetInputs+0x84>)
 8001de4:	463b      	mov	r3, r7
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fed2 	bl	8002b90 <IMU_read>
 8001dec:	4625      	mov	r5, r4
 8001dee:	463c      	mov	r4, r7
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	; 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20000120 	.word	0x20000120
 8001e10:	50040100 	.word	0x50040100
 8001e14:	20000190 	.word	0x20000190
 8001e18:	50040000 	.word	0x50040000
 8001e1c:	200000e0 	.word	0x200000e0

08001e20 <ReadLoadCell>:

// Should be moved to ADC driver??
static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fed1 	bl	8001bd0 <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8001e2e:	bf00      	nop
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff feee 	bl	8001c12 <LL_ADC_IsActiveFlag_EOC>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f9      	beq.n	8001e30 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fefb 	bl	8001c38 <LL_ADC_ClearFlag_EOC>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fed8 	bl	8001bf8 <LL_ADC_REG_ReadConversionData12>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81fb      	strh	r3, [r7, #14]
	return val;
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	float tau = 1 / (2 * 3.1416f * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8001e5e:	4b90      	ldr	r3, [pc, #576]	; (80020a0 <ProcessInputs+0x248>)
 8001e60:	607b      	str	r3, [r7, #4]

	// Derivative of angle and filtering of load cells
	// No derivative of angle (angular speed) on first execution
	// No filtering of load cells on first or second execution
	if(isFirst)
 8001e62:	4b90      	ldr	r3, [pc, #576]	; (80020a4 <ProcessInputs+0x24c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <ProcessInputs+0x54>
	{
		CM_jointSpeed_dps = 0.0f;
 8001e6a:	4b8f      	ldr	r3, [pc, #572]	; (80020a8 <ProcessInputs+0x250>)
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001e72:	4b8e      	ldr	r3, [pc, #568]	; (80020ac <ProcessInputs+0x254>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a8d      	ldr	r2, [pc, #564]	; (80020ac <ProcessInputs+0x254>)
 8001e78:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[0];
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	; (80020b0 <ProcessInputs+0x258>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a8c      	ldr	r2, [pc, #560]	; (80020b0 <ProcessInputs+0x258>)
 8001e80:	6093      	str	r3, [r2, #8]
		CM_LoadCell->top[2] = CM_LoadCell->top[0];
 8001e82:	4b8b      	ldr	r3, [pc, #556]	; (80020b0 <ProcessInputs+0x258>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4a8a      	ldr	r2, [pc, #552]	; (80020b0 <ProcessInputs+0x258>)
 8001e88:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <ProcessInputs+0x258>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a89      	ldr	r2, [pc, #548]	; (80020b4 <ProcessInputs+0x25c>)
 8001e90:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <ProcessInputs+0x258>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	4a87      	ldr	r2, [pc, #540]	; (80020b4 <ProcessInputs+0x25c>)
 8001e98:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 8001e9a:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <ProcessInputs+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <ProcessInputs+0x25c>)
 8001ea0:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 8001ea2:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <ProcessInputs+0x25c>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4a83      	ldr	r2, [pc, #524]	; (80020b4 <ProcessInputs+0x25c>)
 8001ea8:	6153      	str	r3, [r2, #20]
 8001eaa:	e0f0      	b.n	800208e <ProcessInputs+0x236>
	}
	else if(isSecond)
 8001eac:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <ProcessInputs+0x260>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d044      	beq.n	8001f3e <ProcessInputs+0xe6>
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001eb4:	4b7d      	ldr	r3, [pc, #500]	; (80020ac <ProcessInputs+0x254>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	4b7c      	ldr	r3, [pc, #496]	; (80020ac <ProcessInputs+0x254>)
 8001ebc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ecc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ed0:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <ProcessInputs+0x264>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <ProcessInputs+0x250>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <ProcessInputs+0x264>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <ProcessInputs+0x250>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001f04:	4b69      	ldr	r3, [pc, #420]	; (80020ac <ProcessInputs+0x254>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a68      	ldr	r2, [pc, #416]	; (80020ac <ProcessInputs+0x254>)
 8001f0a:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <ProcessInputs+0x258>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <ProcessInputs+0x258>)
 8001f12:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <ProcessInputs+0x258>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a65      	ldr	r2, [pc, #404]	; (80020b0 <ProcessInputs+0x258>)
 8001f1a:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001f1c:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <ProcessInputs+0x258>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a64      	ldr	r2, [pc, #400]	; (80020b4 <ProcessInputs+0x25c>)
 8001f22:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001f24:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <ProcessInputs+0x258>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <ProcessInputs+0x25c>)
 8001f2a:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <ProcessInputs+0x25c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a60      	ldr	r2, [pc, #384]	; (80020b4 <ProcessInputs+0x25c>)
 8001f32:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8001f34:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <ProcessInputs+0x25c>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <ProcessInputs+0x25c>)
 8001f3a:	6113      	str	r3, [r2, #16]
 8001f3c:	e0a7      	b.n	800208e <ProcessInputs+0x236>
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <ProcessInputs+0x254>)
 8001f40:	ed93 7a00 	vldr	s14, [r3]
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <ProcessInputs+0x254>)
 8001f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f5a:	4b58      	ldr	r3, [pc, #352]	; (80020bc <ProcessInputs+0x264>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <ProcessInputs+0x250>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <ProcessInputs+0x264>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <ProcessInputs+0x250>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <ProcessInputs+0x25c>)
 8001f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f94:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80020c0 <ProcessInputs+0x268>
 8001f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <ProcessInputs+0x25c>)
 8001f9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80020c4 <ProcessInputs+0x26c>
 8001fa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001faa:	ee37 7a67 	vsub.f32	s14, s14, s15
									   + 0.0128f * CM_LoadCell->bot[0] + 0.0256f * CM_LoadCell->bot[1] + 0.0128f * CM_LoadCell->bot[2];
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <ProcessInputs+0x258>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020c8 <ProcessInputs+0x270>
 8001fb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <ProcessInputs+0x258>)
 8001fc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fc6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80020cc <ProcessInputs+0x274>
 8001fca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <ProcessInputs+0x258>)
 8001fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fd8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80020c8 <ProcessInputs+0x270>
 8001fdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <ProcessInputs+0x25c>)
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <ProcessInputs+0x25c>)
 8001fec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ff0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80020c0 <ProcessInputs+0x268>
 8001ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <ProcessInputs+0x25c>)
 8001ffa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ffe:	eddf 6a31 	vldr	s13, [pc, #196]	; 80020c4 <ProcessInputs+0x26c>
 8002002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002006:	ee37 7a67 	vsub.f32	s14, s14, s15
									   + 0.0128f * CM_LoadCell->top[0] + 0.0256f * CM_LoadCell->top[1] + 0.0128f * CM_LoadCell->top[2];
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <ProcessInputs+0x258>)
 800200c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002010:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80020c8 <ProcessInputs+0x270>
 8002014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <ProcessInputs+0x258>)
 800201e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002022:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80020cc <ProcessInputs+0x274>
 8002026:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800202a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <ProcessInputs+0x258>)
 8002030:	edd3 7a05 	vldr	s15, [r3, #20]
 8002034:	eddf 6a24 	vldr	s13, [pc, #144]	; 80020c8 <ProcessInputs+0x270>
 8002038:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <ProcessInputs+0x25c>)
 8002042:	edc3 7a03 	vstr	s15, [r3, #12]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <ProcessInputs+0x254>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a18      	ldr	r2, [pc, #96]	; (80020ac <ProcessInputs+0x254>)
 800204c:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[1];
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <ProcessInputs+0x258>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <ProcessInputs+0x258>)
 8002054:	6093      	str	r3, [r2, #8]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <ProcessInputs+0x258>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <ProcessInputs+0x258>)
 800205c:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[2] = CM_LoadCell->top[1];
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <ProcessInputs+0x258>)
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <ProcessInputs+0x258>)
 8002064:	6153      	str	r3, [r2, #20]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <ProcessInputs+0x258>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <ProcessInputs+0x258>)
 800206c:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <ProcessInputs+0x25c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <ProcessInputs+0x25c>)
 8002074:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <ProcessInputs+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <ProcessInputs+0x25c>)
 800207c:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <ProcessInputs+0x25c>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <ProcessInputs+0x25c>)
 8002084:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <ProcessInputs+0x25c>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <ProcessInputs+0x25c>)
 800208c:	6113      	str	r3, [r2, #16]
	}

	CalibrateIMU();
 800208e:	f000 f81f 	bl	80020d0 <CalibrateIMU>
	ComputeLimbAngle();
 8002092:	f000 fb45 	bl	8002720 <ComputeLimbAngle>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	3c826122 	.word	0x3c826122
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000128 	.word	0x20000128
 80020ac:	20000120 	.word	0x20000120
 80020b0:	20000190 	.word	0x20000190
 80020b4:	200001d8 	.word	0x200001d8
 80020b8:	20000110 	.word	0x20000110
 80020bc:	20000004 	.word	0x20000004
 80020c0:	3fd3eab3 	.word	0x3fd3eab3
 80020c4:	3f34f0d8 	.word	0x3f34f0d8
 80020c8:	3c51b717 	.word	0x3c51b717
 80020cc:	3cd1b717 	.word	0x3cd1b717

080020d0 <CalibrateIMU>:

static void CalibrateIMU(void)
{
 80020d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d4:	b0a0      	sub	sp, #128	; 0x80
 80020d6:	af00      	add	r7, sp, #0
	double axBias_g = 0.0;
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double ayBias_g = 0.0;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double azBias_g = 0.0;
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double gxBias_dps = 0.0;
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double gyBias_dps = 0.0;
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double gzBias_dps = 0.0;
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double n = 1.0;				// Scaling factor (helps with normalization)
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	4bbf      	ldr	r3, [pc, #764]	; (8002424 <CalibrateIMU+0x354>)
 8002126:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double c1 = cos(0);
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4bbd      	ldr	r3, [pc, #756]	; (8002424 <CalibrateIMU+0x354>)
 8002130:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double c2 = cos(0);
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4bba      	ldr	r3, [pc, #744]	; (8002424 <CalibrateIMU+0x354>)
 800213a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double c3 = cos(0);
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4bb8      	ldr	r3, [pc, #736]	; (8002424 <CalibrateIMU+0x354>)
 8002144:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double s1 = sin(0);
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double s2 = sin(0);
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s3 = sin(0);
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Rotate IMU data and remove biases
	CM_IMU_Data.ax_g = n * ( IMU_Data.ax_g*(c1*c3 - c2*s1*s3) + IMU_Data.ay_g*(  -c3*s1 - c1*c2*s3) + IMU_Data.az_g*( s2*s3) ) - axBias_g;
 800216c:	4bae      	ldr	r3, [pc, #696]	; (8002428 <CalibrateIMU+0x358>)
 800216e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800217a:	f7fe f9e1 	bl	8000540 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4692      	mov	sl, r2
 8002184:	469b      	mov	fp, r3
 8002186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800218a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800218e:	f7fe f9d7 	bl	8000540 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219e:	f7fe f9cf 	bl	8000540 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4650      	mov	r0, sl
 80021a8:	4659      	mov	r1, fp
 80021aa:	f7fe f811 	bl	80001d0 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4640      	mov	r0, r8
 80021b4:	4649      	mov	r1, r9
 80021b6:	f7fe f9c3 	bl	8000540 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4692      	mov	sl, r2
 80021c0:	469b      	mov	fp, r3
 80021c2:	4b99      	ldr	r3, [pc, #612]	; (8002428 <CalibrateIMU+0x358>)
 80021c4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80021c8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f9b2 	bl	8000540 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80021ec:	f7fe f9a8 	bl	8000540 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fc:	f7fe f9a0 	bl	8000540 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fd ffe2 	bl	80001d0 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fe f994 	bl	8000540 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4650      	mov	r0, sl
 800221e:	4659      	mov	r1, fp
 8002220:	f7fd ffd8 	bl	80001d4 <__adddf3>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4690      	mov	r8, r2
 800222a:	4699      	mov	r9, r3
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <CalibrateIMU+0x358>)
 800222e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800223a:	f7fe f981 	bl	8000540 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4620      	mov	r0, r4
 8002244:	4629      	mov	r1, r5
 8002246:	f7fe f97b 	bl	8000540 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4640      	mov	r0, r8
 8002250:	4649      	mov	r1, r9
 8002252:	f7fd ffbf 	bl	80001d4 <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002262:	f7fe f96d 	bl	8000540 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002272:	f7fd ffad 	bl	80001d0 <__aeabi_dsub>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	496c      	ldr	r1, [pc, #432]	; (800242c <CalibrateIMU+0x35c>)
 800227c:	e9c1 2300 	strd	r2, r3, [r1]
	CM_IMU_Data.ay_g = n * ( IMU_Data.ax_g*(c1*s3 + c2*c3*s1) + IMU_Data.ay_g*(c1*c2*c3 - s1*s3   ) + IMU_Data.az_g*(-c3*s2) ) - ayBias_g;
 8002280:	4b69      	ldr	r3, [pc, #420]	; (8002428 <CalibrateIMU+0x358>)
 8002282:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800228a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800228e:	f7fe f957 	bl	8000540 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4690      	mov	r8, r2
 8002298:	4699      	mov	r9, r3
 800229a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022a2:	f7fe f94d 	bl	8000540 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b2:	f7fe f945 	bl	8000540 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4640      	mov	r0, r8
 80022bc:	4649      	mov	r1, r9
 80022be:	f7fd ff89 	bl	80001d4 <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fe f939 	bl	8000540 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4692      	mov	sl, r2
 80022d4:	469b      	mov	fp, r3
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <CalibrateIMU+0x358>)
 80022d8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80022dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80022e4:	f7fe f92c 	bl	8000540 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022f4:	f7fe f924 	bl	8000540 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4690      	mov	r8, r2
 80022fe:	4699      	mov	r9, r3
 8002300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002308:	f7fe f91a 	bl	8000540 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4640      	mov	r0, r8
 8002312:	4649      	mov	r1, r9
 8002314:	f7fd ff5c 	bl	80001d0 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fe f90e 	bl	8000540 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4650      	mov	r0, sl
 800232a:	4659      	mov	r1, fp
 800232c:	f7fd ff52 	bl	80001d4 <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4690      	mov	r8, r2
 8002336:	4699      	mov	r9, r3
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <CalibrateIMU+0x358>)
 800233a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002352:	f7fe f8f5 	bl	8000540 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4620      	mov	r0, r4
 800235c:	4629      	mov	r1, r5
 800235e:	f7fe f8ef 	bl	8000540 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4640      	mov	r0, r8
 8002368:	4649      	mov	r1, r9
 800236a:	f7fd ff33 	bl	80001d4 <__adddf3>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800237a:	f7fe f8e1 	bl	8000540 <__aeabi_dmul>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4610      	mov	r0, r2
 8002384:	4619      	mov	r1, r3
 8002386:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800238a:	f7fd ff21 	bl	80001d0 <__aeabi_dsub>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4926      	ldr	r1, [pc, #152]	; (800242c <CalibrateIMU+0x35c>)
 8002394:	e9c1 2302 	strd	r2, r3, [r1, #8]
	CM_IMU_Data.az_g = n * ( IMU_Data.ax_g*(        s1*s2   ) + IMU_Data.ay_g*(           c1*s2   ) + IMU_Data.az_g*( c2   ) ) - azBias_g;
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <CalibrateIMU+0x358>)
 800239a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800239e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023a6:	f7fe f8cb 	bl	8000540 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fe f8c5 	bl	8000540 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4690      	mov	r8, r2
 80023bc:	4699      	mov	r9, r3
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <CalibrateIMU+0x358>)
 80023c0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023cc:	f7fe f8b8 	bl	8000540 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fe f8b2 	bl	8000540 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4640      	mov	r0, r8
 80023e2:	4649      	mov	r1, r9
 80023e4:	f7fd fef6 	bl	80001d4 <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	461d      	mov	r5, r3
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <CalibrateIMU+0x358>)
 80023f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023fa:	f7fe f8a1 	bl	8000540 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fd fee5 	bl	80001d4 <__adddf3>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002416:	f7fe f893 	bl	8000540 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	e005      	b.n	8002430 <CalibrateIMU+0x360>
 8002424:	3ff00000 	.word	0x3ff00000
 8002428:	200000e0 	.word	0x200000e0
 800242c:	20000160 	.word	0x20000160
 8002430:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002434:	f7fd fecc 	bl	80001d0 <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	49b6      	ldr	r1, [pc, #728]	; (8002718 <CalibrateIMU+0x648>)
 800243e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CM_IMU_Data.gx_dps = n * ( IMU_Data.gx_dps*(c1*c3 - c2*s1*s3) + IMU_Data.gy_dps*(  -c3*s1 - c1*c2*s3) + IMU_Data.gz_dps*( s2*s3) ) - gxBias_dps;
 8002442:	4bb6      	ldr	r3, [pc, #728]	; (800271c <CalibrateIMU+0x64c>)
 8002444:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800244c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002450:	f7fe f876 	bl	8000540 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4690      	mov	r8, r2
 800245a:	4699      	mov	r9, r3
 800245c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002460:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002464:	f7fe f86c 	bl	8000540 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	f7fe f864 	bl	8000540 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4640      	mov	r0, r8
 800247e:	4649      	mov	r1, r9
 8002480:	f7fd fea6 	bl	80001d0 <__aeabi_dsub>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fe f858 	bl	8000540 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4690      	mov	r8, r2
 8002496:	4699      	mov	r9, r3
 8002498:	4ba0      	ldr	r3, [pc, #640]	; (800271c <CalibrateIMU+0x64c>)
 800249a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024b2:	f7fe f845 	bl	8000540 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4692      	mov	sl, r2
 80024bc:	469b      	mov	fp, r3
 80024be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024c6:	f7fe f83b 	bl	8000540 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d6:	f7fe f833 	bl	8000540 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4650      	mov	r0, sl
 80024e0:	4659      	mov	r1, fp
 80024e2:	f7fd fe75 	bl	80001d0 <__aeabi_dsub>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	f7fe f827 	bl	8000540 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4640      	mov	r0, r8
 80024f8:	4649      	mov	r1, r9
 80024fa:	f7fd fe6b 	bl	80001d4 <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4690      	mov	r8, r2
 8002504:	4699      	mov	r9, r3
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <CalibrateIMU+0x64c>)
 8002508:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800250c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002510:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002514:	f7fe f814 	bl	8000540 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fe f80e 	bl	8000540 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4640      	mov	r0, r8
 800252a:	4649      	mov	r1, r9
 800252c:	f7fd fe52 	bl	80001d4 <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800253c:	f7fe f800 	bl	8000540 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800254c:	f7fd fe40 	bl	80001d0 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4970      	ldr	r1, [pc, #448]	; (8002718 <CalibrateIMU+0x648>)
 8002556:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CM_IMU_Data.gy_dps = n * ( IMU_Data.gx_dps*(c1*s3 + c2*c3*s1) + IMU_Data.gy_dps*(c1*c2*c3 - s1*s3   ) + IMU_Data.gz_dps*(-c3*s2) ) - gyBias_dps;
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <CalibrateIMU+0x64c>)
 800255c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002564:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002568:	f7fd ffea 	bl	8000540 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4690      	mov	r8, r2
 8002572:	4699      	mov	r9, r3
 8002574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002578:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800257c:	f7fd ffe0 	bl	8000540 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800258c:	f7fd ffd8 	bl	8000540 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4640      	mov	r0, r8
 8002596:	4649      	mov	r1, r9
 8002598:	f7fd fe1c 	bl	80001d4 <__adddf3>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fd ffcc 	bl	8000540 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4690      	mov	r8, r2
 80025ae:	4699      	mov	r9, r3
 80025b0:	4b5a      	ldr	r3, [pc, #360]	; (800271c <CalibrateIMU+0x64c>)
 80025b2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80025b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80025be:	f7fd ffbf 	bl	8000540 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025ce:	f7fd ffb7 	bl	8000540 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4692      	mov	sl, r2
 80025d8:	469b      	mov	fp, r3
 80025da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025e2:	f7fd ffad 	bl	8000540 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4650      	mov	r0, sl
 80025ec:	4659      	mov	r1, fp
 80025ee:	f7fd fdef 	bl	80001d0 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd ffa1 	bl	8000540 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4640      	mov	r0, r8
 8002604:	4649      	mov	r1, r9
 8002606:	f7fd fde5 	bl	80001d4 <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	4b42      	ldr	r3, [pc, #264]	; (800271c <CalibrateIMU+0x64c>)
 8002614:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262c:	f7fd ff88 	bl	8000540 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fd ff82 	bl	8000540 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4640      	mov	r0, r8
 8002642:	4649      	mov	r1, r9
 8002644:	f7fd fdc6 	bl	80001d4 <__adddf3>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002654:	f7fd ff74 	bl	8000540 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002664:	f7fd fdb4 	bl	80001d0 <__aeabi_dsub>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	492a      	ldr	r1, [pc, #168]	; (8002718 <CalibrateIMU+0x648>)
 800266e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	CM_IMU_Data.gz_dps = n * ( IMU_Data.gx_dps*(        s1*s2   ) + IMU_Data.gy_dps*(           c1*s2   ) + IMU_Data.gz_dps*( c2   ) ) - gzBias_dps;
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <CalibrateIMU+0x64c>)
 8002674:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002678:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002680:	f7fd ff5e 	bl	8000540 <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4620      	mov	r0, r4
 800268a:	4629      	mov	r1, r5
 800268c:	f7fd ff58 	bl	8000540 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4690      	mov	r8, r2
 8002696:	4699      	mov	r9, r3
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <CalibrateIMU+0x64c>)
 800269a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800269e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026a6:	f7fd ff4b 	bl	8000540 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f7fd ff45 	bl	8000540 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4640      	mov	r0, r8
 80026bc:	4649      	mov	r1, r9
 80026be:	f7fd fd89 	bl	80001d4 <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <CalibrateIMU+0x64c>)
 80026cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d4:	f7fd ff34 	bl	8000540 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd fd78 	bl	80001d4 <__adddf3>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026f0:	f7fd ff26 	bl	8000540 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002700:	f7fd fd66 	bl	80001d0 <__aeabi_dsub>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4903      	ldr	r1, [pc, #12]	; (8002718 <CalibrateIMU+0x648>)
 800270a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800270e:	bf00      	nop
 8002710:	3780      	adds	r7, #128	; 0x80
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002718:	20000160 	.word	0x20000160
 800271c:	200000e0 	.word	0x200000e0

08002720 <ComputeLimbAngle>:

static void ComputeLimbAngle(void)
{
 8002720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
	double accelAngle_deg = ( atan( CM_IMU_Data.ax_g / sqrt( pow( CM_IMU_Data.ay_g, 2 ) + pow(CM_IMU_Data.az_g, 2 ) ) ) ) * 180/3.1416;
 8002728:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <ComputeLimbAngle+0x198>)
 800272a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <ComputeLimbAngle+0x198>)
 8002730:	ed93 7b02 	vldr	d7, [r3, #8]
 8002734:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 80028a0 <ComputeLimbAngle+0x180>
 8002738:	eeb0 0a47 	vmov.f32	s0, s14
 800273c:	eef0 0a67 	vmov.f32	s1, s15
 8002740:	f005 f910 	bl	8007964 <pow>
 8002744:	ec59 8b10 	vmov	r8, r9, d0
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <ComputeLimbAngle+0x198>)
 800274a:	ed93 7b04 	vldr	d7, [r3, #16]
 800274e:	ed9f 1b54 	vldr	d1, [pc, #336]	; 80028a0 <ComputeLimbAngle+0x180>
 8002752:	eeb0 0a47 	vmov.f32	s0, s14
 8002756:	eef0 0a67 	vmov.f32	s1, s15
 800275a:	f005 f903 	bl	8007964 <pow>
 800275e:	ec53 2b10 	vmov	r2, r3, d0
 8002762:	4640      	mov	r0, r8
 8002764:	4649      	mov	r1, r9
 8002766:	f7fd fd35 	bl	80001d4 <__adddf3>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	ec43 2b17 	vmov	d7, r2, r3
 8002772:	eeb0 0a47 	vmov.f32	s0, s14
 8002776:	eef0 0a67 	vmov.f32	s1, s15
 800277a:	f005 f963 	bl	8007a44 <sqrt>
 800277e:	ec53 2b10 	vmov	r2, r3, d0
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fe f805 	bl	8000794 <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b17 	vmov	d7, r2, r3
 8002792:	eeb0 0a47 	vmov.f32	s0, s14
 8002796:	eef0 0a67 	vmov.f32	s1, s15
 800279a:	f004 ff39 	bl	8007610 <atan>
 800279e:	ec51 0b10 	vmov	r0, r1, d0
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	4b45      	ldr	r3, [pc, #276]	; (80028bc <ComputeLimbAngle+0x19c>)
 80027a8:	f7fd feca 	bl	8000540 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	a33c      	add	r3, pc, #240	; (adr r3, 80028a8 <ComputeLimbAngle+0x188>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ffeb 	bl	8000794 <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	static double compFiltAngle_deg = 0.0;
	static double dGyroAngle_deg = 0.0;

	// Change in angle from gyro (trapezoidal used)
	dGyroAngle_deg = dt/2 * (CM_IMU_Data.gz_dps + dGyroAngle_deg);
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <ComputeLimbAngle+0x1a0>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027d4:	ee16 0a90 	vmov	r0, s13
 80027d8:	f7fd fe5a 	bl	8000490 <__aeabi_f2d>
 80027dc:	4604      	mov	r4, r0
 80027de:	460d      	mov	r5, r1
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <ComputeLimbAngle+0x198>)
 80027e2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <ComputeLimbAngle+0x1a4>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fcf2 	bl	80001d4 <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4620      	mov	r0, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7fd fea2 	bl	8000540 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4930      	ldr	r1, [pc, #192]	; (80028c4 <ComputeLimbAngle+0x1a4>)
 8002802:	e9c1 2300 	strd	r2, r3, [r1]

	// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
	double alpha = 0.002;
 8002806:	a32a      	add	r3, pc, #168	; (adr r3, 80028b0 <ComputeLimbAngle+0x190>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	e9c7 2300 	strd	r2, r3, [r7]
	compFiltAngle_deg = accelAngle_deg*alpha + (1 - alpha) * (dGyroAngle_deg + compFiltAngle_deg);
 8002810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002818:	f7fd fe92 	bl	8000540 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	4926      	ldr	r1, [pc, #152]	; (80028c8 <ComputeLimbAngle+0x1a8>)
 800282e:	f7fd fccf 	bl	80001d0 <__aeabi_dsub>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4690      	mov	r8, r2
 8002838:	4699      	mov	r9, r3
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <ComputeLimbAngle+0x1a4>)
 800283c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <ComputeLimbAngle+0x1ac>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fcc5 	bl	80001d4 <__adddf3>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4640      	mov	r0, r8
 8002850:	4649      	mov	r1, r9
 8002852:	f7fd fe75 	bl	8000540 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fcb9 	bl	80001d4 <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4919      	ldr	r1, [pc, #100]	; (80028cc <ComputeLimbAngle+0x1ac>)
 8002868:	e9c1 2300 	strd	r2, r3, [r1]

	#ifdef KNEE
	CM_limbAngle_deg = compFiltAngle_deg - CM_jointAngle_deg[0];
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <ComputeLimbAngle+0x1ac>)
 800286e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <ComputeLimbAngle+0x1b0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe0a 	bl	8000490 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fca4 	bl	80001d0 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4911      	ldr	r1, [pc, #68]	; (80028d4 <ComputeLimbAngle+0x1b4>)
 800288e:	e9c1 2300 	strd	r2, r3, [r1]
	#else
	CM_limbAngle_deg = compFiltAngle_deg + CM_jointAngle_deg[0];
	#endif
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800289c:	f3af 8000 	nop.w
 80028a0:	00000000 	.word	0x00000000
 80028a4:	40000000 	.word	0x40000000
 80028a8:	2e48e8a7 	.word	0x2e48e8a7
 80028ac:	400921ff 	.word	0x400921ff
 80028b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80028b4:	3f60624d 	.word	0x3f60624d
 80028b8:	20000160 	.word	0x20000160
 80028bc:	40668000 	.word	0x40668000
 80028c0:	20000004 	.word	0x20000004
 80028c4:	20000228 	.word	0x20000228
 80028c8:	3ff00000 	.word	0x3ff00000
 80028cc:	20000230 	.word	0x20000230
 80028d0:	20000120 	.word	0x20000120
 80028d4:	20000118 	.word	0x20000118

080028d8 <RunStateMachine>:

static void RunStateMachine(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	static enum StateMachine_e state;

	if(isFirst)
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <RunStateMachine+0xc4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <RunStateMachine+0x12>
	{
		state = Stance;
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <RunStateMachine+0xc8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
	}

	switch(state)
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <RunStateMachine+0xc8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <RunStateMachine+0x20>
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d02c      	beq.n	8002950 <RunStateMachine+0x78>
			state = Stance;
		}

		break;
	}
}
 80028f6:	e04b      	b.n	8002990 <RunStateMachine+0xb8>
		CM_state = 1800;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <RunStateMachine+0xcc>)
 80028fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80028fe:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint_deg = CM_StanceCtrl.eqPoint_deg;
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <RunStateMachine+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a29      	ldr	r2, [pc, #164]	; (80029ac <RunStateMachine+0xd4>)
 8002906:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_StanceCtrl.kd;
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <RunStateMachine+0xd0>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a27      	ldr	r2, [pc, #156]	; (80029ac <RunStateMachine+0xd4>)
 800290e:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_StanceCtrl.kp;
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <RunStateMachine+0xd0>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <RunStateMachine+0xd4>)
 8002916:	6093      	str	r3, [r2, #8]
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <RunStateMachine+0xd8>)
 800291a:	ed93 7a03 	vldr	s14, [r3, #12]
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <RunStateMachine+0xdc>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d400      	bmi.n	8002930 <RunStateMachine+0x58>
		break;
 800292e:	e02f      	b.n	8002990 <RunStateMachine+0xb8>
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <RunStateMachine+0xd8>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <RunStateMachine+0xe0>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	d400      	bmi.n	8002948 <RunStateMachine+0x70>
		break;
 8002946:	e023      	b.n	8002990 <RunStateMachine+0xb8>
			state = Swing;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <RunStateMachine+0xc8>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
		break;
 800294e:	e01f      	b.n	8002990 <RunStateMachine+0xb8>
		CM_state = 2900;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <RunStateMachine+0xcc>)
 8002952:	f640 3254 	movw	r2, #2900	; 0xb54
 8002956:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint_deg = CM_SwingCtrl.eqPoint_deg;
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <RunStateMachine+0xe4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <RunStateMachine+0xd4>)
 800295e:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_SwingCtrl.kd;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <RunStateMachine+0xe4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <RunStateMachine+0xd4>)
 8002966:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_SwingCtrl.kp;
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <RunStateMachine+0xe4>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <RunStateMachine+0xd4>)
 800296e:	6093      	str	r3, [r2, #8]
		if(CM_LoadCell_Filtered->bot[0] > CM_lcBot_staticUpperLimit)
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <RunStateMachine+0xd8>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <RunStateMachine+0xe0>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	dc00      	bgt.n	8002988 <RunStateMachine+0xb0>
		break;
 8002986:	e002      	b.n	800298e <RunStateMachine+0xb6>
			state = Stance;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <RunStateMachine+0xc8>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
		break;
 800298e:	bf00      	nop
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008
 80029a0:	20000238 	.word	0x20000238
 80029a4:	20000222 	.word	0x20000222
 80029a8:	20000144 	.word	0x20000144
 80029ac:	200000d0 	.word	0x200000d0
 80029b0:	200001d8 	.word	0x200001d8
 80029b4:	20000134 	.word	0x20000134
 80029b8:	20000130 	.word	0x20000130
 80029bc:	20000150 	.word	0x20000150

080029c0 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <RunImpedanceControl+0x98>)
 80029c8:	617b      	str	r3, [r7, #20]
	float nomCurrent_amp = 8.0f;					// is this number accurate??
 80029ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80029ce:	613b      	str	r3, [r7, #16]
	float torqueConst = 60 / (2*3.1416f * 100);		// Units in N*m/A, for Kv = 100 rpm/V
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <RunImpedanceControl+0x9c>)
 80029d2:	60fb      	str	r3, [r7, #12]

	float errorPos_deg = ProsCtrl.eqPoint_deg - CM_jointAngle_deg[0];
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <RunImpedanceControl+0xa0>)
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <RunImpedanceControl+0xa4>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e4:	edc7 7a02 	vstr	s15, [r7, #8]

	#ifdef KNEE
	CM_jointTorque_nm = -(ProsCtrl.kp*errorPos_deg - ProsCtrl.kd*CM_jointSpeed_dps);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <RunImpedanceControl+0xa0>)
 80029ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80029ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <RunImpedanceControl+0xa0>)
 80029f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <RunImpedanceControl+0xa8>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	eef1 7a67 	vneg.f32	s15, s15
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <RunImpedanceControl+0xac>)
 8002a10:	edc3 7a00 	vstr	s15, [r3]
	#else
	CM_jointTorque_nm = ProsCtrl.kp*errorPos_deg - ProsCtrl.kd*CM_jointSpeed_dps;
	#endif

	int32_t motorTorque = CM_jointTorque_nm / (torqueConst * gearRatio * nomCurrent_amp) * 1000;
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <RunImpedanceControl+0xac>)
 8002a16:	edd3 6a00 	vldr	s13, [r3]
 8002a1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a32:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a70 <RunImpedanceControl+0xb0>
 8002a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque(CAN_ID, motorTorque);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <RunImpedanceControl+0xb4>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 ffae 	bl	80039ac <EPOS4_SetTorque>
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	42200000 	.word	0x42200000
 8002a5c:	3dc391b3 	.word	0x3dc391b3
 8002a60:	200000d0 	.word	0x200000d0
 8002a64:	20000120 	.word	0x20000120
 8002a68:	20000128 	.word	0x20000128
 8002a6c:	2000012c 	.word	0x2000012c
 8002a70:	447a0000 	.word	0x447a0000
 8002a74:	20000000 	.word	0x20000000

08002a78 <RunTestProgram>:

static void RunTestProgram(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
	switch (testProgram)
 8002a7e:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <RunTestProgram+0xf8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d870      	bhi.n	8002b68 <RunTestProgram+0xf0>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <RunTestProgram+0x14>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002b67 	.word	0x08002b67
 8002a90:	08002b67 	.word	0x08002b67
 8002a94:	08002aa1 	.word	0x08002aa1
 8002a98:	08002ab3 	.word	0x08002ab3
 8002a9c:	08002aeb 	.word	0x08002aeb
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 100;
 8002aa0:	2364      	movs	r3, #100	; 0x64
 8002aa2:	607b      	str	r3, [r7, #4]
		EPOS4_SetTorque(CAN_ID, torque);
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <RunTestProgram+0xfc>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 ff7e 	bl	80039ac <EPOS4_SetTorque>
		break;
 8002ab0:	e05a      	b.n	8002b68 <RunTestProgram+0xf0>
	}
	case MagneticEncoderBias:
	{
		uint16_t i;

		uint32_t sum = 0.0f;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < 1000; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	83fb      	strh	r3, [r7, #30]
 8002aba:	e00a      	b.n	8002ad2 <RunTestProgram+0x5a>
		{
			uint16_t bias_raw = AS5145B_ReadPosition_Raw();
 8002abc:	f000 fec6 	bl	800384c <AS5145B_ReadPosition_Raw>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	817b      	strh	r3, [r7, #10]
			sum += bias_raw;
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < 1000; i++)
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	83fb      	strh	r3, [r7, #30]
 8002ad2:	8bfb      	ldrh	r3, [r7, #30]
 8002ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad8:	d3f0      	bcc.n	8002abc <RunTestProgram+0x44>
		}

		CM_magEncBias_raw = sum / i;
 8002ada:	8bfb      	ldrh	r3, [r7, #30]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <RunTestProgram+0x100>)
 8002ae6:	801a      	strh	r2, [r3, #0]

		break;
 8002ae8:	e03e      	b.n	8002b68 <RunTestProgram+0xf0>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <RunTestProgram+0x104>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02a      	beq.n	8002b48 <RunTestProgram+0xd0>
		{
			uint16_t i;
			float sum = 0.0f;
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]

			for(i = 0; i < 1000; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	82fb      	strh	r3, [r7, #22]
 8002afc:	e00e      	b.n	8002b1c <RunTestProgram+0xa4>
			{
				float pos_deg = AS5145B_ReadPosition_Deg();
 8002afe:	f000 feb3 	bl	8003868 <AS5145B_ReadPosition_Deg>
 8002b02:	ed87 0a03 	vstr	s0, [r7, #12]
				sum += pos_deg;
 8002b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	82fb      	strh	r3, [r7, #22]
 8002b1c:	8afb      	ldrh	r3, [r7, #22]
 8002b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b22:	d3ec      	bcc.n	8002afe <RunTestProgram+0x86>
			}

			CM_ImpCtrl.eqPoint_deg = sum / i - encBias_deg;
 8002b24:	8afb      	ldrh	r3, [r7, #22]
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <RunTestProgram+0x108>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <RunTestProgram+0x10c>)
 8002b42:	edc3 7a00 	vstr	s15, [r3]
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;

			RunImpedanceControl();
		}

		break;
 8002b46:	e00f      	b.n	8002b68 <RunTestProgram+0xf0>
			ProsCtrl.kd = CM_ImpCtrl.kd;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <RunTestProgram+0x10c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <RunTestProgram+0x110>)
 8002b4e:	6053      	str	r3, [r2, #4]
			ProsCtrl.kp = CM_ImpCtrl.kp;
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <RunTestProgram+0x10c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <RunTestProgram+0x110>)
 8002b56:	6093      	str	r3, [r2, #8]
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <RunTestProgram+0x10c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <RunTestProgram+0x110>)
 8002b5e:	6013      	str	r3, [r2, #0]
			RunImpedanceControl();
 8002b60:	f7ff ff2e 	bl	80029c0 <RunImpedanceControl>
		break;
 8002b64:	e000      	b.n	8002b68 <RunTestProgram+0xf0>
		break;
 8002b66:	bf00      	nop
	}
	}
}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200000cd 	.word	0x200000cd
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000220 	.word	0x20000220
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000138 	.word	0x20000138
 8002b88:	200000d0 	.word	0x200000d0
 8002b8c:	00000000 	.word	0x00000000

08002b90 <IMU_read>:
/*******************************************************************************
* Should move to IMU driver??
*******************************************************************************/

struct IMU_Data_s IMU_read(void)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b09c      	sub	sp, #112	; 0x70
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	struct IMU_Data_s IMU;
	uint8_t response[21];
	WriteReg(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG);
 8002b98:	218c      	movs	r1, #140	; 0x8c
 8002b9a:	2025      	movs	r0, #37	; 0x25
 8002b9c:	f000 f984 	bl	8002ea8 <WriteReg>
	WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL);
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	2026      	movs	r0, #38	; 0x26
 8002ba4:	f000 f980 	bl	8002ea8 <WriteReg>
	WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87);
 8002ba8:	2187      	movs	r1, #135	; 0x87
 8002baa:	2027      	movs	r0, #39	; 0x27
 8002bac:	f000 f97c 	bl	8002ea8 <WriteReg>

	ReadRegs(MPUREG_ACCEL_XOUT_H, response, 21);
 8002bb0:	f107 0320 	add.w	r3, r7, #32
 8002bb4:	2215      	movs	r2, #21
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	203b      	movs	r0, #59	; 0x3b
 8002bba:	f000 f9bf 	bl	8002f3c <ReadRegs>
	int16_t gyro[3];

	#ifdef RIGHT
	int8_t orientation[3] = {1, 2, 3};
	#else
	int8_t orientation[3] = {-1, 2, -3};
 8002bbe:	4ab8      	ldr	r2, [pc, #736]	; (8002ea0 <IMU_read+0x310>)
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	8019      	strh	r1, [r3, #0]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	0c12      	lsrs	r2, r2, #16
 8002bce:	701a      	strb	r2, [r3, #0]
	#endif

	if(orientation[0] > 0)
 8002bd0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dd22      	ble.n	8002c1e <IMU_read+0x8e>
	{
		accel[orientation[0]-1] = ((int16_t) response[0] << 8) | response[1];
 8002bd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	b219      	sxth	r1, r3
 8002be0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	430a      	orrs	r2, r1
 8002bee:	b212      	sxth	r2, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	3370      	adds	r3, #112	; 0x70
 8002bf4:	443b      	add	r3, r7
 8002bf6:	f823 2c58 	strh.w	r2, [r3, #-88]
		gyro[orientation[0]-1] = ((int16_t) response[8] << 8) | response[9];
 8002bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	b219      	sxth	r1, r3
 8002c02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	b212      	sxth	r2, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	3370      	adds	r3, #112	; 0x70
 8002c16:	443b      	add	r3, r7
 8002c18:	f823 2c60 	strh.w	r2, [r3, #-96]
 8002c1c:	e02d      	b.n	8002c7a <IMU_read+0xea>
	}
	else
	{
		int16_t tmp = ((int16_t) response[0] << 8) | response[1];
 8002c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		accel[-orientation[0]-1] = -tmp;
 8002c32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002c36:	425b      	negs	r3, r3
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	b212      	sxth	r2, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	3370      	adds	r3, #112	; 0x70
 8002c46:	443b      	add	r3, r7
 8002c48:	f823 2c58 	strh.w	r2, [r3, #-88]

		tmp = ((int16_t) response[8] << 8) | response[9];
 8002c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		gyro[-orientation[0]-1] = -tmp;
 8002c60:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002c64:	425b      	negs	r3, r3
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	b212      	sxth	r2, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	3370      	adds	r3, #112	; 0x70
 8002c74:	443b      	add	r3, r7
 8002c76:	f823 2c60 	strh.w	r2, [r3, #-96]
	}

	if(orientation[1] > 0)
 8002c7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	dd22      	ble.n	8002cc8 <IMU_read+0x138>
	{
		accel[orientation[1]-1] = ((int16_t) response[2] << 8) | response[3];
 8002c82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b219      	sxth	r1, r3
 8002c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	b212      	sxth	r2, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	3370      	adds	r3, #112	; 0x70
 8002c9e:	443b      	add	r3, r7
 8002ca0:	f823 2c58 	strh.w	r2, [r3, #-88]
		gyro[orientation[1]-1] = ((int16_t) response[10] << 8) | response[11];
 8002ca4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	b219      	sxth	r1, r3
 8002cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cb0:	b21a      	sxth	r2, r3
 8002cb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	b212      	sxth	r2, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	3370      	adds	r3, #112	; 0x70
 8002cc0:	443b      	add	r3, r7
 8002cc2:	f823 2c60 	strh.w	r2, [r3, #-96]
 8002cc6:	e02d      	b.n	8002d24 <IMU_read+0x194>
	}
	else
	{
		int16_t tmp = ((int16_t) response[2] << 8) | response[3];
 8002cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	b21a      	sxth	r2, r3
 8002cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		accel[-orientation[1]-1] = -tmp;
 8002cdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002ce0:	425b      	negs	r3, r3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	b212      	sxth	r2, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	3370      	adds	r3, #112	; 0x70
 8002cf0:	443b      	add	r3, r7
 8002cf2:	f823 2c58 	strh.w	r2, [r3, #-88]

		tmp = ((int16_t) response[10] << 8) | response[11];
 8002cf6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		gyro[-orientation[1]-1] = -tmp;
 8002d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002d0e:	425b      	negs	r3, r3
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	b212      	sxth	r2, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	3370      	adds	r3, #112	; 0x70
 8002d1e:	443b      	add	r3, r7
 8002d20:	f823 2c60 	strh.w	r2, [r3, #-96]
	}

	if(orientation[2] > 0)
 8002d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dd22      	ble.n	8002d72 <IMU_read+0x1e2>
	{
		accel[orientation[2]-1] = ((int16_t) response[4] << 8) | response[5];
 8002d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	b219      	sxth	r1, r3
 8002d34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	b212      	sxth	r2, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	3370      	adds	r3, #112	; 0x70
 8002d48:	443b      	add	r3, r7
 8002d4a:	f823 2c58 	strh.w	r2, [r3, #-88]
		gyro[orientation[2]-1] = ((int16_t) response[12] << 8) | response[13];
 8002d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b219      	sxth	r1, r3
 8002d56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	430a      	orrs	r2, r1
 8002d64:	b212      	sxth	r2, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	3370      	adds	r3, #112	; 0x70
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f823 2c60 	strh.w	r2, [r3, #-96]
 8002d70:	e02d      	b.n	8002dce <IMU_read+0x23e>
	}
	else
	{
		int16_t tmp = ((int16_t) response[4] << 8) | response[5];
 8002d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	b21a      	sxth	r2, r3
 8002d7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		accel[-orientation[2]-1] = -tmp;
 8002d86:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	b212      	sxth	r2, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	3370      	adds	r3, #112	; 0x70
 8002d9a:	443b      	add	r3, r7
 8002d9c:	f823 2c58 	strh.w	r2, [r3, #-88]

		tmp = ((int16_t) response[12] << 8) | response[13];
 8002da0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		gyro[-orientation[2]-1] = -tmp;
 8002db4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002db8:	425b      	negs	r3, r3
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	b212      	sxth	r2, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	3370      	adds	r3, #112	; 0x70
 8002dc8:	443b      	add	r3, r7
 8002dca:	f823 2c60 	strh.w	r2, [r3, #-96]
	}

	IMU.ax_g = accel[0] / 4096.0;
 8002dce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fb4a 	bl	800046c <__aeabi_i2d>
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <IMU_read+0x314>)
 8002dde:	f7fd fcd9 	bl	8000794 <__aeabi_ddiv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMU.ay_g = accel[1] / 4096.0;
 8002dea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb3c 	bl	800046c <__aeabi_i2d>
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <IMU_read+0x314>)
 8002dfa:	f7fd fccb 	bl	8000794 <__aeabi_ddiv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	IMU.az_g = accel[2] / 4096.0;
 8002e06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fb2e 	bl	800046c <__aeabi_i2d>
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <IMU_read+0x314>)
 8002e16:	f7fd fcbd 	bl	8000794 <__aeabi_ddiv>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	IMU.gx_dps = gyro[0] / 32.8;
 8002e22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb20 	bl	800046c <__aeabi_i2d>
 8002e2c:	a31a      	add	r3, pc, #104	; (adr r3, 8002e98 <IMU_read+0x308>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fcaf 	bl	8000794 <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	IMU.gy_dps = gyro[1] / 32.8;
 8002e3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb12 	bl	800046c <__aeabi_i2d>
 8002e48:	a313      	add	r3, pc, #76	; (adr r3, 8002e98 <IMU_read+0x308>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fca1 	bl	8000794 <__aeabi_ddiv>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	IMU.gz_dps = gyro[2] / 32.8;
 8002e5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb04 	bl	800046c <__aeabi_i2d>
 8002e64:	a30c      	add	r3, pc, #48	; (adr r3, 8002e98 <IMU_read+0x308>)
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f7fd fc93 	bl	8000794 <__aeabi_ddiv>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	return IMU;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	461d      	mov	r5, r3
 8002e7a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	3770      	adds	r7, #112	; 0x70
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdb0      	pop	{r4, r5, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	66666666 	.word	0x66666666
 8002e9c:	40406666 	.word	0x40406666
 8002ea0:	08008808 	.word	0x08008808
 8002ea4:	40b00000 	.word	0x40b00000

08002ea8 <WriteReg>:

unsigned int WriteReg(uint8_t adress, uint8_t data)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	71fb      	strb	r3, [r7, #7]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71bb      	strb	r3, [r7, #6]
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec0:	f7fe fe78 	bl	8001bb4 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002ec4:	bf00      	nop
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <WriteReg+0x90>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f9      	beq.n	8002ec6 <WriteReg+0x1e>
	LL_SPI_TransmitData8(SPI1, adress);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4818      	ldr	r0, [pc, #96]	; (8002f38 <WriteReg+0x90>)
 8002ed8:	f7fe fec9 	bl	8001c6e <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002edc:	bf00      	nop
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <WriteReg+0x90>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f9      	beq.n	8002ede <WriteReg+0x36>
	LL_SPI_ReceiveData8(SPI1);
 8002eea:	4813      	ldr	r0, [pc, #76]	; (8002f38 <WriteReg+0x90>)
 8002eec:	f7fe feb1 	bl	8001c52 <LL_SPI_ReceiveData8>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002ef0:	bf00      	nop
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <WriteReg+0x90>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f9      	beq.n	8002ef2 <WriteReg+0x4a>
	LL_SPI_TransmitData8(SPI1, data);
 8002efe:	79bb      	ldrb	r3, [r7, #6]
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <WriteReg+0x90>)
 8002f04:	f7fe feb3 	bl	8001c6e <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002f08:	bf00      	nop
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <WriteReg+0x90>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f9      	beq.n	8002f0a <WriteReg+0x62>
	temp_val = LL_SPI_ReceiveData8(SPI1);
 8002f16:	4808      	ldr	r0, [pc, #32]	; (8002f38 <WriteReg+0x90>)
 8002f18:	f7fe fe9b 	bl	8001c52 <LL_SPI_ReceiveData8>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60fb      	str	r3, [r7, #12]

	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f28:	f7fe fe36 	bl	8001b98 <LL_GPIO_SetOutputPin>
	return temp_val;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40013000 	.word	0x40013000

08002f3c <ReadRegs>:

void ReadRegs(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	73fb      	strb	r3, [r7, #15]
	unsigned int i = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f56:	f7fe fe2d 	bl	8001bb4 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002f5a:	bf00      	nop
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <ReadRegs+0xac>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f9      	beq.n	8002f5c <ReadRegs+0x20>
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80));
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	481d      	ldr	r0, [pc, #116]	; (8002fe8 <ReadRegs+0xac>)
 8002f74:	f7fe fe7b 	bl	8001c6e <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002f78:	bf00      	nop
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <ReadRegs+0xac>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f9      	beq.n	8002f7a <ReadRegs+0x3e>
	LL_SPI_ReceiveData8(SPI1);
 8002f86:	4818      	ldr	r0, [pc, #96]	; (8002fe8 <ReadRegs+0xac>)
 8002f88:	f7fe fe63 	bl	8001c52 <LL_SPI_ReceiveData8>

	for (i = 0; i < Bytes; i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e01c      	b.n	8002fcc <ReadRegs+0x90>
	{
		while(!(SPI1->SR & SPI_SR_TXE));
 8002f92:	bf00      	nop
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <ReadRegs+0xac>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f9      	beq.n	8002f94 <ReadRegs+0x58>
		LL_SPI_TransmitData8(SPI1, 0x00);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <ReadRegs+0xac>)
 8002fa4:	f7fe fe63 	bl	8001c6e <LL_SPI_TransmitData8>
		while(!(SPI1->SR & SPI_SR_RXNE));
 8002fa8:	bf00      	nop
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <ReadRegs+0xac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f9      	beq.n	8002faa <ReadRegs+0x6e>
		ReadBuf[i] = LL_SPI_ReceiveData8(SPI1);
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	18d4      	adds	r4, r2, r3
 8002fbc:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <ReadRegs+0xac>)
 8002fbe:	f7fe fe48 	bl	8001c52 <LL_SPI_ReceiveData8>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < Bytes; i++)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3de      	bcc.n	8002f92 <ReadRegs+0x56>
	}

	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f7fe fddc 	bl	8001b98 <LL_GPIO_SetOutputPin>
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	40013000 	.word	0x40013000

08002fec <LL_AHB2_GRP1_EnableClock>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000

0800301c <LL_APB1_GRP1_EnableClock>:
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003032:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000

0800304c <LL_APB2_GRP1_EnableClock>:
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003062:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40021000 	.word	0x40021000

0800307c <LL_SPI_SetStandard>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 0210 	bic.w	r2, r3, #16
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	605a      	str	r2, [r3, #4]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_SPI_DisableNSSPulseMgt>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 0208 	bic.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	605a      	str	r2, [r3, #4]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80030ca:	f107 0318 	add.w	r3, r7, #24
 80030ce:	2228      	movs	r2, #40	; 0x28
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 fa92 	bl	80075fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	463b      	mov	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80030e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030ec:	f7ff ffae 	bl	800304c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff ff7b 	bl	8002fec <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 80030f6:	23e0      	movs	r3, #224	; 0xe0
 80030f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030fa:	2302      	movs	r3, #2
 80030fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030fe:	2303      	movs	r3, #3
 8003100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800310a:	2305      	movs	r3, #5
 800310c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	463b      	mov	r3, r7
 8003110:	4619      	mov	r1, r3
 8003112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003116:	f003 fc23 	bl	8006960 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800311e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003122:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003124:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003128:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800312a:	2302      	movs	r3, #2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800312e:	2301      	movs	r3, #1
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003138:	2308      	movs	r3, #8
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800313c:	2300      	movs	r3, #0
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003144:	2307      	movs	r3, #7
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	4619      	mov	r1, r3
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <MX_SPI1_Init+0xa8>)
 8003150:	f004 f86e 	bl	8007230 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003154:	2100      	movs	r1, #0
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <MX_SPI1_Init+0xa8>)
 8003158:	f7ff ff90 	bl	800307c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <MX_SPI1_Init+0xa8>)
 800315e:	f7ff ffa0 	bl	80030a2 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	3740      	adds	r7, #64	; 0x40
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40013000 	.word	0x40013000

08003170 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b090      	sub	sp, #64	; 0x40
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	2228      	movs	r2, #40	; 0x28
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f004 fa3c 	bl	80075fc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	463b      	mov	r3, r7
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003194:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003198:	f7ff ff40 	bl	800301c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800319c:	2002      	movs	r0, #2
 800319e:	f7ff ff25 	bl	8002fec <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 80031a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031a8:	2302      	movs	r3, #2
 80031aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80031b8:	2305      	movs	r3, #5
 80031ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	463b      	mov	r3, r7
 80031be:	4619      	mov	r1, r3
 80031c0:	4815      	ldr	r0, [pc, #84]	; (8003218 <MX_SPI2_Init+0xa8>)
 80031c2:	f003 fbcd 	bl	8006960 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80031ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80031ce:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80031d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80031d4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80031d6:	2302      	movs	r3, #2
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80031da:	2301      	movs	r3, #1
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80031de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80031e4:	2308      	movs	r3, #8
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80031e8:	2300      	movs	r3, #0
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80031f0:	2307      	movs	r3, #7
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80031f4:	f107 0318 	add.w	r3, r7, #24
 80031f8:	4619      	mov	r1, r3
 80031fa:	4808      	ldr	r0, [pc, #32]	; (800321c <MX_SPI2_Init+0xac>)
 80031fc:	f004 f818 	bl	8007230 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003200:	2100      	movs	r1, #0
 8003202:	4806      	ldr	r0, [pc, #24]	; (800321c <MX_SPI2_Init+0xac>)
 8003204:	f7ff ff3a 	bl	800307c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_SPI2_Init+0xac>)
 800320a:	f7ff ff4a 	bl	80030a2 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	3740      	adds	r7, #64	; 0x40
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	48000400 	.word	0x48000400
 800321c:	40003800 	.word	0x40003800

08003220 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d101      	bne.n	8003258 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800326a:	e7fe      	b.n	800326a <NMI_Handler+0x4>

0800326c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003270:	e7fe      	b.n	8003270 <HardFault_Handler+0x4>

08003272 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003276:	e7fe      	b.n	8003276 <MemManage_Handler+0x4>

08003278 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327c:	e7fe      	b.n	800327c <BusFault_Handler+0x4>

0800327e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003282:	e7fe      	b.n	8003282 <UsageFault_Handler+0x4>

08003284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler
******************************************************************************/

	systick_app_timer_tickAndProcess();
 80032b2:	f000 f829 	bl	8003308 <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 80032c0:	4806      	ldr	r0, [pc, #24]	; (80032dc <LPTIM2_IRQHandler+0x20>)
 80032c2:	f7ff ffbd 	bl	8003240 <LL_LPTIM_IsActiveFlag_ARRM>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <LPTIM2_IRQHandler+0x24>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 80032d2:	4802      	ldr	r0, [pc, #8]	; (80032dc <LPTIM2_IRQHandler+0x20>)
 80032d4:	f7ff ffa4 	bl	8003220 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40009400 	.word	0x40009400
 80032e0:	200000cc 	.word	0x200000cc

080032e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <SystemInit+0x20>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <SystemInit+0x20>)
 80032f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 800330e:	2300      	movs	r3, #0
 8003310:	71fb      	strb	r3, [r7, #7]
 8003312:	e050      	b.n	80033b6 <systick_app_timer_tickAndProcess+0xae>
			// quick null check, for sanity
			if (appTimer.channel[i].timer != 0) {
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d046      	beq.n	80033b0 <systick_app_timer_tickAndProcess+0xa8>
				if (appTimer.channel[i].active) {
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 8003326:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <systick_app_timer_tickAndProcess+0xa8>
					appTimer.channel[i].timer->value++;
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	3201      	adds	r2, #1
 800333c:	605a      	str	r2, [r3, #4]
					// if the timer alarm has been set above 0, then there is something to process
					if (appTimer.channel[i].timer->alarm > 0) {
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d030      	beq.n	80033b0 <systick_app_timer_tickAndProcess+0xa8>
						// if value meets or exceeds alarm value, process the timer
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	491a      	ldr	r1, [pc, #104]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	d322      	bcc.n	80033b0 <systick_app_timer_tickAndProcess+0xa8>
							// if timer has a callback, call it and then reset the value
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <systick_app_timer_tickAndProcess+0x8e>
								appTimer.channel[i].timer->timerAlarmCallback();
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	605a      	str	r2, [r3, #4]
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	7a1b      	ldrb	r3, [r3, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d104      	bne.n	80033b0 <systick_app_timer_tickAndProcess+0xa8>
								appTimer.channel[i].active = false;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <systick_app_timer_tickAndProcess+0xc0>)
 80033aa:	2100      	movs	r1, #0
 80033ac:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	3301      	adds	r3, #1
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	d9ab      	bls.n	8003314 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	2000023c 	.word	0x2000023c

080033cc <systick_app_timer_channel_start>:
	}

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b09      	cmp	r3, #9
 80033da:	d901      	bls.n	80033e0 <systick_app_timer_channel_start+0x14>
		return 2; // channel number out of bounds
 80033dc:	2302      	movs	r3, #2
 80033de:	e015      	b.n	800340c <systick_app_timer_channel_start+0x40>
	}

	if (appTimer.channel[channel].timer) {
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <systick_app_timer_channel_start+0x4c>)
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <systick_app_timer_channel_start+0x3e>
		appTimer.channel[channel].timer->value = 0; // reset when starting
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <systick_app_timer_channel_start+0x4c>)
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
		appTimer.channel[channel].active = true;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a06      	ldr	r2, [pc, #24]	; (8003418 <systick_app_timer_channel_start+0x4c>)
 8003400:	2101      	movs	r1, #1
 8003402:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		return 0;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <systick_app_timer_channel_start+0x40>
	}

	return 1; // channel not found
 800340a:	2301      	movs	r3, #1
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	2000023c 	.word	0x2000023c

0800341c <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <systick_app_timer_channel_create+0x70>)
 8003426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800342a:	2b09      	cmp	r3, #9
 800342c:	d901      	bls.n	8003432 <systick_app_timer_channel_create+0x16>
		return 2; // timer module is full
 800342e:	2302      	movs	r3, #2
 8003430:	e026      	b.n	8003480 <systick_app_timer_channel_create+0x64>
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e017      	b.n	8003468 <systick_app_timer_channel_create+0x4c>
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	4a14      	ldr	r2, [pc, #80]	; (800348c <systick_app_timer_channel_create+0x70>)
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <systick_app_timer_channel_create+0x46>
			appTimer.channel[i].timer = timer;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	4a10      	ldr	r2, [pc, #64]	; (800348c <systick_app_timer_channel_create+0x70>)
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	605a      	str	r2, [r3, #4]
			appTimer.channel[i].timer->channel = i;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <systick_app_timer_channel_create+0x70>)
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	701a      	strb	r2, [r3, #0]
			break;
 8003460:	e005      	b.n	800346e <systick_app_timer_channel_create+0x52>
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	3301      	adds	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b09      	cmp	r3, #9
 800346c:	d9e4      	bls.n	8003438 <systick_app_timer_channel_create+0x1c>
		}
	}

	appTimer.count++;
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <systick_app_timer_channel_create+0x70>)
 8003470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003474:	3301      	adds	r3, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <systick_app_timer_channel_create+0x70>)
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return 0;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	2000023c 	.word	0x2000023c

08003490 <systick_app_timer_module_init>:

void systick_app_timer_module_init() {
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0

	memset(&appTimer, 0, sizeof(appTimer));
 8003494:	2254      	movs	r2, #84	; 0x54
 8003496:	2100      	movs	r1, #0
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <systick_app_timer_module_init+0x14>)
 800349a:	f004 f8af 	bl	80075fc <memset>

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	2000023c 	.word	0x2000023c

080034a8 <LL_RCC_SetUSARTClockSource>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <LL_RCC_SetUSARTClockSource+0x30>)
 80034b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	43db      	mvns	r3, r3
 80034bc:	401a      	ands	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4905      	ldr	r1, [pc, #20]	; (80034d8 <LL_RCC_SetUSARTClockSource+0x30>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <LL_AHB2_GRP1_EnableClock>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80034f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40021000 	.word	0x40021000

0800350c <LL_APB1_GRP1_EnableClock>:
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003516:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <LL_APB1_GRP1_EnableClock+0x2c>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4313      	orrs	r3, r2
 800351e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40021000 	.word	0x40021000

0800353c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08e      	sub	sp, #56	; 0x38
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
 80035b0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80035b2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80035b6:	f7ff ff77 	bl	80034a8 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80035ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035be:	f7ff ffa5 	bl	800350c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7ff ff8a 	bl	80034dc <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035c8:	230c      	movs	r3, #12
 80035ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035cc:	2302      	movs	r3, #2
 80035ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80035d0:	2303      	movs	r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80035dc:	2307      	movs	r3, #7
 80035de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	4619      	mov	r1, r3
 80035e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e8:	f003 f9ba 	bl	8006960 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80035ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80035f0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80035fe:	230c      	movs	r3, #12
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003602:	2300      	movs	r3, #0
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	4806      	ldr	r0, [pc, #24]	; (800362c <MX_USART2_UART_Init+0xa4>)
 8003612:	f003 fed5 	bl	80073c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_USART2_UART_Init+0xa4>)
 8003618:	f7ff ffa0 	bl	800355c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800361c:	4803      	ldr	r0, [pc, #12]	; (800362c <MX_USART2_UART_Init+0xa4>)
 800361e:	f7ff ff8d 	bl	800353c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003622:	bf00      	nop
 8003624:	3738      	adds	r7, #56	; 0x38
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40004400 	.word	0x40004400

08003630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003668 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003634:	f7ff fe56 	bl	80032e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <LoopForever+0x6>)
  ldr r1, =_edata
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <LoopForever+0xe>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003650:	4c0a      	ldr	r4, [pc, #40]	; (800367c <LoopForever+0x16>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800365e:	f003 ff8b 	bl	8007578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003662:	f7fe f9b9 	bl	80019d8 <main>

08003666 <LoopForever>:

LoopForever:
    b LoopForever
 8003666:	e7fe      	b.n	8003666 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003668:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800366c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003670:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003674:	08009588 	.word	0x08009588
  ldr r2, =_sbss
 8003678:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800367c:	20002960 	.word	0x20002960

08003680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003680:	e7fe      	b.n	8003680 <ADC1_2_IRQHandler>

08003682 <LL_GPIO_IsInputPinSet>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4013      	ands	r3, r2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d101      	bne.n	800369e <LL_GPIO_IsInputPinSet+0x1c>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_GPIO_IsInputPinSet+0x1e>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_GPIO_SetOutputPin>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	619a      	str	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_GPIO_ResetOutputPin>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(AS5145B_Init_t *AS5145B_Init)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 80036ec:	2214      	movs	r2, #20
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	480b      	ldr	r0, [pc, #44]	; (8003720 <AS5145B_Init+0x3c>)
 80036f2:	f003 ff75 	bl	80075e0 <memcpy>

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);		// Chip select pin initially high (Figure 13 in DS)
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <AS5145B_Init+0x3c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <AS5145B_Init+0x3c>)
 80036fc:	8a12      	ldrh	r2, [r2, #16]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ffd3 	bl	80036ac <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);		// Clock pin initially high (Figure 13 in DS)
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <AS5145B_Init+0x3c>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <AS5145B_Init+0x3c>)
 800370c:	89d2      	ldrh	r2, [r2, #14]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ffcb 	bl	80036ac <LL_GPIO_SetOutputPin>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000290 	.word	0x20000290

08003724 <AS5145B_ReadData>:

struct AS5145B_Data_s AS5145B_ReadData(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data;

	data.pos_raw = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	80bb      	strh	r3, [r7, #4]
	data.status = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003732:	4b45      	ldr	r3, [pc, #276]	; (8003848 <AS5145B_ReadData+0x124>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a44      	ldr	r2, [pc, #272]	; (8003848 <AS5145B_ReadData+0x124>)
 8003738:	8a12      	ldrh	r2, [r2, #16]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ffc3 	bl	80036c8 <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 8003742:	f000 f8b3 	bl	80038ac <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for(int i = 12-1; i >= 0; i--)
 8003746:	230b      	movs	r3, #11
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e02d      	b.n	80037a8 <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 800374c:	4b3e      	ldr	r3, [pc, #248]	; (8003848 <AS5145B_ReadData+0x124>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a3d      	ldr	r2, [pc, #244]	; (8003848 <AS5145B_ReadData+0x124>)
 8003752:	89d2      	ldrh	r2, [r2, #14]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff ffb6 	bl	80036c8 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 800375c:	f000 f8a6 	bl	80038ac <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <AS5145B_ReadData+0x124>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <AS5145B_ReadData+0x124>)
 8003766:	89d2      	ldrh	r2, [r2, #14]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ff9e 	bl	80036ac <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003770:	f000 f89c 	bl	80038ac <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <AS5145B_ReadData+0x124>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a33      	ldr	r2, [pc, #204]	; (8003848 <AS5145B_ReadData+0x124>)
 800377a:	8992      	ldrh	r2, [r2, #12]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff7f 	bl	8003682 <LL_GPIO_IsInputPinSet>
 8003784:	4603      	mov	r3, r0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	73bb      	strb	r3, [r7, #14]
		data.pos_raw |= (temp) << i;
 800378e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003792:	7bb9      	ldrb	r1, [r7, #14]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	b21b      	sxth	r3, r3
 800379c:	4313      	orrs	r3, r2
 800379e:	b21b      	sxth	r3, r3
 80037a0:	80bb      	strh	r3, [r7, #4]
	for(int i = 12-1; i >= 0; i--)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dace      	bge.n	800374c <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 80037ae:	2305      	movs	r3, #5
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	e02e      	b.n	8003812 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <AS5145B_ReadData+0x124>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <AS5145B_ReadData+0x124>)
 80037ba:	89d2      	ldrh	r2, [r2, #14]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ff82 	bl	80036c8 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80037c4:	f000 f872 	bl	80038ac <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <AS5145B_ReadData+0x124>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <AS5145B_ReadData+0x124>)
 80037ce:	89d2      	ldrh	r2, [r2, #14]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff6a 	bl	80036ac <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80037d8:	f000 f868 	bl	80038ac <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <AS5145B_ReadData+0x124>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a19      	ldr	r2, [pc, #100]	; (8003848 <AS5145B_ReadData+0x124>)
 80037e2:	8992      	ldrh	r2, [r2, #12]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff4b 	bl	8003682 <LL_GPIO_IsInputPinSet>
 80037ec:	4603      	mov	r3, r0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;
 80037f6:	79bb      	ldrb	r3, [r7, #6]
 80037f8:	b25a      	sxtb	r2, r3
 80037fa:	7bf9      	ldrb	r1, [r7, #15]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	b25b      	sxtb	r3, r3
 8003804:	4313      	orrs	r3, r2
 8003806:	b25b      	sxtb	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	71bb      	strb	r3, [r7, #6]
	for(int i = 6-1; i >= 0; i--)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3b01      	subs	r3, #1
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	dacd      	bge.n	80037b4 <AS5145B_ReadData+0x90>
	}

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <AS5145B_ReadData+0x124>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <AS5145B_ReadData+0x124>)
 800381e:	8a12      	ldrh	r2, [r2, #16]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff42 	bl	80036ac <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 8003828:	f000 f840 	bl	80038ac <AS5145B_Delay_500ns>

	return data;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	2300      	movs	r3, #0
 8003832:	893a      	ldrh	r2, [r7, #8]
 8003834:	f362 030f 	bfi	r3, r2, #0, #16
 8003838:	897a      	ldrh	r2, [r7, #10]
 800383a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000290 	.word	0x20000290

0800384c <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data = AS5145B_ReadData();
 8003852:	f7ff ff67 	bl	8003724 <AS5145B_ReadData>
 8003856:	4603      	mov	r3, r0
 8003858:	607b      	str	r3, [r7, #4]
	return data.pos_raw;
 800385a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800385e:	b29b      	uxth	r3, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <AS5145B_ReadPosition_Deg>:

float AS5145B_ReadPosition_Deg(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	uint16_t pos_raw = AS5145B_ReadPosition_Raw();
 800386e:	f7ff ffed 	bl	800384c <AS5145B_ReadPosition_Raw>
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
	float pos_deg = (float) pos_raw * AS5145B_RAW2DEG;
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003880:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80038a4 <AS5145B_ReadPosition_Deg+0x3c>
 8003884:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003888:	eddf 6a07 	vldr	s13, [pc, #28]	; 80038a8 <AS5145B_ReadPosition_Deg+0x40>
 800388c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003890:	edc7 7a00 	vstr	s15, [r7]
	return pos_deg;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	ee07 3a90 	vmov	s15, r3
}
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	43b40000 	.word	0x43b40000
 80038a8:	45800000 	.word	0x45800000

080038ac <AS5145B_Delay_500ns>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// See NOTES at the top of this file for more information
static void AS5145B_Delay_500ns(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	71fb      	strb	r3, [r7, #7]
 80038b6:	e00c      	b.n	80038d2 <AS5145B_Delay_500ns+0x26>
	{
		for(uint8_t j = 0; j < 3; j++)
 80038b8:	2300      	movs	r3, #0
 80038ba:	71bb      	strb	r3, [r7, #6]
 80038bc:	e003      	b.n	80038c6 <AS5145B_Delay_500ns+0x1a>
			__NOP();
 80038be:	bf00      	nop
		for(uint8_t j = 0; j < 3; j++)
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	3301      	adds	r3, #1
 80038c4:	71bb      	strb	r3, [r7, #6]
 80038c6:	79bb      	ldrb	r3, [r7, #6]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d9f8      	bls.n	80038be <AS5145B_Delay_500ns+0x12>
	for(uint8_t i = 0; i < 2; i++)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	3301      	adds	r3, #1
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d9ef      	bls.n	80038b8 <AS5145B_Delay_500ns+0xc>
	}
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	2306      	movs	r3, #6
 80038f6:	2200      	movs	r2, #0
 80038f8:	f246 0140 	movw	r1, #24640	; 0x6040
 80038fc:	f000 f872 	bl	80039e4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003900:	f107 0208 	add.w	r2, r7, #8
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2108      	movs	r1, #8
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fa76 	bl	8003dfa <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800390e:	200a      	movs	r0, #10
 8003910:	f003 fdfa 	bl	8007508 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8003914:	f107 0008 	add.w	r0, r7, #8
 8003918:	230f      	movs	r3, #15
 800391a:	2200      	movs	r2, #0
 800391c:	f246 0140 	movw	r1, #24640	; 0x6040
 8003920:	f000 f860 	bl	80039e4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2108      	movs	r1, #8
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fa64 	bl	8003dfa <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003932:	200a      	movs	r0, #10
 8003934:	f003 fde8 	bl	8007508 <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 8003938:	f107 0008 	add.w	r0, r7, #8
 800393c:	230a      	movs	r3, #10
 800393e:	2200      	movs	r2, #0
 8003940:	f246 0160 	movw	r1, #24672	; 0x6060
 8003944:	f000 f84e 	bl	80039e4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003948:	f107 0208 	add.w	r2, r7, #8
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2108      	movs	r1, #8
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fa52 	bl	8003dfa <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003956:	200a      	movs	r0, #10
 8003958:	f003 fdd6 	bl	8007508 <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 800395c:	f107 0008 	add.w	r0, r7, #8
 8003960:	2306      	movs	r3, #6
 8003962:	2200      	movs	r2, #0
 8003964:	f246 0140 	movw	r1, #24640	; 0x6040
 8003968:	f000 f83c 	bl	80039e4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	2108      	movs	r1, #8
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa40 	bl	8003dfa <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800397a:	200a      	movs	r0, #10
 800397c:	f003 fdc4 	bl	8007508 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8003980:	f107 0008 	add.w	r0, r7, #8
 8003984:	230f      	movs	r3, #15
 8003986:	2200      	movs	r2, #0
 8003988:	f246 0140 	movw	r1, #24640	; 0x6040
 800398c:	f000 f82a 	bl	80039e4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003990:	f107 0208 	add.w	r2, r7, #8
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	2108      	movs	r1, #8
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa2e 	bl	8003dfa <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800399e:	200a      	movs	r0, #10
 80039a0:	f003 fdb2 	bl	8007508 <LL_mDelay>
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// For example, 100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f107 0008 	add.w	r0, r7, #8
 80039be:	2200      	movs	r2, #0
 80039c0:	f246 0171 	movw	r1, #24689	; 0x6071
 80039c4:	f000 f80e 	bl	80039e4 <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 80039c8:	f107 0208 	add.w	r2, r7, #8
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2108      	movs	r1, #8
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fa12 	bl	8003dfa <CAN_transmit>
    EPOS4_usDelay(50);				// Can we do better??
 80039d6:	2032      	movs	r0, #50	; 0x32
 80039d8:	f000 f83d 	bl	8003a56 <EPOS4_usDelay>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <EPOS4_DataFramer>:
    CAN_transmit(CAN_ID, 8, data);
    EPOS4_usDelay(1500);			// Can we do better??
}

void EPOS4_DataFramer(uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	4613      	mov	r3, r2
 80039f4:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2222      	movs	r2, #34	; 0x22
 80039fa:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3301      	adds	r3, #1
 8003a00:	897a      	ldrh	r2, [r7, #10]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3303      	adds	r3, #3
 8003a18:	7a7a      	ldrb	r2, [r7, #9]
 8003a1a:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	0a1a      	lsrs	r2, r3, #8
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3305      	adds	r3, #5
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0c1a      	lsrs	r2, r3, #16
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3306      	adds	r3, #6
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0e1a      	lsrs	r2, r3, #24
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3307      	adds	r3, #7
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <EPOS4_usDelay>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// Can we lose this??
void EPOS4_usDelay(uint32_t us)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k = 0 ; k < us; k++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	e00c      	b.n	8003a7e <EPOS4_usDelay+0x28>
    {
    	for(i = 0; i < 11; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e003      	b.n	8003a72 <EPOS4_usDelay+0x1c>
         __NOP();
 8003a6a:	bf00      	nop
    	for(i = 0; i < 11; i++)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b0a      	cmp	r3, #10
 8003a76:	d9f8      	bls.n	8003a6a <EPOS4_usDelay+0x14>
    for(k = 0 ; k < us; k++)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3ee      	bcc.n	8003a64 <EPOS4_usDelay+0xe>
    }
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_SPI_TransmitData8>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	701a      	strb	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_GPIO_SetOutputPin>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	619a      	str	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_GPIO_ResetOutputPin>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 8003af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <clearChipSelect+0x14>)
 8003afa:	f7ff ffdd 	bl	8003ab8 <LL_GPIO_SetOutputPin>
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	48000400 	.word	0x48000400

08003b08 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 8003b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <setChipSelect+0x14>)
 8003b12:	f7ff ffdf 	bl	8003ad4 <LL_GPIO_ResetOutputPin>
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	48000400 	.word	0x48000400

08003b20 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8003b26:	f7ff ffef 	bl	8003b08 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 8003b2a:	21c0      	movs	r1, #192	; 0xc0
 8003b2c:	480d      	ldr	r0, [pc, #52]	; (8003b64 <mcp25625_reset+0x44>)
 8003b2e:	f7ff ffb1 	bl	8003a94 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8003b32:	bf00      	nop
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <mcp25625_reset+0x44>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f9      	bne.n	8003b34 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8003b40:	f7ff ffd6 	bl	8003af0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003b44:	e002      	b.n	8003b4c <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <mcp25625_reset+0x44>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <mcp25625_reset+0x44>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f6      	bne.n	8003b46 <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40003800 	.word	0x40003800

08003b68 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460a      	mov	r2, r1
 8003b72:	71fb      	strb	r3, [r7, #7]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 8003b78:	f7ff ffc6 	bl	8003b08 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4816      	ldr	r0, [pc, #88]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003b80:	f7ff ff88 	bl	8003a94 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4813      	ldr	r0, [pc, #76]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003b8a:	f7ff ff83 	bl	8003a94 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 8003b8e:	79bb      	ldrb	r3, [r7, #6]
 8003b90:	4619      	mov	r1, r3
 8003b92:	4811      	ldr	r0, [pc, #68]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003b94:	f7ff ff7e 	bl	8003a94 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8003b98:	bf00      	nop
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f9      	bne.n	8003b9a <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8003ba6:	bf00      	nop
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 8003bb4:	f7ff ff9c 	bl	8003af0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003bb8:	e002      	b.n	8003bc0 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <mcp25625_writeRegister+0x70>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f6      	bne.n	8003bba <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40003800 	.word	0x40003800

08003bdc <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 8003be6:	f7ff ff8f 	bl	8003b08 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 8003bea:	2103      	movs	r1, #3
 8003bec:	4814      	ldr	r0, [pc, #80]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003bee:	f7ff ff51 	bl	8003a94 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4812      	ldr	r0, [pc, #72]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003bf8:	f7ff ff4c 	bl	8003a94 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4810      	ldr	r0, [pc, #64]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c00:	f7ff ff48 	bl	8003a94 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8003c04:	bf00      	nop
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8003c12:	bf00      	nop
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f9      	bne.n	8003c14 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <mcp25625_readRegister+0x64>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();
 8003c32:	f7ff ff5d 	bl	8003af0 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 8003c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40003800 	.word	0x40003800

08003c44 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	603a      	str	r2, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
 8003c50:	460b      	mov	r3, r1
 8003c52:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 8003c54:	f7ff ff58 	bl	8003b08 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	481d      	ldr	r0, [pc, #116]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003c5e:	f7ff ff19 	bl	8003a94 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e011      	b.n	8003c8c <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8003c68:	bf00      	nop
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f9      	beq.n	8003c6a <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4814      	ldr	r0, [pc, #80]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003c82:	f7ff ff07 	bl	8003a94 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	79bb      	ldrb	r3, [r7, #6]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3e9      	bcc.n	8003c68 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8003c94:	bf00      	nop
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f9      	bne.n	8003c96 <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8003ca2:	bf00      	nop
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f9      	bne.n	8003ca4 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8003cb0:	f7ff ff1e 	bl	8003af0 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8003cb4:	e002      	b.n	8003cbc <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <mcp25625_loadTXB+0x90>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f6      	bne.n	8003cb6 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40003800 	.word	0x40003800

08003cd8 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8003cdc:	2030      	movs	r0, #48	; 0x30
 8003cde:	f7ff ff7d 	bl	8003bdc <mcp25625_readRegister>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 8003cec:	2040      	movs	r0, #64	; 0x40
 8003cee:	f7ff ff75 	bl	8003bdc <mcp25625_readRegister>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 8003cfc:	2050      	movs	r0, #80	; 0x50
 8003cfe:	f7ff ff6d 	bl	8003bdc <mcp25625_readRegister>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	210d      	movs	r1, #13
 8003d14:	2044      	movs	r0, #68	; 0x44
 8003d16:	f7ff ff95 	bl	8003c44 <mcp25625_loadTXB>
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	210d      	movs	r1, #13
 8003d2e:	2042      	movs	r0, #66	; 0x42
 8003d30:	f7ff ff88 	bl	8003c44 <mcp25625_loadTXB>
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	210d      	movs	r1, #13
 8003d48:	2040      	movs	r0, #64	; 0x40
 8003d4a:	f7ff ff7b 	bl	8003c44 <mcp25625_loadTXB>
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8003d56:	b580      	push	{r7, lr}
 8003d58:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8003d5a:	210b      	movs	r1, #11
 8003d5c:	2050      	movs	r0, #80	; 0x50
 8003d5e:	f7ff ff03 	bl	8003b68 <mcp25625_writeRegister>
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8003d66:	b580      	push	{r7, lr}
 8003d68:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8003d6a:	210b      	movs	r1, #11
 8003d6c:	2040      	movs	r0, #64	; 0x40
 8003d6e:	f7ff fefb 	bl	8003b68 <mcp25625_writeRegister>
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8003d76:	b580      	push	{r7, lr}
 8003d78:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8003d7a:	210b      	movs	r1, #11
 8003d7c:	2030      	movs	r0, #48	; 0x30
 8003d7e:	f7ff fef3 	bl	8003b68 <mcp25625_writeRegister>
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8003d8e:	f7ff ffb3 	bl	8003cf8 <getTXB2CTRL>
 8003d92:	4603      	mov	r3, r0
 8003d94:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8003d96:	7b3b      	ldrb	r3, [r7, #12]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ffaf 	bl	8003d08 <loadTXB2>
		setTXREQ2();
 8003daa:	f7ff ffd4 	bl	8003d56 <setTXREQ2>
		return; // once txbuffer is loaded, return
 8003dae:	e021      	b.n	8003df4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8003db0:	f7ff ff9a 	bl	8003ce8 <getTXB1CTRL>
 8003db4:	4603      	mov	r3, r0
 8003db6:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8003db8:	7b3b      	ldrb	r3, [r7, #12]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ffab 	bl	8003d22 <loadTXB1>
		setTXREQ1();
 8003dcc:	f7ff ffcb 	bl	8003d66 <setTXREQ1>
		return; //once tx buffer is loaded, return
 8003dd0:	e010      	b.n	8003df4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8003dd2:	f7ff ff81 	bl	8003cd8 <getTXB0CTRL>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8003dda:	7b3b      	ldrb	r3, [r7, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ffa7 	bl	8003d3c <loadTXB0>
		setTXREQ0();
 8003dee:	f7ff ffc2 	bl	8003d76 <setTXREQ0>
		return; // once tx buffer is loaded, return
 8003df2:	bf00      	nop
	}
}
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	603a      	str	r2, [r7, #0]
 8003e04:	80fb      	strh	r3, [r7, #6]
 8003e06:	460b      	mov	r3, r1
 8003e08:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	220d      	movs	r2, #13
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fbf2 	bl	80075fc <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	015b      	lsls	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8003e2a:	797b      	ldrb	r3, [r7, #5]
 8003e2c:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
 8003e32:	e00b      	b.n	8003e4c <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	441a      	add	r2, r3
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	443b      	add	r3, r7
 8003e42:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
 8003e4c:	7dfa      	ldrb	r2, [r7, #23]
 8003e4e:	797b      	ldrb	r3, [r7, #5]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d3ef      	bcc.n	8003e34 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff94 	bl	8003d86 <mcp25625_sendCAN>
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <mcp25625_init>:

void mcp25625_init (void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8003e6c:	f240 2276 	movw	r2, #630	; 0x276
 8003e70:	2100      	movs	r1, #0
 8003e72:	4804      	ldr	r0, [pc, #16]	; (8003e84 <mcp25625_init+0x1c>)
 8003e74:	f003 fbc2 	bl	80075fc <memset>
	clearChipSelect();
 8003e78:	f7ff fe3a 	bl	8003af0 <clearChipSelect>
	mcp25625_reset();
 8003e7c:	f7ff fe50 	bl	8003b20 <mcp25625_reset>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200002a4 	.word	0x200002a4

08003e88 <CAN_configure>:

void CAN_configure()
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8003e8e:	23c0      	movs	r3, #192	; 0xc0
 8003e90:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8003e92:	2389      	movs	r3, #137	; 0x89
 8003e94:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8003e96:	2304      	movs	r3, #4
 8003e98:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8003e9e:	f7ff ffe3 	bl	8003e68 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 8003ea2:	7b3b      	ldrb	r3, [r7, #12]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	202a      	movs	r0, #42	; 0x2a
 8003ea8:	f7ff fe5e 	bl	8003b68 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 8003eac:	7a3b      	ldrb	r3, [r7, #8]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	2029      	movs	r0, #41	; 0x29
 8003eb2:	f7ff fe59 	bl	8003b68 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 8003eb6:	793b      	ldrb	r3, [r7, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	2028      	movs	r0, #40	; 0x28
 8003ebc:	f7ff fe54 	bl	8003b68 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 8003ec0:	783b      	ldrb	r3, [r7, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	200f      	movs	r0, #15
 8003ec6:	f7ff fe4f 	bl	8003b68 <mcp25625_writeRegister>
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <set_int_enable+0xb0>)
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01c      	beq.n	8003f22 <set_int_enable+0x4e>
        if (enable)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	73fb      	strb	r3, [r7, #15]
 8003ef2:	e001      	b.n	8003ef8 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <set_int_enable+0xb0>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	7818      	ldrb	r0, [r3, #0]
 8003efe:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <set_int_enable+0xb0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	7c59      	ldrb	r1, [r3, #17]
 8003f04:	f107 030f 	add.w	r3, r7, #15
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f001 ff11 	bl	8005d30 <mpu9255_write>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <set_int_enable+0x46>
            return -1;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e030      	b.n	8003f7c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <set_int_enable+0xb0>)
 8003f1e:	745a      	strb	r2, [r3, #17]
 8003f20:	e02b      	b.n	8003f7a <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <set_int_enable+0xb0>)
 8003f24:	7a9b      	ldrb	r3, [r3, #10]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <set_int_enable+0x5c>
            return -1;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e025      	b.n	8003f7c <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <set_int_enable+0x6e>
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <set_int_enable+0xb0>)
 8003f38:	7c5b      	ldrb	r3, [r3, #17]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <set_int_enable+0x6e>
            return 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e01c      	b.n	8003f7c <set_int_enable+0xa8>
        if (enable)
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <set_int_enable+0xb0>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	7818      	ldrb	r0, [r3, #0]
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <set_int_enable+0xb0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	7c59      	ldrb	r1, [r3, #17]
 8003f5e:	f107 030f 	add.w	r3, r7, #15
 8003f62:	2201      	movs	r2, #1
 8003f64:	f001 fee4 	bl	8005d30 <mpu9255_write>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <set_int_enable+0xa0>
            return -1;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f72:	e003      	b.n	8003f7c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <set_int_enable+0xb0>)
 8003f78:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000014 	.word	0x20000014

08003f88 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003f94:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <mpu_init+0x180>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	7818      	ldrb	r0, [r3, #0]
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <mpu_init+0x180>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	7d59      	ldrb	r1, [r3, #21]
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f001 fec3 	bl	8005d30 <mpu9255_write>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <mpu_init+0x2e>
        return -1;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	e0a3      	b.n	80040fe <mpu_init+0x176>
    delay_ms(100);
 8003fb6:	2064      	movs	r0, #100	; 0x64
 8003fb8:	f001 ff50 	bl	8005e5c <mpu9255_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003fc0:	4b51      	ldr	r3, [pc, #324]	; (8004108 <mpu_init+0x180>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	7818      	ldrb	r0, [r3, #0]
 8003fc6:	4b50      	ldr	r3, [pc, #320]	; (8004108 <mpu_init+0x180>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	7d59      	ldrb	r1, [r3, #21]
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f001 fead 	bl	8005d30 <mpu9255_write>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <mpu_init+0x5a>
        return -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e08d      	b.n	80040fe <mpu_init+0x176>

   st.chip_cfg.accel_half = 0;
 8003fe2:	4b49      	ldr	r3, [pc, #292]	; (8004108 <mpu_init+0x180>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8003fe8:	2348      	movs	r3, #72	; 0x48
 8003fea:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8003fec:	4b46      	ldr	r3, [pc, #280]	; (8004108 <mpu_init+0x180>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	7818      	ldrb	r0, [r3, #0]
 8003ff2:	4b45      	ldr	r3, [pc, #276]	; (8004108 <mpu_init+0x180>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	7a19      	ldrb	r1, [r3, #8]
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f001 fe97 	bl	8005d30 <mpu9255_write>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <mpu_init+0x86>
        return -1;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e077      	b.n	80040fe <mpu_init+0x176>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <mpu_init+0x180>)
 8004010:	22ff      	movs	r2, #255	; 0xff
 8004012:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8004014:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <mpu_init+0x180>)
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <mpu_init+0x180>)
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <mpu_init+0x180>)
 8004022:	22ff      	movs	r2, #255	; 0xff
 8004024:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8004026:	4b38      	ldr	r3, [pc, #224]	; (8004108 <mpu_init+0x180>)
 8004028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402c:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <mpu_init+0x180>)
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8004034:	4b34      	ldr	r3, [pc, #208]	; (8004108 <mpu_init+0x180>)
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800403a:	4b33      	ldr	r3, [pc, #204]	; (8004108 <mpu_init+0x180>)
 800403c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004040:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <mpu_init+0x180>)
 8004044:	2201      	movs	r2, #1
 8004046:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8004048:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <mpu_init+0x180>)
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <mpu_init+0x180>)
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <mpu_init+0x180>)
 800405a:	2200      	movs	r2, #0
 800405c:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <mpu_init+0x180>)
 8004060:	2200      	movs	r2, #0
 8004062:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8004064:	220c      	movs	r2, #12
 8004066:	2100      	movs	r1, #0
 8004068:	4828      	ldr	r0, [pc, #160]	; (800410c <mpu_init+0x184>)
 800406a:	f003 fac7 	bl	80075fc <memset>
    st.chip_cfg.dmp_on = 0;
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <mpu_init+0x180>)
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <mpu_init+0x180>)
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <mpu_init+0x180>)
 8004080:	2200      	movs	r2, #0
 8004082:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8004084:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004088:	f000 f9e4 	bl	8004454 <mpu_set_gyro_fsr>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <mpu_init+0x110>
        return -1;
 8004092:	f04f 33ff 	mov.w	r3, #4294967295
 8004096:	e032      	b.n	80040fe <mpu_init+0x176>
    if (mpu_set_accel_fsr(8))
 8004098:	2008      	movs	r0, #8
 800409a:	f000 fa69 	bl	8004570 <mpu_set_accel_fsr>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <mpu_init+0x122>
        return -1;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	e029      	b.n	80040fe <mpu_init+0x176>
    if (mpu_set_lpf(188))
 80040aa:	20bc      	movs	r0, #188	; 0xbc
 80040ac:	f000 fac8 	bl	8004640 <mpu_set_lpf>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <mpu_init+0x134>
        return -1;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	e020      	b.n	80040fe <mpu_init+0x176>
    if (mpu_set_sample_rate(100))
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	f000 fb0d 	bl	80046dc <mpu_set_sample_rate>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <mpu_init+0x146>
        return -1;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e017      	b.n	80040fe <mpu_init+0x176>
    if (mpu_configure_fifo(0))
 80040ce:	2000      	movs	r0, #0
 80040d0:	f000 fbb2 	bl	8004838 <mpu_configure_fifo>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <mpu_init+0x158>
        return -1;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e00e      	b.n	80040fe <mpu_init+0x176>
    if (int_param)
        reg_int_cb(int_param);
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 80040e0:	f000 ff5a 	bl	8004f98 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 80040e4:	200a      	movs	r0, #10
 80040e6:	f000 fb67 	bl	80047b8 <mpu_set_compass_sample_rate>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <mpu_init+0x16e>
        return -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e003      	b.n	80040fe <mpu_init+0x176>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 80040f6:	2000      	movs	r0, #0
 80040f8:	f000 fbf0 	bl	80048dc <mpu_set_sensors>
    return 0;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000014 	.word	0x20000014
 800410c:	2000002a 	.word	0x2000002a

08004110 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b28      	cmp	r3, #40	; 0x28
 800411e:	d902      	bls.n	8004126 <mpu_lp_accel_mode+0x16>
        return -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	e08c      	b.n	8004240 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11c      	bne.n	8004166 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 800412c:	2000      	movs	r0, #0
 800412e:	f000 fd79 	bl	8004c24 <mpu_set_int_latched>
        tmp[0] = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8004136:	2307      	movs	r3, #7
 8004138:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800413a:	4b43      	ldr	r3, [pc, #268]	; (8004248 <mpu_lp_accel_mode+0x138>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	7818      	ldrb	r0, [r3, #0]
 8004140:	4b41      	ldr	r3, [pc, #260]	; (8004248 <mpu_lp_accel_mode+0x138>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	7d59      	ldrb	r1, [r3, #21]
 8004146:	f107 030c 	add.w	r3, r7, #12
 800414a:	2202      	movs	r2, #2
 800414c:	f001 fdf0 	bl	8005d30 <mpu9255_write>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <mpu_lp_accel_mode+0x4c>
            return -1;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	e071      	b.n	8004240 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 800415c:	4b3a      	ldr	r3, [pc, #232]	; (8004248 <mpu_lp_accel_mode+0x138>)
 800415e:	2200      	movs	r2, #0
 8004160:	751a      	strb	r2, [r3, #20]
        return 0;
 8004162:	2300      	movs	r3, #0
 8004164:	e06c      	b.n	8004240 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8004166:	2001      	movs	r0, #1
 8004168:	f000 fd5c 	bl	8004c24 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8004172:	2302      	movs	r3, #2
 8004174:	733b      	strb	r3, [r7, #12]
 8004176:	e032      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d102      	bne.n	8004184 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 800417e:	2303      	movs	r3, #3
 8004180:	733b      	strb	r3, [r7, #12]
 8004182:	e02c      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d802      	bhi.n	8004190 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 800418a:	2304      	movs	r3, #4
 800418c:	733b      	strb	r3, [r7, #12]
 800418e:	e026      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b0a      	cmp	r3, #10
 8004194:	d802      	bhi.n	800419c <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8004196:	2305      	movs	r3, #5
 8004198:	733b      	strb	r3, [r7, #12]
 800419a:	e020      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	2b14      	cmp	r3, #20
 80041a0:	d802      	bhi.n	80041a8 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 80041a2:	2306      	movs	r3, #6
 80041a4:	733b      	strb	r3, [r7, #12]
 80041a6:	e01a      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b28      	cmp	r3, #40	; 0x28
 80041ac:	d802      	bhi.n	80041b4 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 80041ae:	2307      	movs	r3, #7
 80041b0:	733b      	strb	r3, [r7, #12]
 80041b2:	e014      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b50      	cmp	r3, #80	; 0x50
 80041b8:	d802      	bhi.n	80041c0 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 80041ba:	2308      	movs	r3, #8
 80041bc:	733b      	strb	r3, [r7, #12]
 80041be:	e00e      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	2ba0      	cmp	r3, #160	; 0xa0
 80041c4:	d802      	bhi.n	80041cc <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 80041c6:	2309      	movs	r3, #9
 80041c8:	733b      	strb	r3, [r7, #12]
 80041ca:	e008      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041d2:	d802      	bhi.n	80041da <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 80041d4:	230a      	movs	r3, #10
 80041d6:	733b      	strb	r3, [r7, #12]
 80041d8:	e001      	b.n	80041de <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 80041da:	230b      	movs	r3, #11
 80041dc:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <mpu_lp_accel_mode+0x138>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	7818      	ldrb	r0, [r3, #0]
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <mpu_lp_accel_mode+0x138>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	7a59      	ldrb	r1, [r3, #9]
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	2201      	movs	r2, #1
 80041f0:	f001 fd9e 	bl	8005d30 <mpu9255_write>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <mpu_lp_accel_mode+0xf0>
        return -1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e01f      	b.n	8004240 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8004200:	2320      	movs	r3, #32
 8004202:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8004204:	4b10      	ldr	r3, [pc, #64]	; (8004248 <mpu_lp_accel_mode+0x138>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	7818      	ldrb	r0, [r3, #0]
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <mpu_lp_accel_mode+0x138>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	7d59      	ldrb	r1, [r3, #21]
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	2201      	movs	r2, #1
 8004216:	f001 fd8b 	bl	8005d30 <mpu9255_write>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <mpu_lp_accel_mode+0x116>
        return -1;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	e00c      	b.n	8004240 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <mpu_lp_accel_mode+0x138>)
 8004228:	2208      	movs	r2, #8
 800422a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <mpu_lp_accel_mode+0x138>)
 800422e:	2200      	movs	r2, #0
 8004230:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <mpu_lp_accel_mode+0x138>)
 8004234:	2201      	movs	r2, #1
 8004236:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8004238:	2000      	movs	r0, #0
 800423a:	f000 fafd 	bl	8004838 <mpu_configure_fifo>

    return 0;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000014 	.word	0x20000014

0800424c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8004252:	4b7e      	ldr	r3, [pc, #504]	; (800444c <mpu_reset_fifo+0x200>)
 8004254:	7a9b      	ldrb	r3, [r3, #10]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <mpu_reset_fifo+0x14>
        return -1;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	e0f1      	b.n	8004444 <mpu_reset_fifo+0x1f8>

    data = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <mpu_reset_fifo+0x200>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	7818      	ldrb	r0, [r3, #0]
 800426a:	4b78      	ldr	r3, [pc, #480]	; (800444c <mpu_reset_fifo+0x200>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	7c59      	ldrb	r1, [r3, #17]
 8004270:	1dfb      	adds	r3, r7, #7
 8004272:	2201      	movs	r2, #1
 8004274:	f001 fd5c 	bl	8005d30 <mpu9255_write>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <mpu_reset_fifo+0x38>
        return -1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e0df      	b.n	8004444 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004284:	4b71      	ldr	r3, [pc, #452]	; (800444c <mpu_reset_fifo+0x200>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	7818      	ldrb	r0, [r3, #0]
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <mpu_reset_fifo+0x200>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	7959      	ldrb	r1, [r3, #5]
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	2201      	movs	r2, #1
 8004294:	f001 fd4c 	bl	8005d30 <mpu9255_write>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <mpu_reset_fifo+0x58>
        return -1;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	e0cf      	b.n	8004444 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <mpu_reset_fifo+0x200>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	7818      	ldrb	r0, [r3, #0]
 80042aa:	4b68      	ldr	r3, [pc, #416]	; (800444c <mpu_reset_fifo+0x200>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	7919      	ldrb	r1, [r3, #4]
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	2201      	movs	r2, #1
 80042b4:	f001 fd3c 	bl	8005d30 <mpu9255_write>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <mpu_reset_fifo+0x78>
        return -1;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	e0bf      	b.n	8004444 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <mpu_reset_fifo+0x200>)
 80042c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d05c      	beq.n	8004388 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80042ce:	230c      	movs	r3, #12
 80042d0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80042d2:	4b5e      	ldr	r3, [pc, #376]	; (800444c <mpu_reset_fifo+0x200>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	7818      	ldrb	r0, [r3, #0]
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <mpu_reset_fifo+0x200>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	7919      	ldrb	r1, [r3, #4]
 80042de:	1dfb      	adds	r3, r7, #7
 80042e0:	2201      	movs	r2, #1
 80042e2:	f001 fd25 	bl	8005d30 <mpu9255_write>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <mpu_reset_fifo+0xa6>
            return -1;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295
 80042f0:	e0a8      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80042f2:	2032      	movs	r0, #50	; 0x32
 80042f4:	f001 fdb2 	bl	8005e5c <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80042f8:	23c0      	movs	r3, #192	; 0xc0
 80042fa:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <mpu_reset_fifo+0x200>)
 80042fe:	7a9b      	ldrb	r3, [r3, #10]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	f043 0320 	orr.w	r3, r3, #32
 800430e:	b2db      	uxtb	r3, r3
 8004310:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004312:	4b4e      	ldr	r3, [pc, #312]	; (800444c <mpu_reset_fifo+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	7818      	ldrb	r0, [r3, #0]
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <mpu_reset_fifo+0x200>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	7919      	ldrb	r1, [r3, #4]
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	2201      	movs	r2, #1
 8004322:	f001 fd05 	bl	8005d30 <mpu9255_write>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <mpu_reset_fifo+0xe6>
            return -1;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e088      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8004332:	4b46      	ldr	r3, [pc, #280]	; (800444c <mpu_reset_fifo+0x200>)
 8004334:	7c5b      	ldrb	r3, [r3, #17]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800433a:	2302      	movs	r3, #2
 800433c:	71fb      	strb	r3, [r7, #7]
 800433e:	e001      	b.n	8004344 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004344:	4b41      	ldr	r3, [pc, #260]	; (800444c <mpu_reset_fifo+0x200>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	7818      	ldrb	r0, [r3, #0]
 800434a:	4b40      	ldr	r3, [pc, #256]	; (800444c <mpu_reset_fifo+0x200>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	7c59      	ldrb	r1, [r3, #17]
 8004350:	1dfb      	adds	r3, r7, #7
 8004352:	2201      	movs	r2, #1
 8004354:	f001 fcec 	bl	8005d30 <mpu9255_write>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <mpu_reset_fifo+0x118>
            return -1;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	e06f      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        data = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004368:	4b38      	ldr	r3, [pc, #224]	; (800444c <mpu_reset_fifo+0x200>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	7818      	ldrb	r0, [r3, #0]
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <mpu_reset_fifo+0x200>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	7959      	ldrb	r1, [r3, #5]
 8004374:	1dfb      	adds	r3, r7, #7
 8004376:	2201      	movs	r2, #1
 8004378:	f001 fcda 	bl	8005d30 <mpu9255_write>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d05f      	beq.n	8004442 <mpu_reset_fifo+0x1f6>
            return -1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e05d      	b.n	8004444 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8004388:	2304      	movs	r3, #4
 800438a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <mpu_reset_fifo+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	7818      	ldrb	r0, [r3, #0]
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <mpu_reset_fifo+0x200>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	7919      	ldrb	r1, [r3, #4]
 8004398:	1dfb      	adds	r3, r7, #7
 800439a:	2201      	movs	r2, #1
 800439c:	f001 fcc8 	bl	8005d30 <mpu9255_write>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <mpu_reset_fifo+0x160>
            return -1;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e04b      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <mpu_reset_fifo+0x200>)
 80043ae:	7c9b      	ldrb	r3, [r3, #18]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <mpu_reset_fifo+0x174>
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <mpu_reset_fifo+0x200>)
 80043b6:	7a9b      	ldrb	r3, [r3, #10]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 80043c0:	2340      	movs	r3, #64	; 0x40
 80043c2:	71fb      	strb	r3, [r7, #7]
 80043c4:	e001      	b.n	80043ca <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80043c6:	2360      	movs	r3, #96	; 0x60
 80043c8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <mpu_reset_fifo+0x200>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	7818      	ldrb	r0, [r3, #0]
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <mpu_reset_fifo+0x200>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	7919      	ldrb	r1, [r3, #4]
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	2201      	movs	r2, #1
 80043da:	f001 fca9 	bl	8005d30 <mpu9255_write>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <mpu_reset_fifo+0x19e>
            return -1;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	e02c      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80043ea:	2032      	movs	r0, #50	; 0x32
 80043ec:	f001 fd36 	bl	8005e5c <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <mpu_reset_fifo+0x200>)
 80043f2:	7c5b      	ldrb	r3, [r3, #17]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 80043f8:	2301      	movs	r3, #1
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	e001      	b.n	8004402 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <mpu_reset_fifo+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	7818      	ldrb	r0, [r3, #0]
 8004408:	4b10      	ldr	r3, [pc, #64]	; (800444c <mpu_reset_fifo+0x200>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	7c59      	ldrb	r1, [r3, #17]
 800440e:	1dfb      	adds	r3, r7, #7
 8004410:	2201      	movs	r2, #1
 8004412:	f001 fc8d 	bl	8005d30 <mpu9255_write>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <mpu_reset_fifo+0x1d6>
            return -1;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e010      	b.n	8004444 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <mpu_reset_fifo+0x200>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	7818      	ldrb	r0, [r3, #0]
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <mpu_reset_fifo+0x200>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	7959      	ldrb	r1, [r3, #5]
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <mpu_reset_fifo+0x204>)
 8004430:	2201      	movs	r2, #1
 8004432:	f001 fc7d 	bl	8005d30 <mpu9255_write>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <mpu_reset_fifo+0x1f6>
            return -1;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	e000      	b.n	8004444 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000014 	.word	0x20000014
 8004450:	20000024 	.word	0x20000024

08004454 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <mpu_set_gyro_fsr+0xa4>)
 8004460:	7a9b      	ldrb	r3, [r3, #10]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <mpu_set_gyro_fsr+0x18>
        return -1;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e041      	b.n	80044f0 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004472:	d017      	beq.n	80044a4 <mpu_set_gyro_fsr+0x50>
 8004474:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004478:	dc17      	bgt.n	80044aa <mpu_set_gyro_fsr+0x56>
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	d00e      	beq.n	800449e <mpu_set_gyro_fsr+0x4a>
 8004480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004484:	dc11      	bgt.n	80044aa <mpu_set_gyro_fsr+0x56>
 8004486:	2bfa      	cmp	r3, #250	; 0xfa
 8004488:	d003      	beq.n	8004492 <mpu_set_gyro_fsr+0x3e>
 800448a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800448e:	d003      	beq.n	8004498 <mpu_set_gyro_fsr+0x44>
 8004490:	e00b      	b.n	80044aa <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
        break;
 8004496:	e00b      	b.n	80044b0 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8004498:	2308      	movs	r3, #8
 800449a:	73fb      	strb	r3, [r7, #15]
        break;
 800449c:	e008      	b.n	80044b0 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800449e:	2310      	movs	r3, #16
 80044a0:	73fb      	strb	r3, [r7, #15]
        break;
 80044a2:	e005      	b.n	80044b0 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80044a4:	2318      	movs	r3, #24
 80044a6:	73fb      	strb	r3, [r7, #15]
        break;
 80044a8:	e002      	b.n	80044b0 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	e01f      	b.n	80044f0 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <mpu_set_gyro_fsr+0xa4>)
 80044b2:	7a1a      	ldrb	r2, [r3, #8]
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d101      	bne.n	80044c2 <mpu_set_gyro_fsr+0x6e>
        return 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	e016      	b.n	80044f0 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <mpu_set_gyro_fsr+0xa4>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	7818      	ldrb	r0, [r3, #0]
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <mpu_set_gyro_fsr+0xa4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	7999      	ldrb	r1, [r3, #6]
 80044ce:	f107 030f 	add.w	r3, r7, #15
 80044d2:	2201      	movs	r2, #1
 80044d4:	f001 fc2c 	bl	8005d30 <mpu9255_write>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <mpu_set_gyro_fsr+0x90>
        return -1;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e005      	b.n	80044f0 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	08db      	lsrs	r3, r3, #3
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <mpu_set_gyro_fsr+0xa4>)
 80044ec:	721a      	strb	r2, [r3, #8]
    return 0;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000014 	.word	0x20000014

080044fc <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <mpu_get_accel_fsr+0x70>)
 8004506:	7a5b      	ldrb	r3, [r3, #9]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d81b      	bhi.n	8004544 <mpu_get_accel_fsr+0x48>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <mpu_get_accel_fsr+0x18>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	0800452d 	.word	0x0800452d
 800451c:	08004535 	.word	0x08004535
 8004520:	0800453d 	.word	0x0800453d
    case INV_FSR_2G:
        fsr[0] = 2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	701a      	strb	r2, [r3, #0]
        break;
 800452a:	e00e      	b.n	800454a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2204      	movs	r2, #4
 8004530:	701a      	strb	r2, [r3, #0]
        break;
 8004532:	e00a      	b.n	800454a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2208      	movs	r2, #8
 8004538:	701a      	strb	r2, [r3, #0]
        break;
 800453a:	e006      	b.n	800454a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2210      	movs	r2, #16
 8004540:	701a      	strb	r2, [r3, #0]
        break;
 8004542:	e002      	b.n	800454a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8004544:	f04f 33ff 	mov.w	r3, #4294967295
 8004548:	e00a      	b.n	8004560 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <mpu_get_accel_fsr+0x70>)
 800454c:	7cdb      	ldrb	r3, [r3, #19]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	b2da      	uxtb	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	701a      	strb	r2, [r3, #0]
    return 0;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000014 	.word	0x20000014

08004570 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <mpu_set_accel_fsr+0xcc>)
 800457c:	7a9b      	ldrb	r3, [r3, #10]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <mpu_set_accel_fsr+0x18>
        return -1;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e054      	b.n	8004632 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	3b02      	subs	r3, #2
 800458c:	2b0e      	cmp	r3, #14
 800458e:	d82d      	bhi.n	80045ec <mpu_set_accel_fsr+0x7c>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <mpu_set_accel_fsr+0x28>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045d5 	.word	0x080045d5
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045db 	.word	0x080045db
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045ed 	.word	0x080045ed
 80045d0:	080045e7 	.word	0x080045e7
    case 2:
        data = INV_FSR_2G << 3;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
        break;
 80045d8:	e00b      	b.n	80045f2 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80045da:	2308      	movs	r3, #8
 80045dc:	73fb      	strb	r3, [r7, #15]
        break;
 80045de:	e008      	b.n	80045f2 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80045e0:	2310      	movs	r3, #16
 80045e2:	73fb      	strb	r3, [r7, #15]
        break;
 80045e4:	e005      	b.n	80045f2 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80045e6:	2318      	movs	r3, #24
 80045e8:	73fb      	strb	r3, [r7, #15]
        break;
 80045ea:	e002      	b.n	80045f2 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e01f      	b.n	8004632 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <mpu_set_accel_fsr+0xcc>)
 80045f4:	7a5a      	ldrb	r2, [r3, #9]
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d101      	bne.n	8004604 <mpu_set_accel_fsr+0x94>
        return 0;
 8004600:	2300      	movs	r3, #0
 8004602:	e016      	b.n	8004632 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <mpu_set_accel_fsr+0xcc>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	7818      	ldrb	r0, [r3, #0]
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <mpu_set_accel_fsr+0xcc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	79d9      	ldrb	r1, [r3, #7]
 8004610:	f107 030f 	add.w	r3, r7, #15
 8004614:	2201      	movs	r2, #1
 8004616:	f001 fb8b 	bl	8005d30 <mpu9255_write>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <mpu_set_accel_fsr+0xb6>
        return -1;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	e005      	b.n	8004632 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	b2da      	uxtb	r2, r3
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <mpu_set_accel_fsr+0xcc>)
 800462e:	725a      	strb	r2, [r3, #9]
    return 0;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000014 	.word	0x20000014

08004640 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <mpu_set_lpf+0x98>)
 800464c:	7a9b      	ldrb	r3, [r3, #10]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <mpu_set_lpf+0x18>
        return -1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	e03b      	b.n	80046d0 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	2bbb      	cmp	r3, #187	; 0xbb
 800465c:	d902      	bls.n	8004664 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e019      	b.n	8004698 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b61      	cmp	r3, #97	; 0x61
 8004668:	d902      	bls.n	8004670 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800466a:	2302      	movs	r3, #2
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e013      	b.n	8004698 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	2b29      	cmp	r3, #41	; 0x29
 8004674:	d902      	bls.n	800467c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8004676:	2303      	movs	r3, #3
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	e00d      	b.n	8004698 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b13      	cmp	r3, #19
 8004680:	d902      	bls.n	8004688 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8004682:	2304      	movs	r3, #4
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	e007      	b.n	8004698 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b09      	cmp	r3, #9
 800468c:	d902      	bls.n	8004694 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800468e:	2305      	movs	r3, #5
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e001      	b.n	8004698 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8004694:	2306      	movs	r3, #6
 8004696:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <mpu_set_lpf+0x98>)
 800469a:	7ada      	ldrb	r2, [r3, #11]
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d101      	bne.n	80046a6 <mpu_set_lpf+0x66>
        return 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e014      	b.n	80046d0 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <mpu_set_lpf+0x98>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	7818      	ldrb	r0, [r3, #0]
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <mpu_set_lpf+0x98>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	7899      	ldrb	r1, [r3, #2]
 80046b2:	f107 030f 	add.w	r3, r7, #15
 80046b6:	2201      	movs	r2, #1
 80046b8:	f001 fb3a 	bl	8005d30 <mpu9255_write>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <mpu_set_lpf+0x88>
        return -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e003      	b.n	80046d0 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <mpu_set_lpf+0x98>)
 80046cc:	72da      	strb	r2, [r3, #11]
    return 0;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000014 	.word	0x20000014

080046dc <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80046e6:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 80046e8:	7a9b      	ldrb	r3, [r3, #10]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <mpu_set_sample_rate+0x18>
        return -1;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	e05b      	b.n	80047ac <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 80046f4:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 80046f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <mpu_set_sample_rate+0x28>
        return -1;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	e053      	b.n	80047ac <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 8004706:	7d1b      	ldrb	r3, [r3, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <mpu_set_sample_rate+0x48>
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b28      	cmp	r3, #40	; 0x28
 8004716:	d805      	bhi.n	8004724 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fcf8 	bl	8004110 <mpu_lp_accel_mode>
                return 0;
 8004720:	2300      	movs	r3, #0
 8004722:	e043      	b.n	80047ac <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8004724:	2000      	movs	r0, #0
 8004726:	f7ff fcf3 	bl	8004110 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d802      	bhi.n	8004736 <mpu_set_sample_rate+0x5a>
            rate = 4;
 8004730:	2304      	movs	r3, #4
 8004732:	80fb      	strh	r3, [r7, #6]
 8004734:	e006      	b.n	8004744 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473c:	d902      	bls.n	8004744 <mpu_set_sample_rate+0x68>
            rate = 1000;
 800473e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004742:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474a:	fb92 f3f3 	sdiv	r3, r2, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	7818      	ldrb	r0, [r3, #0]
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	7859      	ldrb	r1, [r3, #1]
 8004762:	f107 030f 	add.w	r3, r7, #15
 8004766:	2201      	movs	r2, #1
 8004768:	f001 fae2 	bl	8005d30 <mpu9255_write>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <mpu_set_sample_rate+0x9c>
            return -1;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	e019      	b.n	80047ac <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	3301      	adds	r3, #1
 800477c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004780:	fb92 f3f3 	sdiv	r3, r2, r3
 8004784:	b29a      	uxth	r2, r3
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 8004788:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	bf28      	it	cs
 8004792:	2364      	movcs	r3, #100	; 0x64
 8004794:	b29b      	uxth	r3, r3
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f80e 	bl	80047b8 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <mpu_set_sample_rate+0xd8>)
 800479e:	89db      	ldrh	r3, [r3, #14]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff4b 	bl	8004640 <mpu_set_lpf>
        return 0;
 80047aa:	2300      	movs	r3, #0
    }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000014 	.word	0x20000014

080047b8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <mpu_set_compass_sample_rate+0x20>
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 80047ca:	89db      	ldrh	r3, [r3, #14]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d802      	bhi.n	80047d8 <mpu_set_compass_sample_rate+0x20>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d902      	bls.n	80047de <mpu_set_compass_sample_rate+0x26>
        return -1;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	e026      	b.n	800482c <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 80047e0:	89da      	ldrh	r2, [r3, #14]
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	7818      	ldrb	r0, [r3, #0]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8004800:	f107 030f 	add.w	r3, r7, #15
 8004804:	2201      	movs	r2, #1
 8004806:	f001 fa93 	bl	8005d30 <mpu9255_write>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	e00a      	b.n	800482c <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 8004818:	89db      	ldrh	r3, [r3, #14]
 800481a:	461a      	mov	r2, r3
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	3301      	adds	r3, #1
 8004820:	fb92 f3f3 	sdiv	r3, r2, r3
 8004824:	b29a      	uxth	r2, r3
 8004826:	4b03      	ldr	r3, [pc, #12]	; (8004834 <mpu_set_compass_sample_rate+0x7c>)
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 800482a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000014 	.word	0x20000014

08004838 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <mpu_configure_fifo+0xa0>)
 8004850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <mpu_configure_fifo+0x24>
        return 0;
 8004858:	2300      	movs	r3, #0
 800485a:	e038      	b.n	80048ce <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <mpu_configure_fifo+0xa0>)
 800485e:	7a9b      	ldrb	r3, [r3, #10]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <mpu_configure_fifo+0x32>
            return -1;
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	e031      	b.n	80048ce <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <mpu_configure_fifo+0xa0>)
 800486c:	7c1b      	ldrb	r3, [r3, #16]
 800486e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <mpu_configure_fifo+0xa0>)
 8004872:	7a9a      	ldrb	r2, [r3, #10]
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	4013      	ands	r3, r2
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <mpu_configure_fifo+0xa0>)
 800487c:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <mpu_configure_fifo+0xa0>)
 8004880:	7c1b      	ldrb	r3, [r3, #16]
 8004882:	79fa      	ldrb	r2, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d003      	beq.n	8004890 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e001      	b.n	8004894 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d103      	bne.n	80048a2 <mpu_configure_fifo+0x6a>
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <mpu_configure_fifo+0xa0>)
 800489c:	7d1b      	ldrb	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80048a2:	2001      	movs	r0, #1
 80048a4:	f7ff fb16 	bl	8003ed4 <set_int_enable>
 80048a8:	e002      	b.n	80048b0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7ff fb12 	bl	8003ed4 <set_int_enable>
        if (sensors) {
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80048b6:	f7ff fcc9 	bl	800424c <mpu_reset_fifo>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80048c0:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <mpu_configure_fifo+0xa0>)
 80048c2:	7afb      	ldrb	r3, [r7, #11]
 80048c4:	7413      	strb	r3, [r2, #16]
                return -1;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	e000      	b.n	80048ce <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000014 	.word	0x20000014

080048dc <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e007      	b.n	8004906 <mpu_set_sensors+0x2a>
    else if (sensors)
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <mpu_set_sensors+0x26>
        data = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e001      	b.n	8004906 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8004902:	2340      	movs	r3, #64	; 0x40
 8004904:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8004906:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	7818      	ldrb	r0, [r3, #0]
 800490c:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <mpu_set_sensors+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	7d59      	ldrb	r1, [r3, #21]
 8004912:	f107 030f 	add.w	r3, r7, #15
 8004916:	2201      	movs	r2, #1
 8004918:	f001 fa0a 	bl	8005d30 <mpu9255_write>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004924:	2200      	movs	r2, #0
 8004926:	729a      	strb	r2, [r3, #10]
        return -1;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	e0ae      	b.n	8004a8c <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b57      	ldr	r3, [pc, #348]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004938:	731a      	strb	r2, [r3, #12]

    data = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	b2db      	uxtb	r3, r3
 8004950:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	b2db      	uxtb	r3, r3
 8004964:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800498a:	b2db      	uxtb	r3, r3
 800498c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800498e:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	7818      	ldrb	r0, [r3, #0]
 8004994:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	7d99      	ldrb	r1, [r3, #22]
 800499a:	f107 030f 	add.w	r3, r7, #15
 800499e:	2201      	movs	r2, #1
 80049a0:	f001 f9c6 	bl	8005d30 <mpu9255_write>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80049aa:	4b3a      	ldr	r3, [pc, #232]	; (8004a94 <mpu_set_sensors+0x1b8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	729a      	strb	r2, [r3, #10]
        return -1;
 80049b0:	f04f 33ff 	mov.w	r3, #4294967295
 80049b4:	e06a      	b.n	8004a8c <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <mpu_set_sensors+0xec>
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d002      	beq.n	80049c8 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 80049c2:	2000      	movs	r0, #0
 80049c4:	f000 f92e 	bl	8004c24 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80049c8:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <mpu_set_sensors+0x1b8>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	7818      	ldrb	r0, [r3, #0]
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <mpu_set_sensors+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	7919      	ldrb	r1, [r3, #4]
 80049d4:	f107 030e 	add.w	r3, r7, #14
 80049d8:	2201      	movs	r2, #1
 80049da:	f001 f9f5 	bl	8005dc8 <mpu9255_read>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <mpu_set_sensors+0x10e>
        return -1;
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	e050      	b.n	8004a8c <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 80049f4:	2311      	movs	r3, #17
 80049f6:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	f043 0320 	orr.w	r3, r3, #32
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	73bb      	strb	r3, [r7, #14]
 8004a02:	e006      	b.n	8004a12 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8004a04:	2310      	movs	r3, #16
 8004a06:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8004a08:	7bbb      	ldrb	r3, [r7, #14]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 8004a1c:	7bbb      	ldrb	r3, [r7, #14]
 8004a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	73bb      	strb	r3, [r7, #14]
 8004a26:	e004      	b.n	8004a32 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	7818      	ldrb	r0, [r3, #0]
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8004a40:	f107 030f 	add.w	r3, r7, #15
 8004a44:	2201      	movs	r2, #1
 8004a46:	f001 f973 	bl	8005d30 <mpu9255_write>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <mpu_set_sensors+0x17a>
        return -1;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	e01a      	b.n	8004a8c <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	7818      	ldrb	r0, [r3, #0]
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	7919      	ldrb	r1, [r3, #4]
 8004a62:	f107 030e 	add.w	r3, r7, #14
 8004a66:	2201      	movs	r2, #1
 8004a68:	f001 f962 	bl	8005d30 <mpu9255_write>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <mpu_set_sensors+0x19c>
        return -1;
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
 8004a76:	e009      	b.n	8004a8c <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <mpu_set_sensors+0x1b8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8004a84:	2032      	movs	r0, #50	; 0x32
 8004a86:	f001 f9e9 	bl	8005e5c <mpu9255_delay_ms>
    return 0;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000014 	.word	0x20000014

08004a98 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8004aa2:	4b5f      	ldr	r3, [pc, #380]	; (8004c20 <mpu_set_bypass+0x188>)
 8004aa4:	7c9b      	ldrb	r3, [r3, #18]
 8004aa6:	79fa      	ldrb	r2, [r7, #7]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d101      	bne.n	8004ab0 <mpu_set_bypass+0x18>
        return 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e0b2      	b.n	8004c16 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d050      	beq.n	8004b58 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004ab6:	4b5a      	ldr	r3, [pc, #360]	; (8004c20 <mpu_set_bypass+0x188>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	7818      	ldrb	r0, [r3, #0]
 8004abc:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <mpu_set_bypass+0x188>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	7919      	ldrb	r1, [r3, #4]
 8004ac2:	f107 030f 	add.w	r3, r7, #15
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f001 f97e 	bl	8005dc8 <mpu9255_read>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <mpu_set_bypass+0x40>
            return -1;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	e09e      	b.n	8004c16 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	f023 0320 	bic.w	r3, r3, #32
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <mpu_set_bypass+0x188>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	7818      	ldrb	r0, [r3, #0]
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <mpu_set_bypass+0x188>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	7919      	ldrb	r1, [r3, #4]
 8004aee:	f107 030f 	add.w	r3, r7, #15
 8004af2:	2201      	movs	r2, #1
 8004af4:	f001 f91c 	bl	8005d30 <mpu9255_write>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <mpu_set_bypass+0x6c>
            return -1;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
 8004b02:	e088      	b.n	8004c16 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8004b04:	2003      	movs	r0, #3
 8004b06:	f001 f9a9 	bl	8005e5c <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8004b0e:	4b44      	ldr	r3, [pc, #272]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8004b22:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b24:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	7818      	ldrb	r0, [r3, #0]
 8004b3c:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	7dd9      	ldrb	r1, [r3, #23]
 8004b42:	f107 030f 	add.w	r3, r7, #15
 8004b46:	2201      	movs	r2, #1
 8004b48:	f001 f8f2 	bl	8005d30 <mpu9255_write>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d05d      	beq.n	8004c0e <mpu_set_bypass+0x176>
            return -1;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	e05e      	b.n	8004c16 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004b58:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	7818      	ldrb	r0, [r3, #0]
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	7919      	ldrb	r1, [r3, #4]
 8004b64:	f107 030f 	add.w	r3, r7, #15
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f001 f92d 	bl	8005dc8 <mpu9255_read>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <mpu_set_bypass+0xe2>
            return -1;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e04d      	b.n	8004c16 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b7c:	7a9b      	ldrb	r3, [r3, #10]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	f043 0320 	orr.w	r3, r3, #32
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e004      	b.n	8004b9c <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	f023 0320 	bic.w	r3, r3, #32
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <mpu_set_bypass+0x188>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	7818      	ldrb	r0, [r3, #0]
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <mpu_set_bypass+0x188>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	7919      	ldrb	r1, [r3, #4]
 8004ba8:	f107 030f 	add.w	r3, r7, #15
 8004bac:	2201      	movs	r2, #1
 8004bae:	f001 f8bf 	bl	8005d30 <mpu9255_write>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <mpu_set_bypass+0x126>
            return -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbc:	e02b      	b.n	8004c16 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	f001 f94c 	bl	8005e5c <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <mpu_set_bypass+0x188>)
 8004bc6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	73fb      	strb	r3, [r7, #15]
 8004bd2:	e001      	b.n	8004bd8 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <mpu_set_bypass+0x188>)
 8004bda:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <mpu_set_bypass+0x188>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	7818      	ldrb	r0, [r3, #0]
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <mpu_set_bypass+0x188>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	7dd9      	ldrb	r1, [r3, #23]
 8004bf8:	f107 030f 	add.w	r3, r7, #15
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f001 f897 	bl	8005d30 <mpu9255_write>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <mpu_set_bypass+0x176>
            return -1;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	e003      	b.n	8004c16 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <mpu_set_bypass+0x188>)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	7493      	strb	r3, [r2, #18]
    return 0;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000014 	.word	0x20000014

08004c24 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c30:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004c34:	79fa      	ldrb	r2, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d101      	bne.n	8004c3e <mpu_set_int_latched+0x1a>
        return 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e030      	b.n	8004ca0 <mpu_set_int_latched+0x7c>

    if (enable)
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004c44:	2330      	movs	r3, #48	; 0x30
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e001      	b.n	8004c4e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c50:	7c9b      	ldrb	r3, [r3, #18]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	7818      	ldrb	r0, [r3, #0]
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	7dd9      	ldrb	r1, [r3, #23]
 8004c80:	f107 030f 	add.w	r3, r7, #15
 8004c84:	2201      	movs	r2, #1
 8004c86:	f001 f853 	bl	8005d30 <mpu9255_write>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <mpu_set_int_latched+0x72>
        return -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e004      	b.n	8004ca0 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8004c96:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <mpu_set_int_latched+0x84>)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000014 	.word	0x20000014

08004cac <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	603a      	str	r2, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <mpu_write_mem+0x1c>
        return -1;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e03d      	b.n	8004d44 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004cc8:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <mpu_write_mem+0xa0>)
 8004cca:	7a9b      	ldrb	r3, [r3, #10]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <mpu_write_mem+0x2a>
        return -1;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	e036      	b.n	8004d44 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004ce6:	7b7b      	ldrb	r3, [r7, #13]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	88bb      	ldrh	r3, [r7, #4]
 8004cec:	4413      	add	r3, r2
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <mpu_write_mem+0xa0>)
 8004cf0:	6852      	ldr	r2, [r2, #4]
 8004cf2:	8952      	ldrh	r2, [r2, #10]
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	dd02      	ble.n	8004cfe <mpu_write_mem+0x52>
        return -1;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	e022      	b.n	8004d44 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <mpu_write_mem+0xa0>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	7818      	ldrb	r0, [r3, #0]
 8004d04:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <mpu_write_mem+0xa0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	7ed9      	ldrb	r1, [r3, #27]
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f001 f80e 	bl	8005d30 <mpu9255_write>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <mpu_write_mem+0x74>
        return -1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e011      	b.n	8004d44 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <mpu_write_mem+0xa0>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	7818      	ldrb	r0, [r3, #0]
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <mpu_write_mem+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	7e19      	ldrb	r1, [r3, #24]
 8004d2c:	88bb      	ldrh	r3, [r7, #4]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f000 fffd 	bl	8005d30 <mpu9255_write>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <mpu_write_mem+0x96>
        return -1;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e000      	b.n	8004d44 <mpu_write_mem+0x98>
    return 0;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000014 	.word	0x20000014

08004d50 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	603a      	str	r2, [r7, #0]
 8004d5a:	80fb      	strh	r3, [r7, #6]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <mpu_read_mem+0x1c>
        return -1;
 8004d66:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6a:	e03d      	b.n	8004de8 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004d6c:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <mpu_read_mem+0xa0>)
 8004d6e:	7a9b      	ldrb	r3, [r3, #10]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <mpu_read_mem+0x2a>
        return -1;
 8004d74:	f04f 33ff 	mov.w	r3, #4294967295
 8004d78:	e036      	b.n	8004de8 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004d8a:	7b7b      	ldrb	r3, [r7, #13]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	88bb      	ldrh	r3, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <mpu_read_mem+0xa0>)
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	8952      	ldrh	r2, [r2, #10]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	dd02      	ble.n	8004da2 <mpu_read_mem+0x52>
        return -1;
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	e022      	b.n	8004de8 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <mpu_read_mem+0xa0>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	7818      	ldrb	r0, [r3, #0]
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <mpu_read_mem+0xa0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	7ed9      	ldrb	r1, [r3, #27]
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	2202      	movs	r2, #2
 8004db4:	f000 ffbc 	bl	8005d30 <mpu9255_write>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <mpu_read_mem+0x74>
        return -1;
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	e011      	b.n	8004de8 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <mpu_read_mem+0xa0>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	7818      	ldrb	r0, [r3, #0]
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <mpu_read_mem+0xa0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	7e19      	ldrb	r1, [r3, #24]
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f000 fff7 	bl	8005dc8 <mpu9255_read>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <mpu_read_mem+0x96>
        return -1;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	e000      	b.n	8004de8 <mpu_read_mem+0x98>
    return 0;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000014 	.word	0x20000014

08004df4 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4603      	mov	r3, r0
 8004e02:	81fb      	strh	r3, [r7, #14]
 8004e04:	460b      	mov	r3, r1
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8004e0c:	4b37      	ldr	r3, [pc, #220]	; (8004eec <mpu_load_firmware+0xf8>)
 8004e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1a:	e062      	b.n	8004ee2 <mpu_load_firmware+0xee>

    if (!firmware)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <mpu_load_firmware+0x34>
        return -1;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	e05c      	b.n	8004ee2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004e28:	2300      	movs	r3, #0
 8004e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e2c:	e034      	b.n	8004e98 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8004e2e:	89fa      	ldrh	r2, [r7, #14]
 8004e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	bfa8      	it	ge
 8004e38:	2310      	movge	r3, #16
 8004e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8004e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	441a      	add	r2, r3
 8004e42:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004e44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ff30 	bl	8004cac <mpu_write_mem>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <mpu_load_firmware+0x64>
            return -1;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	e044      	b.n	8004ee2 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8004e58:	f107 0214 	add.w	r2, r7, #20
 8004e5c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004e5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff75 	bl	8004d50 <mpu_read_mem>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <mpu_load_firmware+0x7e>
            return -1;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e70:	e037      	b.n	8004ee2 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8004e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	4413      	add	r3, r2
 8004e78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e7a:	f107 0114 	add.w	r1, r7, #20
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 fb9e 	bl	80075c0 <memcmp>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <mpu_load_firmware+0x9c>
            return -2;
 8004e8a:	f06f 0301 	mvn.w	r3, #1
 8004e8e:	e028      	b.n	8004ee2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004e90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e94:	4413      	add	r3, r2
 8004e96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d3c6      	bcc.n	8004e2e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8004ea0:	89bb      	ldrh	r3, [r7, #12]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8004eaa:	89bb      	ldrh	r3, [r7, #12]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <mpu_load_firmware+0xf8>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	7818      	ldrb	r0, [r3, #0]
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <mpu_load_firmware+0xf8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	7f59      	ldrb	r1, [r3, #29]
 8004ebc:	f107 0310 	add.w	r3, r7, #16
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f000 ff35 	bl	8005d30 <mpu9255_write>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <mpu_load_firmware+0xde>
        return -1;
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed0:	e007      	b.n	8004ee2 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <mpu_load_firmware+0xf8>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8004eda:	4a04      	ldr	r2, [pc, #16]	; (8004eec <mpu_load_firmware+0xf8>)
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000014 	.word	0x20000014

08004ef0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8004efa:	4b26      	ldr	r3, [pc, #152]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004efc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d101      	bne.n	8004f0a <mpu_set_dmp_state+0x1a>
        return 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e040      	b.n	8004f8c <mpu_set_dmp_state+0x9c>

    if (enable) {
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d027      	beq.n	8004f60 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <mpu_set_dmp_state+0x30>
            return -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	e035      	b.n	8004f8c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7fe ffd7 	bl	8003ed4 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7ff fdb6 	bl	8004a98 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fbd3 	bl	80046dc <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	7818      	ldrb	r0, [r3, #0]
 8004f40:	f107 030f 	add.w	r3, r7, #15
 8004f44:	2201      	movs	r2, #1
 8004f46:	2123      	movs	r1, #35	; 0x23
 8004f48:	f000 fef2 	bl	8005d30 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8004f54:	2001      	movs	r0, #1
 8004f56:	f7fe ffbd 	bl	8003ed4 <set_int_enable>
        mpu_reset_fifo();
 8004f5a:	f7ff f977 	bl	800424c <mpu_reset_fifo>
 8004f5e:	e014      	b.n	8004f8a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fe ffb7 	bl	8003ed4 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f68:	7c1b      	ldrb	r3, [r3, #16]
 8004f6a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	7818      	ldrb	r0, [r3, #0]
 8004f72:	f107 030f 	add.w	r3, r7, #15
 8004f76:	2201      	movs	r2, #1
 8004f78:	2123      	movs	r1, #35	; 0x23
 8004f7a:	f000 fed9 	bl	8005d30 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <mpu_set_dmp_state+0xa4>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8004f86:	f7ff f961 	bl	800424c <mpu_reset_fifo>
    }
    return 0;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000014 	.word	0x20000014

08004f98 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7ff fd7a 	bl	8004a98 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	e00f      	b.n	8004fca <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	7bf8      	ldrb	r0, [r7, #15]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	f000 ff09 	bl	8005dc8 <mpu9255_read>
 8004fb6:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <setup_compass+0x2c>
 8004fbe:	793b      	ldrb	r3, [r7, #4]
 8004fc0:	2b48      	cmp	r3, #72	; 0x48
 8004fc2:	d006      	beq.n	8004fd2 <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d9ec      	bls.n	8004faa <setup_compass+0x12>
 8004fd0:	e000      	b.n	8004fd4 <setup_compass+0x3c>
            break;
 8004fd2:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d902      	bls.n	8004fe0 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        //log_e("Compass not found.\n");
        return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e112      	b.n	8005206 <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8004fe0:	4a8b      	ldr	r2, [pc, #556]	; (8005210 <setup_compass+0x278>)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8004fe8:	2310      	movs	r3, #16
 8004fea:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004fec:	4b88      	ldr	r3, [pc, #544]	; (8005210 <setup_compass+0x278>)
 8004fee:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	210a      	movs	r1, #10
 8004ff8:	f000 fe9a 	bl	8005d30 <mpu9255_write>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <setup_compass+0x70>
        return -1;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	e0fe      	b.n	8005206 <setup_compass+0x26e>
    delay_ms(1);
 8005008:	2001      	movs	r0, #1
 800500a:	f000 ff27 	bl	8005e5c <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 800500e:	231f      	movs	r3, #31
 8005010:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8005012:	4b7f      	ldr	r3, [pc, #508]	; (8005210 <setup_compass+0x278>)
 8005014:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	2201      	movs	r2, #1
 800501c:	210a      	movs	r1, #10
 800501e:	f000 fe87 	bl	8005d30 <mpu9255_write>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <setup_compass+0x96>
        return -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
 800502c:	e0eb      	b.n	8005206 <setup_compass+0x26e>
    delay_ms(1);
 800502e:	2001      	movs	r0, #1
 8005030:	f000 ff14 	bl	8005e5c <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8005034:	4b76      	ldr	r3, [pc, #472]	; (8005210 <setup_compass+0x278>)
 8005036:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800503a:	1d3b      	adds	r3, r7, #4
 800503c:	2203      	movs	r2, #3
 800503e:	2110      	movs	r1, #16
 8005040:	f000 fec2 	bl	8005dc8 <mpu9255_read>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <setup_compass+0xb8>
        return -1;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	e0da      	b.n	8005206 <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8005050:	793b      	ldrb	r3, [r7, #4]
 8005052:	b29b      	uxth	r3, r3
 8005054:	3380      	adds	r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	b21a      	sxth	r2, r3
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <setup_compass+0x278>)
 800505c:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800505e:	797b      	ldrb	r3, [r7, #5]
 8005060:	b29b      	uxth	r3, r3
 8005062:	3380      	adds	r3, #128	; 0x80
 8005064:	b29b      	uxth	r3, r3
 8005066:	b21a      	sxth	r2, r3
 8005068:	4b69      	ldr	r3, [pc, #420]	; (8005210 <setup_compass+0x278>)
 800506a:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800506c:	79bb      	ldrb	r3, [r7, #6]
 800506e:	b29b      	uxth	r3, r3
 8005070:	3380      	adds	r3, #128	; 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	b21a      	sxth	r2, r3
 8005076:	4b66      	ldr	r3, [pc, #408]	; (8005210 <setup_compass+0x278>)
 8005078:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 800507a:	2310      	movs	r3, #16
 800507c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800507e:	4b64      	ldr	r3, [pc, #400]	; (8005210 <setup_compass+0x278>)
 8005080:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	2201      	movs	r2, #1
 8005088:	210a      	movs	r1, #10
 800508a:	f000 fe51 	bl	8005d30 <mpu9255_write>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <setup_compass+0x102>
        return -1;
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	e0b5      	b.n	8005206 <setup_compass+0x26e>
    delay_ms(1);
 800509a:	2001      	movs	r0, #1
 800509c:	f000 fede 	bl	8005e5c <mpu9255_delay_ms>

    mpu_set_bypass(0);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7ff fcf9 	bl	8004a98 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80050aa:	4b59      	ldr	r3, [pc, #356]	; (8005210 <setup_compass+0x278>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	7818      	ldrb	r0, [r3, #0]
 80050b0:	4b57      	ldr	r3, [pc, #348]	; (8005210 <setup_compass+0x278>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	7e99      	ldrb	r1, [r3, #26]
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	2201      	movs	r2, #1
 80050ba:	f000 fe39 	bl	8005d30 <mpu9255_write>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <setup_compass+0x132>
        return -1;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	e09d      	b.n	8005206 <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80050ca:	4b51      	ldr	r3, [pc, #324]	; (8005210 <setup_compass+0x278>)
 80050cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80050d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80050d8:	4b4d      	ldr	r3, [pc, #308]	; (8005210 <setup_compass+0x278>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	7818      	ldrb	r0, [r3, #0]
 80050de:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <setup_compass+0x278>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	7f99      	ldrb	r1, [r3, #30]
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	2201      	movs	r2, #1
 80050e8:	f000 fe22 	bl	8005d30 <mpu9255_write>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <setup_compass+0x160>
        return -1;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e086      	b.n	8005206 <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 80050f8:	2302      	movs	r3, #2
 80050fa:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80050fc:	4b44      	ldr	r3, [pc, #272]	; (8005210 <setup_compass+0x278>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	7818      	ldrb	r0, [r3, #0]
 8005102:	4b43      	ldr	r3, [pc, #268]	; (8005210 <setup_compass+0x278>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	7fd9      	ldrb	r1, [r3, #31]
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	2201      	movs	r2, #1
 800510c:	f000 fe10 	bl	8005d30 <mpu9255_write>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <setup_compass+0x184>
        return -1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e074      	b.n	8005206 <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 800511c:	2388      	movs	r3, #136	; 0x88
 800511e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8005120:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <setup_compass+0x278>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	7818      	ldrb	r0, [r3, #0]
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <setup_compass+0x278>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f893 1020 	ldrb.w	r1, [r3, #32]
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	2201      	movs	r2, #1
 8005132:	f000 fdfd 	bl	8005d30 <mpu9255_write>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <setup_compass+0x1aa>
        return -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
 8005140:	e061      	b.n	8005206 <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <setup_compass+0x278>)
 8005144:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005148:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <setup_compass+0x278>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	7818      	ldrb	r0, [r3, #0]
 8005150:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <setup_compass+0x278>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	2201      	movs	r2, #1
 800515c:	f000 fde8 	bl	8005d30 <mpu9255_write>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <setup_compass+0x1d4>
        return -1;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	e04c      	b.n	8005206 <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 800516c:	230a      	movs	r3, #10
 800516e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <setup_compass+0x278>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	7818      	ldrb	r0, [r3, #0]
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <setup_compass+0x278>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	2201      	movs	r2, #1
 8005182:	f000 fdd5 	bl	8005d30 <mpu9255_write>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <setup_compass+0x1fa>
        return -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	e039      	b.n	8005206 <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8005192:	2381      	movs	r3, #129	; 0x81
 8005194:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8005196:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <setup_compass+0x278>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	7818      	ldrb	r0, [r3, #0]
 800519c:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <setup_compass+0x278>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 80051a4:	1d3b      	adds	r3, r7, #4
 80051a6:	2201      	movs	r2, #1
 80051a8:	f000 fdc2 	bl	8005d30 <mpu9255_write>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <setup_compass+0x220>
        return -1;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	e026      	b.n	8005206 <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 80051b8:	2311      	movs	r3, #17
 80051ba:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <setup_compass+0x278>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	7818      	ldrb	r0, [r3, #0]
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <setup_compass+0x278>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	2201      	movs	r2, #1
 80051ce:	f000 fdaf 	bl	8005d30 <mpu9255_write>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <setup_compass+0x246>
        return -1;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	e013      	b.n	8005206 <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 80051de:	2303      	movs	r3, #3
 80051e0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <setup_compass+0x278>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	7818      	ldrb	r0, [r3, #0]
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <setup_compass+0x278>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	2201      	movs	r2, #1
 80051f4:	f000 fd9c 	bl	8005d30 <mpu9255_write>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <setup_compass+0x26c>
        return -1;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e000      	b.n	8005206 <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000014 	.word	0x20000014

08005214 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8005218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800521c:	23c8      	movs	r3, #200	; 0xc8
 800521e:	4904      	ldr	r1, [pc, #16]	; (8005230 <dmp_load_motion_driver_firmware+0x1c>)
 8005220:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8005224:	f7ff fde6 	bl	8004df4 <mpu_load_firmware>
 8005228:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800522a:	4618      	mov	r0, r3
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	08008918 	.word	0x08008918

08005234 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800523e:	4a6e      	ldr	r2, [pc, #440]	; (80053f8 <dmp_set_orientation+0x1c4>)
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	4611      	mov	r1, r2
 8005248:	8019      	strh	r1, [r3, #0]
 800524a:	3302      	adds	r3, #2
 800524c:	0c12      	lsrs	r2, r2, #16
 800524e:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8005250:	4a6a      	ldr	r2, [pc, #424]	; (80053fc <dmp_set_orientation+0x1c8>)
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	4611      	mov	r1, r2
 800525a:	8019      	strh	r1, [r3, #0]
 800525c:	3302      	adds	r3, #2
 800525e:	0c12      	lsrs	r2, r2, #16
 8005260:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8005262:	4a67      	ldr	r2, [pc, #412]	; (8005400 <dmp_set_orientation+0x1cc>)
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	4611      	mov	r1, r2
 800526c:	8019      	strh	r1, [r3, #0]
 800526e:	3302      	adds	r3, #2
 8005270:	0c12      	lsrs	r2, r2, #16
 8005272:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8005274:	4a63      	ldr	r2, [pc, #396]	; (8005404 <dmp_set_orientation+0x1d0>)
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	4611      	mov	r1, r2
 800527e:	8019      	strh	r1, [r3, #0]
 8005280:	3302      	adds	r3, #2
 8005282:	0c12      	lsrs	r2, r2, #16
 8005284:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	3320      	adds	r3, #32
 800528e:	443b      	add	r3, r7
 8005290:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005294:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	b29b      	uxth	r3, r3
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	3320      	adds	r3, #32
 80052a2:	443b      	add	r3, r7
 80052a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80052a8:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	3320      	adds	r3, #32
 80052b6:	443b      	add	r3, r7
 80052b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80052bc:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	3320      	adds	r3, #32
 80052c6:	443b      	add	r3, r7
 80052c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80052cc:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	3320      	adds	r3, #32
 80052da:	443b      	add	r3, r7
 80052dc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80052e0:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	3320      	adds	r3, #32
 80052ee:	443b      	add	r3, r7
 80052f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80052f4:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80052f6:	f107 031c 	add.w	r3, r7, #28
 80052fa:	461a      	mov	r2, r3
 80052fc:	2103      	movs	r1, #3
 80052fe:	f240 4026 	movw	r0, #1062	; 0x426
 8005302:	f7ff fcd3 	bl	8004cac <mpu_write_mem>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <dmp_set_orientation+0xde>
        return -1;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	e06e      	b.n	80053f0 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8005312:	f107 0318 	add.w	r3, r7, #24
 8005316:	461a      	mov	r2, r3
 8005318:	2103      	movs	r1, #3
 800531a:	f240 402a 	movw	r0, #1066	; 0x42a
 800531e:	f7ff fcc5 	bl	8004cac <mpu_write_mem>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <dmp_set_orientation+0xfa>
        return -1;
 8005328:	f04f 33ff 	mov.w	r3, #4294967295
 800532c:	e060      	b.n	80053f0 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800532e:	f107 031c 	add.w	r3, r7, #28
 8005332:	f107 020c 	add.w	r2, r7, #12
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	4611      	mov	r1, r2
 800533a:	8019      	strh	r1, [r3, #0]
 800533c:	3302      	adds	r3, #2
 800533e:	0c12      	lsrs	r2, r2, #16
 8005340:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8005342:	f107 0318 	add.w	r3, r7, #24
 8005346:	f107 0208 	add.w	r2, r7, #8
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	4611      	mov	r1, r2
 800534e:	8019      	strh	r1, [r3, #0]
 8005350:	3302      	adds	r3, #2
 8005352:	0c12      	lsrs	r2, r2, #16
 8005354:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8005360:	7f3b      	ldrb	r3, [r7, #28]
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800536a:	7e3b      	ldrb	r3, [r7, #24]
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
 8005372:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800537e:	7f7b      	ldrb	r3, [r7, #29]
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8005388:	7e7b      	ldrb	r3, [r7, #25]
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	b2db      	uxtb	r3, r3
 8005390:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 800539c:	7fbb      	ldrb	r3, [r7, #30]
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80053a6:	7ebb      	ldrb	r3, [r7, #26]
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80053b0:	f107 031c 	add.w	r3, r7, #28
 80053b4:	461a      	mov	r2, r3
 80053b6:	2103      	movs	r1, #3
 80053b8:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80053bc:	f7ff fc76 	bl	8004cac <mpu_write_mem>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <dmp_set_orientation+0x198>
        return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e011      	b.n	80053f0 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80053cc:	f107 0318 	add.w	r3, r7, #24
 80053d0:	461a      	mov	r2, r3
 80053d2:	2103      	movs	r1, #3
 80053d4:	f240 4031 	movw	r0, #1073	; 0x431
 80053d8:	f7ff fc68 	bl	8004cac <mpu_write_mem>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <dmp_set_orientation+0x1b4>
        return -1;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e003      	b.n	80053f0 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 80053e8:	4a07      	ldr	r2, [pc, #28]	; (8005408 <dmp_set_orientation+0x1d4>)
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	8113      	strh	r3, [r2, #8]
    return 0;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	0800880c 	.word	0x0800880c
 80053fc:	08008810 	.word	0x08008810
 8005400:	08008814 	.word	0x08008814
 8005404:	08008818 	.word	0x08008818
 8005408:	2000051c 	.word	0x2000051c

0800540c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <dmp_set_fifo_rate+0x88>)
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	ca07      	ldmia	r2, {r0, r1, r2}
 800541e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2bc8      	cmp	r3, #200	; 0xc8
 8005426:	d902      	bls.n	800542e <dmp_set_fifo_rate+0x22>
        return -1;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	e02e      	b.n	800548c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	22c8      	movs	r2, #200	; 0xc8
 8005432:	fb92 f3f3 	sdiv	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800543c:	8bfb      	ldrh	r3, [r7, #30]
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	b29b      	uxth	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8005446:	8bfb      	ldrh	r3, [r7, #30]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	461a      	mov	r2, r3
 8005452:	2102      	movs	r1, #2
 8005454:	f240 2016 	movw	r0, #534	; 0x216
 8005458:	f7ff fc28 	bl	8004cac <mpu_write_mem>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <dmp_set_fifo_rate+0x5c>
        return -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
 8005466:	e011      	b.n	800548c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	461a      	mov	r2, r3
 800546e:	210c      	movs	r1, #12
 8005470:	f640 20c1 	movw	r0, #2753	; 0xac1
 8005474:	f7ff fc1a 	bl	8004cac <mpu_write_mem>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <dmp_set_fifo_rate+0x78>
        return -1;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	e003      	b.n	800548c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8005484:	4a04      	ldr	r2, [pc, #16]	; (8005498 <dmp_set_fifo_rate+0x8c>)
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	8193      	strh	r3, [r2, #12]
    return 0;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	0800881c 	.word	0x0800881c
 8005498:	2000051c 	.word	0x2000051c

0800549c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	460a      	mov	r2, r1
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <dmp_set_tap_thresh+0x22>
 80054b6:	88bb      	ldrh	r3, [r7, #4]
 80054b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054bc:	d902      	bls.n	80054c4 <dmp_set_tap_thresh+0x28>
        return -1;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	e10b      	b.n	80056dc <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80054c4:	88bb      	ldrh	r3, [r7, #4]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ce:	eddf 6a85 	vldr	s13, [pc, #532]	; 80056e4 <dmp_set_tap_thresh+0x248>
 80054d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054d6:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 80054da:	f107 030b 	add.w	r3, r7, #11
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f80c 	bl	80044fc <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	3b02      	subs	r3, #2
 80054e8:	2b0e      	cmp	r3, #14
 80054ea:	d87d      	bhi.n	80055e8 <dmp_set_tap_thresh+0x14c>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <dmp_set_tap_thresh+0x58>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005531 	.word	0x08005531
 80054f8:	080055e9 	.word	0x080055e9
 80054fc:	0800555f 	.word	0x0800555f
 8005500:	080055e9 	.word	0x080055e9
 8005504:	080055e9 	.word	0x080055e9
 8005508:	080055e9 	.word	0x080055e9
 800550c:	0800558d 	.word	0x0800558d
 8005510:	080055e9 	.word	0x080055e9
 8005514:	080055e9 	.word	0x080055e9
 8005518:	080055e9 	.word	0x080055e9
 800551c:	080055e9 	.word	0x080055e9
 8005520:	080055e9 	.word	0x080055e9
 8005524:	080055e9 	.word	0x080055e9
 8005528:	080055e9 	.word	0x080055e9
 800552c:	080055bb 	.word	0x080055bb
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8005530:	edd7 7a04 	vldr	s15, [r7, #16]
 8005534:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80056e8 <dmp_set_tap_thresh+0x24c>
 8005538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800553c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005540:	ee17 3a90 	vmov	r3, s15
 8005544:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8005546:	edd7 7a04 	vldr	s15, [r7, #16]
 800554a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80056ec <dmp_set_tap_thresh+0x250>
 800554e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005556:	ee17 3a90 	vmov	r3, s15
 800555a:	82bb      	strh	r3, [r7, #20]
        break;
 800555c:	e047      	b.n	80055ee <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800555e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005562:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80056f0 <dmp_set_tap_thresh+0x254>
 8005566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556e:	ee17 3a90 	vmov	r3, s15
 8005572:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8005574:	edd7 7a04 	vldr	s15, [r7, #16]
 8005578:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80056f4 <dmp_set_tap_thresh+0x258>
 800557c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	ee17 3a90 	vmov	r3, s15
 8005588:	82bb      	strh	r3, [r7, #20]
        break;
 800558a:	e030      	b.n	80055ee <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800558c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005590:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80056f8 <dmp_set_tap_thresh+0x25c>
 8005594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559c:	ee17 3a90 	vmov	r3, s15
 80055a0:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80055a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80055a6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80056fc <dmp_set_tap_thresh+0x260>
 80055aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b2:	ee17 3a90 	vmov	r3, s15
 80055b6:	82bb      	strh	r3, [r7, #20]
        break;
 80055b8:	e019      	b.n	80055ee <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 80055ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80055be:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005700 <dmp_set_tap_thresh+0x264>
 80055c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ca:	ee17 3a90 	vmov	r3, s15
 80055ce:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80055d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80055d4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005704 <dmp_set_tap_thresh+0x268>
 80055d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e0:	ee17 3a90 	vmov	r3, s15
 80055e4:	82bb      	strh	r3, [r7, #20]
        break;
 80055e6:	e002      	b.n	80055ee <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	e076      	b.n	80056dc <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80055ee:	8afb      	ldrh	r3, [r7, #22]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80055f8:	8afb      	ldrh	r3, [r7, #22]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80055fe:	8abb      	ldrh	r3, [r7, #20]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	b29b      	uxth	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8005608:	8abb      	ldrh	r3, [r7, #20]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01c      	beq.n	8005652 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8005618:	f107 030c 	add.w	r3, r7, #12
 800561c:	461a      	mov	r2, r3
 800561e:	2102      	movs	r1, #2
 8005620:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8005624:	f7ff fb42 	bl	8004cac <mpu_write_mem>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <dmp_set_tap_thresh+0x198>
            return -1;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	e053      	b.n	80056dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8005634:	f107 030c 	add.w	r3, r7, #12
 8005638:	3302      	adds	r3, #2
 800563a:	461a      	mov	r2, r3
 800563c:	2102      	movs	r1, #2
 800563e:	f44f 7092 	mov.w	r0, #292	; 0x124
 8005642:	f7ff fb33 	bl	8004cac <mpu_write_mem>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <dmp_set_tap_thresh+0x1b6>
            return -1;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
 8005650:	e044      	b.n	80056dc <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01c      	beq.n	8005696 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	461a      	mov	r2, r3
 8005662:	2102      	movs	r1, #2
 8005664:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8005668:	f7ff fb20 	bl	8004cac <mpu_write_mem>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	e031      	b.n	80056dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8005678:	f107 030c 	add.w	r3, r7, #12
 800567c:	3302      	adds	r3, #2
 800567e:	461a      	mov	r2, r3
 8005680:	2102      	movs	r1, #2
 8005682:	f44f 7094 	mov.w	r0, #296	; 0x128
 8005686:	f7ff fb11 	bl	8004cac <mpu_write_mem>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
 8005694:	e022      	b.n	80056dc <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01c      	beq.n	80056da <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	461a      	mov	r2, r3
 80056a6:	2102      	movs	r1, #2
 80056a8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80056ac:	f7ff fafe 	bl	8004cac <mpu_write_mem>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <dmp_set_tap_thresh+0x220>
            return -1;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e00f      	b.n	80056dc <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	3302      	adds	r3, #2
 80056c2:	461a      	mov	r2, r3
 80056c4:	2102      	movs	r1, #2
 80056c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056ca:	f7ff faef 	bl	8004cac <mpu_write_mem>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <dmp_set_tap_thresh+0x23e>
            return -1;
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	e000      	b.n	80056dc <dmp_set_tap_thresh+0x240>
    }
    return 0;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	43480000 	.word	0x43480000
 80056e8:	46800000 	.word	0x46800000
 80056ec:	46400000 	.word	0x46400000
 80056f0:	46000000 	.word	0x46000000
 80056f4:	45c00000 	.word	0x45c00000
 80056f8:	45800000 	.word	0x45800000
 80056fc:	45400000 	.word	0x45400000
 8005700:	45000000 	.word	0x45000000
 8005704:	44c00000 	.word	0x44c00000

08005708 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005726:	b2db      	uxtb	r3, r3
 8005728:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	f043 030c 	orr.w	r3, r3, #12
 800573a:	b2db      	uxtb	r3, r3
 800573c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	f043 0303 	orr.w	r3, r3, #3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8005752:	f107 030f 	add.w	r3, r7, #15
 8005756:	461a      	mov	r2, r3
 8005758:	2101      	movs	r1, #1
 800575a:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800575e:	f7ff faa5 	bl	8004cac <mpu_write_mem>
 8005762:	4603      	mov	r3, r0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800577c:	2301      	movs	r3, #1
 800577e:	71fb      	strb	r3, [r7, #7]
 8005780:	e004      	b.n	800578c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d901      	bls.n	800578c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8005788:	2304      	movs	r3, #4
 800578a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	3b01      	subs	r3, #1
 8005790:	b2db      	uxtb	r3, r3
 8005792:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8005794:	f107 030f 	add.w	r3, r7, #15
 8005798:	461a      	mov	r2, r3
 800579a:	2101      	movs	r1, #1
 800579c:	f240 104f 	movw	r0, #335	; 0x14f
 80057a0:	f7ff fa84 	bl	8004cac <mpu_write_mem>
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <dmp_set_tap_time+0x40>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	089b      	lsrs	r3, r3, #2
 80057c4:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80057d0:	89fb      	ldrh	r3, [r7, #14]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 80057d6:	f107 030c 	add.w	r3, r7, #12
 80057da:	461a      	mov	r2, r3
 80057dc:	2102      	movs	r1, #2
 80057de:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 80057e2:	f7ff fa63 	bl	8004cac <mpu_write_mem>
 80057e6:	4603      	mov	r3, r0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	cccccccd 	.word	0xcccccccd

080057f4 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <dmp_set_tap_time_multi+0x40>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	0a1b      	lsrs	r3, r3, #8
 800580e:	b29b      	uxth	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	461a      	mov	r2, r3
 8005820:	2102      	movs	r1, #2
 8005822:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8005826:	f7ff fa41 	bl	8004cac <mpu_write_mem>
 800582a:	4603      	mov	r3, r0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	cccccccd 	.word	0xcccccccd

08005838 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a13      	ldr	r2, [pc, #76]	; (8005894 <dmp_set_shake_reject_thresh+0x5c>)
 8005848:	fb82 1203 	smull	r1, r2, r2, r3
 800584c:	1192      	asrs	r2, r2, #6
 800584e:	17db      	asrs	r3, r3, #31
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	887a      	ldrh	r2, [r7, #2]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	161b      	asrs	r3, r3, #24
 800585e:	b2db      	uxtb	r3, r3
 8005860:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	141b      	asrs	r3, r3, #16
 8005866:	b2db      	uxtb	r3, r3
 8005868:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	121b      	asrs	r3, r3, #8
 800586e:	b2db      	uxtb	r3, r3
 8005870:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8005878:	f107 0308 	add.w	r3, r7, #8
 800587c:	461a      	mov	r2, r3
 800587e:	2104      	movs	r1, #4
 8005880:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8005884:	f7ff fa12 	bl	8004cac <mpu_write_mem>
 8005888:	4603      	mov	r3, r0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	10624dd3 	.word	0x10624dd3

08005898 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <dmp_set_shake_reject_time+0x40>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	461a      	mov	r2, r3
 80058c4:	2102      	movs	r1, #2
 80058c6:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 80058ca:	f7ff f9ef 	bl	8004cac <mpu_write_mem>
 80058ce:	4603      	mov	r3, r0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	cccccccd 	.word	0xcccccccd

080058dc <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <dmp_set_shake_reject_timeout+0x40>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	461a      	mov	r2, r3
 8005908:	2102      	movs	r1, #2
 800590a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800590e:	f7ff f9cd 	bl	8004cac <mpu_write_mem>
 8005912:	4603      	mov	r3, r0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	cccccccd 	.word	0xcccccccd

08005920 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800592a:	2302      	movs	r3, #2
 800592c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800592e:	23ca      	movs	r3, #202	; 0xca
 8005930:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8005932:	23e3      	movs	r3, #227	; 0xe3
 8005934:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8005936:	2309      	movs	r3, #9
 8005938:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	461a      	mov	r2, r3
 8005940:	2104      	movs	r1, #4
 8005942:	2068      	movs	r0, #104	; 0x68
 8005944:	f7ff f9b2 	bl	8004cac <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8005948:	23a3      	movs	r3, #163	; 0xa3
 800594a:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8005956:	23c0      	movs	r3, #192	; 0xc0
 8005958:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800595a:	23c8      	movs	r3, #200	; 0xc8
 800595c:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800595e:	23c2      	movs	r3, #194	; 0xc2
 8005960:	73fb      	strb	r3, [r7, #15]
 8005962:	e005      	b.n	8005970 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8005964:	23a3      	movs	r3, #163	; 0xa3
 8005966:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8005968:	23a3      	movs	r3, #163	; 0xa3
 800596a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800596c:	23a3      	movs	r3, #163	; 0xa3
 800596e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800597a:	23c4      	movs	r3, #196	; 0xc4
 800597c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800597e:	23cc      	movs	r3, #204	; 0xcc
 8005980:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8005982:	23c6      	movs	r3, #198	; 0xc6
 8005984:	74bb      	strb	r3, [r7, #18]
 8005986:	e005      	b.n	8005994 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8005988:	23a3      	movs	r3, #163	; 0xa3
 800598a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800598c:	23a3      	movs	r3, #163	; 0xa3
 800598e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8005990:	23a3      	movs	r3, #163	; 0xa3
 8005992:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8005994:	23a3      	movs	r3, #163	; 0xa3
 8005996:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8005998:	23a3      	movs	r3, #163	; 0xa3
 800599a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800599c:	23a3      	movs	r3, #163	; 0xa3
 800599e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	461a      	mov	r2, r3
 80059a6:	210a      	movs	r1, #10
 80059a8:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80059ac:	f7ff f97e 	bl	8004cac <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 80059ba:	2320      	movs	r3, #32
 80059bc:	733b      	strb	r3, [r7, #12]
 80059be:	e001      	b.n	80059c4 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 80059c0:	23d8      	movs	r3, #216	; 0xd8
 80059c2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 80059c4:	f107 030c 	add.w	r3, r7, #12
 80059c8:	461a      	mov	r2, r3
 80059ca:	2101      	movs	r1, #1
 80059cc:	f640 20b6 	movw	r0, #2742	; 0xab6
 80059d0:	f7ff f96c 	bl	8004cac <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 80059de:	2001      	movs	r0, #1
 80059e0:	f000 f8c6 	bl	8005b70 <dmp_enable_gyro_cal>
 80059e4:	e002      	b.n	80059ec <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 80059e6:	2000      	movs	r0, #0
 80059e8:	f000 f8c2 	bl	8005b70 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01d      	beq.n	8005a32 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8005a00:	23b2      	movs	r3, #178	; 0xb2
 8005a02:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8005a04:	238b      	movs	r3, #139	; 0x8b
 8005a06:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8005a08:	23b6      	movs	r3, #182	; 0xb6
 8005a0a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8005a0c:	239b      	movs	r3, #155	; 0x9b
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e007      	b.n	8005a22 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8005a12:	23b0      	movs	r3, #176	; 0xb0
 8005a14:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8005a1a:	23b4      	movs	r3, #180	; 0xb4
 8005a1c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8005a1e:	2390      	movs	r3, #144	; 0x90
 8005a20:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8005a22:	f107 030c 	add.w	r3, r7, #12
 8005a26:	461a      	mov	r2, r3
 8005a28:	2104      	movs	r1, #4
 8005a2a:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8005a2e:	f7ff f93d 	bl	8004cac <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d025      	beq.n	8005a88 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8005a3c:	23f8      	movs	r3, #248	; 0xf8
 8005a3e:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	461a      	mov	r2, r3
 8005a46:	2101      	movs	r1, #1
 8005a48:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8005a4c:	f7ff f92e 	bl	8004cac <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8005a50:	21fa      	movs	r1, #250	; 0xfa
 8005a52:	2007      	movs	r0, #7
 8005a54:	f7ff fd22 	bl	800549c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8005a58:	2007      	movs	r0, #7
 8005a5a:	f7ff fe55 	bl	8005708 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f7ff fe84 	bl	800576c <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8005a64:	2064      	movs	r0, #100	; 0x64
 8005a66:	f7ff fea3 	bl	80057b0 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8005a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a6e:	f7ff fec1 	bl	80057f4 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8005a72:	21c8      	movs	r1, #200	; 0xc8
 8005a74:	483c      	ldr	r0, [pc, #240]	; (8005b68 <dmp_enable_feature+0x248>)
 8005a76:	f7ff fedf 	bl	8005838 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8005a7a:	2028      	movs	r0, #40	; 0x28
 8005a7c:	f7ff ff0c 	bl	8005898 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8005a80:	200a      	movs	r0, #10
 8005a82:	f7ff ff2b 	bl	80058dc <dmp_set_shake_reject_timeout>
 8005a86:	e009      	b.n	8005a9c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8005a88:	23d8      	movs	r3, #216	; 0xd8
 8005a8a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	461a      	mov	r2, r3
 8005a92:	2101      	movs	r1, #1
 8005a94:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8005a98:	f7ff f908 	bl	8004cac <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8005aa6:	23d9      	movs	r3, #217	; 0xd9
 8005aa8:	733b      	strb	r3, [r7, #12]
 8005aaa:	e001      	b.n	8005ab0 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8005aac:	23d8      	movs	r3, #216	; 0xd8
 8005aae:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	f240 703d 	movw	r0, #1853	; 0x73d
 8005abc:	f7ff f8f6 	bl	8004cac <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8005aca:	2001      	movs	r0, #1
 8005acc:	f000 f880 	bl	8005bd0 <dmp_enable_lp_quat>
 8005ad0:	e002      	b.n	8005ad8 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f000 f87c 	bl	8005bd0 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f000 f89b 	bl	8005c1e <dmp_enable_6x_lp_quat>
 8005ae8:	e002      	b.n	8005af0 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8005aea:	2000      	movs	r0, #0
 8005aec:	f000 f897 	bl	8005c1e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	f043 0308 	orr.w	r3, r3, #8
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005afa:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8005afc:	f7fe fba6 	bl	800424c <mpu_reset_fifo>

    dmp.packet_length = 0;
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8005b10:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b12:	7b9b      	ldrb	r3, [r3, #14]
 8005b14:	3306      	adds	r3, #6
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b1a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b28:	7b9b      	ldrb	r3, [r3, #14]
 8005b2a:	3306      	adds	r3, #6
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b30:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	f003 0314 	and.w	r3, r3, #20
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b3e:	7b9b      	ldrb	r3, [r3, #14]
 8005b40:	3310      	adds	r3, #16
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b46:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b54:	7b9b      	ldrb	r3, [r3, #14]
 8005b56:	3304      	adds	r3, #4
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <dmp_enable_feature+0x24c>)
 8005b5c:	739a      	strb	r2, [r3, #14]

    return 0;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	02cae309 	.word	0x02cae309
 8005b6c:	2000051c 	.word	0x2000051c

08005b70 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <dmp_enable_gyro_cal+0x58>)
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b88:	c303      	stmia	r3!, {r0, r1}
 8005b8a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	461a      	mov	r2, r3
 8005b92:	2109      	movs	r1, #9
 8005b94:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8005b98:	f7ff f888 	bl	8004cac <mpu_write_mem>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	e00e      	b.n	8005bbe <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <dmp_enable_gyro_cal+0x5c>)
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ba8:	c303      	stmia	r3!, {r0, r1}
 8005baa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2109      	movs	r1, #9
 8005bb4:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8005bb8:	f7ff f878 	bl	8004cac <mpu_write_mem>
 8005bbc:	4603      	mov	r3, r0
    }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08008828 	.word	0x08008828
 8005bcc:	08008834 	.word	0x08008834

08005bd0 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8005be0:	23c0      	movs	r3, #192	; 0xc0
 8005be2:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8005be4:	23c2      	movs	r3, #194	; 0xc2
 8005be6:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8005be8:	23c4      	movs	r3, #196	; 0xc4
 8005bea:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8005bec:	23c6      	movs	r3, #198	; 0xc6
 8005bee:	73fb      	strb	r3, [r7, #15]
 8005bf0:	e006      	b.n	8005c00 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	218b      	movs	r1, #139	; 0x8b
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fcfe 	bl	80075fc <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	461a      	mov	r2, r3
 8005c06:	2104      	movs	r1, #4
 8005c08:	f640 2098 	movw	r0, #2712	; 0xa98
 8005c0c:	f7ff f84e 	bl	8004cac <mpu_write_mem>

    return mpu_reset_fifo();
 8005c10:	f7fe fb1c 	bl	800424c <mpu_reset_fifo>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8005c32:	2328      	movs	r3, #40	; 0x28
 8005c34:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8005c36:	2330      	movs	r3, #48	; 0x30
 8005c38:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8005c3a:	2338      	movs	r3, #56	; 0x38
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	e006      	b.n	8005c4e <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	2204      	movs	r2, #4
 8005c46:	21a3      	movs	r1, #163	; 0xa3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fcd7 	bl	80075fc <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	461a      	mov	r2, r3
 8005c54:	2104      	movs	r1, #4
 8005c56:	f640 209e 	movw	r0, #2718	; 0xa9e
 8005c5a:	f7ff f827 	bl	8004cac <mpu_write_mem>

    return mpu_reset_fifo();
 8005c5e:	f7fe faf5 	bl	800424c <mpu_reset_fifo>
 8005c62:	4603      	mov	r3, r0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <dmp_register_tap_cb>:
 *  \n TAP_Z_DOWN
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
    dmp.tap_cb = func;
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <dmp_register_tap_cb+0x1c>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6013      	str	r3, [r2, #0]
    return 0;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	2000051c 	.word	0x2000051c

08005c8c <dmp_register_android_orient_cb>:
 *  @brief      Register a function to be executed on a android orientation event.
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    dmp.android_orient_cb = func;
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <dmp_register_android_orient_cb+0x1c>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6053      	str	r3, [r2, #4]
    return 0;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	2000051c 	.word	0x2000051c

08005cac <LL_SPI_TransmitData8>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	701a      	strb	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_GPIO_SetOutputPin>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	619a      	str	r2, [r3, #24]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_GPIO_ResetOutputPin>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <clearChipSelect>:
static uint8_t writeIndex = 0;
#else
dmp_data_t dmpData;
#endif
// CS is active low. This disables the chip
__STATIC_INLINE void clearChipSelect() {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8005d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d14:	f7ff ffdc 	bl	8005cd0 <LL_GPIO_SetOutputPin>
}
 8005d18:	bf00      	nop
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <setChipSelect>:

// CS is active low. This enables the chip.
__STATIC_INLINE void setChipSelect() {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8005d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d28:	f7ff ffe0 	bl	8005cec <LL_GPIO_ResetOutputPin>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <mpu9255_write>:

int mpu9255_write(unsigned char slave_addr, unsigned char reg_addr,
     unsigned char length, unsigned char const *data) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	71fb      	strb	r3, [r7, #7]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	71bb      	strb	r3, [r7, #6]
 8005d40:	4613      	mov	r3, r2
 8005d42:	717b      	strb	r3, [r7, #5]

	(void)slave_addr; // NOT NEEDED, I2C variable. Suppress unused variable warning

	setChipSelect();
 8005d44:	f7ff ffea 	bl	8005d1c <setChipSelect>

	// 4 byte fifo. Respect that and write when free
	LL_SPI_TransmitData8(SPI1, reg_addr);
 8005d48:	79bb      	ldrb	r3, [r7, #6]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	481d      	ldr	r0, [pc, #116]	; (8005dc4 <mpu9255_write+0x94>)
 8005d4e:	f7ff ffad 	bl	8005cac <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
 8005d56:	e011      	b.n	8005d7c <mpu9255_write+0x4c>
		while (!(SPI1->SR & SPI_SR_TXE)) {
 8005d58:	bf00      	nop
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <mpu9255_write+0x94>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f9      	beq.n	8005d5a <mpu9255_write+0x2a>
		};
		LL_SPI_TransmitData8(SPI1, data[i]);
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4814      	ldr	r0, [pc, #80]	; (8005dc4 <mpu9255_write+0x94>)
 8005d72:	f7ff ff9b 	bl	8005cac <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	797b      	ldrb	r3, [r7, #5]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d3e9      	bcc.n	8005d58 <mpu9255_write+0x28>
	}

	// wait for completion
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 8005d84:	bf00      	nop
 8005d86:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <mpu9255_write+0x94>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f9      	bne.n	8005d86 <mpu9255_write+0x56>
	}; 	//transmit fifo empty?
	while ((SPI1->SR & SPI_SR_BSY)) {
 8005d92:	bf00      	nop
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <mpu9255_write+0x94>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f9      	bne.n	8005d94 <mpu9255_write+0x64>
	}; 	// no longer busy
	clearChipSelect();
 8005da0:	f7ff ffb2 	bl	8005d08 <clearChipSelect>

	// clear receive fifo. Overrun data will be lost, but we are only sending.
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8005da4:	e002      	b.n	8005dac <mpu9255_write+0x7c>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <mpu9255_write+0x94>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	73bb      	strb	r3, [r7, #14]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <mpu9255_write+0x94>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f6      	bne.n	8005da6 <mpu9255_write+0x76>
		(void) dummy;						// suppress unused variable warning
	};
	return 0;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40013000 	.word	0x40013000

08005dc8 <mpu9255_read>:
 * Read assumes that calling function is providing a data location big enough
 * to handle the size of length. Be aware that this can overrun the calling
 * memory location if not sized appropriately!
 */
int mpu9255_read(unsigned char slave_addr, unsigned char reg_addr,
      unsigned char length, unsigned char *data) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	71fb      	strb	r3, [r7, #7]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	71bb      	strb	r3, [r7, #6]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	717b      	strb	r3, [r7, #5]

	(void) slave_addr; // not used, suppress unused variable warning.

	setChipSelect();
 8005ddc:	f7ff ff9e 	bl	8005d1c <setChipSelect>

	// 4 byte fifo not used. Reads need to be captured.
	LL_SPI_TransmitData8(SPI1, (reg_addr | 0x80)); // MSb set signals read.
 8005de0:	79bb      	ldrb	r3, [r7, #6]
 8005de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	4619      	mov	r1, r3
 8005dea:	481b      	ldr	r0, [pc, #108]	; (8005e58 <mpu9255_read+0x90>)
 8005dec:	f7ff ff5e 	bl	8005cac <LL_SPI_TransmitData8>
	while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 8005df0:	bf00      	nop
 8005df2:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <mpu9255_read+0x90>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f9      	beq.n	8005df2 <mpu9255_read+0x2a>
	uint8_t dummy = SPI1->DR; 				// first byte is from cmd transfer. Ignore
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <mpu9255_read+0x90>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	73bb      	strb	r3, [r7, #14]
	(void)dummy; // suppress unused variable warning

	// read the data sequentially
	for (uint8_t i = 0; i < length; i++) {
 8005e04:	2300      	movs	r3, #0
 8005e06:	73fb      	strb	r3, [r7, #15]
 8005e08:	e014      	b.n	8005e34 <mpu9255_read+0x6c>
		LL_SPI_TransmitData8(SPI1, 0xFF);	// send clocking byte, not used.
 8005e0a:	21ff      	movs	r1, #255	; 0xff
 8005e0c:	4812      	ldr	r0, [pc, #72]	; (8005e58 <mpu9255_read+0x90>)
 8005e0e:	f7ff ff4d 	bl	8005cac <LL_SPI_TransmitData8>
		while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 8005e12:	bf00      	nop
 8005e14:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <mpu9255_read+0x90>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f9      	beq.n	8005e14 <mpu9255_read+0x4c>
		data[i] = SPI1->DR;
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <mpu9255_read+0x90>)
 8005e22:	68d9      	ldr	r1, [r3, #12]
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b2ca      	uxtb	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	3301      	adds	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	7bfa      	ldrb	r2, [r7, #15]
 8005e36:	797b      	ldrb	r3, [r7, #5]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3e6      	bcc.n	8005e0a <mpu9255_read+0x42>
	}

	while ((SPI1->SR & SPI_SR_BSY)) {
 8005e3c:	bf00      	nop
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <mpu9255_read+0x90>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f9      	bne.n	8005e3e <mpu9255_read+0x76>
		}; 	// no longer busy
	clearChipSelect();
 8005e4a:	f7ff ff5d 	bl	8005d08 <clearChipSelect>

	return 0;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40013000 	.word	0x40013000

08005e5c <mpu9255_delay_ms>:

void mpu9255_delay_ms(unsigned long num_ms) {
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	ms_delay = num_ms;
 8005e64:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <mpu9255_delay_ms+0x28>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6013      	str	r3, [r2, #0]
	while (ms_delay > 0) {
 8005e6a:	bf00      	nop
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <mpu9255_delay_ms+0x28>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1fb      	bne.n	8005e6c <mpu9255_delay_ms+0x10>
		// do nothing while we wait.
	}
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000558 	.word	0x20000558

08005e88 <delaytimer_event_handler>:

void mpu9255_get_ms(unsigned long *count) {
	*count = g_ul_ms_ticks;
}

void delaytimer_event_handler() {
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <delaytimer_event_handler+0x2c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <delaytimer_event_handler+0x2c>)
 8005e94:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <delaytimer_event_handler+0x30>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <delaytimer_event_handler+0x20>
		ms_delay--;
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <delaytimer_event_handler+0x30>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <delaytimer_event_handler+0x30>)
 8005ea6:	6013      	str	r3, [r2, #0]
	}
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000554 	.word	0x20000554
 8005eb8:	20000558 	.word	0x20000558

08005ebc <readTimer_event_handler>:

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	updateRequired = true;
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <readTimer_event_handler+0x14>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	2000055c 	.word	0x2000055c

08005ed4 <android_orient_cb>:

void android_orient_cb(unsigned char orientation) {
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
	// do nothing, not used.
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <tap_cb>:
void tap_cb(unsigned char direction, unsigned char count) {
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	71fb      	strb	r3, [r7, #7]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	71bb      	strb	r3, [r7, #6]
	// do nothing, not used.
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f993 3000 	ldrsb.w	r3, [r3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	dd02      	ble.n	8005f1e <inv_row_2_scale+0x18>
        b = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	81fb      	strh	r3, [r7, #14]
 8005f1c:	e02d      	b.n	8005f7a <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f993 3000 	ldrsb.w	r3, [r3]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da02      	bge.n	8005f2e <inv_row_2_scale+0x28>
        b = 4;
 8005f28:	2304      	movs	r3, #4
 8005f2a:	81fb      	strh	r3, [r7, #14]
 8005f2c:	e025      	b.n	8005f7a <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3301      	adds	r3, #1
 8005f32:	f993 3000 	ldrsb.w	r3, [r3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dd02      	ble.n	8005f40 <inv_row_2_scale+0x3a>
        b = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	81fb      	strh	r3, [r7, #14]
 8005f3e:	e01c      	b.n	8005f7a <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	f993 3000 	ldrsb.w	r3, [r3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da02      	bge.n	8005f52 <inv_row_2_scale+0x4c>
        b = 5;
 8005f4c:	2305      	movs	r3, #5
 8005f4e:	81fb      	strh	r3, [r7, #14]
 8005f50:	e013      	b.n	8005f7a <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3302      	adds	r3, #2
 8005f56:	f993 3000 	ldrsb.w	r3, [r3]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dd02      	ble.n	8005f64 <inv_row_2_scale+0x5e>
        b = 2;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	81fb      	strh	r3, [r7, #14]
 8005f62:	e00a      	b.n	8005f7a <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3302      	adds	r3, #2
 8005f68:	f993 3000 	ldrsb.w	r3, [r3]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da02      	bge.n	8005f76 <inv_row_2_scale+0x70>
        b = 6;
 8005f70:	2306      	movs	r3, #6
 8005f72:	81fb      	strh	r3, [r7, #14]
 8005f74:	e001      	b.n	8005f7a <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8005f76:	2307      	movs	r3, #7
 8005f78:	81fb      	strh	r3, [r7, #14]
    return b;
 8005f7a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ffb8 	bl	8005f06 <inv_row_2_scale>
 8005f96:	4603      	mov	r3, r0
 8005f98:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff ffb1 	bl	8005f06 <inv_row_2_scale>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	b21a      	sxth	r2, r3
 8005faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3306      	adds	r3, #6
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ffa4 	bl	8005f06 <inv_row_2_scale>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b21b      	sxth	r3, r3
 8005fcc:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8005fce:	89fb      	ldrh	r3, [r7, #14]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <mpu9255_init>:


	}
}

void mpu9255_init(uint32_t readPeriod) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
//	spi1_init(); ??
	clearChipSelect();
 8005fe0:	f7ff fe92 	bl	8005d08 <clearChipSelect>
	uint8_t whoami;
	mpu9255_read(0, 0x75, 1, &whoami);
 8005fe4:	f107 031f 	add.w	r3, r7, #31
 8005fe8:	2201      	movs	r2, #1
 8005fea:	2175      	movs	r1, #117	; 0x75
 8005fec:	2000      	movs	r0, #0
 8005fee:	f7ff feeb 	bl	8005dc8 <mpu9255_read>
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <mpu9255_init+0xc8>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	721a      	strb	r2, [r3, #8]
	delayTimer.alarm = 1; // 1ms
 8005ff8:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <mpu9255_init+0xc8>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	60da      	str	r2, [r3, #12]
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 8005ffe:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <mpu9255_init+0xc8>)
 8006000:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <mpu9255_init+0xcc>)
 8006002:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&delayTimer);
 8006004:	4826      	ldr	r0, [pc, #152]	; (80060a0 <mpu9255_init+0xc8>)
 8006006:	f7fd fa09 	bl	800341c <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <mpu9255_init+0xc8>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fd f9dc 	bl	80033cc <systick_app_timer_channel_start>

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <mpu9255_init+0xd0>)
 8006016:	2200      	movs	r2, #0
 8006018:	721a      	strb	r2, [r3, #8]
	readTimer.alarm = readPeriod; // 1ms
 800601a:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <mpu9255_init+0xd0>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60d3      	str	r3, [r2, #12]
	readTimer.timerAlarmCallback = readTimer_event_handler;
 8006020:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <mpu9255_init+0xd0>)
 8006022:	4a22      	ldr	r2, [pc, #136]	; (80060ac <mpu9255_init+0xd4>)
 8006024:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&readTimer);
 8006026:	4820      	ldr	r0, [pc, #128]	; (80060a8 <mpu9255_init+0xd0>)
 8006028:	f7fd f9f8 	bl	800341c <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// reset internal data
	memset(&dmpData, 0, sizeof(dmpData));
 800602c:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8006030:	2100      	movs	r1, #0
 8006032:	481f      	ldr	r0, [pc, #124]	; (80060b0 <mpu9255_init+0xd8>)
 8006034:	f001 fae2 	bl	80075fc <memset>

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 8006038:	f107 0318 	add.w	r3, r7, #24
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd ffa3 	bl	8003f88 <mpu_init>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8006042:	2078      	movs	r0, #120	; 0x78
 8006044:	f7fe fc4a 	bl	80048dc <mpu_set_sensors>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 8006048:	f7ff f8e4 	bl	8005214 <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {1, 0, 0,
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <mpu9255_init+0xdc>)
 800604e:	f107 030c 	add.w	r3, r7, #12
 8006052:	ca07      	ldmia	r2, {r0, r1, r2}
 8006054:	c303      	stmia	r3!, {r0, r1}
 8006056:	701a      	strb	r2, [r3, #0]
							0, 0, -1,
							0, 1, 0};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 8006058:	f107 030c 	add.w	r3, r7, #12
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff93 	bl	8005f88 <inv_orientation_matrix_to_scalar>
 8006062:	4603      	mov	r3, r0
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff f8e5 	bl	8005234 <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 800606a:	4813      	ldr	r0, [pc, #76]	; (80060b8 <mpu9255_init+0xe0>)
 800606c:	f7ff fdfe 	bl	8005c6c <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 8006070:	4812      	ldr	r0, [pc, #72]	; (80060bc <mpu9255_init+0xe4>)
 8006072:	f7ff fe0b 	bl	8005c8c <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
 8006076:	20d0      	movs	r0, #208	; 0xd0
 8006078:	f7ff fc52 	bl	8005920 <dmp_enable_feature>

	dmp_set_fifo_rate(100);
 800607c:	2064      	movs	r0, #100	; 0x64
 800607e:	f7ff f9c5 	bl	800540c <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8006082:	2001      	movs	r0, #1
 8006084:	f7fe ff34 	bl	8004ef0 <mpu_set_dmp_state>
	mpu_reset_fifo();
 8006088:	f7fe f8e0 	bl	800424c <mpu_reset_fifo>
	systick_app_timer_channel_start(readTimer.channel);
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <mpu9255_init+0xd0>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f7fd f99b 	bl	80033cc <systick_app_timer_channel_start>
}
 8006096:	bf00      	nop
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	2000052c 	.word	0x2000052c
 80060a4:	08005e89 	.word	0x08005e89
 80060a8:	20000540 	.word	0x20000540
 80060ac:	08005ebd 	.word	0x08005ebd
 80060b0:	20000560 	.word	0x20000560
 80060b4:	08008858 	.word	0x08008858
 80060b8:	08005eeb 	.word	0x08005eeb
 80060bc:	08005ed5 	.word	0x08005ed5

080060c0 <LL_ADC_REG_SetSequencerLength>:
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	f023 020f 	bic.w	r2, r3, #15
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <LL_ADC_IsEnabled>:
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <LL_ADC_IsEnabled+0x18>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <LL_ADC_IsEnabled+0x1a>
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800611a:	481c      	ldr	r0, [pc, #112]	; (800618c <LL_ADC_CommonInit+0x80>)
 800611c:	f7ff ffe3 	bl	80060e6 <LL_ADC_IsEnabled>
 8006120:	4604      	mov	r4, r0
 8006122:	481b      	ldr	r0, [pc, #108]	; (8006190 <LL_ADC_CommonInit+0x84>)
 8006124:	f7ff ffdf 	bl	80060e6 <LL_ADC_IsEnabled>
 8006128:	4603      	mov	r3, r0
 800612a:	431c      	orrs	r4, r3
 800612c:	4819      	ldr	r0, [pc, #100]	; (8006194 <LL_ADC_CommonInit+0x88>)
 800612e:	f7ff ffda 	bl	80060e6 <LL_ADC_IsEnabled>
 8006132:	4603      	mov	r3, r0
 8006134:	4323      	orrs	r3, r4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d120      	bne.n	800617c <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d012      	beq.n	8006168 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <LL_ADC_CommonInit+0x8c>)
 8006148:	4013      	ands	r3, r2
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	6811      	ldr	r1, [r2, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6852      	ldr	r2, [r2, #4]
 8006152:	4311      	orrs	r1, r2
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	4311      	orrs	r1, r2
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	430a      	orrs	r2, r1
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	e00b      	b.n	8006180 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <LL_ADC_CommonInit+0x8c>)
 800616e:	4013      	ands	r3, r2
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	e001      	b.n	8006180 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	50040000 	.word	0x50040000
 8006190:	50040100 	.word	0x50040100
 8006194:	50040200 	.word	0x50040200
 8006198:	ffc030e0 	.word	0xffc030e0

0800619c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ff9b 	bl	80060e6 <LL_ADC_IsEnabled>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d111      	bne.n	80061da <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	6852      	ldr	r2, [r2, #4]
 80061ca:	4311      	orrs	r1, r2
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	6892      	ldr	r2, [r2, #8]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e001      	b.n	80061de <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ff75 	bl	80060e6 <LL_ADC_IsEnabled>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d132      	bne.n	8006268 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d015      	beq.n	8006236 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <LL_ADC_REG_Init+0x90>)
 8006210:	4013      	ands	r3, r2
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	6811      	ldr	r1, [r2, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	4311      	orrs	r1, r2
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	68d2      	ldr	r2, [r2, #12]
 8006220:	4311      	orrs	r1, r2
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	6912      	ldr	r2, [r2, #16]
 8006226:	4311      	orrs	r1, r2
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	6952      	ldr	r2, [r2, #20]
 800622c:	430a      	orrs	r2, r1
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	e011      	b.n	800625a <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <LL_ADC_REG_Init+0x90>)
 800623c:	4013      	ands	r3, r2
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6811      	ldr	r1, [r2, #0]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	4311      	orrs	r1, r2
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	6912      	ldr	r2, [r2, #16]
 800624c:	4311      	orrs	r1, r2
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	6952      	ldr	r2, [r2, #20]
 8006252:	430a      	orrs	r2, r1
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff2d 	bl	80060c0 <LL_ADC_REG_SetSequencerLength>
 8006266:	e001      	b.n	800626c <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	fff0c03c 	.word	0xfff0c03c

0800627c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <LL_EXTI_EnableIT_0_31+0x20>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4904      	ldr	r1, [pc, #16]	; (800629c <LL_EXTI_EnableIT_0_31+0x20>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40010400 	.word	0x40010400

080062a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	4904      	ldr	r1, [pc, #16]	; (80062c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	620b      	str	r3, [r1, #32]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40010400 	.word	0x40010400

080062c4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	4904      	ldr	r1, [pc, #16]	; (80062e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010400 	.word	0x40010400

080062ec <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <LL_EXTI_DisableIT_32_63+0x24>)
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	4904      	ldr	r1, [pc, #16]	; (8006310 <LL_EXTI_DisableIT_32_63+0x24>)
 80062fe:	4013      	ands	r3, r2
 8006300:	620b      	str	r3, [r1, #32]
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40010400 	.word	0x40010400

08006314 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <LL_EXTI_EnableEvent_0_31+0x20>)
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4904      	ldr	r1, [pc, #16]	; (8006334 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]

}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40010400 	.word	0x40010400

08006338 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006344:	4904      	ldr	r1, [pc, #16]	; (8006358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4313      	orrs	r3, r2
 800634a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40010400 	.word	0x40010400

0800635c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006364:	4b06      	ldr	r3, [pc, #24]	; (8006380 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	43db      	mvns	r3, r3
 800636c:	4904      	ldr	r1, [pc, #16]	; (8006380 <LL_EXTI_DisableEvent_0_31+0x24>)
 800636e:	4013      	ands	r3, r2
 8006370:	604b      	str	r3, [r1, #4]
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010400 	.word	0x40010400

08006384 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800638e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	43db      	mvns	r3, r3
 8006394:	4904      	ldr	r1, [pc, #16]	; (80063a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006396:	4013      	ands	r3, r2
 8006398:	624b      	str	r3, [r1, #36]	; 0x24
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010400 	.word	0x40010400

080063ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	4904      	ldr	r1, [pc, #16]	; (80063cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	40010400 	.word	0x40010400

080063d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80063da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063dc:	4904      	ldr	r1, [pc, #16]	; (80063f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	40010400 	.word	0x40010400

080063f4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	43db      	mvns	r3, r3
 8006404:	4904      	ldr	r1, [pc, #16]	; (8006418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006406:	4013      	ands	r3, r2
 8006408:	608b      	str	r3, [r1, #8]

}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010400 	.word	0x40010400

0800641c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	43db      	mvns	r3, r3
 800642c:	4904      	ldr	r1, [pc, #16]	; (8006440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800642e:	4013      	ands	r3, r2
 8006430:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40010400 	.word	0x40010400

08006444 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	4904      	ldr	r1, [pc, #16]	; (8006464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4313      	orrs	r3, r2
 8006456:	60cb      	str	r3, [r1, #12]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40010400 	.word	0x40010400

08006468 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4904      	ldr	r1, [pc, #16]	; (8006488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4313      	orrs	r3, r2
 800647a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40010400 	.word	0x40010400

0800648c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	43db      	mvns	r3, r3
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800649e:	4013      	ands	r3, r2
 80064a0:	60cb      	str	r3, [r1, #12]
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010400 	.word	0x40010400

080064b4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	4904      	ldr	r1, [pc, #16]	; (80064d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010400 	.word	0x40010400

080064dc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7a1b      	ldrb	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80d1 	beq.w	8006694 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d063      	beq.n	80065c2 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7a5b      	ldrb	r3, [r3, #9]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d01c      	beq.n	800653c <LL_EXTI_Init+0x60>
 8006502:	2b02      	cmp	r3, #2
 8006504:	dc25      	bgt.n	8006552 <LL_EXTI_Init+0x76>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <LL_EXTI_Init+0x34>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d00b      	beq.n	8006526 <LL_EXTI_Init+0x4a>
 800650e:	e020      	b.n	8006552 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ff21 	bl	800635c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff feac 	bl	800627c <LL_EXTI_EnableIT_0_31>
          break;
 8006524:	e018      	b.n	8006558 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff feca 	bl	80062c4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff feed 	bl	8006314 <LL_EXTI_EnableEvent_0_31>
          break;
 800653a:	e00d      	b.n	8006558 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe9b 	bl	800627c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fee2 	bl	8006314 <LL_EXTI_EnableEvent_0_31>
          break;
 8006550:	e002      	b.n	8006558 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8006552:	2301      	movs	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
          break;
 8006556:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7a9b      	ldrb	r3, [r3, #10]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d030      	beq.n	80065c2 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7a9b      	ldrb	r3, [r3, #10]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d01c      	beq.n	80065a2 <LL_EXTI_Init+0xc6>
 8006568:	2b03      	cmp	r3, #3
 800656a:	dc25      	bgt.n	80065b8 <LL_EXTI_Init+0xdc>
 800656c:	2b01      	cmp	r3, #1
 800656e:	d002      	beq.n	8006576 <LL_EXTI_Init+0x9a>
 8006570:	2b02      	cmp	r3, #2
 8006572:	d00b      	beq.n	800658c <LL_EXTI_Init+0xb0>
 8006574:	e020      	b.n	80065b8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ff86 	bl	800648c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff ff11 	bl	80063ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800658a:	e01b      	b.n	80065c4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff2f 	bl	80063f4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff ff52 	bl	8006444 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80065a0:	e010      	b.n	80065c4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff00 	bl	80063ac <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ff47 	bl	8006444 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80065b6:	e005      	b.n	80065c4 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	60fb      	str	r3, [r7, #12]
            break;
 80065c0:	e000      	b.n	80065c4 <LL_EXTI_Init+0xe8>
        }
      }
 80065c2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d078      	beq.n	80066be <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7a5b      	ldrb	r3, [r3, #9]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d01c      	beq.n	800660e <LL_EXTI_Init+0x132>
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	dc25      	bgt.n	8006624 <LL_EXTI_Init+0x148>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <LL_EXTI_Init+0x106>
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d00b      	beq.n	80065f8 <LL_EXTI_Init+0x11c>
 80065e0:	e020      	b.n	8006624 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fecc 	bl	8006384 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fe55 	bl	80062a0 <LL_EXTI_EnableIT_32_63>
          break;
 80065f6:	e01a      	b.n	800662e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fe75 	bl	80062ec <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fe96 	bl	8006338 <LL_EXTI_EnableEvent_32_63>
          break;
 800660c:	e00f      	b.n	800662e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fe44 	bl	80062a0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fe8b 	bl	8006338 <LL_EXTI_EnableEvent_32_63>
          break;
 8006622:	e004      	b.n	800662e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f043 0304 	orr.w	r3, r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
          break;
 800662c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7a9b      	ldrb	r3, [r3, #10]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d043      	beq.n	80066be <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7a9b      	ldrb	r3, [r3, #10]
 800663a:	2b03      	cmp	r3, #3
 800663c:	d01c      	beq.n	8006678 <LL_EXTI_Init+0x19c>
 800663e:	2b03      	cmp	r3, #3
 8006640:	dc25      	bgt.n	800668e <LL_EXTI_Init+0x1b2>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d002      	beq.n	800664c <LL_EXTI_Init+0x170>
 8006646:	2b02      	cmp	r3, #2
 8006648:	d00b      	beq.n	8006662 <LL_EXTI_Init+0x186>
 800664a:	e020      	b.n	800668e <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ff2f 	bl	80064b4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff feb8 	bl	80063d0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8006660:	e02e      	b.n	80066c0 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fed8 	bl	800641c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fef9 	bl	8006468 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8006676:	e023      	b.n	80066c0 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fea7 	bl	80063d0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff feee 	bl	8006468 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800668c:	e018      	b.n	80066c0 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
            break;
 8006692:	e015      	b.n	80066c0 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fe13 	bl	80062c4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fe5a 	bl	800635c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fe1d 	bl	80062ec <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fe64 	bl	8006384 <LL_EXTI_DisableEvent_32_63>
 80066bc:	e000      	b.n	80066c0 <LL_EXTI_Init+0x1e4>
      }
 80066be:	bf00      	nop
  }

  return status;
 80066c0:	68fb      	ldr	r3, [r7, #12]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <LL_GPIO_SetPinMode>:
{
 80066ca:	b480      	push	{r7}
 80066cc:	b08b      	sub	sp, #44	; 0x2c
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	fa93 f3a3 	rbit	r3, r3
 80066e4:	613b      	str	r3, [r7, #16]
  return result;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80066f0:	2320      	movs	r3, #32
 80066f2:	e003      	b.n	80066fc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	fab3 f383 	clz	r3, r3
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	2103      	movs	r1, #3
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	61fb      	str	r3, [r7, #28]
  return result;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800671e:	2320      	movs	r3, #32
 8006720:	e003      	b.n	800672a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	fab3 f383 	clz	r3, r3
 8006728:	b2db      	uxtb	r3, r3
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	431a      	orrs	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	372c      	adds	r7, #44	; 0x2c
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <LL_GPIO_SetPinOutputType>:
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	43db      	mvns	r3, r3
 8006758:	401a      	ands	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	431a      	orrs	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	605a      	str	r2, [r3, #4]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_GPIO_SetPinSpeed>:
{
 8006774:	b480      	push	{r7}
 8006776:	b08b      	sub	sp, #44	; 0x2c
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	fa93 f3a3 	rbit	r3, r3
 800678e:	613b      	str	r3, [r7, #16]
  return result;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800679a:	2320      	movs	r3, #32
 800679c:	e003      	b.n	80067a6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	fab3 f383 	clz	r3, r3
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2103      	movs	r1, #3
 80067aa:	fa01 f303 	lsl.w	r3, r1, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	401a      	ands	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	fa93 f3a3 	rbit	r3, r3
 80067bc:	61fb      	str	r3, [r7, #28]
  return result;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80067c8:	2320      	movs	r3, #32
 80067ca:	e003      	b.n	80067d4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	fab3 f383 	clz	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	609a      	str	r2, [r3, #8]
}
 80067e2:	bf00      	nop
 80067e4:	372c      	adds	r7, #44	; 0x2c
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <LL_GPIO_SetPinPull>:
{
 80067ee:	b480      	push	{r7}
 80067f0:	b08b      	sub	sp, #44	; 0x2c
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	fa93 f3a3 	rbit	r3, r3
 8006808:	613b      	str	r3, [r7, #16]
  return result;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006814:	2320      	movs	r3, #32
 8006816:	e003      	b.n	8006820 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	fab3 f383 	clz	r3, r3
 800681e:	b2db      	uxtb	r3, r3
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	2103      	movs	r1, #3
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	43db      	mvns	r3, r3
 800682a:	401a      	ands	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	fa93 f3a3 	rbit	r3, r3
 8006836:	61fb      	str	r3, [r7, #28]
  return result;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006842:	2320      	movs	r3, #32
 8006844:	e003      	b.n	800684e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	fab3 f383 	clz	r3, r3
 800684c:	b2db      	uxtb	r3, r3
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	431a      	orrs	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	60da      	str	r2, [r3, #12]
}
 800685c:	bf00      	nop
 800685e:	372c      	adds	r7, #44	; 0x2c
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <LL_GPIO_SetAFPin_0_7>:
{
 8006868:	b480      	push	{r7}
 800686a:	b08b      	sub	sp, #44	; 0x2c
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	fa93 f3a3 	rbit	r3, r3
 8006882:	613b      	str	r3, [r7, #16]
  return result;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800688e:	2320      	movs	r3, #32
 8006890:	e003      	b.n	800689a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	fab3 f383 	clz	r3, r3
 8006898:	b2db      	uxtb	r3, r3
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	210f      	movs	r1, #15
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	43db      	mvns	r3, r3
 80068a4:	401a      	ands	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	fa93 f3a3 	rbit	r3, r3
 80068b0:	61fb      	str	r3, [r7, #28]
  return result;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80068bc:	2320      	movs	r3, #32
 80068be:	e003      	b.n	80068c8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	fab3 f383 	clz	r3, r3
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	372c      	adds	r7, #44	; 0x2c
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <LL_GPIO_SetAFPin_8_15>:
{
 80068e2:	b480      	push	{r7}
 80068e4:	b08b      	sub	sp, #44	; 0x2c
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	fa93 f3a3 	rbit	r3, r3
 80068fe:	613b      	str	r3, [r7, #16]
  return result;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800690a:	2320      	movs	r3, #32
 800690c:	e003      	b.n	8006916 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	fab3 f383 	clz	r3, r3
 8006914:	b2db      	uxtb	r3, r3
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	210f      	movs	r1, #15
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	401a      	ands	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	fa93 f3a3 	rbit	r3, r3
 800692e:	61fb      	str	r3, [r7, #28]
  return result;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800693a:	2320      	movs	r3, #32
 800693c:	e003      	b.n	8006946 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	fab3 f383 	clz	r3, r3
 8006944:	b2db      	uxtb	r3, r3
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	431a      	orrs	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006954:	bf00      	nop
 8006956:	372c      	adds	r7, #44	; 0x2c
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	fa93 f3a3 	rbit	r3, r3
 8006976:	60fb      	str	r3, [r7, #12]
  return result;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <LL_GPIO_Init+0x26>
    return 32U;
 8006982:	2320      	movs	r3, #32
 8006984:	e003      	b.n	800698e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	fab3 f383 	clz	r3, r3
 800698c:	b2db      	uxtb	r3, r3
 800698e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006990:	e048      	b.n	8006a24 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	2101      	movs	r1, #1
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	4013      	ands	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d03a      	beq.n	8006a1e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d003      	beq.n	80069b8 <LL_GPIO_Init+0x58>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d10e      	bne.n	80069d6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	461a      	mov	r2, r3
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fed7 	bl	8006774 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff feb7 	bl	8006744 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	461a      	mov	r2, r3
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff05 	bl	80067ee <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d111      	bne.n	8006a10 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2bff      	cmp	r3, #255	; 0xff
 80069f0:	d807      	bhi.n	8006a02 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	461a      	mov	r2, r3
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ff34 	bl	8006868 <LL_GPIO_SetAFPin_0_7>
 8006a00:	e006      	b.n	8006a10 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	461a      	mov	r2, r3
 8006a08:	69b9      	ldr	r1, [r7, #24]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ff69 	bl	80068e2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	461a      	mov	r2, r3
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fe56 	bl	80066ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	3301      	adds	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1af      	bne.n	8006992 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <LL_RCC_HSI_IsReady>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <LL_RCC_HSI_IsReady+0x24>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4c:	d101      	bne.n	8006a52 <LL_RCC_HSI_IsReady+0x16>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <LL_RCC_HSI_IsReady+0x18>
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40021000 	.word	0x40021000

08006a64 <LL_RCC_LSE_IsReady>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <LL_RCC_LSE_IsReady+0x24>)
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d101      	bne.n	8006a7a <LL_RCC_LSE_IsReady+0x16>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <LL_RCC_LSE_IsReady+0x18>
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000

08006a8c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d101      	bne.n	8006aa0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40021000 	.word	0x40021000

08006ab0 <LL_RCC_MSI_GetRange>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <LL_RCC_MSI_GetRange+0x18>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40021000 	.word	0x40021000

08006acc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006ad0:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <LL_RCC_GetSysClkSource>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <LL_RCC_GetSysClkSource+0x18>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 030c 	and.w	r3, r3, #12
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000

08006b04 <LL_RCC_GetAHBPrescaler>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <LL_RCC_GetAHBPrescaler+0x18>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000

08006b20 <LL_RCC_GetAPB1Prescaler>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000

08006b3c <LL_RCC_GetAPB2Prescaler>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000

08006b58 <LL_RCC_GetUSARTClockSource>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <LL_RCC_GetUSARTClockSource+0x24>)
 8006b62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	401a      	ands	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	4313      	orrs	r3, r2
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40021000 	.word	0x40021000

08006b80 <LL_RCC_GetUARTClockSource>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <LL_RCC_GetUARTClockSource+0x24>)
 8006b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	401a      	ands	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	4313      	orrs	r3, r2
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	40021000 	.word	0x40021000

08006ba8 <LL_RCC_PLL_GetMainSource>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <LL_RCC_PLL_GetMainSource+0x18>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40021000 	.word	0x40021000

08006bc4 <LL_RCC_PLL_GetN>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006bc8:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <LL_RCC_PLL_GetN+0x18>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40021000 	.word	0x40021000

08006be0 <LL_RCC_PLL_GetR>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <LL_RCC_PLL_GetR+0x18>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000

08006bfc <LL_RCC_PLL_GetDivider>:
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <LL_RCC_PLL_GetDivider+0x18>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40021000 	.word	0x40021000

08006c18 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d137      	bne.n	8006c9a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff ff94 	bl	8006b58 <LL_RCC_GetUSARTClockSource>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	f200 80b3 	bhi.w	8006da2 <LL_RCC_GetUSARTClockFreq+0x18a>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006c55 	.word	0x08006c55
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c6f 	.word	0x08006c6f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006c54:	f000 f95c 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006c58:	60f8      	str	r0, [r7, #12]
        break;
 8006c5a:	e0b5      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006c5c:	f7ff feee 	bl	8006a3c <LL_RCC_HSI_IsReady>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 809f 	beq.w	8006da6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006c68:	4b5a      	ldr	r3, [pc, #360]	; (8006dd4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006c6a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c6c:	e09b      	b.n	8006da6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006c6e:	f7ff fef9 	bl	8006a64 <LL_RCC_LSE_IsReady>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8098 	beq.w	8006daa <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c80:	e093      	b.n	8006daa <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c82:	f000 f945 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f9d1 	bl	8007030 <RCC_GetHCLKClockFreq>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f9f7 	bl	8007084 <RCC_GetPCLK2ClockFreq>
 8006c96:	60f8      	str	r0, [r7, #12]
        break;
 8006c98:	e096      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d146      	bne.n	8006d2e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ff59 	bl	8006b58 <LL_RCC_GetUSARTClockSource>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006cac:	2b0c      	cmp	r3, #12
 8006cae:	d87e      	bhi.n	8006dae <LL_RCC_GetUSARTClockFreq+0x196>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006d17 	.word	0x08006d17
 8006cbc:	08006daf 	.word	0x08006daf
 8006cc0:	08006daf 	.word	0x08006daf
 8006cc4:	08006daf 	.word	0x08006daf
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006daf 	.word	0x08006daf
 8006cd0:	08006daf 	.word	0x08006daf
 8006cd4:	08006daf 	.word	0x08006daf
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006daf 	.word	0x08006daf
 8006ce0:	08006daf 	.word	0x08006daf
 8006ce4:	08006daf 	.word	0x08006daf
 8006ce8:	08006d05 	.word	0x08006d05
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006cec:	f000 f910 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006cf0:	60f8      	str	r0, [r7, #12]
        break;
 8006cf2:	e069      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006cf4:	f7ff fea2 	bl	8006a3c <LL_RCC_HSI_IsReady>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d059      	beq.n	8006db2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006cfe:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006d00:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d02:	e056      	b.n	8006db2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006d04:	f7ff feae 	bl	8006a64 <LL_RCC_LSE_IsReady>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d053      	beq.n	8006db6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d12:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006d14:	e04f      	b.n	8006db6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d16:	f000 f8fb 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f987 	bl	8007030 <RCC_GetHCLKClockFreq>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f999 	bl	800705c <RCC_GetPCLK1ClockFreq>
 8006d2a:	60f8      	str	r0, [r7, #12]
        break;
 8006d2c:	e04c      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d142      	bne.n	8006dba <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff0f 	bl	8006b58 <LL_RCC_GetUSARTClockSource>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006d40:	d01a      	beq.n	8006d78 <LL_RCC_GetUSARTClockFreq+0x160>
 8006d42:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006d46:	d83a      	bhi.n	8006dbe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006d48:	4a23      	ldr	r2, [pc, #140]	; (8006dd8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00c      	beq.n	8006d68 <LL_RCC_GetUSARTClockFreq+0x150>
 8006d4e:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d834      	bhi.n	8006dbe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d58:	d017      	beq.n	8006d8a <LL_RCC_GetUSARTClockFreq+0x172>
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d12e      	bne.n	8006dbe <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006d60:	f000 f8d6 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006d64:	60f8      	str	r0, [r7, #12]
          break;
 8006d66:	e02f      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006d68:	f7ff fe68 	bl	8006a3c <LL_RCC_HSI_IsReady>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d027      	beq.n	8006dc2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006d72:	4b18      	ldr	r3, [pc, #96]	; (8006dd4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006d74:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006d76:	e024      	b.n	8006dc2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006d78:	f7ff fe74 	bl	8006a64 <LL_RCC_LSE_IsReady>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d021      	beq.n	8006dc6 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006d88:	e01d      	b.n	8006dc6 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006d8a:	f000 f8c1 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 f94d 	bl	8007030 <RCC_GetHCLKClockFreq>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f95f 	bl	800705c <RCC_GetPCLK1ClockFreq>
 8006d9e:	60f8      	str	r0, [r7, #12]
          break;
 8006da0:	e012      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006da2:	bf00      	nop
 8006da4:	e010      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006da6:	bf00      	nop
 8006da8:	e00e      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006daa:	bf00      	nop
 8006dac:	e00c      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006dae:	bf00      	nop
 8006db0:	e00a      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006db2:	bf00      	nop
 8006db4:	e008      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006db6:	bf00      	nop
 8006db8:	e006      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006dba:	bf00      	nop
 8006dbc:	e004      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006dc6:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	00300020 	.word	0x00300020
 8006ddc:	00300010 	.word	0x00300010

08006de0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2bc0      	cmp	r3, #192	; 0xc0
 8006df0:	d136      	bne.n	8006e60 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fec4 	bl	8006b80 <LL_RCC_GetUARTClockSource>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006dfe:	d01a      	beq.n	8006e36 <LL_RCC_GetUARTClockFreq+0x56>
 8006e00:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006e04:	d82e      	bhi.n	8006e64 <LL_RCC_GetUARTClockFreq+0x84>
 8006e06:	4a3d      	ldr	r2, [pc, #244]	; (8006efc <LL_RCC_GetUARTClockFreq+0x11c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00c      	beq.n	8006e26 <LL_RCC_GetUARTClockFreq+0x46>
 8006e0c:	4a3b      	ldr	r2, [pc, #236]	; (8006efc <LL_RCC_GetUARTClockFreq+0x11c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d828      	bhi.n	8006e64 <LL_RCC_GetUARTClockFreq+0x84>
 8006e12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e16:	d017      	beq.n	8006e48 <LL_RCC_GetUARTClockFreq+0x68>
 8006e18:	4a39      	ldr	r2, [pc, #228]	; (8006f00 <LL_RCC_GetUARTClockFreq+0x120>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d122      	bne.n	8006e64 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006e1e:	f000 f877 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006e22:	60f8      	str	r0, [r7, #12]
        break;
 8006e24:	e023      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006e26:	f7ff fe09 	bl	8006a3c <LL_RCC_HSI_IsReady>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01b      	beq.n	8006e68 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006e30:	4b34      	ldr	r3, [pc, #208]	; (8006f04 <LL_RCC_GetUARTClockFreq+0x124>)
 8006e32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006e34:	e018      	b.n	8006e68 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006e36:	f7ff fe15 	bl	8006a64 <LL_RCC_LSE_IsReady>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d015      	beq.n	8006e6c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e44:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006e46:	e011      	b.n	8006e6c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006e48:	f000 f862 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f8ee 	bl	8007030 <RCC_GetHCLKClockFreq>
 8006e54:	4603      	mov	r3, r0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f900 	bl	800705c <RCC_GetPCLK1ClockFreq>
 8006e5c:	60f8      	str	r0, [r7, #12]
        break;
 8006e5e:	e006      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006e6c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e74:	d136      	bne.n	8006ee4 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fe82 	bl	8006b80 <LL_RCC_GetUARTClockSource>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006e82:	d01a      	beq.n	8006eba <LL_RCC_GetUARTClockFreq+0xda>
 8006e84:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006e88:	d82e      	bhi.n	8006ee8 <LL_RCC_GetUARTClockFreq+0x108>
 8006e8a:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <LL_RCC_GetUARTClockFreq+0x128>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00c      	beq.n	8006eaa <LL_RCC_GetUARTClockFreq+0xca>
 8006e90:	4a1d      	ldr	r2, [pc, #116]	; (8006f08 <LL_RCC_GetUARTClockFreq+0x128>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d828      	bhi.n	8006ee8 <LL_RCC_GetUARTClockFreq+0x108>
 8006e96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e9a:	d017      	beq.n	8006ecc <LL_RCC_GetUARTClockFreq+0xec>
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <LL_RCC_GetUARTClockFreq+0x12c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d122      	bne.n	8006ee8 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006ea2:	f000 f835 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006ea6:	60f8      	str	r0, [r7, #12]
        break;
 8006ea8:	e023      	b.n	8006ef2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006eaa:	f7ff fdc7 	bl	8006a3c <LL_RCC_HSI_IsReady>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01b      	beq.n	8006eec <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006eb4:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <LL_RCC_GetUARTClockFreq+0x124>)
 8006eb6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006eb8:	e018      	b.n	8006eec <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006eba:	f7ff fdd3 	bl	8006a64 <LL_RCC_LSE_IsReady>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006eca:	e011      	b.n	8006ef0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006ecc:	f000 f820 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f8ac 	bl	8007030 <RCC_GetHCLKClockFreq>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f8be 	bl	800705c <RCC_GetPCLK1ClockFreq>
 8006ee0:	60f8      	str	r0, [r7, #12]
        break;
 8006ee2:	e006      	b.n	8006ef2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006ee4:	bf00      	nop
 8006ee6:	e004      	b.n	8006ef2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006ee8:	bf00      	nop
 8006eea:	e002      	b.n	8006ef2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006ef0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	00c00080 	.word	0x00c00080
 8006f00:	00c00040 	.word	0x00c00040
 8006f04:	00f42400 	.word	0x00f42400
 8006f08:	03000200 	.word	0x03000200
 8006f0c:	03000100 	.word	0x03000100

08006f10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006f16:	f7ff fde7 	bl	8006ae8 <LL_RCC_GetSysClkSource>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d851      	bhi.n	8006fc4 <RCC_GetSystemClockFreq+0xb4>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <RCC_GetSystemClockFreq+0x18>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006fc5 	.word	0x08006fc5
 8006f30:	08006fc5 	.word	0x08006fc5
 8006f34:	08006fc5 	.word	0x08006fc5
 8006f38:	08006fb1 	.word	0x08006fb1
 8006f3c:	08006fc5 	.word	0x08006fc5
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	08006fc5 	.word	0x08006fc5
 8006f48:	08006fb7 	.word	0x08006fb7
 8006f4c:	08006fc5 	.word	0x08006fc5
 8006f50:	08006fc5 	.word	0x08006fc5
 8006f54:	08006fc5 	.word	0x08006fc5
 8006f58:	08006fbd 	.word	0x08006fbd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006f5c:	f7ff fd96 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d111      	bne.n	8006f8a <RCC_GetSystemClockFreq+0x7a>
 8006f66:	f7ff fd91 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <RCC_GetSystemClockFreq+0x6a>
 8006f70:	f7ff fd9e 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 8006f74:	4603      	mov	r3, r0
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	e003      	b.n	8006f82 <RCC_GetSystemClockFreq+0x72>
 8006f7a:	f7ff fda7 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	0a1b      	lsrs	r3, r3, #8
 8006f82:	4a28      	ldr	r2, [pc, #160]	; (8007024 <RCC_GetSystemClockFreq+0x114>)
 8006f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f88:	e010      	b.n	8006fac <RCC_GetSystemClockFreq+0x9c>
 8006f8a:	f7ff fd7f 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <RCC_GetSystemClockFreq+0x8e>
 8006f94:	f7ff fd8c 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	091b      	lsrs	r3, r3, #4
 8006f9c:	e003      	b.n	8006fa6 <RCC_GetSystemClockFreq+0x96>
 8006f9e:	f7ff fd95 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <RCC_GetSystemClockFreq+0x114>)
 8006fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fac:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006fae:	e033      	b.n	8007018 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <RCC_GetSystemClockFreq+0x118>)
 8006fb2:	607b      	str	r3, [r7, #4]
      break;
 8006fb4:	e030      	b.n	8007018 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <RCC_GetSystemClockFreq+0x11c>)
 8006fb8:	607b      	str	r3, [r7, #4]
      break;
 8006fba:	e02d      	b.n	8007018 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006fbc:	f000 f876 	bl	80070ac <RCC_PLL_GetFreqDomain_SYS>
 8006fc0:	6078      	str	r0, [r7, #4]
      break;
 8006fc2:	e029      	b.n	8007018 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006fc4:	f7ff fd62 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d111      	bne.n	8006ff2 <RCC_GetSystemClockFreq+0xe2>
 8006fce:	f7ff fd5d 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <RCC_GetSystemClockFreq+0xd2>
 8006fd8:	f7ff fd6a 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	e003      	b.n	8006fea <RCC_GetSystemClockFreq+0xda>
 8006fe2:	f7ff fd73 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	4a0e      	ldr	r2, [pc, #56]	; (8007024 <RCC_GetSystemClockFreq+0x114>)
 8006fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff0:	e010      	b.n	8007014 <RCC_GetSystemClockFreq+0x104>
 8006ff2:	f7ff fd4b 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <RCC_GetSystemClockFreq+0xf6>
 8006ffc:	f7ff fd58 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 8007000:	4603      	mov	r3, r0
 8007002:	091b      	lsrs	r3, r3, #4
 8007004:	e003      	b.n	800700e <RCC_GetSystemClockFreq+0xfe>
 8007006:	f7ff fd61 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 800700a:	4603      	mov	r3, r0
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	4a05      	ldr	r2, [pc, #20]	; (8007024 <RCC_GetSystemClockFreq+0x114>)
 8007010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007014:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007016:	bf00      	nop
  }

  return frequency;
 8007018:	687b      	ldr	r3, [r7, #4]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800887c 	.word	0x0800887c
 8007028:	00f42400 	.word	0x00f42400
 800702c:	007a1200 	.word	0x007a1200

08007030 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007038:	f7ff fd64 	bl	8006b04 <LL_RCC_GetAHBPrescaler>
 800703c:	4603      	mov	r3, r0
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	4a04      	ldr	r2, [pc, #16]	; (8007058 <RCC_GetHCLKClockFreq+0x28>)
 8007046:	5cd3      	ldrb	r3, [r2, r3]
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	40d3      	lsrs	r3, r2
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	08008864 	.word	0x08008864

0800705c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007064:	f7ff fd5c 	bl	8006b20 <LL_RCC_GetAPB1Prescaler>
 8007068:	4603      	mov	r3, r0
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	4a04      	ldr	r2, [pc, #16]	; (8007080 <RCC_GetPCLK1ClockFreq+0x24>)
 800706e:	5cd3      	ldrb	r3, [r2, r3]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	40d3      	lsrs	r3, r2
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	08008874 	.word	0x08008874

08007084 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800708c:	f7ff fd56 	bl	8006b3c <LL_RCC_GetAPB2Prescaler>
 8007090:	4603      	mov	r3, r0
 8007092:	0adb      	lsrs	r3, r3, #11
 8007094:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	40d3      	lsrs	r3, r2
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08008874 	.word	0x08008874

080070ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80070b2:	f7ff fd79 	bl	8006ba8 <LL_RCC_PLL_GetMainSource>
 80070b6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d036      	beq.n	800712c <RCC_PLL_GetFreqDomain_SYS+0x80>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d836      	bhi.n	8007132 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d003      	beq.n	80070d2 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d02a      	beq.n	8007126 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80070d0:	e02f      	b.n	8007132 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80070d2:	f7ff fcdb 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d111      	bne.n	8007100 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80070dc:	f7ff fcd6 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80070e6:	f7ff fce3 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 80070ea:	4603      	mov	r3, r0
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	e003      	b.n	80070f8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80070f0:	f7ff fcec 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 80070f4:	4603      	mov	r3, r0
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	4a2f      	ldr	r2, [pc, #188]	; (80071b8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80070fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fe:	e010      	b.n	8007122 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8007100:	f7ff fcc4 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800710a:	f7ff fcd1 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 800710e:	4603      	mov	r3, r0
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	e003      	b.n	800711c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8007114:	f7ff fcda 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8007118:	4603      	mov	r3, r0
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800711e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007122:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007124:	e02f      	b.n	8007186 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8007128:	607b      	str	r3, [r7, #4]
      break;
 800712a:	e02c      	b.n	8007186 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800712c:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800712e:	607b      	str	r3, [r7, #4]
      break;
 8007130:	e029      	b.n	8007186 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007132:	f7ff fcab 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d111      	bne.n	8007160 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800713c:	f7ff fca6 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8007146:	f7ff fcb3 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 800714a:	4603      	mov	r3, r0
 800714c:	0a1b      	lsrs	r3, r3, #8
 800714e:	e003      	b.n	8007158 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8007150:	f7ff fcbc 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8007154:	4603      	mov	r3, r0
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	e010      	b.n	8007182 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8007160:	f7ff fc94 	bl	8006a8c <LL_RCC_MSI_IsEnabledRangeSelect>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800716a:	f7ff fca1 	bl	8006ab0 <LL_RCC_MSI_GetRange>
 800716e:	4603      	mov	r3, r0
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	e003      	b.n	800717c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8007174:	f7ff fcaa 	bl	8006acc <LL_RCC_MSI_GetRangeAfterStandby>
 8007178:	4603      	mov	r3, r0
 800717a:	091b      	lsrs	r3, r3, #4
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007182:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007184:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007186:	f7ff fd39 	bl	8006bfc <LL_RCC_PLL_GetDivider>
 800718a:	4603      	mov	r3, r0
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	3301      	adds	r3, #1
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	fbb2 f4f3 	udiv	r4, r2, r3
 8007196:	f7ff fd15 	bl	8006bc4 <LL_RCC_PLL_GetN>
 800719a:	4603      	mov	r3, r0
 800719c:	fb03 f404 	mul.w	r4, r3, r4
 80071a0:	f7ff fd1e 	bl	8006be0 <LL_RCC_PLL_GetR>
 80071a4:	4603      	mov	r3, r0
 80071a6:	0e5b      	lsrs	r3, r3, #25
 80071a8:	3301      	adds	r3, #1
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}
 80071b8:	0800887c 	.word	0x0800887c
 80071bc:	00f42400 	.word	0x00f42400
 80071c0:	007a1200 	.word	0x007a1200

080071c4 <LL_SPI_IsEnabled>:
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d101      	bne.n	80071dc <LL_SPI_IsEnabled+0x18>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <LL_SPI_IsEnabled+0x1a>
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <LL_SPI_SetRxFIFOThreshold>:
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <LL_SPI_SetCRCPolynomial>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	611a      	str	r2, [r3, #16]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff ffc0 	bl	80071c4 <LL_SPI_IsEnabled>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d145      	bne.n	80072d6 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007252:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	6811      	ldr	r1, [r2, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	4311      	orrs	r1, r2
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	68d2      	ldr	r2, [r2, #12]
 8007264:	4311      	orrs	r1, r2
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	6912      	ldr	r2, [r2, #16]
 800726a:	4311      	orrs	r1, r2
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	6952      	ldr	r2, [r2, #20]
 8007270:	4311      	orrs	r1, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6992      	ldr	r2, [r2, #24]
 8007276:	4311      	orrs	r1, r2
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	69d2      	ldr	r2, [r2, #28]
 800727c:	4311      	orrs	r1, r2
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	6a12      	ldr	r2, [r2, #32]
 8007282:	430a      	orrs	r2, r1
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007292:	f023 0304 	bic.w	r3, r3, #4
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	6891      	ldr	r1, [r2, #8]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	6952      	ldr	r2, [r2, #20]
 800729e:	0c12      	lsrs	r2, r2, #16
 80072a0:	430a      	orrs	r2, r1
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b0:	d204      	bcs.n	80072bc <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80072b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff ff97 	bl	80071ea <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c4:	d105      	bne.n	80072d2 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff9f 	bl	8007210 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <LL_USART_IsEnabled>:
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <LL_USART_IsEnabled+0x18>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <LL_USART_IsEnabled+0x1a>
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <LL_USART_SetStopBitsLength>:
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <LL_USART_SetHWFlowCtrl>:
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <LL_USART_SetBaudRate>:
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007366:	d11a      	bne.n	800739e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	005a      	lsls	r2, r3, #1
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	441a      	add	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	fbb2 f3f3 	udiv	r3, r2, r3
 8007378:	b29b      	uxth	r3, r3
 800737a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8007382:	4013      	ands	r3, r2
 8007384:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	60da      	str	r2, [r3, #12]
}
 800739c:	e00a      	b.n	80073b4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	085a      	lsrs	r2, r3, #1
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	441a      	add	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	60da      	str	r2, [r3, #12]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff ff84 	bl	80072e0 <LL_USART_IsEnabled>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d15b      	bne.n	8007496 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <LL_USART_Init+0xe0>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6851      	ldr	r1, [r2, #4]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	68d2      	ldr	r2, [r2, #12]
 80073ee:	4311      	orrs	r1, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	6912      	ldr	r2, [r2, #16]
 80073f4:	4311      	orrs	r1, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	6992      	ldr	r2, [r2, #24]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff7c 	bl	8007306 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff ff89 	bl	800732c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <LL_USART_Init+0xe4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d104      	bne.n	800742c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007422:	2003      	movs	r0, #3
 8007424:	f7ff fbf8 	bl	8006c18 <LL_RCC_GetUSARTClockFreq>
 8007428:	60b8      	str	r0, [r7, #8]
 800742a:	e023      	b.n	8007474 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <LL_USART_Init+0xe8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d104      	bne.n	800743e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007434:	200c      	movs	r0, #12
 8007436:	f7ff fbef 	bl	8006c18 <LL_RCC_GetUSARTClockFreq>
 800743a:	60b8      	str	r0, [r7, #8]
 800743c:	e01a      	b.n	8007474 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a1a      	ldr	r2, [pc, #104]	; (80074ac <LL_USART_Init+0xec>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d104      	bne.n	8007450 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8007446:	2030      	movs	r0, #48	; 0x30
 8007448:	f7ff fbe6 	bl	8006c18 <LL_RCC_GetUSARTClockFreq>
 800744c:	60b8      	str	r0, [r7, #8]
 800744e:	e011      	b.n	8007474 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <LL_USART_Init+0xf0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d104      	bne.n	8007462 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007458:	20c0      	movs	r0, #192	; 0xc0
 800745a:	f7ff fcc1 	bl	8006de0 <LL_RCC_GetUARTClockFreq>
 800745e:	60b8      	str	r0, [r7, #8]
 8007460:	e008      	b.n	8007474 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <LL_USART_Init+0xf4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d104      	bne.n	8007474 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800746a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800746e:	f7ff fcb7 	bl	8006de0 <LL_RCC_GetUARTClockFreq>
 8007472:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00d      	beq.n	8007496 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff5e 	bl	8007352 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	efff69f3 	.word	0xefff69f3
 80074a4:	40013800 	.word	0x40013800
 80074a8:	40004400 	.word	0x40004400
 80074ac:	40004800 	.word	0x40004800
 80074b0:	40004c00 	.word	0x40004c00
 80074b4:	40005000 	.word	0x40005000

080074b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	4a07      	ldr	r2, [pc, #28]	; (80074e8 <LL_InitTick+0x30>)
 80074cc:	3b01      	subs	r3, #1
 80074ce:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <LL_InitTick+0x30>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074d6:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <LL_InitTick+0x30>)
 80074d8:	2205      	movs	r2, #5
 80074da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000e010 	.word	0xe000e010

080074ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80074f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ffdd 	bl	80074b8 <LL_InitTick>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007510:	4b10      	ldr	r3, [pc, #64]	; (8007554 <LL_mDelay+0x4c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800751a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d00c      	beq.n	800753e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800752a:	e008      	b.n	800753e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <LL_mDelay+0x4c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b01      	subs	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f3      	bne.n	800752c <LL_mDelay+0x24>
    }
  }
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	e000e010 	.word	0xe000e010

08007558 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007560:	4a04      	ldr	r2, [pc, #16]	; (8007574 <LL_SetSystemCoreClock+0x1c>)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6013      	str	r3, [r2, #0]
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000010 	.word	0x20000010

08007578 <__libc_init_array>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4d0d      	ldr	r5, [pc, #52]	; (80075b0 <__libc_init_array+0x38>)
 800757c:	4c0d      	ldr	r4, [pc, #52]	; (80075b4 <__libc_init_array+0x3c>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	2600      	movs	r6, #0
 8007584:	42a6      	cmp	r6, r4
 8007586:	d109      	bne.n	800759c <__libc_init_array+0x24>
 8007588:	4d0b      	ldr	r5, [pc, #44]	; (80075b8 <__libc_init_array+0x40>)
 800758a:	4c0c      	ldr	r4, [pc, #48]	; (80075bc <__libc_init_array+0x44>)
 800758c:	f001 f930 	bl	80087f0 <_init>
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	2600      	movs	r6, #0
 8007596:	42a6      	cmp	r6, r4
 8007598:	d105      	bne.n	80075a6 <__libc_init_array+0x2e>
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a0:	4798      	blx	r3
 80075a2:	3601      	adds	r6, #1
 80075a4:	e7ee      	b.n	8007584 <__libc_init_array+0xc>
 80075a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075aa:	4798      	blx	r3
 80075ac:	3601      	adds	r6, #1
 80075ae:	e7f2      	b.n	8007596 <__libc_init_array+0x1e>
 80075b0:	08009580 	.word	0x08009580
 80075b4:	08009580 	.word	0x08009580
 80075b8:	08009580 	.word	0x08009580
 80075bc:	08009584 	.word	0x08009584

080075c0 <memcmp>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	3901      	subs	r1, #1
 80075c4:	4402      	add	r2, r0
 80075c6:	4290      	cmp	r0, r2
 80075c8:	d101      	bne.n	80075ce <memcmp+0xe>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e005      	b.n	80075da <memcmp+0x1a>
 80075ce:	7803      	ldrb	r3, [r0, #0]
 80075d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d001      	beq.n	80075dc <memcmp+0x1c>
 80075d8:	1b18      	subs	r0, r3, r4
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	3001      	adds	r0, #1
 80075de:	e7f2      	b.n	80075c6 <memcmp+0x6>

080075e0 <memcpy>:
 80075e0:	440a      	add	r2, r1
 80075e2:	4291      	cmp	r1, r2
 80075e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e8:	d100      	bne.n	80075ec <memcpy+0xc>
 80075ea:	4770      	bx	lr
 80075ec:	b510      	push	{r4, lr}
 80075ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f6:	4291      	cmp	r1, r2
 80075f8:	d1f9      	bne.n	80075ee <memcpy+0xe>
 80075fa:	bd10      	pop	{r4, pc}

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>
 800760c:	0000      	movs	r0, r0
	...

08007610 <atan>:
 8007610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	ec55 4b10 	vmov	r4, r5, d0
 8007618:	4bc3      	ldr	r3, [pc, #780]	; (8007928 <atan+0x318>)
 800761a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800761e:	429e      	cmp	r6, r3
 8007620:	46ab      	mov	fp, r5
 8007622:	dd18      	ble.n	8007656 <atan+0x46>
 8007624:	4bc1      	ldr	r3, [pc, #772]	; (800792c <atan+0x31c>)
 8007626:	429e      	cmp	r6, r3
 8007628:	dc01      	bgt.n	800762e <atan+0x1e>
 800762a:	d109      	bne.n	8007640 <atan+0x30>
 800762c:	b144      	cbz	r4, 8007640 <atan+0x30>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 fdcd 	bl	80001d4 <__adddf3>
 800763a:	4604      	mov	r4, r0
 800763c:	460d      	mov	r5, r1
 800763e:	e006      	b.n	800764e <atan+0x3e>
 8007640:	f1bb 0f00 	cmp.w	fp, #0
 8007644:	f300 8131 	bgt.w	80078aa <atan+0x29a>
 8007648:	a59b      	add	r5, pc, #620	; (adr r5, 80078b8 <atan+0x2a8>)
 800764a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800764e:	ec45 4b10 	vmov	d0, r4, r5
 8007652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	4bb6      	ldr	r3, [pc, #728]	; (8007930 <atan+0x320>)
 8007658:	429e      	cmp	r6, r3
 800765a:	dc14      	bgt.n	8007686 <atan+0x76>
 800765c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007660:	429e      	cmp	r6, r3
 8007662:	dc0d      	bgt.n	8007680 <atan+0x70>
 8007664:	a396      	add	r3, pc, #600	; (adr r3, 80078c0 <atan+0x2b0>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	ee10 0a10 	vmov	r0, s0
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 fdb0 	bl	80001d4 <__adddf3>
 8007674:	4baf      	ldr	r3, [pc, #700]	; (8007934 <atan+0x324>)
 8007676:	2200      	movs	r2, #0
 8007678:	f7f9 f9f2 	bl	8000a60 <__aeabi_dcmpgt>
 800767c:	2800      	cmp	r0, #0
 800767e:	d1e6      	bne.n	800764e <atan+0x3e>
 8007680:	f04f 3aff 	mov.w	sl, #4294967295
 8007684:	e02b      	b.n	80076de <atan+0xce>
 8007686:	f000 f963 	bl	8007950 <fabs>
 800768a:	4bab      	ldr	r3, [pc, #684]	; (8007938 <atan+0x328>)
 800768c:	429e      	cmp	r6, r3
 800768e:	ec55 4b10 	vmov	r4, r5, d0
 8007692:	f300 80bf 	bgt.w	8007814 <atan+0x204>
 8007696:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800769a:	429e      	cmp	r6, r3
 800769c:	f300 80a0 	bgt.w	80077e0 <atan+0x1d0>
 80076a0:	ee10 2a10 	vmov	r2, s0
 80076a4:	ee10 0a10 	vmov	r0, s0
 80076a8:	462b      	mov	r3, r5
 80076aa:	4629      	mov	r1, r5
 80076ac:	f7f8 fd92 	bl	80001d4 <__adddf3>
 80076b0:	4ba0      	ldr	r3, [pc, #640]	; (8007934 <atan+0x324>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	f7f8 fd8c 	bl	80001d0 <__aeabi_dsub>
 80076b8:	2200      	movs	r2, #0
 80076ba:	4606      	mov	r6, r0
 80076bc:	460f      	mov	r7, r1
 80076be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 fd85 	bl	80001d4 <__adddf3>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4630      	mov	r0, r6
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f9 f85f 	bl	8000794 <__aeabi_ddiv>
 80076d6:	f04f 0a00 	mov.w	sl, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	460d      	mov	r5, r1
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7f8 ff2b 	bl	8000540 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4680      	mov	r8, r0
 80076f0:	4689      	mov	r9, r1
 80076f2:	f7f8 ff25 	bl	8000540 <__aeabi_dmul>
 80076f6:	a374      	add	r3, pc, #464	; (adr r3, 80078c8 <atan+0x2b8>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	f7f8 ff1e 	bl	8000540 <__aeabi_dmul>
 8007704:	a372      	add	r3, pc, #456	; (adr r3, 80078d0 <atan+0x2c0>)
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f7f8 fd63 	bl	80001d4 <__adddf3>
 800770e:	4632      	mov	r2, r6
 8007710:	463b      	mov	r3, r7
 8007712:	f7f8 ff15 	bl	8000540 <__aeabi_dmul>
 8007716:	a370      	add	r3, pc, #448	; (adr r3, 80078d8 <atan+0x2c8>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 fd5a 	bl	80001d4 <__adddf3>
 8007720:	4632      	mov	r2, r6
 8007722:	463b      	mov	r3, r7
 8007724:	f7f8 ff0c 	bl	8000540 <__aeabi_dmul>
 8007728:	a36d      	add	r3, pc, #436	; (adr r3, 80078e0 <atan+0x2d0>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f7f8 fd51 	bl	80001d4 <__adddf3>
 8007732:	4632      	mov	r2, r6
 8007734:	463b      	mov	r3, r7
 8007736:	f7f8 ff03 	bl	8000540 <__aeabi_dmul>
 800773a:	a36b      	add	r3, pc, #428	; (adr r3, 80078e8 <atan+0x2d8>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f7f8 fd48 	bl	80001d4 <__adddf3>
 8007744:	4632      	mov	r2, r6
 8007746:	463b      	mov	r3, r7
 8007748:	f7f8 fefa 	bl	8000540 <__aeabi_dmul>
 800774c:	a368      	add	r3, pc, #416	; (adr r3, 80078f0 <atan+0x2e0>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fd3f 	bl	80001d4 <__adddf3>
 8007756:	4642      	mov	r2, r8
 8007758:	464b      	mov	r3, r9
 800775a:	f7f8 fef1 	bl	8000540 <__aeabi_dmul>
 800775e:	a366      	add	r3, pc, #408	; (adr r3, 80078f8 <atan+0x2e8>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	4680      	mov	r8, r0
 8007766:	4689      	mov	r9, r1
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f8 fee8 	bl	8000540 <__aeabi_dmul>
 8007770:	a363      	add	r3, pc, #396	; (adr r3, 8007900 <atan+0x2f0>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 fd2b 	bl	80001d0 <__aeabi_dsub>
 800777a:	4632      	mov	r2, r6
 800777c:	463b      	mov	r3, r7
 800777e:	f7f8 fedf 	bl	8000540 <__aeabi_dmul>
 8007782:	a361      	add	r3, pc, #388	; (adr r3, 8007908 <atan+0x2f8>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 fd22 	bl	80001d0 <__aeabi_dsub>
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	f7f8 fed6 	bl	8000540 <__aeabi_dmul>
 8007794:	a35e      	add	r3, pc, #376	; (adr r3, 8007910 <atan+0x300>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd19 	bl	80001d0 <__aeabi_dsub>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	f7f8 fecd 	bl	8000540 <__aeabi_dmul>
 80077a6:	a35c      	add	r3, pc, #368	; (adr r3, 8007918 <atan+0x308>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fd10 	bl	80001d0 <__aeabi_dsub>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 fec4 	bl	8000540 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4640      	mov	r0, r8
 80077be:	4649      	mov	r1, r9
 80077c0:	f7f8 fd08 	bl	80001d4 <__adddf3>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 feba 	bl	8000540 <__aeabi_dmul>
 80077cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	d14b      	bne.n	800786e <atan+0x25e>
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f8 fcf9 	bl	80001d0 <__aeabi_dsub>
 80077de:	e72c      	b.n	800763a <atan+0x2a>
 80077e0:	ee10 0a10 	vmov	r0, s0
 80077e4:	4b53      	ldr	r3, [pc, #332]	; (8007934 <atan+0x324>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 fcf1 	bl	80001d0 <__aeabi_dsub>
 80077ee:	4b51      	ldr	r3, [pc, #324]	; (8007934 <atan+0x324>)
 80077f0:	4606      	mov	r6, r0
 80077f2:	460f      	mov	r7, r1
 80077f4:	2200      	movs	r2, #0
 80077f6:	4620      	mov	r0, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	f7f8 fceb 	bl	80001d4 <__adddf3>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4630      	mov	r0, r6
 8007804:	4639      	mov	r1, r7
 8007806:	f7f8 ffc5 	bl	8000794 <__aeabi_ddiv>
 800780a:	f04f 0a01 	mov.w	sl, #1
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	e764      	b.n	80076de <atan+0xce>
 8007814:	4b49      	ldr	r3, [pc, #292]	; (800793c <atan+0x32c>)
 8007816:	429e      	cmp	r6, r3
 8007818:	da1d      	bge.n	8007856 <atan+0x246>
 800781a:	ee10 0a10 	vmov	r0, s0
 800781e:	4b48      	ldr	r3, [pc, #288]	; (8007940 <atan+0x330>)
 8007820:	2200      	movs	r2, #0
 8007822:	4629      	mov	r1, r5
 8007824:	f7f8 fcd4 	bl	80001d0 <__aeabi_dsub>
 8007828:	4b45      	ldr	r3, [pc, #276]	; (8007940 <atan+0x330>)
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	2200      	movs	r2, #0
 8007830:	4620      	mov	r0, r4
 8007832:	4629      	mov	r1, r5
 8007834:	f7f8 fe84 	bl	8000540 <__aeabi_dmul>
 8007838:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <atan+0x324>)
 800783a:	2200      	movs	r2, #0
 800783c:	f7f8 fcca 	bl	80001d4 <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f8 ffa4 	bl	8000794 <__aeabi_ddiv>
 800784c:	f04f 0a02 	mov.w	sl, #2
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	e743      	b.n	80076de <atan+0xce>
 8007856:	462b      	mov	r3, r5
 8007858:	ee10 2a10 	vmov	r2, s0
 800785c:	4939      	ldr	r1, [pc, #228]	; (8007944 <atan+0x334>)
 800785e:	2000      	movs	r0, #0
 8007860:	f7f8 ff98 	bl	8000794 <__aeabi_ddiv>
 8007864:	f04f 0a03 	mov.w	sl, #3
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	e737      	b.n	80076de <atan+0xce>
 800786e:	4b36      	ldr	r3, [pc, #216]	; (8007948 <atan+0x338>)
 8007870:	4e36      	ldr	r6, [pc, #216]	; (800794c <atan+0x33c>)
 8007872:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007876:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800787a:	e9da 2300 	ldrd	r2, r3, [sl]
 800787e:	f7f8 fca7 	bl	80001d0 <__aeabi_dsub>
 8007882:	4622      	mov	r2, r4
 8007884:	462b      	mov	r3, r5
 8007886:	f7f8 fca3 	bl	80001d0 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007892:	f7f8 fc9d 	bl	80001d0 <__aeabi_dsub>
 8007896:	f1bb 0f00 	cmp.w	fp, #0
 800789a:	4604      	mov	r4, r0
 800789c:	460d      	mov	r5, r1
 800789e:	f6bf aed6 	bge.w	800764e <atan+0x3e>
 80078a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078a6:	461d      	mov	r5, r3
 80078a8:	e6d1      	b.n	800764e <atan+0x3e>
 80078aa:	a51d      	add	r5, pc, #116	; (adr r5, 8007920 <atan+0x310>)
 80078ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078b0:	e6cd      	b.n	800764e <atan+0x3e>
 80078b2:	bf00      	nop
 80078b4:	f3af 8000 	nop.w
 80078b8:	54442d18 	.word	0x54442d18
 80078bc:	bff921fb 	.word	0xbff921fb
 80078c0:	8800759c 	.word	0x8800759c
 80078c4:	7e37e43c 	.word	0x7e37e43c
 80078c8:	e322da11 	.word	0xe322da11
 80078cc:	3f90ad3a 	.word	0x3f90ad3a
 80078d0:	24760deb 	.word	0x24760deb
 80078d4:	3fa97b4b 	.word	0x3fa97b4b
 80078d8:	a0d03d51 	.word	0xa0d03d51
 80078dc:	3fb10d66 	.word	0x3fb10d66
 80078e0:	c54c206e 	.word	0xc54c206e
 80078e4:	3fb745cd 	.word	0x3fb745cd
 80078e8:	920083ff 	.word	0x920083ff
 80078ec:	3fc24924 	.word	0x3fc24924
 80078f0:	5555550d 	.word	0x5555550d
 80078f4:	3fd55555 	.word	0x3fd55555
 80078f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80078fc:	bfa2b444 	.word	0xbfa2b444
 8007900:	52defd9a 	.word	0x52defd9a
 8007904:	3fadde2d 	.word	0x3fadde2d
 8007908:	af749a6d 	.word	0xaf749a6d
 800790c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007910:	fe231671 	.word	0xfe231671
 8007914:	3fbc71c6 	.word	0x3fbc71c6
 8007918:	9998ebc4 	.word	0x9998ebc4
 800791c:	3fc99999 	.word	0x3fc99999
 8007920:	54442d18 	.word	0x54442d18
 8007924:	3ff921fb 	.word	0x3ff921fb
 8007928:	440fffff 	.word	0x440fffff
 800792c:	7ff00000 	.word	0x7ff00000
 8007930:	3fdbffff 	.word	0x3fdbffff
 8007934:	3ff00000 	.word	0x3ff00000
 8007938:	3ff2ffff 	.word	0x3ff2ffff
 800793c:	40038000 	.word	0x40038000
 8007940:	3ff80000 	.word	0x3ff80000
 8007944:	bff00000 	.word	0xbff00000
 8007948:	08009530 	.word	0x08009530
 800794c:	08009510 	.word	0x08009510

08007950 <fabs>:
 8007950:	ec51 0b10 	vmov	r0, r1, d0
 8007954:	ee10 2a10 	vmov	r2, s0
 8007958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800795c:	ec43 2b10 	vmov	d0, r2, r3
 8007960:	4770      	bx	lr
	...

08007964 <pow>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	ed2d 8b02 	vpush	{d8}
 800796a:	eeb0 8a40 	vmov.f32	s16, s0
 800796e:	eef0 8a60 	vmov.f32	s17, s1
 8007972:	ec55 4b11 	vmov	r4, r5, d1
 8007976:	f000 f893 	bl	8007aa0 <__ieee754_pow>
 800797a:	4622      	mov	r2, r4
 800797c:	462b      	mov	r3, r5
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	ec57 6b10 	vmov	r6, r7, d0
 8007986:	f7f9 f875 	bl	8000a74 <__aeabi_dcmpun>
 800798a:	2800      	cmp	r0, #0
 800798c:	d13b      	bne.n	8007a06 <pow+0xa2>
 800798e:	ec51 0b18 	vmov	r0, r1, d8
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	f7f9 f83b 	bl	8000a10 <__aeabi_dcmpeq>
 800799a:	b1b8      	cbz	r0, 80079cc <pow+0x68>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4620      	mov	r0, r4
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f9 f834 	bl	8000a10 <__aeabi_dcmpeq>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d146      	bne.n	8007a3a <pow+0xd6>
 80079ac:	ec45 4b10 	vmov	d0, r4, r5
 80079b0:	f000 fe86 	bl	80086c0 <finite>
 80079b4:	b338      	cbz	r0, 8007a06 <pow+0xa2>
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	f7f9 f831 	bl	8000a24 <__aeabi_dcmplt>
 80079c2:	b300      	cbz	r0, 8007a06 <pow+0xa2>
 80079c4:	f000 ff0e 	bl	80087e4 <__errno>
 80079c8:	2322      	movs	r3, #34	; 0x22
 80079ca:	e01b      	b.n	8007a04 <pow+0xa0>
 80079cc:	ec47 6b10 	vmov	d0, r6, r7
 80079d0:	f000 fe76 	bl	80086c0 <finite>
 80079d4:	b9e0      	cbnz	r0, 8007a10 <pow+0xac>
 80079d6:	eeb0 0a48 	vmov.f32	s0, s16
 80079da:	eef0 0a68 	vmov.f32	s1, s17
 80079de:	f000 fe6f 	bl	80086c0 <finite>
 80079e2:	b1a8      	cbz	r0, 8007a10 <pow+0xac>
 80079e4:	ec45 4b10 	vmov	d0, r4, r5
 80079e8:	f000 fe6a 	bl	80086c0 <finite>
 80079ec:	b180      	cbz	r0, 8007a10 <pow+0xac>
 80079ee:	4632      	mov	r2, r6
 80079f0:	463b      	mov	r3, r7
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f9 f83d 	bl	8000a74 <__aeabi_dcmpun>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0e2      	beq.n	80079c4 <pow+0x60>
 80079fe:	f000 fef1 	bl	80087e4 <__errno>
 8007a02:	2321      	movs	r3, #33	; 0x21
 8007a04:	6003      	str	r3, [r0, #0]
 8007a06:	ecbd 8b02 	vpop	{d8}
 8007a0a:	ec47 6b10 	vmov	d0, r6, r7
 8007a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	4630      	mov	r0, r6
 8007a16:	4639      	mov	r1, r7
 8007a18:	f7f8 fffa 	bl	8000a10 <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d0f2      	beq.n	8007a06 <pow+0xa2>
 8007a20:	eeb0 0a48 	vmov.f32	s0, s16
 8007a24:	eef0 0a68 	vmov.f32	s1, s17
 8007a28:	f000 fe4a 	bl	80086c0 <finite>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d0ea      	beq.n	8007a06 <pow+0xa2>
 8007a30:	ec45 4b10 	vmov	d0, r4, r5
 8007a34:	f000 fe44 	bl	80086c0 <finite>
 8007a38:	e7c3      	b.n	80079c2 <pow+0x5e>
 8007a3a:	4f01      	ldr	r7, [pc, #4]	; (8007a40 <pow+0xdc>)
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	e7e2      	b.n	8007a06 <pow+0xa2>
 8007a40:	3ff00000 	.word	0x3ff00000

08007a44 <sqrt>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	ed2d 8b02 	vpush	{d8}
 8007a4a:	ec55 4b10 	vmov	r4, r5, d0
 8007a4e:	f000 fd55 	bl	80084fc <__ieee754_sqrt>
 8007a52:	4622      	mov	r2, r4
 8007a54:	462b      	mov	r3, r5
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a5e:	eef0 8a60 	vmov.f32	s17, s1
 8007a62:	f7f9 f807 	bl	8000a74 <__aeabi_dcmpun>
 8007a66:	b990      	cbnz	r0, 8007a8e <sqrt+0x4a>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 ffd8 	bl	8000a24 <__aeabi_dcmplt>
 8007a74:	b158      	cbz	r0, 8007a8e <sqrt+0x4a>
 8007a76:	f000 feb5 	bl	80087e4 <__errno>
 8007a7a:	2321      	movs	r3, #33	; 0x21
 8007a7c:	6003      	str	r3, [r0, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7f8 fe85 	bl	8000794 <__aeabi_ddiv>
 8007a8a:	ec41 0b18 	vmov	d8, r0, r1
 8007a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8007a92:	eef0 0a68 	vmov.f32	s1, s17
 8007a96:	ecbd 8b02 	vpop	{d8}
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	0000      	movs	r0, r0
	...

08007aa0 <__ieee754_pow>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	ed2d 8b06 	vpush	{d8-d10}
 8007aa8:	b089      	sub	sp, #36	; 0x24
 8007aaa:	ed8d 1b00 	vstr	d1, [sp]
 8007aae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007ab2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007ab6:	ea58 0102 	orrs.w	r1, r8, r2
 8007aba:	ec57 6b10 	vmov	r6, r7, d0
 8007abe:	d115      	bne.n	8007aec <__ieee754_pow+0x4c>
 8007ac0:	19b3      	adds	r3, r6, r6
 8007ac2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007ac6:	4152      	adcs	r2, r2
 8007ac8:	4299      	cmp	r1, r3
 8007aca:	4b89      	ldr	r3, [pc, #548]	; (8007cf0 <__ieee754_pow+0x250>)
 8007acc:	4193      	sbcs	r3, r2
 8007ace:	f080 84d2 	bcs.w	8008476 <__ieee754_pow+0x9d6>
 8007ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fb7b 	bl	80001d4 <__adddf3>
 8007ade:	ec41 0b10 	vmov	d0, r0, r1
 8007ae2:	b009      	add	sp, #36	; 0x24
 8007ae4:	ecbd 8b06 	vpop	{d8-d10}
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	4b81      	ldr	r3, [pc, #516]	; (8007cf4 <__ieee754_pow+0x254>)
 8007aee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007af2:	429c      	cmp	r4, r3
 8007af4:	ee10 aa10 	vmov	sl, s0
 8007af8:	463d      	mov	r5, r7
 8007afa:	dc06      	bgt.n	8007b0a <__ieee754_pow+0x6a>
 8007afc:	d101      	bne.n	8007b02 <__ieee754_pow+0x62>
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d1e7      	bne.n	8007ad2 <__ieee754_pow+0x32>
 8007b02:	4598      	cmp	r8, r3
 8007b04:	dc01      	bgt.n	8007b0a <__ieee754_pow+0x6a>
 8007b06:	d10f      	bne.n	8007b28 <__ieee754_pow+0x88>
 8007b08:	b172      	cbz	r2, 8007b28 <__ieee754_pow+0x88>
 8007b0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007b0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007b12:	ea55 050a 	orrs.w	r5, r5, sl
 8007b16:	d1dc      	bne.n	8007ad2 <__ieee754_pow+0x32>
 8007b18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b1c:	18db      	adds	r3, r3, r3
 8007b1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007b22:	4152      	adcs	r2, r2
 8007b24:	429d      	cmp	r5, r3
 8007b26:	e7d0      	b.n	8007aca <__ieee754_pow+0x2a>
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	da3b      	bge.n	8007ba4 <__ieee754_pow+0x104>
 8007b2c:	4b72      	ldr	r3, [pc, #456]	; (8007cf8 <__ieee754_pow+0x258>)
 8007b2e:	4598      	cmp	r8, r3
 8007b30:	dc51      	bgt.n	8007bd6 <__ieee754_pow+0x136>
 8007b32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b36:	4598      	cmp	r8, r3
 8007b38:	f340 84ac 	ble.w	8008494 <__ieee754_pow+0x9f4>
 8007b3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b44:	2b14      	cmp	r3, #20
 8007b46:	dd0f      	ble.n	8007b68 <__ieee754_pow+0xc8>
 8007b48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007b4c:	fa22 f103 	lsr.w	r1, r2, r3
 8007b50:	fa01 f303 	lsl.w	r3, r1, r3
 8007b54:	4293      	cmp	r3, r2
 8007b56:	f040 849d 	bne.w	8008494 <__ieee754_pow+0x9f4>
 8007b5a:	f001 0101 	and.w	r1, r1, #1
 8007b5e:	f1c1 0302 	rsb	r3, r1, #2
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	b182      	cbz	r2, 8007b88 <__ieee754_pow+0xe8>
 8007b66:	e05f      	b.n	8007c28 <__ieee754_pow+0x188>
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	d15b      	bne.n	8007c24 <__ieee754_pow+0x184>
 8007b6c:	f1c3 0314 	rsb	r3, r3, #20
 8007b70:	fa48 f103 	asr.w	r1, r8, r3
 8007b74:	fa01 f303 	lsl.w	r3, r1, r3
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	f040 8488 	bne.w	800848e <__ieee754_pow+0x9ee>
 8007b7e:	f001 0101 	and.w	r1, r1, #1
 8007b82:	f1c1 0302 	rsb	r3, r1, #2
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	4b5c      	ldr	r3, [pc, #368]	; (8007cfc <__ieee754_pow+0x25c>)
 8007b8a:	4598      	cmp	r8, r3
 8007b8c:	d132      	bne.n	8007bf4 <__ieee754_pow+0x154>
 8007b8e:	f1b9 0f00 	cmp.w	r9, #0
 8007b92:	f280 8478 	bge.w	8008486 <__ieee754_pow+0x9e6>
 8007b96:	4959      	ldr	r1, [pc, #356]	; (8007cfc <__ieee754_pow+0x25c>)
 8007b98:	4632      	mov	r2, r6
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7f8 fdf9 	bl	8000794 <__aeabi_ddiv>
 8007ba2:	e79c      	b.n	8007ade <__ieee754_pow+0x3e>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d13d      	bne.n	8007c28 <__ieee754_pow+0x188>
 8007bac:	4b51      	ldr	r3, [pc, #324]	; (8007cf4 <__ieee754_pow+0x254>)
 8007bae:	4598      	cmp	r8, r3
 8007bb0:	d1ea      	bne.n	8007b88 <__ieee754_pow+0xe8>
 8007bb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007bb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007bba:	ea53 030a 	orrs.w	r3, r3, sl
 8007bbe:	f000 845a 	beq.w	8008476 <__ieee754_pow+0x9d6>
 8007bc2:	4b4f      	ldr	r3, [pc, #316]	; (8007d00 <__ieee754_pow+0x260>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	dd08      	ble.n	8007bda <__ieee754_pow+0x13a>
 8007bc8:	f1b9 0f00 	cmp.w	r9, #0
 8007bcc:	f2c0 8457 	blt.w	800847e <__ieee754_pow+0x9de>
 8007bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd4:	e783      	b.n	8007ade <__ieee754_pow+0x3e>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e7e5      	b.n	8007ba6 <__ieee754_pow+0x106>
 8007bda:	f1b9 0f00 	cmp.w	r9, #0
 8007bde:	f04f 0000 	mov.w	r0, #0
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	f6bf af7a 	bge.w	8007ade <__ieee754_pow+0x3e>
 8007bea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007bee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bf2:	e774      	b.n	8007ade <__ieee754_pow+0x3e>
 8007bf4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007bf8:	d106      	bne.n	8007c08 <__ieee754_pow+0x168>
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	4639      	mov	r1, r7
 8007c02:	f7f8 fc9d 	bl	8000540 <__aeabi_dmul>
 8007c06:	e76a      	b.n	8007ade <__ieee754_pow+0x3e>
 8007c08:	4b3e      	ldr	r3, [pc, #248]	; (8007d04 <__ieee754_pow+0x264>)
 8007c0a:	4599      	cmp	r9, r3
 8007c0c:	d10c      	bne.n	8007c28 <__ieee754_pow+0x188>
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	db0a      	blt.n	8007c28 <__ieee754_pow+0x188>
 8007c12:	ec47 6b10 	vmov	d0, r6, r7
 8007c16:	b009      	add	sp, #36	; 0x24
 8007c18:	ecbd 8b06 	vpop	{d8-d10}
 8007c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	f000 bc6c 	b.w	80084fc <__ieee754_sqrt>
 8007c24:	2300      	movs	r3, #0
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	ec47 6b10 	vmov	d0, r6, r7
 8007c2c:	f7ff fe90 	bl	8007950 <fabs>
 8007c30:	ec51 0b10 	vmov	r0, r1, d0
 8007c34:	f1ba 0f00 	cmp.w	sl, #0
 8007c38:	d129      	bne.n	8007c8e <__ieee754_pow+0x1ee>
 8007c3a:	b124      	cbz	r4, 8007c46 <__ieee754_pow+0x1a6>
 8007c3c:	4b2f      	ldr	r3, [pc, #188]	; (8007cfc <__ieee754_pow+0x25c>)
 8007c3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d123      	bne.n	8007c8e <__ieee754_pow+0x1ee>
 8007c46:	f1b9 0f00 	cmp.w	r9, #0
 8007c4a:	da05      	bge.n	8007c58 <__ieee754_pow+0x1b8>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	2000      	movs	r0, #0
 8007c52:	492a      	ldr	r1, [pc, #168]	; (8007cfc <__ieee754_pow+0x25c>)
 8007c54:	f7f8 fd9e 	bl	8000794 <__aeabi_ddiv>
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	f6bf af40 	bge.w	8007ade <__ieee754_pow+0x3e>
 8007c5e:	9b04      	ldr	r3, [sp, #16]
 8007c60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c68:	4323      	orrs	r3, r4
 8007c6a:	d108      	bne.n	8007c7e <__ieee754_pow+0x1de>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4610      	mov	r0, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	f7f8 faac 	bl	80001d0 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	e78f      	b.n	8007b9e <__ieee754_pow+0xfe>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	f47f af2c 	bne.w	8007ade <__ieee754_pow+0x3e>
 8007c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	e727      	b.n	8007ade <__ieee754_pow+0x3e>
 8007c8e:	0feb      	lsrs	r3, r5, #31
 8007c90:	3b01      	subs	r3, #1
 8007c92:	9306      	str	r3, [sp, #24]
 8007c94:	9a06      	ldr	r2, [sp, #24]
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	d102      	bne.n	8007ca2 <__ieee754_pow+0x202>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	e7e6      	b.n	8007c70 <__ieee754_pow+0x1d0>
 8007ca2:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <__ieee754_pow+0x268>)
 8007ca4:	4598      	cmp	r8, r3
 8007ca6:	f340 80fb 	ble.w	8007ea0 <__ieee754_pow+0x400>
 8007caa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007cae:	4598      	cmp	r8, r3
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <__ieee754_pow+0x260>)
 8007cb2:	dd0c      	ble.n	8007cce <__ieee754_pow+0x22e>
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	dc0f      	bgt.n	8007cd8 <__ieee754_pow+0x238>
 8007cb8:	f1b9 0f00 	cmp.w	r9, #0
 8007cbc:	da0f      	bge.n	8007cde <__ieee754_pow+0x23e>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	b009      	add	sp, #36	; 0x24
 8007cc2:	ecbd 8b06 	vpop	{d8-d10}
 8007cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	f000 bcf0 	b.w	80086ae <__math_oflow>
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	dbf2      	blt.n	8007cb8 <__ieee754_pow+0x218>
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <__ieee754_pow+0x25c>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	dd19      	ble.n	8007d0c <__ieee754_pow+0x26c>
 8007cd8:	f1b9 0f00 	cmp.w	r9, #0
 8007cdc:	dcef      	bgt.n	8007cbe <__ieee754_pow+0x21e>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	b009      	add	sp, #36	; 0x24
 8007ce2:	ecbd 8b06 	vpop	{d8-d10}
 8007ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	f000 bcd7 	b.w	800869c <__math_uflow>
 8007cee:	bf00      	nop
 8007cf0:	fff00000 	.word	0xfff00000
 8007cf4:	7ff00000 	.word	0x7ff00000
 8007cf8:	433fffff 	.word	0x433fffff
 8007cfc:	3ff00000 	.word	0x3ff00000
 8007d00:	3fefffff 	.word	0x3fefffff
 8007d04:	3fe00000 	.word	0x3fe00000
 8007d08:	41e00000 	.word	0x41e00000
 8007d0c:	4b60      	ldr	r3, [pc, #384]	; (8007e90 <__ieee754_pow+0x3f0>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f7f8 fa5e 	bl	80001d0 <__aeabi_dsub>
 8007d14:	a354      	add	r3, pc, #336	; (adr r3, 8007e68 <__ieee754_pow+0x3c8>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	f7f8 fc0f 	bl	8000540 <__aeabi_dmul>
 8007d22:	a353      	add	r3, pc, #332	; (adr r3, 8007e70 <__ieee754_pow+0x3d0>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7f8 fc06 	bl	8000540 <__aeabi_dmul>
 8007d34:	4b57      	ldr	r3, [pc, #348]	; (8007e94 <__ieee754_pow+0x3f4>)
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fbfe 	bl	8000540 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	a14b      	add	r1, pc, #300	; (adr r1, 8007e78 <__ieee754_pow+0x3d8>)
 8007d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4e:	f7f8 fa3f 	bl	80001d0 <__aeabi_dsub>
 8007d52:	4622      	mov	r2, r4
 8007d54:	462b      	mov	r3, r5
 8007d56:	f7f8 fbf3 	bl	8000540 <__aeabi_dmul>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	2000      	movs	r0, #0
 8007d60:	494d      	ldr	r1, [pc, #308]	; (8007e98 <__ieee754_pow+0x3f8>)
 8007d62:	f7f8 fa35 	bl	80001d0 <__aeabi_dsub>
 8007d66:	4622      	mov	r2, r4
 8007d68:	4680      	mov	r8, r0
 8007d6a:	4689      	mov	r9, r1
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fbe5 	bl	8000540 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	f7f8 fbdf 	bl	8000540 <__aeabi_dmul>
 8007d82:	a33f      	add	r3, pc, #252	; (adr r3, 8007e80 <__ieee754_pow+0x3e0>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fbda 	bl	8000540 <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4650      	mov	r0, sl
 8007d92:	4659      	mov	r1, fp
 8007d94:	f7f8 fa1c 	bl	80001d0 <__aeabi_dsub>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4689      	mov	r9, r1
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 fa16 	bl	80001d4 <__adddf3>
 8007da8:	2000      	movs	r0, #0
 8007daa:	4632      	mov	r2, r6
 8007dac:	463b      	mov	r3, r7
 8007dae:	4604      	mov	r4, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	f7f8 fa0d 	bl	80001d0 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fa07 	bl	80001d0 <__aeabi_dsub>
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	9a06      	ldr	r2, [sp, #24]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	4682      	mov	sl, r0
 8007dcc:	468b      	mov	fp, r1
 8007dce:	f040 81e7 	bne.w	80081a0 <__ieee754_pow+0x700>
 8007dd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007e88 <__ieee754_pow+0x3e8>
 8007dd6:	eeb0 8a47 	vmov.f32	s16, s14
 8007dda:	eef0 8a67 	vmov.f32	s17, s15
 8007dde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007de2:	2600      	movs	r6, #0
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dec:	f7f8 f9f0 	bl	80001d0 <__aeabi_dsub>
 8007df0:	4622      	mov	r2, r4
 8007df2:	462b      	mov	r3, r5
 8007df4:	f7f8 fba4 	bl	8000540 <__aeabi_dmul>
 8007df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4689      	mov	r9, r1
 8007e00:	4650      	mov	r0, sl
 8007e02:	4659      	mov	r1, fp
 8007e04:	f7f8 fb9c 	bl	8000540 <__aeabi_dmul>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4649      	mov	r1, r9
 8007e10:	f7f8 f9e0 	bl	80001d4 <__adddf3>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4629      	mov	r1, r5
 8007e20:	f7f8 fb8e 	bl	8000540 <__aeabi_dmul>
 8007e24:	460b      	mov	r3, r1
 8007e26:	4604      	mov	r4, r0
 8007e28:	460d      	mov	r5, r1
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4640      	mov	r0, r8
 8007e30:	f7f8 f9d0 	bl	80001d4 <__adddf3>
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <__ieee754_pow+0x3fc>)
 8007e36:	4299      	cmp	r1, r3
 8007e38:	ec45 4b19 	vmov	d9, r4, r5
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	460f      	mov	r7, r1
 8007e40:	468b      	mov	fp, r1
 8007e42:	f340 82f1 	ble.w	8008428 <__ieee754_pow+0x988>
 8007e46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	f000 81e4 	beq.w	800821c <__ieee754_pow+0x77c>
 8007e54:	ec51 0b18 	vmov	r0, r1, d8
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f7f8 fde2 	bl	8000a24 <__aeabi_dcmplt>
 8007e60:	3800      	subs	r0, #0
 8007e62:	bf18      	it	ne
 8007e64:	2001      	movne	r0, #1
 8007e66:	e72b      	b.n	8007cc0 <__ieee754_pow+0x220>
 8007e68:	60000000 	.word	0x60000000
 8007e6c:	3ff71547 	.word	0x3ff71547
 8007e70:	f85ddf44 	.word	0xf85ddf44
 8007e74:	3e54ae0b 	.word	0x3e54ae0b
 8007e78:	55555555 	.word	0x55555555
 8007e7c:	3fd55555 	.word	0x3fd55555
 8007e80:	652b82fe 	.word	0x652b82fe
 8007e84:	3ff71547 	.word	0x3ff71547
 8007e88:	00000000 	.word	0x00000000
 8007e8c:	bff00000 	.word	0xbff00000
 8007e90:	3ff00000 	.word	0x3ff00000
 8007e94:	3fd00000 	.word	0x3fd00000
 8007e98:	3fe00000 	.word	0x3fe00000
 8007e9c:	408fffff 	.word	0x408fffff
 8007ea0:	4bd5      	ldr	r3, [pc, #852]	; (80081f8 <__ieee754_pow+0x758>)
 8007ea2:	402b      	ands	r3, r5
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	b92b      	cbnz	r3, 8007eb4 <__ieee754_pow+0x414>
 8007ea8:	4bd4      	ldr	r3, [pc, #848]	; (80081fc <__ieee754_pow+0x75c>)
 8007eaa:	f7f8 fb49 	bl	8000540 <__aeabi_dmul>
 8007eae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	1523      	asrs	r3, r4, #20
 8007eb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007eba:	4413      	add	r3, r2
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	4bd0      	ldr	r3, [pc, #832]	; (8008200 <__ieee754_pow+0x760>)
 8007ec0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ec4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ece:	dd08      	ble.n	8007ee2 <__ieee754_pow+0x442>
 8007ed0:	4bcc      	ldr	r3, [pc, #816]	; (8008204 <__ieee754_pow+0x764>)
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	f340 8162 	ble.w	800819c <__ieee754_pow+0x6fc>
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	3301      	adds	r3, #1
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007ee2:	2400      	movs	r4, #0
 8007ee4:	00e3      	lsls	r3, r4, #3
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	4bc7      	ldr	r3, [pc, #796]	; (8008208 <__ieee754_pow+0x768>)
 8007eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eee:	ed93 7b00 	vldr	d7, [r3]
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	ec53 2b17 	vmov	r2, r3, d7
 8007ef8:	eeb0 9a47 	vmov.f32	s18, s14
 8007efc:	eef0 9a67 	vmov.f32	s19, s15
 8007f00:	4682      	mov	sl, r0
 8007f02:	f7f8 f965 	bl	80001d0 <__aeabi_dsub>
 8007f06:	4652      	mov	r2, sl
 8007f08:	4606      	mov	r6, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	ec51 0b19 	vmov	r0, r1, d9
 8007f12:	f7f8 f95f 	bl	80001d4 <__adddf3>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	49bb      	ldr	r1, [pc, #748]	; (800820c <__ieee754_pow+0x76c>)
 8007f1e:	f7f8 fc39 	bl	8000794 <__aeabi_ddiv>
 8007f22:	ec41 0b1a 	vmov	d10, r0, r1
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 fb07 	bl	8000540 <__aeabi_dmul>
 8007f32:	2300      	movs	r3, #0
 8007f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f38:	9302      	str	r3, [sp, #8]
 8007f3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f3e:	46ab      	mov	fp, r5
 8007f40:	106d      	asrs	r5, r5, #1
 8007f42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f4a:	ec41 0b18 	vmov	d8, r0, r1
 8007f4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007f52:	2200      	movs	r2, #0
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	4614      	mov	r4, r2
 8007f5a:	461d      	mov	r5, r3
 8007f5c:	f7f8 faf0 	bl	8000540 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 f932 	bl	80001d0 <__aeabi_dsub>
 8007f6c:	ec53 2b19 	vmov	r2, r3, d9
 8007f70:	4606      	mov	r6, r0
 8007f72:	460f      	mov	r7, r1
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 f92a 	bl	80001d0 <__aeabi_dsub>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4650      	mov	r0, sl
 8007f82:	4659      	mov	r1, fp
 8007f84:	f7f8 f924 	bl	80001d0 <__aeabi_dsub>
 8007f88:	4642      	mov	r2, r8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	f7f8 fad8 	bl	8000540 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f91a 	bl	80001d0 <__aeabi_dsub>
 8007f9c:	ec53 2b1a 	vmov	r2, r3, d10
 8007fa0:	f7f8 face 	bl	8000540 <__aeabi_dmul>
 8007fa4:	ec53 2b18 	vmov	r2, r3, d8
 8007fa8:	ec41 0b19 	vmov	d9, r0, r1
 8007fac:	ec51 0b18 	vmov	r0, r1, d8
 8007fb0:	f7f8 fac6 	bl	8000540 <__aeabi_dmul>
 8007fb4:	a37c      	add	r3, pc, #496	; (adr r3, 80081a8 <__ieee754_pow+0x708>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	4604      	mov	r4, r0
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	f7f8 fabf 	bl	8000540 <__aeabi_dmul>
 8007fc2:	a37b      	add	r3, pc, #492	; (adr r3, 80081b0 <__ieee754_pow+0x710>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 f904 	bl	80001d4 <__adddf3>
 8007fcc:	4622      	mov	r2, r4
 8007fce:	462b      	mov	r3, r5
 8007fd0:	f7f8 fab6 	bl	8000540 <__aeabi_dmul>
 8007fd4:	a378      	add	r3, pc, #480	; (adr r3, 80081b8 <__ieee754_pow+0x718>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 f8fb 	bl	80001d4 <__adddf3>
 8007fde:	4622      	mov	r2, r4
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	f7f8 faad 	bl	8000540 <__aeabi_dmul>
 8007fe6:	a376      	add	r3, pc, #472	; (adr r3, 80081c0 <__ieee754_pow+0x720>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 f8f2 	bl	80001d4 <__adddf3>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	f7f8 faa4 	bl	8000540 <__aeabi_dmul>
 8007ff8:	a373      	add	r3, pc, #460	; (adr r3, 80081c8 <__ieee754_pow+0x728>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 f8e9 	bl	80001d4 <__adddf3>
 8008002:	4622      	mov	r2, r4
 8008004:	462b      	mov	r3, r5
 8008006:	f7f8 fa9b 	bl	8000540 <__aeabi_dmul>
 800800a:	a371      	add	r3, pc, #452	; (adr r3, 80081d0 <__ieee754_pow+0x730>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f8e0 	bl	80001d4 <__adddf3>
 8008014:	4622      	mov	r2, r4
 8008016:	4606      	mov	r6, r0
 8008018:	460f      	mov	r7, r1
 800801a:	462b      	mov	r3, r5
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 fa8e 	bl	8000540 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 fa88 	bl	8000540 <__aeabi_dmul>
 8008030:	4642      	mov	r2, r8
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	464b      	mov	r3, r9
 8008038:	ec51 0b18 	vmov	r0, r1, d8
 800803c:	f7f8 f8ca 	bl	80001d4 <__adddf3>
 8008040:	ec53 2b19 	vmov	r2, r3, d9
 8008044:	f7f8 fa7c 	bl	8000540 <__aeabi_dmul>
 8008048:	4622      	mov	r2, r4
 800804a:	462b      	mov	r3, r5
 800804c:	f7f8 f8c2 	bl	80001d4 <__adddf3>
 8008050:	4642      	mov	r2, r8
 8008052:	4682      	mov	sl, r0
 8008054:	468b      	mov	fp, r1
 8008056:	464b      	mov	r3, r9
 8008058:	4640      	mov	r0, r8
 800805a:	4649      	mov	r1, r9
 800805c:	f7f8 fa70 	bl	8000540 <__aeabi_dmul>
 8008060:	4b6b      	ldr	r3, [pc, #428]	; (8008210 <__ieee754_pow+0x770>)
 8008062:	2200      	movs	r2, #0
 8008064:	4606      	mov	r6, r0
 8008066:	460f      	mov	r7, r1
 8008068:	f7f8 f8b4 	bl	80001d4 <__adddf3>
 800806c:	4652      	mov	r2, sl
 800806e:	465b      	mov	r3, fp
 8008070:	f7f8 f8b0 	bl	80001d4 <__adddf3>
 8008074:	2000      	movs	r0, #0
 8008076:	4604      	mov	r4, r0
 8008078:	460d      	mov	r5, r1
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 fa5d 	bl	8000540 <__aeabi_dmul>
 8008086:	4b62      	ldr	r3, [pc, #392]	; (8008210 <__ieee754_pow+0x770>)
 8008088:	4680      	mov	r8, r0
 800808a:	4689      	mov	r9, r1
 800808c:	2200      	movs	r2, #0
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	f7f8 f89d 	bl	80001d0 <__aeabi_dsub>
 8008096:	4632      	mov	r2, r6
 8008098:	463b      	mov	r3, r7
 800809a:	f7f8 f899 	bl	80001d0 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 f893 	bl	80001d0 <__aeabi_dsub>
 80080aa:	ec53 2b18 	vmov	r2, r3, d8
 80080ae:	f7f8 fa47 	bl	8000540 <__aeabi_dmul>
 80080b2:	4622      	mov	r2, r4
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	462b      	mov	r3, r5
 80080ba:	ec51 0b19 	vmov	r0, r1, d9
 80080be:	f7f8 fa3f 	bl	8000540 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	f7f8 f883 	bl	80001d4 <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	460f      	mov	r7, r1
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4640      	mov	r0, r8
 80080d8:	4649      	mov	r1, r9
 80080da:	f7f8 f87b 	bl	80001d4 <__adddf3>
 80080de:	a33e      	add	r3, pc, #248	; (adr r3, 80081d8 <__ieee754_pow+0x738>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	2000      	movs	r0, #0
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	f7f8 fa29 	bl	8000540 <__aeabi_dmul>
 80080ee:	4642      	mov	r2, r8
 80080f0:	ec41 0b18 	vmov	d8, r0, r1
 80080f4:	464b      	mov	r3, r9
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 f869 	bl	80001d0 <__aeabi_dsub>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 f863 	bl	80001d0 <__aeabi_dsub>
 800810a:	a335      	add	r3, pc, #212	; (adr r3, 80081e0 <__ieee754_pow+0x740>)
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f7f8 fa16 	bl	8000540 <__aeabi_dmul>
 8008114:	a334      	add	r3, pc, #208	; (adr r3, 80081e8 <__ieee754_pow+0x748>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fa0d 	bl	8000540 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4630      	mov	r0, r6
 800812c:	4639      	mov	r1, r7
 800812e:	f7f8 f851 	bl	80001d4 <__adddf3>
 8008132:	9a07      	ldr	r2, [sp, #28]
 8008134:	4b37      	ldr	r3, [pc, #220]	; (8008214 <__ieee754_pow+0x774>)
 8008136:	4413      	add	r3, r2
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f84a 	bl	80001d4 <__adddf3>
 8008140:	4682      	mov	sl, r0
 8008142:	9805      	ldr	r0, [sp, #20]
 8008144:	468b      	mov	fp, r1
 8008146:	f7f8 f991 	bl	800046c <__aeabi_i2d>
 800814a:	9a07      	ldr	r2, [sp, #28]
 800814c:	4b32      	ldr	r3, [pc, #200]	; (8008218 <__ieee754_pow+0x778>)
 800814e:	4413      	add	r3, r2
 8008150:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008154:	4606      	mov	r6, r0
 8008156:	460f      	mov	r7, r1
 8008158:	4652      	mov	r2, sl
 800815a:	465b      	mov	r3, fp
 800815c:	ec51 0b18 	vmov	r0, r1, d8
 8008160:	f7f8 f838 	bl	80001d4 <__adddf3>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	f7f8 f834 	bl	80001d4 <__adddf3>
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	f7f8 f830 	bl	80001d4 <__adddf3>
 8008174:	2000      	movs	r0, #0
 8008176:	4632      	mov	r2, r6
 8008178:	463b      	mov	r3, r7
 800817a:	4604      	mov	r4, r0
 800817c:	460d      	mov	r5, r1
 800817e:	f7f8 f827 	bl	80001d0 <__aeabi_dsub>
 8008182:	4642      	mov	r2, r8
 8008184:	464b      	mov	r3, r9
 8008186:	f7f8 f823 	bl	80001d0 <__aeabi_dsub>
 800818a:	ec53 2b18 	vmov	r2, r3, d8
 800818e:	f7f8 f81f 	bl	80001d0 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4650      	mov	r0, sl
 8008198:	4659      	mov	r1, fp
 800819a:	e610      	b.n	8007dbe <__ieee754_pow+0x31e>
 800819c:	2401      	movs	r4, #1
 800819e:	e6a1      	b.n	8007ee4 <__ieee754_pow+0x444>
 80081a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80081f0 <__ieee754_pow+0x750>
 80081a4:	e617      	b.n	8007dd6 <__ieee754_pow+0x336>
 80081a6:	bf00      	nop
 80081a8:	4a454eef 	.word	0x4a454eef
 80081ac:	3fca7e28 	.word	0x3fca7e28
 80081b0:	93c9db65 	.word	0x93c9db65
 80081b4:	3fcd864a 	.word	0x3fcd864a
 80081b8:	a91d4101 	.word	0xa91d4101
 80081bc:	3fd17460 	.word	0x3fd17460
 80081c0:	518f264d 	.word	0x518f264d
 80081c4:	3fd55555 	.word	0x3fd55555
 80081c8:	db6fabff 	.word	0xdb6fabff
 80081cc:	3fdb6db6 	.word	0x3fdb6db6
 80081d0:	33333303 	.word	0x33333303
 80081d4:	3fe33333 	.word	0x3fe33333
 80081d8:	e0000000 	.word	0xe0000000
 80081dc:	3feec709 	.word	0x3feec709
 80081e0:	dc3a03fd 	.word	0xdc3a03fd
 80081e4:	3feec709 	.word	0x3feec709
 80081e8:	145b01f5 	.word	0x145b01f5
 80081ec:	be3e2fe0 	.word	0xbe3e2fe0
 80081f0:	00000000 	.word	0x00000000
 80081f4:	3ff00000 	.word	0x3ff00000
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	43400000 	.word	0x43400000
 8008200:	0003988e 	.word	0x0003988e
 8008204:	000bb679 	.word	0x000bb679
 8008208:	08009550 	.word	0x08009550
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	40080000 	.word	0x40080000
 8008214:	08009570 	.word	0x08009570
 8008218:	08009560 	.word	0x08009560
 800821c:	a3b5      	add	r3, pc, #724	; (adr r3, 80084f4 <__ieee754_pow+0xa54>)
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f7 ffd5 	bl	80001d4 <__adddf3>
 800822a:	4622      	mov	r2, r4
 800822c:	ec41 0b1a 	vmov	d10, r0, r1
 8008230:	462b      	mov	r3, r5
 8008232:	4630      	mov	r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	f7f7 ffcb 	bl	80001d0 <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	ec51 0b1a 	vmov	r0, r1, d10
 8008242:	f7f8 fc0d 	bl	8000a60 <__aeabi_dcmpgt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f47f ae04 	bne.w	8007e54 <__ieee754_pow+0x3b4>
 800824c:	4aa4      	ldr	r2, [pc, #656]	; (80084e0 <__ieee754_pow+0xa40>)
 800824e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008252:	4293      	cmp	r3, r2
 8008254:	f340 8108 	ble.w	8008468 <__ieee754_pow+0x9c8>
 8008258:	151b      	asrs	r3, r3, #20
 800825a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800825e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008262:	fa4a f303 	asr.w	r3, sl, r3
 8008266:	445b      	add	r3, fp
 8008268:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800826c:	4e9d      	ldr	r6, [pc, #628]	; (80084e4 <__ieee754_pow+0xa44>)
 800826e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008272:	4116      	asrs	r6, r2
 8008274:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008278:	2000      	movs	r0, #0
 800827a:	ea23 0106 	bic.w	r1, r3, r6
 800827e:	f1c2 0214 	rsb	r2, r2, #20
 8008282:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008286:	fa4a fa02 	asr.w	sl, sl, r2
 800828a:	f1bb 0f00 	cmp.w	fp, #0
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	bfb8      	it	lt
 8008298:	f1ca 0a00 	rsblt	sl, sl, #0
 800829c:	f7f7 ff98 	bl	80001d0 <__aeabi_dsub>
 80082a0:	ec41 0b19 	vmov	d9, r0, r1
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	ec51 0b19 	vmov	r0, r1, d9
 80082ac:	f7f7 ff92 	bl	80001d4 <__adddf3>
 80082b0:	a37b      	add	r3, pc, #492	; (adr r3, 80084a0 <__ieee754_pow+0xa00>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	2000      	movs	r0, #0
 80082b8:	4604      	mov	r4, r0
 80082ba:	460d      	mov	r5, r1
 80082bc:	f7f8 f940 	bl	8000540 <__aeabi_dmul>
 80082c0:	ec53 2b19 	vmov	r2, r3, d9
 80082c4:	4606      	mov	r6, r0
 80082c6:	460f      	mov	r7, r1
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7f7 ff80 	bl	80001d0 <__aeabi_dsub>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4640      	mov	r0, r8
 80082d6:	4649      	mov	r1, r9
 80082d8:	f7f7 ff7a 	bl	80001d0 <__aeabi_dsub>
 80082dc:	a372      	add	r3, pc, #456	; (adr r3, 80084a8 <__ieee754_pow+0xa08>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f8 f92d 	bl	8000540 <__aeabi_dmul>
 80082e6:	a372      	add	r3, pc, #456	; (adr r3, 80084b0 <__ieee754_pow+0xa10>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7f8 f924 	bl	8000540 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	f7f7 ff68 	bl	80001d4 <__adddf3>
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f7 ff60 	bl	80001d4 <__adddf3>
 8008314:	4632      	mov	r2, r6
 8008316:	463b      	mov	r3, r7
 8008318:	4680      	mov	r8, r0
 800831a:	4689      	mov	r9, r1
 800831c:	f7f7 ff58 	bl	80001d0 <__aeabi_dsub>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f7 ff52 	bl	80001d0 <__aeabi_dsub>
 800832c:	4642      	mov	r2, r8
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	464b      	mov	r3, r9
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f8 f902 	bl	8000540 <__aeabi_dmul>
 800833c:	a35e      	add	r3, pc, #376	; (adr r3, 80084b8 <__ieee754_pow+0xa18>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	4604      	mov	r4, r0
 8008344:	460d      	mov	r5, r1
 8008346:	f7f8 f8fb 	bl	8000540 <__aeabi_dmul>
 800834a:	a35d      	add	r3, pc, #372	; (adr r3, 80084c0 <__ieee754_pow+0xa20>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ff3e 	bl	80001d0 <__aeabi_dsub>
 8008354:	4622      	mov	r2, r4
 8008356:	462b      	mov	r3, r5
 8008358:	f7f8 f8f2 	bl	8000540 <__aeabi_dmul>
 800835c:	a35a      	add	r3, pc, #360	; (adr r3, 80084c8 <__ieee754_pow+0xa28>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f7 ff37 	bl	80001d4 <__adddf3>
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	f7f8 f8e9 	bl	8000540 <__aeabi_dmul>
 800836e:	a358      	add	r3, pc, #352	; (adr r3, 80084d0 <__ieee754_pow+0xa30>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f7 ff2c 	bl	80001d0 <__aeabi_dsub>
 8008378:	4622      	mov	r2, r4
 800837a:	462b      	mov	r3, r5
 800837c:	f7f8 f8e0 	bl	8000540 <__aeabi_dmul>
 8008380:	a355      	add	r3, pc, #340	; (adr r3, 80084d8 <__ieee754_pow+0xa38>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f7 ff25 	bl	80001d4 <__adddf3>
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	f7f8 f8d7 	bl	8000540 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f7 ff19 	bl	80001d0 <__aeabi_dsub>
 800839e:	4604      	mov	r4, r0
 80083a0:	460d      	mov	r5, r1
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f8 f8c9 	bl	8000540 <__aeabi_dmul>
 80083ae:	2200      	movs	r2, #0
 80083b0:	ec41 0b19 	vmov	d9, r0, r1
 80083b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f7 ff08 	bl	80001d0 <__aeabi_dsub>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	ec51 0b19 	vmov	r0, r1, d9
 80083c8:	f7f8 f9e4 	bl	8000794 <__aeabi_ddiv>
 80083cc:	4632      	mov	r2, r6
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	463b      	mov	r3, r7
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f8 f8b2 	bl	8000540 <__aeabi_dmul>
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	f7f7 fef8 	bl	80001d4 <__adddf3>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4620      	mov	r0, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	f7f7 fef0 	bl	80001d0 <__aeabi_dsub>
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	f7f7 feec 	bl	80001d0 <__aeabi_dsub>
 80083f8:	460b      	mov	r3, r1
 80083fa:	4602      	mov	r2, r0
 80083fc:	493a      	ldr	r1, [pc, #232]	; (80084e8 <__ieee754_pow+0xa48>)
 80083fe:	2000      	movs	r0, #0
 8008400:	f7f7 fee6 	bl	80001d0 <__aeabi_dsub>
 8008404:	ec41 0b10 	vmov	d0, r0, r1
 8008408:	ee10 3a90 	vmov	r3, s1
 800840c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008414:	da2b      	bge.n	800846e <__ieee754_pow+0x9ce>
 8008416:	4650      	mov	r0, sl
 8008418:	f000 f95e 	bl	80086d8 <scalbn>
 800841c:	ec51 0b10 	vmov	r0, r1, d0
 8008420:	ec53 2b18 	vmov	r2, r3, d8
 8008424:	f7ff bbed 	b.w	8007c02 <__ieee754_pow+0x162>
 8008428:	4b30      	ldr	r3, [pc, #192]	; (80084ec <__ieee754_pow+0xa4c>)
 800842a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800842e:	429e      	cmp	r6, r3
 8008430:	f77f af0c 	ble.w	800824c <__ieee754_pow+0x7ac>
 8008434:	4b2e      	ldr	r3, [pc, #184]	; (80084f0 <__ieee754_pow+0xa50>)
 8008436:	440b      	add	r3, r1
 8008438:	4303      	orrs	r3, r0
 800843a:	d009      	beq.n	8008450 <__ieee754_pow+0x9b0>
 800843c:	ec51 0b18 	vmov	r0, r1, d8
 8008440:	2200      	movs	r2, #0
 8008442:	2300      	movs	r3, #0
 8008444:	f7f8 faee 	bl	8000a24 <__aeabi_dcmplt>
 8008448:	3800      	subs	r0, #0
 800844a:	bf18      	it	ne
 800844c:	2001      	movne	r0, #1
 800844e:	e447      	b.n	8007ce0 <__ieee754_pow+0x240>
 8008450:	4622      	mov	r2, r4
 8008452:	462b      	mov	r3, r5
 8008454:	f7f7 febc 	bl	80001d0 <__aeabi_dsub>
 8008458:	4642      	mov	r2, r8
 800845a:	464b      	mov	r3, r9
 800845c:	f7f8 faf6 	bl	8000a4c <__aeabi_dcmpge>
 8008460:	2800      	cmp	r0, #0
 8008462:	f43f aef3 	beq.w	800824c <__ieee754_pow+0x7ac>
 8008466:	e7e9      	b.n	800843c <__ieee754_pow+0x99c>
 8008468:	f04f 0a00 	mov.w	sl, #0
 800846c:	e71a      	b.n	80082a4 <__ieee754_pow+0x804>
 800846e:	ec51 0b10 	vmov	r0, r1, d0
 8008472:	4619      	mov	r1, r3
 8008474:	e7d4      	b.n	8008420 <__ieee754_pow+0x980>
 8008476:	491c      	ldr	r1, [pc, #112]	; (80084e8 <__ieee754_pow+0xa48>)
 8008478:	2000      	movs	r0, #0
 800847a:	f7ff bb30 	b.w	8007ade <__ieee754_pow+0x3e>
 800847e:	2000      	movs	r0, #0
 8008480:	2100      	movs	r1, #0
 8008482:	f7ff bb2c 	b.w	8007ade <__ieee754_pow+0x3e>
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7ff bb28 	b.w	8007ade <__ieee754_pow+0x3e>
 800848e:	9204      	str	r2, [sp, #16]
 8008490:	f7ff bb7a 	b.w	8007b88 <__ieee754_pow+0xe8>
 8008494:	2300      	movs	r3, #0
 8008496:	f7ff bb64 	b.w	8007b62 <__ieee754_pow+0xc2>
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w
 80084a0:	00000000 	.word	0x00000000
 80084a4:	3fe62e43 	.word	0x3fe62e43
 80084a8:	fefa39ef 	.word	0xfefa39ef
 80084ac:	3fe62e42 	.word	0x3fe62e42
 80084b0:	0ca86c39 	.word	0x0ca86c39
 80084b4:	be205c61 	.word	0xbe205c61
 80084b8:	72bea4d0 	.word	0x72bea4d0
 80084bc:	3e663769 	.word	0x3e663769
 80084c0:	c5d26bf1 	.word	0xc5d26bf1
 80084c4:	3ebbbd41 	.word	0x3ebbbd41
 80084c8:	af25de2c 	.word	0xaf25de2c
 80084cc:	3f11566a 	.word	0x3f11566a
 80084d0:	16bebd93 	.word	0x16bebd93
 80084d4:	3f66c16c 	.word	0x3f66c16c
 80084d8:	5555553e 	.word	0x5555553e
 80084dc:	3fc55555 	.word	0x3fc55555
 80084e0:	3fe00000 	.word	0x3fe00000
 80084e4:	000fffff 	.word	0x000fffff
 80084e8:	3ff00000 	.word	0x3ff00000
 80084ec:	4090cbff 	.word	0x4090cbff
 80084f0:	3f6f3400 	.word	0x3f6f3400
 80084f4:	652b82fe 	.word	0x652b82fe
 80084f8:	3c971547 	.word	0x3c971547

080084fc <__ieee754_sqrt>:
 80084fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008500:	ec55 4b10 	vmov	r4, r5, d0
 8008504:	4e55      	ldr	r6, [pc, #340]	; (800865c <__ieee754_sqrt+0x160>)
 8008506:	43ae      	bics	r6, r5
 8008508:	ee10 0a10 	vmov	r0, s0
 800850c:	ee10 3a10 	vmov	r3, s0
 8008510:	462a      	mov	r2, r5
 8008512:	4629      	mov	r1, r5
 8008514:	d110      	bne.n	8008538 <__ieee754_sqrt+0x3c>
 8008516:	ee10 2a10 	vmov	r2, s0
 800851a:	462b      	mov	r3, r5
 800851c:	f7f8 f810 	bl	8000540 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f7 fe54 	bl	80001d4 <__adddf3>
 800852c:	4604      	mov	r4, r0
 800852e:	460d      	mov	r5, r1
 8008530:	ec45 4b10 	vmov	d0, r4, r5
 8008534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008538:	2d00      	cmp	r5, #0
 800853a:	dc10      	bgt.n	800855e <__ieee754_sqrt+0x62>
 800853c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008540:	4330      	orrs	r0, r6
 8008542:	d0f5      	beq.n	8008530 <__ieee754_sqrt+0x34>
 8008544:	b15d      	cbz	r5, 800855e <__ieee754_sqrt+0x62>
 8008546:	ee10 2a10 	vmov	r2, s0
 800854a:	462b      	mov	r3, r5
 800854c:	ee10 0a10 	vmov	r0, s0
 8008550:	f7f7 fe3e 	bl	80001d0 <__aeabi_dsub>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	f7f8 f91c 	bl	8000794 <__aeabi_ddiv>
 800855c:	e7e6      	b.n	800852c <__ieee754_sqrt+0x30>
 800855e:	1512      	asrs	r2, r2, #20
 8008560:	d074      	beq.n	800864c <__ieee754_sqrt+0x150>
 8008562:	07d4      	lsls	r4, r2, #31
 8008564:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008568:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800856c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008570:	bf5e      	ittt	pl
 8008572:	0fda      	lsrpl	r2, r3, #31
 8008574:	005b      	lslpl	r3, r3, #1
 8008576:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800857a:	2400      	movs	r4, #0
 800857c:	0fda      	lsrs	r2, r3, #31
 800857e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008582:	107f      	asrs	r7, r7, #1
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	2516      	movs	r5, #22
 8008588:	4620      	mov	r0, r4
 800858a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800858e:	1886      	adds	r6, r0, r2
 8008590:	428e      	cmp	r6, r1
 8008592:	bfde      	ittt	le
 8008594:	1b89      	suble	r1, r1, r6
 8008596:	18b0      	addle	r0, r6, r2
 8008598:	18a4      	addle	r4, r4, r2
 800859a:	0049      	lsls	r1, r1, #1
 800859c:	3d01      	subs	r5, #1
 800859e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80085a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80085a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085aa:	d1f0      	bne.n	800858e <__ieee754_sqrt+0x92>
 80085ac:	462a      	mov	r2, r5
 80085ae:	f04f 0e20 	mov.w	lr, #32
 80085b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085b6:	4281      	cmp	r1, r0
 80085b8:	eb06 0c05 	add.w	ip, r6, r5
 80085bc:	dc02      	bgt.n	80085c4 <__ieee754_sqrt+0xc8>
 80085be:	d113      	bne.n	80085e8 <__ieee754_sqrt+0xec>
 80085c0:	459c      	cmp	ip, r3
 80085c2:	d811      	bhi.n	80085e8 <__ieee754_sqrt+0xec>
 80085c4:	f1bc 0f00 	cmp.w	ip, #0
 80085c8:	eb0c 0506 	add.w	r5, ip, r6
 80085cc:	da43      	bge.n	8008656 <__ieee754_sqrt+0x15a>
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	db41      	blt.n	8008656 <__ieee754_sqrt+0x15a>
 80085d2:	f100 0801 	add.w	r8, r0, #1
 80085d6:	1a09      	subs	r1, r1, r0
 80085d8:	459c      	cmp	ip, r3
 80085da:	bf88      	it	hi
 80085dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80085e0:	eba3 030c 	sub.w	r3, r3, ip
 80085e4:	4432      	add	r2, r6
 80085e6:	4640      	mov	r0, r8
 80085e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80085ec:	f1be 0e01 	subs.w	lr, lr, #1
 80085f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80085f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085fc:	d1db      	bne.n	80085b6 <__ieee754_sqrt+0xba>
 80085fe:	430b      	orrs	r3, r1
 8008600:	d006      	beq.n	8008610 <__ieee754_sqrt+0x114>
 8008602:	1c50      	adds	r0, r2, #1
 8008604:	bf13      	iteet	ne
 8008606:	3201      	addne	r2, #1
 8008608:	3401      	addeq	r4, #1
 800860a:	4672      	moveq	r2, lr
 800860c:	f022 0201 	bicne.w	r2, r2, #1
 8008610:	1063      	asrs	r3, r4, #1
 8008612:	0852      	lsrs	r2, r2, #1
 8008614:	07e1      	lsls	r1, r4, #31
 8008616:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800861a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800861e:	bf48      	it	mi
 8008620:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008624:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008628:	4614      	mov	r4, r2
 800862a:	e781      	b.n	8008530 <__ieee754_sqrt+0x34>
 800862c:	0ad9      	lsrs	r1, r3, #11
 800862e:	3815      	subs	r0, #21
 8008630:	055b      	lsls	r3, r3, #21
 8008632:	2900      	cmp	r1, #0
 8008634:	d0fa      	beq.n	800862c <__ieee754_sqrt+0x130>
 8008636:	02cd      	lsls	r5, r1, #11
 8008638:	d50a      	bpl.n	8008650 <__ieee754_sqrt+0x154>
 800863a:	f1c2 0420 	rsb	r4, r2, #32
 800863e:	fa23 f404 	lsr.w	r4, r3, r4
 8008642:	1e55      	subs	r5, r2, #1
 8008644:	4093      	lsls	r3, r2
 8008646:	4321      	orrs	r1, r4
 8008648:	1b42      	subs	r2, r0, r5
 800864a:	e78a      	b.n	8008562 <__ieee754_sqrt+0x66>
 800864c:	4610      	mov	r0, r2
 800864e:	e7f0      	b.n	8008632 <__ieee754_sqrt+0x136>
 8008650:	0049      	lsls	r1, r1, #1
 8008652:	3201      	adds	r2, #1
 8008654:	e7ef      	b.n	8008636 <__ieee754_sqrt+0x13a>
 8008656:	4680      	mov	r8, r0
 8008658:	e7bd      	b.n	80085d6 <__ieee754_sqrt+0xda>
 800865a:	bf00      	nop
 800865c:	7ff00000 	.word	0x7ff00000

08008660 <with_errno>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	4604      	mov	r4, r0
 8008664:	460d      	mov	r5, r1
 8008666:	4616      	mov	r6, r2
 8008668:	f000 f8bc 	bl	80087e4 <__errno>
 800866c:	4629      	mov	r1, r5
 800866e:	6006      	str	r6, [r0, #0]
 8008670:	4620      	mov	r0, r4
 8008672:	bd70      	pop	{r4, r5, r6, pc}

08008674 <xflow>:
 8008674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008676:	4614      	mov	r4, r2
 8008678:	461d      	mov	r5, r3
 800867a:	b108      	cbz	r0, 8008680 <xflow+0xc>
 800867c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008680:	e9cd 2300 	strd	r2, r3, [sp]
 8008684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008688:	4620      	mov	r0, r4
 800868a:	4629      	mov	r1, r5
 800868c:	f7f7 ff58 	bl	8000540 <__aeabi_dmul>
 8008690:	2222      	movs	r2, #34	; 0x22
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008698:	f7ff bfe2 	b.w	8008660 <with_errno>

0800869c <__math_uflow>:
 800869c:	b508      	push	{r3, lr}
 800869e:	2200      	movs	r2, #0
 80086a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086a4:	f7ff ffe6 	bl	8008674 <xflow>
 80086a8:	ec41 0b10 	vmov	d0, r0, r1
 80086ac:	bd08      	pop	{r3, pc}

080086ae <__math_oflow>:
 80086ae:	b508      	push	{r3, lr}
 80086b0:	2200      	movs	r2, #0
 80086b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80086b6:	f7ff ffdd 	bl	8008674 <xflow>
 80086ba:	ec41 0b10 	vmov	d0, r0, r1
 80086be:	bd08      	pop	{r3, pc}

080086c0 <finite>:
 80086c0:	b082      	sub	sp, #8
 80086c2:	ed8d 0b00 	vstr	d0, [sp]
 80086c6:	9801      	ldr	r0, [sp, #4]
 80086c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80086cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80086d0:	0fc0      	lsrs	r0, r0, #31
 80086d2:	b002      	add	sp, #8
 80086d4:	4770      	bx	lr
	...

080086d8 <scalbn>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	ec55 4b10 	vmov	r4, r5, d0
 80086de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80086e2:	4606      	mov	r6, r0
 80086e4:	462b      	mov	r3, r5
 80086e6:	b99a      	cbnz	r2, 8008710 <scalbn+0x38>
 80086e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086ec:	4323      	orrs	r3, r4
 80086ee:	d036      	beq.n	800875e <scalbn+0x86>
 80086f0:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <scalbn+0x100>)
 80086f2:	4629      	mov	r1, r5
 80086f4:	ee10 0a10 	vmov	r0, s0
 80086f8:	2200      	movs	r2, #0
 80086fa:	f7f7 ff21 	bl	8000540 <__aeabi_dmul>
 80086fe:	4b37      	ldr	r3, [pc, #220]	; (80087dc <scalbn+0x104>)
 8008700:	429e      	cmp	r6, r3
 8008702:	4604      	mov	r4, r0
 8008704:	460d      	mov	r5, r1
 8008706:	da10      	bge.n	800872a <scalbn+0x52>
 8008708:	a32b      	add	r3, pc, #172	; (adr r3, 80087b8 <scalbn+0xe0>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	e03a      	b.n	8008786 <scalbn+0xae>
 8008710:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008714:	428a      	cmp	r2, r1
 8008716:	d10c      	bne.n	8008732 <scalbn+0x5a>
 8008718:	ee10 2a10 	vmov	r2, s0
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f7 fd58 	bl	80001d4 <__adddf3>
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	e019      	b.n	800875e <scalbn+0x86>
 800872a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800872e:	460b      	mov	r3, r1
 8008730:	3a36      	subs	r2, #54	; 0x36
 8008732:	4432      	add	r2, r6
 8008734:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008738:	428a      	cmp	r2, r1
 800873a:	dd08      	ble.n	800874e <scalbn+0x76>
 800873c:	2d00      	cmp	r5, #0
 800873e:	a120      	add	r1, pc, #128	; (adr r1, 80087c0 <scalbn+0xe8>)
 8008740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008744:	da1c      	bge.n	8008780 <scalbn+0xa8>
 8008746:	a120      	add	r1, pc, #128	; (adr r1, 80087c8 <scalbn+0xf0>)
 8008748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874c:	e018      	b.n	8008780 <scalbn+0xa8>
 800874e:	2a00      	cmp	r2, #0
 8008750:	dd08      	ble.n	8008764 <scalbn+0x8c>
 8008752:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008756:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800875a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800875e:	ec45 4b10 	vmov	d0, r4, r5
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008768:	da19      	bge.n	800879e <scalbn+0xc6>
 800876a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800876e:	429e      	cmp	r6, r3
 8008770:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008774:	dd0a      	ble.n	800878c <scalbn+0xb4>
 8008776:	a112      	add	r1, pc, #72	; (adr r1, 80087c0 <scalbn+0xe8>)
 8008778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e2      	bne.n	8008746 <scalbn+0x6e>
 8008780:	a30f      	add	r3, pc, #60	; (adr r3, 80087c0 <scalbn+0xe8>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fedb 	bl	8000540 <__aeabi_dmul>
 800878a:	e7cb      	b.n	8008724 <scalbn+0x4c>
 800878c:	a10a      	add	r1, pc, #40	; (adr r1, 80087b8 <scalbn+0xe0>)
 800878e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0b8      	beq.n	8008708 <scalbn+0x30>
 8008796:	a10e      	add	r1, pc, #56	; (adr r1, 80087d0 <scalbn+0xf8>)
 8008798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800879c:	e7b4      	b.n	8008708 <scalbn+0x30>
 800879e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087a2:	3236      	adds	r2, #54	; 0x36
 80087a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087ac:	4620      	mov	r0, r4
 80087ae:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <scalbn+0x108>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	e7e8      	b.n	8008786 <scalbn+0xae>
 80087b4:	f3af 8000 	nop.w
 80087b8:	c2f8f359 	.word	0xc2f8f359
 80087bc:	01a56e1f 	.word	0x01a56e1f
 80087c0:	8800759c 	.word	0x8800759c
 80087c4:	7e37e43c 	.word	0x7e37e43c
 80087c8:	8800759c 	.word	0x8800759c
 80087cc:	fe37e43c 	.word	0xfe37e43c
 80087d0:	c2f8f359 	.word	0xc2f8f359
 80087d4:	81a56e1f 	.word	0x81a56e1f
 80087d8:	43500000 	.word	0x43500000
 80087dc:	ffff3cb0 	.word	0xffff3cb0
 80087e0:	3c900000 	.word	0x3c900000

080087e4 <__errno>:
 80087e4:	4b01      	ldr	r3, [pc, #4]	; (80087ec <__errno+0x8>)
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	2000004c 	.word	0x2000004c

080087f0 <_init>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr

080087fc <_fini>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	bf00      	nop
 8008800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008802:	bc08      	pop	{r3}
 8008804:	469e      	mov	lr, r3
 8008806:	4770      	bx	lr
