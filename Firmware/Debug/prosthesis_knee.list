
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080068f0  080068f0  000168f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080069b0  080069b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069b0  080069b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080069b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000080  08006a38  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08006a38  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd42  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275d  00000000  00000000  0002bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fb7  00000000  00000000  0002ff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c368  00000000  00000000  00053eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ba8  00000000  00000000  00060257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  00121e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068d8 	.word	0x080068d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080068d8 	.word	0x080068d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3330      	adds	r3, #48	; 0x30
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	4413      	add	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	211f      	movs	r1, #31
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	0e9b      	lsrs	r3, r3, #26
 8000afe:	f003 011f 	and.w	r1, r3, #31
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b12:	bf00      	nop
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b087      	sub	sp, #28
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	0e5b      	lsrs	r3, r3, #25
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	4413      	add	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	0d1b      	lsrs	r3, r3, #20
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	401a      	ands	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	0d1b      	lsrs	r3, r3, #20
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	431a      	orrs	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0318 	and.w	r3, r3, #24
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b98:	40d9      	lsrs	r1, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	0007ffff 	.word	0x0007ffff

08000bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6093      	str	r3, [r2, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000cca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000cce:	f7ff ff9b 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cd6:	f7ff ffad 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cda:	2004      	movs	r0, #4
 8000cdc:	f7ff ffaa 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4831      	ldr	r0, [pc, #196]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cf2:	f003 febb 	bl	8004a6c <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482a      	ldr	r0, [pc, #168]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d12:	f003 fac9 	bl	80042a8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d36:	f003 fadd 	bl	80042f4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d4a:	f003 fa65 	bl	8004218 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d52:	f7ff fea5 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d58:	f7ff ff30 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000d5c:	4817      	ldr	r0, [pc, #92]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d5e:	f7ff ff3f 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC1_Init+0x13c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	099b      	lsrs	r3, r3, #6
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0x140>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	099a      	lsrs	r2, r3, #6
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0x144>)
 8000d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d84:	e002      	b.n	8000d8c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f9      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000d94:	2106      	movs	r1, #6
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d98:	f7ff fe95 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000da2:	f7ff febc 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000da6:	227f      	movs	r2, #127	; 0x7f
 8000da8:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000dac:	f7ff fee2 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	50040300 	.word	0x50040300
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	053e2d63 	.word	0x053e2d63
 8000dcc:	cccccccd 	.word	0xcccccccd
 8000dd0:	0c900008 	.word	0x0c900008

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000e16:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000e1a:	f7ff fef5 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000e1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e22:	f7ff ff07 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f7ff ff04 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4830      	ldr	r0, [pc, #192]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e3e:	f003 fe15 	bl	8004a6c <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000e42:	2108      	movs	r1, #8
 8000e44:	482e      	ldr	r0, [pc, #184]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e46:	f7ff ff0d 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4829      	ldr	r0, [pc, #164]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e5e:	f003 fa23 	bl	80042a8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e82:	f003 fa37 	bl	80042f4 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481d      	ldr	r0, [pc, #116]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e92:	f003 f9c1 	bl	8004218 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000e96:	2100      	movs	r1, #0
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e9a:	f7ff fe01 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea0:	f7ff fe8c 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea6:	f7ff fe9b 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ADC2_Init+0x138>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	099b      	lsrs	r3, r3, #6
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <MX_ADC2_Init+0x13c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	099a      	lsrs	r2, r3, #6
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_ADC2_Init+0x140>)
 8000ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ecc:	e002      	b.n	8000ed4 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000edc:	2106      	movs	r1, #6
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ee0:	f7ff fdf1 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff fe18 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000eee:	227f      	movs	r2, #127	; 0x7f
 8000ef0:	4909      	ldr	r1, [pc, #36]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ef4:	f7ff fe3e 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	48000800 	.word	0x48000800
 8000f04:	50040100 	.word	0x50040100
 8000f08:	50040300 	.word	0x50040300
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	053e2d63 	.word	0x053e2d63
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	10c00010 	.word	0x10c00010

08000f1c <LL_AHB2_GRP1_EnableClock>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	43db      	mvns	r3, r3
 8000f68:	ea02 0103 	and.w	r1, r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000f84:	2320      	movs	r3, #32
 8000f86:	e003      	b.n	8000f90 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	fa03 f202 	lsl.w	r2, r3, r2
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <LL_GPIO_SetPinMode>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	613b      	str	r3, [r7, #16]
  return result;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61fb      	str	r3, [r7, #28]
  return result;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800100c:	2320      	movs	r3, #32
 800100e:	e003      	b.n	8001018 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_GPIO_SetPinPull>:
{
 8001032:	b480      	push	{r7}
 8001034:	b08b      	sub	sp, #44	; 0x2c
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	613b      	str	r3, [r7, #16]
  return result;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001058:	2320      	movs	r3, #32
 800105a:	e003      	b.n	8001064 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	61fb      	str	r3, [r7, #28]
  return result;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001086:	2320      	movs	r3, #32
 8001088:	e003      	b.n	8001092 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	431a      	orrs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	372c      	adds	r7, #44	; 0x2c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff ff16 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	f7ff ff13 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff10 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff ff0d 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin);
 8001102:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8001106:	4837      	ldr	r0, [pc, #220]	; (80011e4 <MX_GPIO_Init+0x11c>)
 8001108:	f7ff ffd0 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENC_CSn_GPIO_Port, ENC_CSn_Pin);
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4836      	ldr	r0, [pc, #216]	; (80011e8 <MX_GPIO_Init+0x120>)
 8001110:	f7ff ffcc 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff ffc6 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001120:	4932      	ldr	r1, [pc, #200]	; (80011ec <MX_GPIO_Init+0x124>)
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff12 	bl	8000f4c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800113e:	2302      	movs	r3, #2
 8001140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fa4d 	bl	80045e8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4824      	ldr	r0, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x120>)
 8001156:	f7ff ff6c 	bl	8001032 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_GPIO_Init+0x120>)
 8001162:	f7ff ff29 	bl	8000fb8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin;
 8001166:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_GPIO_Init+0x11c>)
 8001182:	f003 fc73 	bl	8004a6c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CSn_Pin;
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118a:	2301      	movs	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_CSn_GPIO_Port, &GPIO_InitStruct);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4812      	ldr	r0, [pc, #72]	; (80011e8 <MX_GPIO_Init+0x120>)
 80011a0:	f003 fc64 	bl	8004a6c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_DO_Pin;
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_DO_GPIO_Port, &GPIO_InitStruct);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_GPIO_Init+0x120>)
 80011b6:	f003 fc59 	bl	8004a6c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011c0:	2301      	movs	r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f003 fc48 	bl	8004a6c <LL_GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000400 	.word	0x48000400
 80011e8:	48000800 	.word	0x48000800
 80011ec:	00f00003 	.word	0x00f00003

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60da      	str	r2, [r3, #12]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 0203 	bic.w	r2, r3, #3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	621a      	str	r2, [r3, #32]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f023 0201 	bic.w	r2, r3, #1
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60da      	str	r2, [r3, #12]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <LL_RCC_SetLPTIMClockSource>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	43db      	mvns	r3, r3
 800141e:	401a      	ands	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	4904      	ldr	r1, [pc, #16]	; (8001438 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001426:	4313      	orrs	r3, r2
 8001428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000

0800143c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <LL_APB1_GRP2_EnableClock+0x2c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4013      	ands	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000

0800146c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001470:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001474:	f7ff ffc8 	bl	8001408 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001478:	2020      	movs	r0, #32
 800147a:	f7ff ffdf 	bl	800143c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800147e:	f7ff feb7 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001482:	4603      	mov	r3, r0
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff07 	bl	800129c <NVIC_EncodePriority>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	2042      	movs	r0, #66	; 0x42
 8001494:	f7ff fed8 	bl	8001248 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001498:	2042      	movs	r0, #66	; 0x42
 800149a:	f7ff feb7 	bl	800120c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800149e:	2100      	movs	r1, #0
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014a2:	f7ff ff9d 	bl	80013e0 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014a6:	2100      	movs	r1, #0
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014aa:	f7ff ff63 	bl	8001374 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014ae:	2100      	movs	r1, #0
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014b2:	f7ff ff4c 	bl	800134e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014b6:	2100      	movs	r1, #0
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014ba:	f7ff ff22 	bl	8001302 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014be:	2100      	movs	r1, #0
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014c2:	f7ff ff31 	bl	8001328 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014c8:	f7ff ff7a 	bl	80013c0 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80014cc:	2100      	movs	r1, #0
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <MX_LPTIM2_Init+0x6c>)
 80014d0:	f7ff ff63 	bl	800139a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40009400 	.word	0x40009400

080014dc <__NVIC_SetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_LPTIM_Enable>:
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_LPTIM_StartCounter>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f023 0206 	bic.w	r2, r3, #6
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_LPTIM_SetAutoReload>:
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_LSE_Enable>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_RCC_LSE_Enable+0x20>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <LL_RCC_LSE_Enable+0x20>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_LSE_SetDriveCapability>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	f023 0218 	bic.w	r2, r3, #24
 800160e:	4905      	ldr	r1, [pc, #20]	; (8001624 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4313      	orrs	r3, r2
 8001614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000

08001628 <LL_RCC_LSE_IsReady>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <LL_RCC_LSE_IsReady+0x24>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d101      	bne.n	800163e <LL_RCC_LSE_IsReady+0x16>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_RCC_LSE_IsReady+0x18>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <LL_RCC_MSI_Enable>:
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <LL_RCC_MSI_Enable+0x1c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <LL_RCC_MSI_Enable+0x1c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_MSI_IsReady>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <LL_RCC_MSI_IsReady+0x20>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b02      	cmp	r3, #2
 800167e:	d101      	bne.n	8001684 <LL_RCC_MSI_IsReady+0x14>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_RCC_MSI_IsReady+0x16>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_RCC_MSI_EnablePLLMode>:
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_MSI_EnableRangeSelection>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_MSI_SetRange>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <LL_RCC_MSI_SetRange+0x24>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <LL_RCC_MSI_SetRange+0x24>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <LL_RCC_MSI_SetCalibTrimming>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	4904      	ldr	r1, [pc, #16]	; (8001724 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <LL_RCC_SetSysClkSource>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <LL_RCC_SetSysClkSource+0x24>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 0203 	bic.w	r2, r3, #3
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <LL_RCC_SetSysClkSource+0x24>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <LL_RCC_GetSysClkSource>:
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <LL_RCC_GetSysClkSource+0x18>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <LL_RCC_SetAHBPrescaler>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <LL_RCC_SetAHBPrescaler+0x24>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <LL_RCC_SetAHBPrescaler+0x24>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000

08001794 <LL_RCC_SetAPB1Prescaler>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a4:	4904      	ldr	r1, [pc, #16]	; (80017b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000

080017bc <LL_RCC_SetAPB2Prescaler>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017cc:	4904      	ldr	r1, [pc, #16]	; (80017e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000

080017e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <LL_RCC_PLL_Enable+0x1c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <LL_RCC_PLL_Enable+0x1c>)
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <LL_RCC_PLL_IsReady+0x24>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001814:	d101      	bne.n	800181a <LL_RCC_PLL_IsReady+0x16>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_RCC_PLL_IsReady+0x18>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001840:	4013      	ands	r3, r2
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	0212      	lsls	r2, r2, #8
 800184c:	4311      	orrs	r1, r2
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000
 8001868:	f9ff808c 	.word	0xf9ff808c

0800186c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <LL_APB1_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001896:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000

080018ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_FLASH_SetLatency+0x24>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 0207 	bic.w	r2, r3, #7
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <LL_FLASH_SetLatency+0x24>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40022000 	.word	0x40022000

08001914 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <LL_FLASH_GetLatency+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_SYSTICK_EnableIT+0x1c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <LL_SYSTICK_EnableIT+0x1c>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001960:	4904      	ldr	r1, [pc, #16]	; (8001974 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40007000 	.word	0x40007000

08001978 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_PWR_EnableBkUpAccess+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff ff7c 	bl	80018bc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019c8:	f7ff ff60 	bl	800188c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f7ff fd85 	bl	80014dc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d2:	f000 f87f 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d6:	f7ff fb77 	bl	80010c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019da:	f001 fc4d 	bl	8003278 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019de:	f001 fa57 	bl	8002e90 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 80019e2:	f7ff fd43 	bl	800146c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 80019e6:	f001 faa9 	bl	8002f3c <MX_SPI2_Init>
  MX_ADC2_Init();
 80019ea:	f7ff f9f3 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 80019ee:	f7ff f94b 	bl	8000c88 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t MagEnc;
	MagEnc.DO_GPIOx = ENC_DO_GPIO_Port;
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <main+0xf8>)
 80019f4:	603b      	str	r3, [r7, #0]
	MagEnc.CLK_GPIOx = ENC_CLK_GPIO_Port;
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <main+0xfc>)
 80019f8:	607b      	str	r3, [r7, #4]
	MagEnc.CSn_GPIOx = ENC_CSn_GPIO_Port;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <main+0xf8>)
 80019fc:	60bb      	str	r3, [r7, #8]
	MagEnc.DO_Pin = ENC_DO_Pin;
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	81bb      	strh	r3, [r7, #12]
	MagEnc.CLK_Pin = ENC_CLK_Pin;
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	81fb      	strh	r3, [r7, #14]
	MagEnc.CSn_Pin = ENC_CSn_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	823b      	strh	r3, [r7, #16]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001a0a:	f7ff ff91 	bl	8001930 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001a0e:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <main+0x100>)
 8001a10:	f7ff fd9c 	bl	800154c <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001a14:	4828      	ldr	r0, [pc, #160]	; (8001ab8 <main+0x100>)
 8001a16:	f7ff fdcf 	bl	80015b8 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001a1a:	213f      	movs	r1, #63	; 0x3f
 8001a1c:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <main+0x100>)
 8001a1e:	f7ff fdb8 	bl	8001592 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001a22:	2104      	movs	r1, #4
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <main+0x100>)
 8001a26:	f7ff fda1 	bl	800156c <LL_LPTIM_StartCounter>

	LL_SPI_Enable(SPI1);
 8001a2a:	4824      	ldr	r0, [pc, #144]	; (8001abc <main+0x104>)
 8001a2c:	f7ff ffb4 	bl	8001998 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001a30:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <main+0x108>)
 8001a32:	f7ff ffb1 	bl	8001998 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001a36:	4823      	ldr	r0, [pc, #140]	; (8001ac4 <main+0x10c>)
 8001a38:	f7ff fd74 	bl	8001524 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001a3c:	4822      	ldr	r0, [pc, #136]	; (8001ac8 <main+0x110>)
 8001a3e:	f7ff fd71 	bl	8001524 <LL_ADC_Enable>

	if(MPU925x_Init(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin))
 8001a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a46:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a4a:	481c      	ldr	r0, [pc, #112]	; (8001abc <main+0x104>)
 8001a4c:	f002 f91c 	bl	8003c88 <MPU925x_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <main+0xa2>
		Error_Handler();
 8001a56:	f000 f89b 	bl	8001b90 <Error_Handler>
	MPU925x_SetAccelSensitivity(mpu925x_accelSensitivity_8g);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f002 f93a 	bl	8003cd4 <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(mpu925x_gyroSensitivity_1000dps);
 8001a60:	2002      	movs	r0, #2
 8001a62:	f002 f9b3 	bl	8003dcc <MPU925x_SetGyroSensitivity>

	CAN_configure();
 8001a66:	f002 f887 	bl	8003b78 <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <main+0x114>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fdb1 	bl	80035d6 <EPOS4_SetCSTMode>
	AS5145B_Init(&MagEnc);
 8001a74:	463b      	mov	r3, r7
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fcac 	bl	80033d4 <AS5145B_Init>

	InitProsthesisControl();
 8001a7c:	f000 f8ce 	bl	8001c1c <InitProsthesisControl>

	// Remove spikes from beginning
	for ( uint16_t i = 0; i < 1000; i++ );
 8001a80:	2300      	movs	r3, #0
 8001a82:	82fb      	strh	r3, [r7, #22]
 8001a84:	e002      	b.n	8001a8c <main+0xd4>
 8001a86:	8afb      	ldrh	r3, [r7, #22]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	82fb      	strh	r3, [r7, #22]
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a92:	d3f8      	bcc.n	8001a86 <main+0xce>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(None);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f90b 	bl	8001cb0 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if (isProsthesisControlRequired)
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <main+0x118>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0fb      	beq.n	8001a9a <main+0xe2>
	  {
		  RunProsthesisControl();
 8001aa2:	f000 f91f 	bl	8001ce4 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <main+0x118>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
	  if (isProsthesisControlRequired)
 8001aac:	e7f5      	b.n	8001a9a <main+0xe2>
 8001aae:	bf00      	nop
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	40009400 	.word	0x40009400
 8001abc:	40013000 	.word	0x40013000
 8001ac0:	40003800 	.word	0x40003800
 8001ac4:	50040000 	.word	0x50040000
 8001ac8:	50040100 	.word	0x50040100
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	2000009c 	.word	0x2000009c

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f7ff ff07 	bl	80018ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ff18 	bl	8001914 <LL_FLASH_GetLatency>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d1fa      	bne.n	8001ae0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001aea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aee:	f7ff ff2f 	bl	8001950 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001af2:	f7ff fdad 	bl	8001650 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001af6:	bf00      	nop
 8001af8:	f7ff fdba 	bl	8001670 <LL_RCC_MSI_IsReady>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d1fa      	bne.n	8001af8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001b02:	f7ff fdd7 	bl	80016b4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001b06:	20b0      	movs	r0, #176	; 0xb0
 8001b08:	f7ff fde4 	bl	80016d4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fdf5 	bl	80016fc <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001b12:	f7ff ff31 	bl	8001978 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fd70 	bl	80015fc <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001b1c:	f7ff fd5c 	bl	80015d8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001b20:	bf00      	nop
 8001b22:	f7ff fd81 	bl	8001628 <LL_RCC_LSE_IsReady>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d1fa      	bne.n	8001b22 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001b2c:	f7ff fdb2 	bl	8001694 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b34:	2228      	movs	r2, #40	; 0x28
 8001b36:	2150      	movs	r1, #80	; 0x50
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fe77 	bl	800182c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b3e:	f7ff fe95 	bl	800186c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b42:	f7ff fe4f 	bl	80017e4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b46:	bf00      	nop
 8001b48:	f7ff fe5c 	bl	8001804 <LL_RCC_PLL_IsReady>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d1fa      	bne.n	8001b48 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f7ff fde8 	bl	8001728 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b58:	bf00      	nop
 8001b5a:	f7ff fdf9 	bl	8001750 <LL_RCC_GetSysClkSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d1fa      	bne.n	8001b5a <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fe01 	bl	800176c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b6e:	f7ff fe11 	bl	8001794 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b76:	f7ff fe21 	bl	80017bc <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <SystemClock_Config+0xb8>)
 8001b7c:	f003 fd3c 	bl	80055f8 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <SystemClock_Config+0xb8>)
 8001b82:	f003 fd6f 	bl	8005664 <LL_SetSystemCoreClock>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	04c4b400 	.word	0x04c4b400

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <Error_Handler+0x8>

08001b9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001baa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	b29b      	uxth	r3, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d101      	bne.n	8001bf4 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// This is to localize variables that are subject to change during testing
void InitProsthesisControl(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	CM_ImpCtrl.kd = 0.0f;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <InitProsthesisControl+0x74>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
	CM_ImpCtrl.kp = 0.0f;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <InitProsthesisControl+0x74>)
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
	CM_StanceCtrl.eqPoint_deg = 0.0f;		// Vanderbilt = -4.99 deg
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <InitProsthesisControl+0x78>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
	CM_StanceCtrl.kd = 0.0f;				// Vanderbilt = 0 N*m/(deg/s)
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <InitProsthesisControl+0x78>)
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
	CM_StanceCtrl.kp = 0.0f;				// 2.50 used to keep heat down in EPOS, Vanderbilt = 4.97 N*m/deg
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <InitProsthesisControl+0x78>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
	CM_SwingFlexCtrl.eqPoint_deg = 0.0f;	// Vanderbilt = -35.0 deg
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <InitProsthesisControl+0x7c>)
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
	CM_SwingFlexCtrl.kd = 0.0f;				// 0.05 used to get zero overshoot and 0.5 sec settling time, Vanderbilt = 0 N*m/(deg/s)
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <InitProsthesisControl+0x7c>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
	CM_SwingFlexCtrl.kp = 0.0f;				// 0.45 on the bench "feels" right, Vanderbilt = 0.65 N*m/deg
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <InitProsthesisControl+0x7c>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
	CM_SwingExtCtrl.eqPoint_deg = 0.f;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <InitProsthesisControl+0x80>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
	CM_SwingExtCtrl.kd = 0.0f;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <InitProsthesisControl+0x80>)
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
	CM_SwingExtCtrl.kp = 0.0f;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <InitProsthesisControl+0x80>)
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]

	CM_lcBot_staticUpperLimit = 2200;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <InitProsthesisControl+0x84>)
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <InitProsthesisControl+0x88>)
 8001c7c:	601a      	str	r2, [r3, #0]
	CM_lcTop_staticUpperLimit = 2370;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <InitProsthesisControl+0x8c>)
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <InitProsthesisControl+0x90>)
 8001c82:	601a      	str	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000108 	.word	0x20000108
 8001c94:	20000114 	.word	0x20000114
 8001c98:	20000120 	.word	0x20000120
 8001c9c:	2000012c 	.word	0x2000012c
 8001ca0:	20000100 	.word	0x20000100
 8001ca4:	45098000 	.word	0x45098000
 8001ca8:	20000104 	.word	0x20000104
 8001cac:	45142000 	.word	0x45142000

08001cb0 <RequireTestProgram>:

void RequireTestProgram(enum TestPrograms_e option)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <RequireTestProgram+0x2c>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	7013      	strb	r3, [r2, #0]

	if(testProgram != None)
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <RequireTestProgram+0x2c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <RequireTestProgram+0x30>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2000009d 	.word	0x2000009d
 8001ce0:	200000e1 	.word	0x200000e1

08001ce4 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	GetInputs();
 8001ce8:	f000 f828 	bl	8001d3c <GetInputs>
	ProcessInputs();
 8001cec:	f000 f888 	bl	8001e00 <ProcessInputs>

	if(isTestProgramRequired)
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <RunProsthesisControl+0x4c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <RunProsthesisControl+0x1a>
	{
		RunTestProgram();
 8001cf8:	f000 feb6 	bl	8002a68 <RunTestProgram>
 8001cfc:	e003      	b.n	8001d06 <RunProsthesisControl+0x22>
	}
	else
	{
		RunStateMachine();
 8001cfe:	f000 fdbf 	bl	8002880 <RunStateMachine>
		RunImpedanceControl();
 8001d02:	f000 fe55 	bl	80029b0 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <RunProsthesisControl+0x50>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <RunProsthesisControl+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <RunProsthesisControl+0x54>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
	{
		isSecond = 0;
	}
}
 8001d1a:	e006      	b.n	8001d2a <RunProsthesisControl+0x46>
	else if(isSecond)
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <RunProsthesisControl+0x54>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <RunProsthesisControl+0x46>
		isSecond = 0;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <RunProsthesisControl+0x54>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200000e1 	.word	0x200000e1
 8001d34:	20000008 	.word	0x20000008
 8001d38:	200000e0 	.word	0x200000e0

08001d3c <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
	CM_jointAngle_deg[0] = AS5145B_ReadPosition_Deg() - encBias_deg;
 8001d42:	f001 fc09 	bl	8003558 <AS5145B_ReadPosition_Deg>
 8001d46:	eeb0 7a40 	vmov.f32	s14, s0
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <GetInputs+0x74>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <GetInputs+0x78>)
 8001d56:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->bot[0] = ReadLoadCell(ADC2);
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <GetInputs+0x7c>)
 8001d5c:	f000 f834 	bl	8001dc8 <ReadLoadCell>
 8001d60:	4603      	mov	r3, r0
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <GetInputs+0x80>)
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->top[0] = ReadLoadCell(ADC1);
 8001d70:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <GetInputs+0x84>)
 8001d72:	f000 f829 	bl	8001dc8 <ReadLoadCell>
 8001d76:	4603      	mov	r3, r0
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <GetInputs+0x80>)
 8001d82:	edc3 7a03 	vstr	s15, [r3, #12]
	IMUData = MPU925x_ReadIMU();
 8001d86:	4c0f      	ldr	r4, [pc, #60]	; (8001dc4 <GetInputs+0x88>)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f002 f89a 	bl	8003ec4 <MPU925x_ReadIMU>
 8001d90:	4625      	mov	r5, r4
 8001d92:	463c      	mov	r4, r7
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	IMU_Orientation();
 8001da4:	f000 feea 	bl	8002b7c <IMU_Orientation>
}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	2000000c 	.word	0x2000000c
 8001db4:	200000f0 	.word	0x200000f0
 8001db8:	50040100 	.word	0x50040100
 8001dbc:	20000168 	.word	0x20000168
 8001dc0:	50040000 	.word	0x50040000
 8001dc4:	200000b0 	.word	0x200000b0

08001dc8 <ReadLoadCell>:

// Should be moved to ADC driver??
static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fee2 	bl	8001b9a <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8001dd6:	bf00      	nop
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff feff 	bl	8001bdc <LL_ADC_IsActiveFlag_EOC>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f9      	beq.n	8001dd8 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff0c 	bl	8001c02 <LL_ADC_ClearFlag_EOC>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fee9 	bl	8001bc2 <LL_ADC_REG_ReadConversionData12>
 8001df0:	4603      	mov	r3, r0
 8001df2:	81fb      	strh	r3, [r7, #14]
	return val;
 8001df4:	89fb      	ldrh	r3, [r7, #14]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	float tau = 1 / (2 * 3.1416f * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8001e06:	4b90      	ldr	r3, [pc, #576]	; (8002048 <ProcessInputs+0x248>)
 8001e08:	607b      	str	r3, [r7, #4]

	// Derivative of angle and filtering of load cells
	// No derivative of angle (angular speed) on first execution
	// No filtering of load cells on first or second execution
	if(isFirst)
 8001e0a:	4b90      	ldr	r3, [pc, #576]	; (800204c <ProcessInputs+0x24c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <ProcessInputs+0x54>
	{
		CM_jointSpeed_dps = 0.0f;
 8001e12:	4b8f      	ldr	r3, [pc, #572]	; (8002050 <ProcessInputs+0x250>)
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <ProcessInputs+0x254>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a8d      	ldr	r2, [pc, #564]	; (8002054 <ProcessInputs+0x254>)
 8001e20:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[0];
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <ProcessInputs+0x258>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a8c      	ldr	r2, [pc, #560]	; (8002058 <ProcessInputs+0x258>)
 8001e28:	6093      	str	r3, [r2, #8]
		CM_LoadCell->top[2] = CM_LoadCell->top[0];
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <ProcessInputs+0x258>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	4a8a      	ldr	r2, [pc, #552]	; (8002058 <ProcessInputs+0x258>)
 8001e30:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001e32:	4b89      	ldr	r3, [pc, #548]	; (8002058 <ProcessInputs+0x258>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a89      	ldr	r2, [pc, #548]	; (800205c <ProcessInputs+0x25c>)
 8001e38:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <ProcessInputs+0x258>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a87      	ldr	r2, [pc, #540]	; (800205c <ProcessInputs+0x25c>)
 8001e40:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <ProcessInputs+0x25c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a85      	ldr	r2, [pc, #532]	; (800205c <ProcessInputs+0x25c>)
 8001e48:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 8001e4a:	4b84      	ldr	r3, [pc, #528]	; (800205c <ProcessInputs+0x25c>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a83      	ldr	r2, [pc, #524]	; (800205c <ProcessInputs+0x25c>)
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	e0f0      	b.n	8002036 <ProcessInputs+0x236>
	}
	else if(isSecond)
 8001e54:	4b82      	ldr	r3, [pc, #520]	; (8002060 <ProcessInputs+0x260>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d044      	beq.n	8001ee6 <ProcessInputs+0xe6>
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <ProcessInputs+0x254>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <ProcessInputs+0x254>)
 8001e64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e74:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <ProcessInputs+0x264>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e82:	4b73      	ldr	r3, [pc, #460]	; (8002050 <ProcessInputs+0x250>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e98:	4b72      	ldr	r3, [pc, #456]	; (8002064 <ProcessInputs+0x264>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <ProcessInputs+0x250>)
 8001ea8:	edc3 7a00 	vstr	s15, [r3]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <ProcessInputs+0x254>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <ProcessInputs+0x254>)
 8001eb2:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <ProcessInputs+0x258>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a67      	ldr	r2, [pc, #412]	; (8002058 <ProcessInputs+0x258>)
 8001eba:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8001ebc:	4b66      	ldr	r3, [pc, #408]	; (8002058 <ProcessInputs+0x258>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a65      	ldr	r2, [pc, #404]	; (8002058 <ProcessInputs+0x258>)
 8001ec2:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <ProcessInputs+0x258>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a64      	ldr	r2, [pc, #400]	; (800205c <ProcessInputs+0x25c>)
 8001eca:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001ecc:	4b62      	ldr	r3, [pc, #392]	; (8002058 <ProcessInputs+0x258>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a62      	ldr	r2, [pc, #392]	; (800205c <ProcessInputs+0x25c>)
 8001ed2:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8001ed4:	4b61      	ldr	r3, [pc, #388]	; (800205c <ProcessInputs+0x25c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a60      	ldr	r2, [pc, #384]	; (800205c <ProcessInputs+0x25c>)
 8001eda:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <ProcessInputs+0x25c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <ProcessInputs+0x25c>)
 8001ee2:	6113      	str	r3, [r2, #16]
 8001ee4:	e0a7      	b.n	8002036 <ProcessInputs+0x236>
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <ProcessInputs+0x254>)
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <ProcessInputs+0x254>)
 8001eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f02:	4b58      	ldr	r3, [pc, #352]	; (8002064 <ProcessInputs+0x264>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <ProcessInputs+0x250>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f16:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f22:	4b50      	ldr	r3, [pc, #320]	; (8002064 <ProcessInputs+0x264>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <ProcessInputs+0x250>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <ProcessInputs+0x25c>)
 8001f38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f3c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002068 <ProcessInputs+0x268>
 8001f40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <ProcessInputs+0x25c>)
 8001f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800206c <ProcessInputs+0x26c>
 8001f4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f52:	ee37 7a67 	vsub.f32	s14, s14, s15
									   + 0.0128f * CM_LoadCell->bot[0] + 0.0256f * CM_LoadCell->bot[1] + 0.0128f * CM_LoadCell->bot[2];
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <ProcessInputs+0x258>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002070 <ProcessInputs+0x270>
 8001f60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <ProcessInputs+0x258>)
 8001f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002074 <ProcessInputs+0x274>
 8001f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <ProcessInputs+0x258>)
 8001f7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002070 <ProcessInputs+0x270>
 8001f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <ProcessInputs+0x25c>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8001f92:	4b32      	ldr	r3, [pc, #200]	; (800205c <ProcessInputs+0x25c>)
 8001f94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f98:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002068 <ProcessInputs+0x268>
 8001f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <ProcessInputs+0x25c>)
 8001fa2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fa6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800206c <ProcessInputs+0x26c>
 8001faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fae:	ee37 7a67 	vsub.f32	s14, s14, s15
									   + 0.0128f * CM_LoadCell->top[0] + 0.0256f * CM_LoadCell->top[1] + 0.0128f * CM_LoadCell->top[2];
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <ProcessInputs+0x258>)
 8001fb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fb8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002070 <ProcessInputs+0x270>
 8001fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <ProcessInputs+0x258>)
 8001fc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002074 <ProcessInputs+0x274>
 8001fce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <ProcessInputs+0x258>)
 8001fd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fdc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002070 <ProcessInputs+0x270>
 8001fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <ProcessInputs+0x25c>)
 8001fea:	edc3 7a03 	vstr	s15, [r3, #12]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <ProcessInputs+0x254>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <ProcessInputs+0x254>)
 8001ff4:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[1];
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <ProcessInputs+0x258>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <ProcessInputs+0x258>)
 8001ffc:	6093      	str	r3, [r2, #8]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <ProcessInputs+0x258>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <ProcessInputs+0x258>)
 8002004:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[2] = CM_LoadCell->top[1];
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <ProcessInputs+0x258>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <ProcessInputs+0x258>)
 800200c:	6153      	str	r3, [r2, #20]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <ProcessInputs+0x258>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <ProcessInputs+0x258>)
 8002014:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <ProcessInputs+0x25c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <ProcessInputs+0x25c>)
 800201c:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <ProcessInputs+0x25c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0e      	ldr	r2, [pc, #56]	; (800205c <ProcessInputs+0x25c>)
 8002024:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <ProcessInputs+0x25c>)
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <ProcessInputs+0x25c>)
 800202c:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <ProcessInputs+0x25c>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <ProcessInputs+0x25c>)
 8002034:	6113      	str	r3, [r2, #16]
	}

	CalibrateIMU();
 8002036:	f000 f81f 	bl	8002078 <CalibrateIMU>
	ComputeLimbAngle();
 800203a:	f000 fb45 	bl	80026c8 <ComputeLimbAngle>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	3c826122 	.word	0x3c826122
 800204c:	20000008 	.word	0x20000008
 8002050:	200000f8 	.word	0x200000f8
 8002054:	200000f0 	.word	0x200000f0
 8002058:	20000168 	.word	0x20000168
 800205c:	200001b0 	.word	0x200001b0
 8002060:	200000e0 	.word	0x200000e0
 8002064:	20000004 	.word	0x20000004
 8002068:	3fd3eab3 	.word	0x3fd3eab3
 800206c:	3f34f0d8 	.word	0x3f34f0d8
 8002070:	3c51b717 	.word	0x3c51b717
 8002074:	3cd1b717 	.word	0x3cd1b717

08002078 <CalibrateIMU>:

static void CalibrateIMU(void)
{
 8002078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800207c:	b0a0      	sub	sp, #128	; 0x80
 800207e:	af00      	add	r7, sp, #0
	double axBias = 0.0;
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double ayBias = 0.0;
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double azBias = 0.0;
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double gxBias = 0.0;
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double gyBias = 0.0;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double gzBias = 0.0;
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double n = 1.0;				// Scaling factor (helps with normalization)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4bbf      	ldr	r3, [pc, #764]	; (80023cc <CalibrateIMU+0x354>)
 80020ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double c1 = cos(0);
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4bbd      	ldr	r3, [pc, #756]	; (80023cc <CalibrateIMU+0x354>)
 80020d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double c2 = cos(0);
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4bba      	ldr	r3, [pc, #744]	; (80023cc <CalibrateIMU+0x354>)
 80020e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double c3 = cos(0);
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4bb8      	ldr	r3, [pc, #736]	; (80023cc <CalibrateIMU+0x354>)
 80020ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double s1 = sin(0);
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double s2 = sin(0);
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s3 = sin(0);
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Rotate IMU data and remove biases
	CM_IMUData.ax = n * (IMUData.ax*(c1*c3 - c2*s1*s3) + IMUData.ay*(  -c3*s1 - c1*c2*s3) + IMUData.az*( s2*s3)) - axBias;
 8002114:	4bae      	ldr	r3, [pc, #696]	; (80023d0 <CalibrateIMU+0x358>)
 8002116:	e9d3 8900 	ldrd	r8, r9, [r3]
 800211a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800211e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002122:	f7fe fa0d 	bl	8000540 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4692      	mov	sl, r2
 800212c:	469b      	mov	fp, r3
 800212e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002132:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002136:	f7fe fa03 	bl	8000540 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002146:	f7fe f9fb 	bl	8000540 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4650      	mov	r0, sl
 8002150:	4659      	mov	r1, fp
 8002152:	f7fe f83d 	bl	80001d0 <__aeabi_dsub>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4640      	mov	r0, r8
 800215c:	4649      	mov	r1, r9
 800215e:	f7fe f9ef 	bl	8000540 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4692      	mov	sl, r2
 8002168:	469b      	mov	fp, r3
 800216a:	4b99      	ldr	r3, [pc, #612]	; (80023d0 <CalibrateIMU+0x358>)
 800216c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8002170:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800217c:	4620      	mov	r0, r4
 800217e:	4629      	mov	r1, r5
 8002180:	f7fe f9de 	bl	8000540 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4614      	mov	r4, r2
 800218a:	461d      	mov	r5, r3
 800218c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002190:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002194:	f7fe f9d4 	bl	8000540 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a4:	f7fe f9cc 	bl	8000540 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe f80e 	bl	80001d0 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe f9c0 	bl	8000540 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4650      	mov	r0, sl
 80021c6:	4659      	mov	r1, fp
 80021c8:	f7fe f804 	bl	80001d4 <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4690      	mov	r8, r2
 80021d2:	4699      	mov	r9, r3
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <CalibrateIMU+0x358>)
 80021d6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e2:	f7fe f9ad 	bl	8000540 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4620      	mov	r0, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	f7fe f9a7 	bl	8000540 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4640      	mov	r0, r8
 80021f8:	4649      	mov	r1, r9
 80021fa:	f7fd ffeb 	bl	80001d4 <__adddf3>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800220a:	f7fe f999 	bl	8000540 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800221a:	f7fd ffd9 	bl	80001d0 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	496c      	ldr	r1, [pc, #432]	; (80023d4 <CalibrateIMU+0x35c>)
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
	CM_IMUData.ay = n * (IMUData.ax*(c1*s3 + c2*c3*s1) + IMUData.ay*(c1*c2*c3 - s1*s3   ) + IMUData.az*(-c3*s2)) - ayBias;
 8002228:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <CalibrateIMU+0x358>)
 800222a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800222e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002232:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002236:	f7fe f983 	bl	8000540 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4690      	mov	r8, r2
 8002240:	4699      	mov	r9, r3
 8002242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002246:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800224a:	f7fe f979 	bl	8000540 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800225a:	f7fe f971 	bl	8000540 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fd ffb5 	bl	80001d4 <__adddf3>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4620      	mov	r0, r4
 8002270:	4629      	mov	r1, r5
 8002272:	f7fe f965 	bl	8000540 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4692      	mov	sl, r2
 800227c:	469b      	mov	fp, r3
 800227e:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <CalibrateIMU+0x358>)
 8002280:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002288:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800228c:	f7fe f958 	bl	8000540 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229c:	f7fe f950 	bl	8000540 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
 80022a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022b0:	f7fe f946 	bl	8000540 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4640      	mov	r0, r8
 80022ba:	4649      	mov	r1, r9
 80022bc:	f7fd ff88 	bl	80001d0 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fe f93a 	bl	8000540 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4650      	mov	r0, sl
 80022d2:	4659      	mov	r1, fp
 80022d4:	f7fd ff7e 	bl	80001d4 <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4690      	mov	r8, r2
 80022de:	4699      	mov	r9, r3
 80022e0:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <CalibrateIMU+0x358>)
 80022e2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022fa:	f7fe f921 	bl	8000540 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f7fe f91b 	bl	8000540 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4640      	mov	r0, r8
 8002310:	4649      	mov	r1, r9
 8002312:	f7fd ff5f 	bl	80001d4 <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002322:	f7fe f90d 	bl	8000540 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002332:	f7fd ff4d 	bl	80001d0 <__aeabi_dsub>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4926      	ldr	r1, [pc, #152]	; (80023d4 <CalibrateIMU+0x35c>)
 800233c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	CM_IMUData.az = n * (IMUData.ax*(        s1*s2   ) + IMUData.ay*(           c1*s2   ) + IMUData.az*( c2   )) - azBias;
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <CalibrateIMU+0x358>)
 8002342:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800234e:	f7fe f8f7 	bl	8000540 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4620      	mov	r0, r4
 8002358:	4629      	mov	r1, r5
 800235a:	f7fe f8f1 	bl	8000540 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4690      	mov	r8, r2
 8002364:	4699      	mov	r9, r3
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <CalibrateIMU+0x358>)
 8002368:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800236c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002370:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002374:	f7fe f8e4 	bl	8000540 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fe f8de 	bl	8000540 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4640      	mov	r0, r8
 800238a:	4649      	mov	r1, r9
 800238c:	f7fd ff22 	bl	80001d4 <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4614      	mov	r4, r2
 8002396:	461d      	mov	r5, r3
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <CalibrateIMU+0x358>)
 800239a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800239e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023a2:	f7fe f8cd 	bl	8000540 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fd ff11 	bl	80001d4 <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023be:	f7fe f8bf 	bl	8000540 <__aeabi_dmul>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	e005      	b.n	80023d8 <CalibrateIMU+0x360>
 80023cc:	3ff00000 	.word	0x3ff00000
 80023d0:	200000b0 	.word	0x200000b0
 80023d4:	20000138 	.word	0x20000138
 80023d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023dc:	f7fd fef8 	bl	80001d0 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	49b6      	ldr	r1, [pc, #728]	; (80026c0 <CalibrateIMU+0x648>)
 80023e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CM_IMUData.gx = n * (IMUData.gx*(c1*c3 - c2*s1*s3) + IMUData.gy*(  -c3*s1 - c1*c2*s3) + IMUData.gz*( s2*s3)) - gxBias;
 80023ea:	4bb6      	ldr	r3, [pc, #728]	; (80026c4 <CalibrateIMU+0x64c>)
 80023ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023f8:	f7fe f8a2 	bl	8000540 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4690      	mov	r8, r2
 8002402:	4699      	mov	r9, r3
 8002404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002408:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800240c:	f7fe f898 	bl	8000540 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241c:	f7fe f890 	bl	8000540 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4640      	mov	r0, r8
 8002426:	4649      	mov	r1, r9
 8002428:	f7fd fed2 	bl	80001d0 <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fe f884 	bl	8000540 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4690      	mov	r8, r2
 800243e:	4699      	mov	r9, r3
 8002440:	4ba0      	ldr	r3, [pc, #640]	; (80026c4 <CalibrateIMU+0x64c>)
 8002442:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002456:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800245a:	f7fe f871 	bl	8000540 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4692      	mov	sl, r2
 8002464:	469b      	mov	fp, r3
 8002466:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800246a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800246e:	f7fe f867 	bl	8000540 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247e:	f7fe f85f 	bl	8000540 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4650      	mov	r0, sl
 8002488:	4659      	mov	r1, fp
 800248a:	f7fd fea1 	bl	80001d0 <__aeabi_dsub>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fe f853 	bl	8000540 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4640      	mov	r0, r8
 80024a0:	4649      	mov	r1, r9
 80024a2:	f7fd fe97 	bl	80001d4 <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4690      	mov	r8, r2
 80024ac:	4699      	mov	r9, r3
 80024ae:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <CalibrateIMU+0x64c>)
 80024b0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024bc:	f7fe f840 	bl	8000540 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4620      	mov	r0, r4
 80024c6:	4629      	mov	r1, r5
 80024c8:	f7fe f83a 	bl	8000540 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4640      	mov	r0, r8
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fd fe7e 	bl	80001d4 <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024e4:	f7fe f82c 	bl	8000540 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80024f4:	f7fd fe6c 	bl	80001d0 <__aeabi_dsub>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4970      	ldr	r1, [pc, #448]	; (80026c0 <CalibrateIMU+0x648>)
 80024fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CM_IMUData.gy = n * (IMUData.gx*(c1*s3 + c2*c3*s1) + IMUData.gy*(c1*c2*c3 - s1*s3   ) + IMUData.gz*(-c3*s2)) - gyBias;
 8002502:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <CalibrateIMU+0x64c>)
 8002504:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002510:	f7fe f816 	bl	8000540 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4690      	mov	r8, r2
 800251a:	4699      	mov	r9, r3
 800251c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002520:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002524:	f7fe f80c 	bl	8000540 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002534:	f7fe f804 	bl	8000540 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4640      	mov	r0, r8
 800253e:	4649      	mov	r1, r9
 8002540:	f7fd fe48 	bl	80001d4 <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fff8 	bl	8000540 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4690      	mov	r8, r2
 8002556:	4699      	mov	r9, r3
 8002558:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <CalibrateIMU+0x64c>)
 800255a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800255e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002562:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002566:	f7fd ffeb 	bl	8000540 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002576:	f7fd ffe3 	bl	8000540 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4692      	mov	sl, r2
 8002580:	469b      	mov	fp, r3
 8002582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800258a:	f7fd ffd9 	bl	8000540 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4650      	mov	r0, sl
 8002594:	4659      	mov	r1, fp
 8002596:	f7fd fe1b 	bl	80001d0 <__aeabi_dsub>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f7fd ffcd 	bl	8000540 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4640      	mov	r0, r8
 80025ac:	4649      	mov	r1, r9
 80025ae:	f7fd fe11 	bl	80001d4 <__adddf3>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4690      	mov	r8, r2
 80025b8:	4699      	mov	r9, r3
 80025ba:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <CalibrateIMU+0x64c>)
 80025bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d4:	f7fd ffb4 	bl	8000540 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fd ffae 	bl	8000540 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4640      	mov	r0, r8
 80025ea:	4649      	mov	r1, r9
 80025ec:	f7fd fdf2 	bl	80001d4 <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025fc:	f7fd ffa0 	bl	8000540 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800260c:	f7fd fde0 	bl	80001d0 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	492a      	ldr	r1, [pc, #168]	; (80026c0 <CalibrateIMU+0x648>)
 8002616:	e9c1 2308 	strd	r2, r3, [r1, #32]
	CM_IMUData.gz = n * (IMUData.gx*(        s1*s2   ) + IMUData.gy*(           c1*s2   ) + IMUData.gz*( c2   )) - gzBias;
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <CalibrateIMU+0x64c>)
 800261c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002624:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002628:	f7fd ff8a 	bl	8000540 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd ff84 	bl	8000540 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4690      	mov	r8, r2
 800263e:	4699      	mov	r9, r3
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <CalibrateIMU+0x64c>)
 8002642:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800264e:	f7fd ff77 	bl	8000540 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4620      	mov	r0, r4
 8002658:	4629      	mov	r1, r5
 800265a:	f7fd ff71 	bl	8000540 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4640      	mov	r0, r8
 8002664:	4649      	mov	r1, r9
 8002666:	f7fd fdb5 	bl	80001d4 <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	461d      	mov	r5, r3
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <CalibrateIMU+0x64c>)
 8002674:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800267c:	f7fd ff60 	bl	8000540 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fda4 	bl	80001d4 <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002698:	f7fd ff52 	bl	8000540 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026a8:	f7fd fd92 	bl	80001d0 <__aeabi_dsub>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <CalibrateIMU+0x648>)
 80026b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80026b6:	bf00      	nop
 80026b8:	3780      	adds	r7, #128	; 0x80
 80026ba:	46bd      	mov	sp, r7
 80026bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c0:	20000138 	.word	0x20000138
 80026c4:	200000b0 	.word	0x200000b0

080026c8 <ComputeLimbAngle>:

static void ComputeLimbAngle(void)
{
 80026c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
	double accelAngle_deg = (atan( CM_IMUData.ax / sqrt(pow(CM_IMUData.ay, 2) + pow(CM_IMUData.az, 2)))) * 180/3.1416;
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <ComputeLimbAngle+0x198>)
 80026d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026d6:	4b62      	ldr	r3, [pc, #392]	; (8002860 <ComputeLimbAngle+0x198>)
 80026d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80026dc:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002848 <ComputeLimbAngle+0x180>
 80026e0:	eeb0 0a47 	vmov.f32	s0, s14
 80026e4:	eef0 0a67 	vmov.f32	s1, s15
 80026e8:	f003 f9b0 	bl	8005a4c <pow>
 80026ec:	ec59 8b10 	vmov	r8, r9, d0
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <ComputeLimbAngle+0x198>)
 80026f2:	ed93 7b04 	vldr	d7, [r3, #16]
 80026f6:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8002848 <ComputeLimbAngle+0x180>
 80026fa:	eeb0 0a47 	vmov.f32	s0, s14
 80026fe:	eef0 0a67 	vmov.f32	s1, s15
 8002702:	f003 f9a3 	bl	8005a4c <pow>
 8002706:	ec53 2b10 	vmov	r2, r3, d0
 800270a:	4640      	mov	r0, r8
 800270c:	4649      	mov	r1, r9
 800270e:	f7fd fd61 	bl	80001d4 <__adddf3>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b17 	vmov	d7, r2, r3
 800271a:	eeb0 0a47 	vmov.f32	s0, s14
 800271e:	eef0 0a67 	vmov.f32	s1, s15
 8002722:	f003 fa03 	bl	8005b2c <sqrt>
 8002726:	ec53 2b10 	vmov	r2, r3, d0
 800272a:	4620      	mov	r0, r4
 800272c:	4629      	mov	r1, r5
 800272e:	f7fe f831 	bl	8000794 <__aeabi_ddiv>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ec43 2b17 	vmov	d7, r2, r3
 800273a:	eeb0 0a47 	vmov.f32	s0, s14
 800273e:	eef0 0a67 	vmov.f32	s1, s15
 8002742:	f002 ffd9 	bl	80056f8 <atan>
 8002746:	ec51 0b10 	vmov	r0, r1, d0
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	4b45      	ldr	r3, [pc, #276]	; (8002864 <ComputeLimbAngle+0x19c>)
 8002750:	f7fd fef6 	bl	8000540 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	a33c      	add	r3, pc, #240	; (adr r3, 8002850 <ComputeLimbAngle+0x188>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fe f817 	bl	8000794 <__aeabi_ddiv>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	static double compFiltAngle_deg = 0.0;
	static double dGyroAngle_deg = 0.0;

	// Change in angle from gyro (trapezoidal used)
	dGyroAngle_deg = dt/2 * (CM_IMUData.gz + dGyroAngle_deg);
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <ComputeLimbAngle+0x1a0>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002778:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800277c:	ee16 0a90 	vmov	r0, s13
 8002780:	f7fd fe86 	bl	8000490 <__aeabi_f2d>
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <ComputeLimbAngle+0x198>)
 800278a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <ComputeLimbAngle+0x1a4>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fd1e 	bl	80001d4 <__adddf3>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4620      	mov	r0, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	f7fd fece 	bl	8000540 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4930      	ldr	r1, [pc, #192]	; (800286c <ComputeLimbAngle+0x1a4>)
 80027aa:	e9c1 2300 	strd	r2, r3, [r1]

	// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
	double alpha = 0.002;
 80027ae:	a32a      	add	r3, pc, #168	; (adr r3, 8002858 <ComputeLimbAngle+0x190>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	e9c7 2300 	strd	r2, r3, [r7]
	compFiltAngle_deg = accelAngle_deg*alpha + (1 - alpha) * (dGyroAngle_deg + compFiltAngle_deg);
 80027b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027c0:	f7fd febe 	bl	8000540 <__aeabi_dmul>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4614      	mov	r4, r2
 80027ca:	461d      	mov	r5, r3
 80027cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d0:	f04f 0000 	mov.w	r0, #0
 80027d4:	4926      	ldr	r1, [pc, #152]	; (8002870 <ComputeLimbAngle+0x1a8>)
 80027d6:	f7fd fcfb 	bl	80001d0 <__aeabi_dsub>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <ComputeLimbAngle+0x1a4>)
 80027e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <ComputeLimbAngle+0x1ac>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd fcf1 	bl	80001d4 <__adddf3>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4640      	mov	r0, r8
 80027f8:	4649      	mov	r1, r9
 80027fa:	f7fd fea1 	bl	8000540 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fce5 	bl	80001d4 <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4919      	ldr	r1, [pc, #100]	; (8002874 <ComputeLimbAngle+0x1ac>)
 8002810:	e9c1 2300 	strd	r2, r3, [r1]

	#ifdef KNEE
	CM_limbAngle_deg = compFiltAngle_deg - CM_jointAngle_deg[0];
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <ComputeLimbAngle+0x1ac>)
 8002816:	e9d3 4500 	ldrd	r4, r5, [r3]
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <ComputeLimbAngle+0x1b0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe36 	bl	8000490 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4620      	mov	r0, r4
 800282a:	4629      	mov	r1, r5
 800282c:	f7fd fcd0 	bl	80001d0 <__aeabi_dsub>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4911      	ldr	r1, [pc, #68]	; (800287c <ComputeLimbAngle+0x1b4>)
 8002836:	e9c1 2300 	strd	r2, r3, [r1]
	#else
	CM_limbAngle_deg = compFiltAngle_deg + CM_jointAngle_deg[0];
	#endif
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	40000000 	.word	0x40000000
 8002850:	2e48e8a7 	.word	0x2e48e8a7
 8002854:	400921ff 	.word	0x400921ff
 8002858:	d2f1a9fc 	.word	0xd2f1a9fc
 800285c:	3f60624d 	.word	0x3f60624d
 8002860:	20000138 	.word	0x20000138
 8002864:	40668000 	.word	0x40668000
 8002868:	20000004 	.word	0x20000004
 800286c:	20000200 	.word	0x20000200
 8002870:	3ff00000 	.word	0x3ff00000
 8002874:	20000208 	.word	0x20000208
 8002878:	200000f0 	.word	0x200000f0
 800287c:	200000e8 	.word	0x200000e8

08002880 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	static enum StateMachine_e state;

	if(isFirst)
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <RunStateMachine+0x104>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <RunStateMachine+0x12>
	{
		state = Stance;
 800288c:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <RunStateMachine+0x108>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
	}

	switch(state)
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <RunStateMachine+0x108>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d04f      	beq.n	800293a <RunStateMachine+0xba>
 800289a:	2b02      	cmp	r3, #2
 800289c:	dc6d      	bgt.n	800297a <RunStateMachine+0xfa>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <RunStateMachine+0x28>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d02c      	beq.n	8002900 <RunStateMachine+0x80>
			state = Stance;
		}

		break;
	}
}
 80028a6:	e068      	b.n	800297a <RunStateMachine+0xfa>
		CM_state = 1800;
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <RunStateMachine+0x10c>)
 80028aa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80028ae:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint_deg = CM_StanceCtrl.eqPoint_deg;
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <RunStateMachine+0x110>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a37      	ldr	r2, [pc, #220]	; (8002994 <RunStateMachine+0x114>)
 80028b6:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_StanceCtrl.kd;
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <RunStateMachine+0x110>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <RunStateMachine+0x114>)
 80028be:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_StanceCtrl.kp;
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <RunStateMachine+0x110>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a33      	ldr	r2, [pc, #204]	; (8002994 <RunStateMachine+0x114>)
 80028c6:	6093      	str	r3, [r2, #8]
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 80028c8:	4b33      	ldr	r3, [pc, #204]	; (8002998 <RunStateMachine+0x118>)
 80028ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <RunStateMachine+0x11c>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	d400      	bmi.n	80028e0 <RunStateMachine+0x60>
		break;
 80028de:	e04c      	b.n	800297a <RunStateMachine+0xfa>
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <RunStateMachine+0x118>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <RunStateMachine+0x120>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	d400      	bmi.n	80028f8 <RunStateMachine+0x78>
		break;
 80028f6:	e040      	b.n	800297a <RunStateMachine+0xfa>
			state = SwingFlexion;
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <RunStateMachine+0x108>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
		break;
 80028fe:	e03c      	b.n	800297a <RunStateMachine+0xfa>
		CM_state = 2400;
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <RunStateMachine+0x10c>)
 8002902:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002906:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint_deg = CM_SwingFlexCtrl.eqPoint_deg;
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <RunStateMachine+0x124>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a21      	ldr	r2, [pc, #132]	; (8002994 <RunStateMachine+0x114>)
 800290e:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_SwingFlexCtrl.kd;
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <RunStateMachine+0x124>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <RunStateMachine+0x114>)
 8002916:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_SwingFlexCtrl.kp;
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <RunStateMachine+0x124>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <RunStateMachine+0x114>)
 800291e:	6093      	str	r3, [r2, #8]
		if(CM_jointSpeed_dps > 0)
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <RunStateMachine+0x128>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	dc00      	bgt.n	8002932 <RunStateMachine+0xb2>
		break;
 8002930:	e023      	b.n	800297a <RunStateMachine+0xfa>
			state = SwingExtension;
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <RunStateMachine+0x108>)
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
		break;
 8002938:	e01f      	b.n	800297a <RunStateMachine+0xfa>
		CM_state = 2900;
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <RunStateMachine+0x10c>)
 800293c:	f640 3254 	movw	r2, #2900	; 0xb54
 8002940:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint_deg = CM_SwingExtCtrl.eqPoint_deg;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <RunStateMachine+0x12c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <RunStateMachine+0x114>)
 8002948:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_SwingExtCtrl.kd;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <RunStateMachine+0x12c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a11      	ldr	r2, [pc, #68]	; (8002994 <RunStateMachine+0x114>)
 8002950:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_SwingExtCtrl.kp;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <RunStateMachine+0x12c>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <RunStateMachine+0x114>)
 8002958:	6093      	str	r3, [r2, #8]
		if(CM_LoadCell_Filtered->bot[0] > CM_lcBot_staticUpperLimit)
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <RunStateMachine+0x118>)
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <RunStateMachine+0x120>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	dc00      	bgt.n	8002972 <RunStateMachine+0xf2>
		break;
 8002970:	e002      	b.n	8002978 <RunStateMachine+0xf8>
			state = Stance;
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <RunStateMachine+0x108>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
		break;
 8002978:	bf00      	nop
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000008 	.word	0x20000008
 8002988:	20000210 	.word	0x20000210
 800298c:	200001fa 	.word	0x200001fa
 8002990:	20000114 	.word	0x20000114
 8002994:	200000a0 	.word	0x200000a0
 8002998:	200001b0 	.word	0x200001b0
 800299c:	20000104 	.word	0x20000104
 80029a0:	20000100 	.word	0x20000100
 80029a4:	20000120 	.word	0x20000120
 80029a8:	200000f8 	.word	0x200000f8
 80029ac:	2000012c 	.word	0x2000012c

080029b0 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <RunImpedanceControl+0x98>)
 80029b8:	617b      	str	r3, [r7, #20]
	float nomCurrent_amp = 8.0f;					// is this number accurate??
 80029ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80029be:	613b      	str	r3, [r7, #16]
	float torqueConst = 60 / (2*3.1416f * 100);		// Units in N*m/A, for Kv = 100 rpm/V
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <RunImpedanceControl+0x9c>)
 80029c2:	60fb      	str	r3, [r7, #12]

	float errorPos_deg = ProsCtrl.eqPoint_deg - CM_jointAngle_deg[0];
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <RunImpedanceControl+0xa0>)
 80029c6:	ed93 7a00 	vldr	s14, [r3]
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <RunImpedanceControl+0xa4>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d4:	edc7 7a02 	vstr	s15, [r7, #8]

	#ifdef KNEE
	CM_jointTorque_nm = -(ProsCtrl.kp*errorPos_deg - ProsCtrl.kd*CM_jointSpeed_dps);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <RunImpedanceControl+0xa0>)
 80029da:	ed93 7a02 	vldr	s14, [r3, #8]
 80029de:	edd7 7a02 	vldr	s15, [r7, #8]
 80029e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <RunImpedanceControl+0xa0>)
 80029e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <RunImpedanceControl+0xa8>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fa:	eef1 7a67 	vneg.f32	s15, s15
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <RunImpedanceControl+0xac>)
 8002a00:	edc3 7a00 	vstr	s15, [r3]
	#else
	CM_jointTorque_nm = ProsCtrl.kp*errorPos_deg - ProsCtrl.kd*CM_jointSpeed_dps;
	#endif

	int32_t motorTorque = CM_jointTorque_nm / (torqueConst * gearRatio * nomCurrent_amp) * 1000;
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <RunImpedanceControl+0xac>)
 8002a06:	edd3 6a00 	vldr	s13, [r3]
 8002a0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a22:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a60 <RunImpedanceControl+0xb0>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2e:	ee17 3a90 	vmov	r3, s15
 8002a32:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque(CAN_ID, motorTorque);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <RunImpedanceControl+0xb4>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fe2e 	bl	800369c <EPOS4_SetTorque>
}
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	42200000 	.word	0x42200000
 8002a4c:	3dc391b3 	.word	0x3dc391b3
 8002a50:	200000a0 	.word	0x200000a0
 8002a54:	200000f0 	.word	0x200000f0
 8002a58:	200000f8 	.word	0x200000f8
 8002a5c:	200000fc 	.word	0x200000fc
 8002a60:	447a0000 	.word	0x447a0000
 8002a64:	20000000 	.word	0x20000000

08002a68 <RunTestProgram>:

static void RunTestProgram(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
	switch (testProgram)
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <RunTestProgram+0xf8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d870      	bhi.n	8002b58 <RunTestProgram+0xf0>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <RunTestProgram+0x14>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002b57 	.word	0x08002b57
 8002a80:	08002b57 	.word	0x08002b57
 8002a84:	08002a91 	.word	0x08002a91
 8002a88:	08002aa3 	.word	0x08002aa3
 8002a8c:	08002adb 	.word	0x08002adb
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 100;
 8002a90:	2364      	movs	r3, #100	; 0x64
 8002a92:	607b      	str	r3, [r7, #4]
		EPOS4_SetTorque(CAN_ID, torque);
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <RunTestProgram+0xfc>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fdfe 	bl	800369c <EPOS4_SetTorque>
		break;
 8002aa0:	e05a      	b.n	8002b58 <RunTestProgram+0xf0>
	}
	case MagneticEncoderBias:
	{
		uint16_t i;

		uint32_t sum = 0.0f;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < 1000; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	83fb      	strh	r3, [r7, #30]
 8002aaa:	e00a      	b.n	8002ac2 <RunTestProgram+0x5a>
		{
			uint16_t bias_raw = AS5145B_ReadPosition_Raw();
 8002aac:	f000 fd46 	bl	800353c <AS5145B_ReadPosition_Raw>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	817b      	strh	r3, [r7, #10]
			sum += bias_raw;
 8002ab4:	897b      	ldrh	r3, [r7, #10]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < 1000; i++)
 8002abc:	8bfb      	ldrh	r3, [r7, #30]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	83fb      	strh	r3, [r7, #30]
 8002ac2:	8bfb      	ldrh	r3, [r7, #30]
 8002ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac8:	d3f0      	bcc.n	8002aac <RunTestProgram+0x44>
		}

		CM_magEncBias_raw = sum / i;
 8002aca:	8bfb      	ldrh	r3, [r7, #30]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <RunTestProgram+0x100>)
 8002ad6:	801a      	strh	r2, [r3, #0]

		break;
 8002ad8:	e03e      	b.n	8002b58 <RunTestProgram+0xf0>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <RunTestProgram+0x104>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02a      	beq.n	8002b38 <RunTestProgram+0xd0>
		{
			uint16_t i;
			float sum = 0.0f;
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]

			for(i = 0; i < 1000; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	82fb      	strh	r3, [r7, #22]
 8002aec:	e00e      	b.n	8002b0c <RunTestProgram+0xa4>
			{
				float pos_deg = AS5145B_ReadPosition_Deg();
 8002aee:	f000 fd33 	bl	8003558 <AS5145B_ReadPosition_Deg>
 8002af2:	ed87 0a03 	vstr	s0, [r7, #12]
				sum += pos_deg;
 8002af6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 8002b06:	8afb      	ldrh	r3, [r7, #22]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	82fb      	strh	r3, [r7, #22]
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b12:	d3ec      	bcc.n	8002aee <RunTestProgram+0x86>
			}

			CM_ImpCtrl.eqPoint_deg = sum / i - encBias_deg;
 8002b14:	8afb      	ldrh	r3, [r7, #22]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <RunTestProgram+0x108>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <RunTestProgram+0x10c>)
 8002b32:	edc3 7a00 	vstr	s15, [r3]
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;

			RunImpedanceControl();
		}

		break;
 8002b36:	e00f      	b.n	8002b58 <RunTestProgram+0xf0>
			ProsCtrl.kd = CM_ImpCtrl.kd;
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <RunTestProgram+0x10c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <RunTestProgram+0x110>)
 8002b3e:	6053      	str	r3, [r2, #4]
			ProsCtrl.kp = CM_ImpCtrl.kp;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <RunTestProgram+0x10c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <RunTestProgram+0x110>)
 8002b46:	6093      	str	r3, [r2, #8]
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <RunTestProgram+0x10c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <RunTestProgram+0x110>)
 8002b4e:	6013      	str	r3, [r2, #0]
			RunImpedanceControl();
 8002b50:	f7ff ff2e 	bl	80029b0 <RunImpedanceControl>
		break;
 8002b54:	e000      	b.n	8002b58 <RunTestProgram+0xf0>
		break;
 8002b56:	bf00      	nop
	}
	}
}
 8002b58:	bf00      	nop
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000009d 	.word	0x2000009d
 8002b64:	20000000 	.word	0x20000000
 8002b68:	200001f8 	.word	0x200001f8
 8002b6c:	20000008 	.word	0x20000008
 8002b70:	2000000c 	.word	0x2000000c
 8002b74:	20000108 	.word	0x20000108
 8002b78:	200000a0 	.word	0x200000a0

08002b7c <IMU_Orientation>:
/*******************************************************************************
* Should move to IMU driver??
*******************************************************************************/

void IMU_Orientation(void)
{
 8002b7c:	b4f0      	push	{r4, r5, r6, r7}
 8002b7e:	b09c      	sub	sp, #112	; 0x70
 8002b80:	af00      	add	r7, sp, #0
	double gyro[3];

	#ifdef RIGHT
	int8_t orientation[3] = {1, 2, 3};
	#else
	int8_t orientation[3] = {-1, 2, -3};
 8002b82:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <IMU_Orientation+0x234>)
 8002b84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b88:	681e      	ldr	r6, [r3, #0]
 8002b8a:	4633      	mov	r3, r6
 8002b8c:	8013      	strh	r3, [r2, #0]
 8002b8e:	3202      	adds	r2, #2
 8002b90:	0c33      	lsrs	r3, r6, #16
 8002b92:	7013      	strb	r3, [r2, #0]
	#endif

	if(orientation[0] > 0)
 8002b94:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dd1c      	ble.n	8002bd6 <IMU_Orientation+0x5a>
	{
		accel[orientation[0]-1] = IMUData.ax;
 8002b9c:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002ba0:	1e59      	subs	r1, r3, #1
 8002ba2:	4b84      	ldr	r3, [pc, #528]	; (8002db4 <IMU_Orientation+0x238>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	00c9      	lsls	r1, r1, #3
 8002baa:	3150      	adds	r1, #80	; 0x50
 8002bac:	f107 0020 	add.w	r0, r7, #32
 8002bb0:	4401      	add	r1, r0
 8002bb2:	3930      	subs	r1, #48	; 0x30
 8002bb4:	e9c1 2300 	strd	r2, r3, [r1]
		gyro[orientation[0]-1] = IMUData.gx;
 8002bb8:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002bbc:	1e59      	subs	r1, r3, #1
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <IMU_Orientation+0x238>)
 8002bc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bc4:	00c9      	lsls	r1, r1, #3
 8002bc6:	3150      	adds	r1, #80	; 0x50
 8002bc8:	f107 0020 	add.w	r0, r7, #32
 8002bcc:	4401      	add	r1, r0
 8002bce:	3948      	subs	r1, #72	; 0x48
 8002bd0:	e9c1 2300 	strd	r2, r3, [r1]
 8002bd4:	e02b      	b.n	8002c2e <IMU_Orientation+0xb2>
	}
	else
	{
		double tmp = IMUData.ax;
 8002bd6:	4b77      	ldr	r3, [pc, #476]	; (8002db4 <IMU_Orientation+0x238>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		accel[-orientation[0]-1] = -tmp;
 8002be0:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002be4:	43db      	mvns	r3, r3
 8002be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002be8:	61ba      	str	r2, [r7, #24]
 8002bea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bec:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8002bf0:	61fa      	str	r2, [r7, #28]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	f107 0220 	add.w	r2, r7, #32
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b30      	subs	r3, #48	; 0x30
 8002bfe:	ed97 7b06 	vldr	d7, [r7, #24]
 8002c02:	ed83 7b00 	vstr	d7, [r3]

		tmp = IMUData.gx;
 8002c06:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <IMU_Orientation+0x238>)
 8002c08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c0c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		gyro[-orientation[0]-1] = -tmp;
 8002c10:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002c14:	43db      	mvns	r3, r3
 8002c16:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c1a:	f082 4100 	eor.w	r1, r2, #2147483648	; 0x80000000
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3350      	adds	r3, #80	; 0x50
 8002c22:	f107 0220 	add.w	r2, r7, #32
 8002c26:	4413      	add	r3, r2
 8002c28:	3b48      	subs	r3, #72	; 0x48
 8002c2a:	e9c3 0100 	strd	r0, r1, [r3]
	}

	if(orientation[1] > 0)
 8002c2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dd1c      	ble.n	8002c70 <IMU_Orientation+0xf4>
	{
		accel[orientation[1]-1] = IMUData.ay;
 8002c36:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002c3a:	1e59      	subs	r1, r3, #1
 8002c3c:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <IMU_Orientation+0x238>)
 8002c3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c42:	00c9      	lsls	r1, r1, #3
 8002c44:	3150      	adds	r1, #80	; 0x50
 8002c46:	f107 0020 	add.w	r0, r7, #32
 8002c4a:	4401      	add	r1, r0
 8002c4c:	3930      	subs	r1, #48	; 0x30
 8002c4e:	e9c1 2300 	strd	r2, r3, [r1]
		gyro[orientation[1]-1] = IMUData.gy;
 8002c52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002c56:	1e59      	subs	r1, r3, #1
 8002c58:	4b56      	ldr	r3, [pc, #344]	; (8002db4 <IMU_Orientation+0x238>)
 8002c5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c5e:	00c9      	lsls	r1, r1, #3
 8002c60:	3150      	adds	r1, #80	; 0x50
 8002c62:	f107 0020 	add.w	r0, r7, #32
 8002c66:	4401      	add	r1, r0
 8002c68:	3948      	subs	r1, #72	; 0x48
 8002c6a:	e9c1 2300 	strd	r2, r3, [r1]
 8002c6e:	e02f      	b.n	8002cd0 <IMU_Orientation+0x154>
	}
	else
	{
		double tmp = IMUData.ay;
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <IMU_Orientation+0x238>)
 8002c72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c76:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		accel[-orientation[1]-1] = -tmp;
 8002c7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c82:	613a      	str	r2, [r7, #16]
 8002c84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c86:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8002c8a:	617a      	str	r2, [r7, #20]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	f107 0220 	add.w	r2, r7, #32
 8002c94:	4413      	add	r3, r2
 8002c96:	3b30      	subs	r3, #48	; 0x30
 8002c98:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c9c:	ed83 7b00 	vstr	d7, [r3]

		tmp = IMUData.gy;
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <IMU_Orientation+0x238>)
 8002ca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ca6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gyro[-orientation[1]-1] = -tmp;
 8002caa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cb2:	60ba      	str	r2, [r7, #8]
 8002cb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002cb6:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	f107 0220 	add.w	r2, r7, #32
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3b48      	subs	r3, #72	; 0x48
 8002cc8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ccc:	ed83 7b00 	vstr	d7, [r3]
	}

	if(orientation[2] > 0)
 8002cd0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dd1c      	ble.n	8002d12 <IMU_Orientation+0x196>
	{
		accel[orientation[2]-1] = IMUData.az;
 8002cd8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <IMU_Orientation+0x238>)
 8002ce0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ce4:	00c9      	lsls	r1, r1, #3
 8002ce6:	3150      	adds	r1, #80	; 0x50
 8002ce8:	f107 0020 	add.w	r0, r7, #32
 8002cec:	4401      	add	r1, r0
 8002cee:	3930      	subs	r1, #48	; 0x30
 8002cf0:	e9c1 2300 	strd	r2, r3, [r1]
		gyro[orientation[2]-1] = IMUData.gz;
 8002cf4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002cf8:	1e59      	subs	r1, r3, #1
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <IMU_Orientation+0x238>)
 8002cfc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d00:	00c9      	lsls	r1, r1, #3
 8002d02:	3150      	adds	r1, #80	; 0x50
 8002d04:	f107 0020 	add.w	r0, r7, #32
 8002d08:	4401      	add	r1, r0
 8002d0a:	3948      	subs	r1, #72	; 0x48
 8002d0c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d10:	e02b      	b.n	8002d6a <IMU_Orientation+0x1ee>
	}
	else
	{
		double tmp = IMUData.az;
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <IMU_Orientation+0x238>)
 8002d14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d18:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		accel[-orientation[2]-1] = -tmp;
 8002d1c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002d20:	43db      	mvns	r3, r3
 8002d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d24:	603a      	str	r2, [r7, #0]
 8002d26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d28:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3350      	adds	r3, #80	; 0x50
 8002d32:	f107 0220 	add.w	r2, r7, #32
 8002d36:	4413      	add	r3, r2
 8002d38:	3b30      	subs	r3, #48	; 0x30
 8002d3a:	ed97 7b00 	vldr	d7, [r7]
 8002d3e:	ed83 7b00 	vstr	d7, [r3]

		tmp = IMUData.gz;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <IMU_Orientation+0x238>)
 8002d44:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d48:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gyro[-orientation[2]-1] = -tmp;
 8002d4c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002d50:	43db      	mvns	r3, r3
 8002d52:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d56:	f082 4500 	eor.w	r5, r2, #2147483648	; 0x80000000
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	3350      	adds	r3, #80	; 0x50
 8002d5e:	f107 0220 	add.w	r2, r7, #32
 8002d62:	4413      	add	r3, r2
 8002d64:	3b48      	subs	r3, #72	; 0x48
 8002d66:	e9c3 4500 	strd	r4, r5, [r3]
	}

	IMUData.ax = accel[0];
 8002d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d6e:	4911      	ldr	r1, [pc, #68]	; (8002db4 <IMU_Orientation+0x238>)
 8002d70:	e9c1 2300 	strd	r2, r3, [r1]
	IMUData.ay = accel[1];
 8002d74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d78:	490e      	ldr	r1, [pc, #56]	; (8002db4 <IMU_Orientation+0x238>)
 8002d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	IMUData.az = accel[2];
 8002d7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d82:	490c      	ldr	r1, [pc, #48]	; (8002db4 <IMU_Orientation+0x238>)
 8002d84:	e9c1 2304 	strd	r2, r3, [r1, #16]
	IMUData.gx = gyro[0];
 8002d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d8c:	4909      	ldr	r1, [pc, #36]	; (8002db4 <IMU_Orientation+0x238>)
 8002d8e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	IMUData.gy = gyro[1];
 8002d92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d96:	4907      	ldr	r1, [pc, #28]	; (8002db4 <IMU_Orientation+0x238>)
 8002d98:	e9c1 2308 	strd	r2, r3, [r1, #32]
	IMUData.gz = gyro[2];
 8002d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002da0:	4904      	ldr	r1, [pc, #16]	; (8002db4 <IMU_Orientation+0x238>)
 8002da2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002da6:	bf00      	nop
 8002da8:	3770      	adds	r7, #112	; 0x70
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bcf0      	pop	{r4, r5, r6, r7}
 8002dae:	4770      	bx	lr
 8002db0:	080068f0 	.word	0x080068f0
 8002db4:	200000b0 	.word	0x200000b0

08002db8 <LL_AHB2_GRP1_EnableClock>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000

08002de8 <LL_APB1_GRP1_EnableClock>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002df2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40021000 	.word	0x40021000

08002e18 <LL_APB2_GRP1_EnableClock>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002e2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40021000 	.word	0x40021000

08002e48 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f023 0210 	bic.w	r2, r3, #16
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 0208 	bic.w	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	605a      	str	r2, [r3, #4]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	; 0x40
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002e96:	f107 0318 	add.w	r3, r7, #24
 8002e9a:	2228      	movs	r2, #40	; 0x28
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fc22 	bl	80056e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]
 8002eb2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002eb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002eb8:	f7ff ffae 	bl	8002e18 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7ff ff7b 	bl	8002db8 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002ec2:	23e0      	movs	r3, #224	; 0xe0
 8002ec4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	463b      	mov	r3, r7
 8002edc:	4619      	mov	r1, r3
 8002ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee2:	f001 fdc3 	bl	8004a6c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002eea:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002eee:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002ef0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ef4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002f04:	2308      	movs	r3, #8
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002f10:	2307      	movs	r3, #7
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <MX_SPI1_Init+0xa8>)
 8002f1c:	f002 fa0e 	bl	800533c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002f20:	2100      	movs	r1, #0
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_SPI1_Init+0xa8>)
 8002f24:	f7ff ff90 	bl	8002e48 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <MX_SPI1_Init+0xa8>)
 8002f2a:	f7ff ffa0 	bl	8002e6e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	3740      	adds	r7, #64	; 0x40
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40013000 	.word	0x40013000

08002f3c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b090      	sub	sp, #64	; 0x40
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002f42:	f107 0318 	add.w	r3, r7, #24
 8002f46:	2228      	movs	r2, #40	; 0x28
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fbcc 	bl	80056e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	463b      	mov	r3, r7
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002f60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f64:	f7ff ff40 	bl	8002de8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f7ff ff25 	bl	8002db8 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 8002f6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f74:	2302      	movs	r3, #2
 8002f76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002f84:	2305      	movs	r3, #5
 8002f86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <MX_SPI2_Init+0xa8>)
 8002f8e:	f001 fd6d 	bl	8004a6c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002f96:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002f9a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002f9c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fa0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002fbc:	2307      	movs	r3, #7
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002fc0:	f107 0318 	add.w	r3, r7, #24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <MX_SPI2_Init+0xac>)
 8002fc8:	f002 f9b8 	bl	800533c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <MX_SPI2_Init+0xac>)
 8002fd0:	f7ff ff3a 	bl	8002e48 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8002fd4:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MX_SPI2_Init+0xac>)
 8002fd6:	f7ff ff4a 	bl	8002e6e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fda:	bf00      	nop
 8002fdc:	3740      	adds	r7, #64	; 0x40
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	40003800 	.word	0x40003800

08002fec <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f043 0202 	orr.w	r2, r3, #2
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_LPTIM_IsActiveFlag_ARRM>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d101      	bne.n	8003024 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <NMI_Handler+0x4>

08003038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <HardFault_Handler+0x4>

0800303e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <MemManage_Handler+0x4>

08003044 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <BusFault_Handler+0x4>

0800304a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <UsageFault_Handler+0x4>

08003050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler
******************************************************************************/

	systick_app_timer_tickAndProcess();
 800307e:	f000 f829 	bl	80030d4 <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <LPTIM2_IRQHandler+0x20>)
 800308e:	f7ff ffbd 	bl	800300c <LL_LPTIM_IsActiveFlag_ARRM>
 8003092:	4603      	mov	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <LPTIM2_IRQHandler+0x24>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <LPTIM2_IRQHandler+0x20>)
 80030a0:	f7ff ffa4 	bl	8002fec <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40009400 	.word	0x40009400
 80030ac:	2000009c 	.word	0x2000009c

080030b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <SystemInit+0x20>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <SystemInit+0x20>)
 80030bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	e050      	b.n	8003182 <systick_app_timer_tickAndProcess+0xae>
			// quick null check, for sanity
			if (appTimer.channel[i].timer != 0) {
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d046      	beq.n	800317c <systick_app_timer_tickAndProcess+0xa8>
				if (appTimer.channel[i].active) {
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 80030f2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d040      	beq.n	800317c <systick_app_timer_tickAndProcess+0xa8>
					appTimer.channel[i].timer->value++;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	3201      	adds	r2, #1
 8003108:	605a      	str	r2, [r3, #4]
					// if the timer alarm has been set above 0, then there is something to process
					if (appTimer.channel[i].timer->alarm > 0) {
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4a21      	ldr	r2, [pc, #132]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d030      	beq.n	800317c <systick_app_timer_tickAndProcess+0xa8>
						// if value meets or exceeds alarm value, process the timer
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	491a      	ldr	r1, [pc, #104]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	429a      	cmp	r2, r3
 8003134:	d322      	bcc.n	800317c <systick_app_timer_tickAndProcess+0xa8>
							// if timer has a callback, call it and then reset the value
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <systick_app_timer_tickAndProcess+0x8e>
								appTimer.channel[i].timer->timerAlarmCallback();
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	7a1b      	ldrb	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d104      	bne.n	800317c <systick_app_timer_tickAndProcess+0xa8>
								appTimer.channel[i].active = false;
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4a07      	ldr	r2, [pc, #28]	; (8003194 <systick_app_timer_tickAndProcess+0xc0>)
 8003176:	2100      	movs	r1, #0
 8003178:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	3301      	adds	r3, #1
 8003180:	71fb      	strb	r3, [r7, #7]
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d9ab      	bls.n	80030e0 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000214 	.word	0x20000214

08003198 <LL_RCC_SetUSARTClockSource>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80031a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	43db      	mvns	r3, r3
 80031ac:	401a      	ands	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4905      	ldr	r1, [pc, #20]	; (80031c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000

080031cc <LL_AHB2_GRP1_EnableClock>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031d8:	4907      	ldr	r1, [pc, #28]	; (80031f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4313      	orrs	r3, r2
 80031de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80031e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40021000 	.word	0x40021000

080031fc <LL_APB1_GRP1_EnableClock>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003206:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003208:	4907      	ldr	r1, [pc, #28]	; (8003228 <LL_APB1_GRP1_EnableClock+0x2c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4313      	orrs	r3, r2
 800320e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4013      	ands	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000

0800322c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800327e:	f107 031c 	add.w	r3, r7, #28
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80032a2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80032a6:	f7ff ff77 	bl	8003198 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80032aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032ae:	f7ff ffa5 	bl	80031fc <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff ff8a 	bl	80031cc <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032b8:	230c      	movs	r3, #12
 80032ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032bc:	2302      	movs	r3, #2
 80032be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80032cc:	2307      	movs	r3, #7
 80032ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d8:	f001 fbc8 	bl	8004a6c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80032dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80032e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80032ee:	230c      	movs	r3, #12
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80032f6:	2300      	movs	r3, #0
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4619      	mov	r1, r3
 8003300:	4806      	ldr	r0, [pc, #24]	; (800331c <MX_USART2_UART_Init+0xa4>)
 8003302:	f002 f8e3 	bl	80054cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003306:	4805      	ldr	r0, [pc, #20]	; (800331c <MX_USART2_UART_Init+0xa4>)
 8003308:	f7ff ffa0 	bl	800324c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <MX_USART2_UART_Init+0xa4>)
 800330e:	f7ff ff8d 	bl	800322c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	3738      	adds	r7, #56	; 0x38
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40004400 	.word	0x40004400

08003320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003358 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003324:	f7ff fec4 	bl	80030b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003328:	480c      	ldr	r0, [pc, #48]	; (800335c <LoopForever+0x6>)
  ldr r1, =_edata
 800332a:	490d      	ldr	r1, [pc, #52]	; (8003360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <LoopForever+0xe>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003330:	e002      	b.n	8003338 <LoopCopyDataInit>

08003332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003336:	3304      	adds	r3, #4

08003338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800333c:	d3f9      	bcc.n	8003332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003340:	4c0a      	ldr	r4, [pc, #40]	; (800336c <LoopForever+0x16>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003344:	e001      	b.n	800334a <LoopFillZerobss>

08003346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003348:	3204      	adds	r2, #4

0800334a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800334c:	d3fb      	bcc.n	8003346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800334e:	f002 f999 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003352:	f7fe fb31 	bl	80019b8 <main>

08003356 <LoopForever>:

LoopForever:
    b LoopForever
 8003356:	e7fe      	b.n	8003356 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003358:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800335c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003360:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003364:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 8003368:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800336c:	20000500 	.word	0x20000500

08003370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003370:	e7fe      	b.n	8003370 <ADC1_2_IRQHandler>

08003372 <LL_GPIO_IsInputPinSet>:
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4013      	ands	r3, r2
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d101      	bne.n	800338e <LL_GPIO_IsInputPinSet+0x1c>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_GPIO_IsInputPinSet+0x1e>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_GPIO_SetOutputPin>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	619a      	str	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_GPIO_ResetOutputPin>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(AS5145B_Init_t *AS5145B_Init)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 80033dc:	2214      	movs	r2, #20
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <AS5145B_Init+0x3c>)
 80033e2:	f002 f973 	bl	80056cc <memcpy>

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);		// Chip select pin initially high (Figure 13 in DS)
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <AS5145B_Init+0x3c>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <AS5145B_Init+0x3c>)
 80033ec:	8a12      	ldrh	r2, [r2, #16]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ffd3 	bl	800339c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);		// Clock pin initially high (Figure 13 in DS)
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <AS5145B_Init+0x3c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <AS5145B_Init+0x3c>)
 80033fc:	89d2      	ldrh	r2, [r2, #14]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffcb 	bl	800339c <LL_GPIO_SetOutputPin>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000268 	.word	0x20000268

08003414 <AS5145B_ReadData>:

struct AS5145B_Data_s AS5145B_ReadData(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data;

	data.pos_raw = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	80bb      	strh	r3, [r7, #4]
	data.status = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003422:	4b45      	ldr	r3, [pc, #276]	; (8003538 <AS5145B_ReadData+0x124>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4a44      	ldr	r2, [pc, #272]	; (8003538 <AS5145B_ReadData+0x124>)
 8003428:	8a12      	ldrh	r2, [r2, #16]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ffc3 	bl	80033b8 <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 8003432:	f000 f8b3 	bl	800359c <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for(int i = 12-1; i >= 0; i--)
 8003436:	230b      	movs	r3, #11
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e02d      	b.n	8003498 <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <AS5145B_ReadData+0x124>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a3d      	ldr	r2, [pc, #244]	; (8003538 <AS5145B_ReadData+0x124>)
 8003442:	89d2      	ldrh	r2, [r2, #14]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ffb6 	bl	80033b8 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 800344c:	f000 f8a6 	bl	800359c <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <AS5145B_ReadData+0x124>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a38      	ldr	r2, [pc, #224]	; (8003538 <AS5145B_ReadData+0x124>)
 8003456:	89d2      	ldrh	r2, [r2, #14]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff9e 	bl	800339c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003460:	f000 f89c 	bl	800359c <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <AS5145B_ReadData+0x124>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a33      	ldr	r2, [pc, #204]	; (8003538 <AS5145B_ReadData+0x124>)
 800346a:	8992      	ldrh	r2, [r2, #12]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff7f 	bl	8003372 <LL_GPIO_IsInputPinSet>
 8003474:	4603      	mov	r3, r0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	73bb      	strb	r3, [r7, #14]
		data.pos_raw |= (temp) << i;
 800347e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003482:	7bb9      	ldrb	r1, [r7, #14]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	b21b      	sxth	r3, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	b21b      	sxth	r3, r3
 8003490:	80bb      	strh	r3, [r7, #4]
	for(int i = 12-1; i >= 0; i--)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	3b01      	subs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dace      	bge.n	800343c <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 800349e:	2305      	movs	r3, #5
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e02e      	b.n	8003502 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <AS5145B_ReadData+0x124>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <AS5145B_ReadData+0x124>)
 80034aa:	89d2      	ldrh	r2, [r2, #14]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff82 	bl	80033b8 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80034b4:	f000 f872 	bl	800359c <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <AS5145B_ReadData+0x124>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <AS5145B_ReadData+0x124>)
 80034be:	89d2      	ldrh	r2, [r2, #14]
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff6a 	bl	800339c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80034c8:	f000 f868 	bl	800359c <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <AS5145B_ReadData+0x124>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a19      	ldr	r2, [pc, #100]	; (8003538 <AS5145B_ReadData+0x124>)
 80034d2:	8992      	ldrh	r2, [r2, #12]
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff4b 	bl	8003372 <LL_GPIO_IsInputPinSet>
 80034dc:	4603      	mov	r3, r0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	b25a      	sxtb	r2, r3
 80034ea:	7bf9      	ldrb	r1, [r7, #15]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	71bb      	strb	r3, [r7, #6]
	for(int i = 6-1; i >= 0; i--)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	3b01      	subs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	dacd      	bge.n	80034a4 <AS5145B_ReadData+0x90>
	}

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <AS5145B_ReadData+0x124>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <AS5145B_ReadData+0x124>)
 800350e:	8a12      	ldrh	r2, [r2, #16]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff42 	bl	800339c <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 8003518:	f000 f840 	bl	800359c <AS5145B_Delay_500ns>

	return data;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	2300      	movs	r3, #0
 8003522:	893a      	ldrh	r2, [r7, #8]
 8003524:	f362 030f 	bfi	r3, r2, #0, #16
 8003528:	897a      	ldrh	r2, [r7, #10]
 800352a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000268 	.word	0x20000268

0800353c <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data = AS5145B_ReadData();
 8003542:	f7ff ff67 	bl	8003414 <AS5145B_ReadData>
 8003546:	4603      	mov	r3, r0
 8003548:	607b      	str	r3, [r7, #4]
	return data.pos_raw;
 800354a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800354e:	b29b      	uxth	r3, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <AS5145B_ReadPosition_Deg>:

float AS5145B_ReadPosition_Deg(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
	uint16_t pos_raw = AS5145B_ReadPosition_Raw();
 800355e:	f7ff ffed 	bl	800353c <AS5145B_ReadPosition_Raw>
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
	float pos_deg = (float) pos_raw * AS5145B_RAW2DEG;
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003594 <AS5145B_ReadPosition_Deg+0x3c>
 8003574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003578:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003598 <AS5145B_ReadPosition_Deg+0x40>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	edc7 7a00 	vstr	s15, [r7]
	return pos_deg;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	ee07 3a90 	vmov	s15, r3
}
 800358a:	eeb0 0a67 	vmov.f32	s0, s15
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	43b40000 	.word	0x43b40000
 8003598:	45800000 	.word	0x45800000

0800359c <AS5145B_Delay_500ns>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// See NOTES at the top of this file for more information
static void AS5145B_Delay_500ns(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	71fb      	strb	r3, [r7, #7]
 80035a6:	e00c      	b.n	80035c2 <AS5145B_Delay_500ns+0x26>
	{
		for(uint8_t j = 0; j < 3; j++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	71bb      	strb	r3, [r7, #6]
 80035ac:	e003      	b.n	80035b6 <AS5145B_Delay_500ns+0x1a>
			__NOP();
 80035ae:	bf00      	nop
		for(uint8_t j = 0; j < 3; j++)
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	3301      	adds	r3, #1
 80035b4:	71bb      	strb	r3, [r7, #6]
 80035b6:	79bb      	ldrb	r3, [r7, #6]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d9f8      	bls.n	80035ae <AS5145B_Delay_500ns+0x12>
	for(uint8_t i = 0; i < 2; i++)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	3301      	adds	r3, #1
 80035c0:	71fb      	strb	r3, [r7, #7]
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d9ef      	bls.n	80035a8 <AS5145B_Delay_500ns+0xc>
	}
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80035e0:	f107 0008 	add.w	r0, r7, #8
 80035e4:	2306      	movs	r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	f246 0140 	movw	r1, #24640	; 0x6040
 80035ec:	f000 f872 	bl	80036d4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80035f0:	f107 0208 	add.w	r2, r7, #8
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	2108      	movs	r1, #8
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fa76 	bl	8003aea <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80035fe:	200a      	movs	r0, #10
 8003600:	f002 f808 	bl	8005614 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8003604:	f107 0008 	add.w	r0, r7, #8
 8003608:	230f      	movs	r3, #15
 800360a:	2200      	movs	r2, #0
 800360c:	f246 0140 	movw	r1, #24640	; 0x6040
 8003610:	f000 f860 	bl	80036d4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003614:	f107 0208 	add.w	r2, r7, #8
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2108      	movs	r1, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa64 	bl	8003aea <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003622:	200a      	movs	r0, #10
 8003624:	f001 fff6 	bl	8005614 <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 8003628:	f107 0008 	add.w	r0, r7, #8
 800362c:	230a      	movs	r3, #10
 800362e:	2200      	movs	r2, #0
 8003630:	f246 0160 	movw	r1, #24672	; 0x6060
 8003634:	f000 f84e 	bl	80036d4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003638:	f107 0208 	add.w	r2, r7, #8
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2108      	movs	r1, #8
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fa52 	bl	8003aea <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003646:	200a      	movs	r0, #10
 8003648:	f001 ffe4 	bl	8005614 <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 800364c:	f107 0008 	add.w	r0, r7, #8
 8003650:	2306      	movs	r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	f246 0140 	movw	r1, #24640	; 0x6040
 8003658:	f000 f83c 	bl	80036d4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 800365c:	f107 0208 	add.w	r2, r7, #8
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2108      	movs	r1, #8
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fa40 	bl	8003aea <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800366a:	200a      	movs	r0, #10
 800366c:	f001 ffd2 	bl	8005614 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8003670:	f107 0008 	add.w	r0, r7, #8
 8003674:	230f      	movs	r3, #15
 8003676:	2200      	movs	r2, #0
 8003678:	f246 0140 	movw	r1, #24640	; 0x6040
 800367c:	f000 f82a 	bl	80036d4 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003680:	f107 0208 	add.w	r2, r7, #8
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	2108      	movs	r1, #8
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fa2e 	bl	8003aea <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800368e:	200a      	movs	r0, #10
 8003690:	f001 ffc0 	bl	8005614 <LL_mDelay>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// For example, 100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f107 0008 	add.w	r0, r7, #8
 80036ae:	2200      	movs	r2, #0
 80036b0:	f246 0171 	movw	r1, #24689	; 0x6071
 80036b4:	f000 f80e 	bl	80036d4 <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 80036b8:	f107 0208 	add.w	r2, r7, #8
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2108      	movs	r1, #8
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fa12 	bl	8003aea <CAN_transmit>
    EPOS4_usDelay(50);				// Can we do better??
 80036c6:	2032      	movs	r0, #50	; 0x32
 80036c8:	f000 f83d 	bl	8003746 <EPOS4_usDelay>
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <EPOS4_DataFramer>:
    CAN_transmit(CAN_ID, 8, data);
    EPOS4_usDelay(1500);			// Can we do better??
}

void EPOS4_DataFramer(uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	4613      	mov	r3, r2
 80036e4:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2222      	movs	r2, #34	; 0x22
 80036ea:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	897a      	ldrh	r2, [r7, #10]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3302      	adds	r3, #2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3303      	adds	r3, #3
 8003708:	7a7a      	ldrb	r2, [r7, #9]
 800370a:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3304      	adds	r3, #4
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0a1a      	lsrs	r2, r3, #8
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3305      	adds	r3, #5
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0c1a      	lsrs	r2, r3, #16
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3306      	adds	r3, #6
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0e1a      	lsrs	r2, r3, #24
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3307      	adds	r3, #7
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <EPOS4_usDelay>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// Can we lose this??
void EPOS4_usDelay(uint32_t us)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k = 0 ; k < us; k++)
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	e00c      	b.n	800376e <EPOS4_usDelay+0x28>
    {
    	for(i = 0; i < 11; i++)
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e003      	b.n	8003762 <EPOS4_usDelay+0x1c>
         __NOP();
 800375a:	bf00      	nop
    	for(i = 0; i < 11; i++)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b0a      	cmp	r3, #10
 8003766:	d9f8      	bls.n	800375a <EPOS4_usDelay+0x14>
    for(k = 0 ; k < us; k++)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3301      	adds	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d3ee      	bcc.n	8003754 <EPOS4_usDelay+0xe>
    }
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	330c      	adds	r3, #12
 8003794:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_GPIO_SetOutputPin>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	619a      	str	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_GPIO_ResetOutputPin>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 80037e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <clearChipSelect+0x14>)
 80037ea:	f7ff ffdd 	bl	80037a8 <LL_GPIO_SetOutputPin>
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	48000400 	.word	0x48000400

080037f8 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 80037fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <setChipSelect+0x14>)
 8003802:	f7ff ffdf 	bl	80037c4 <LL_GPIO_ResetOutputPin>
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	48000400 	.word	0x48000400

08003810 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8003816:	f7ff ffef 	bl	80037f8 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 800381a:	21c0      	movs	r1, #192	; 0xc0
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <mcp25625_reset+0x44>)
 800381e:	f7ff ffb1 	bl	8003784 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8003822:	bf00      	nop
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <mcp25625_reset+0x44>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8003830:	f7ff ffd6 	bl	80037e0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003834:	e002      	b.n	800383c <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <mcp25625_reset+0x44>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <mcp25625_reset+0x44>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f6      	bne.n	8003836 <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40003800 	.word	0x40003800

08003858 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	460a      	mov	r2, r1
 8003862:	71fb      	strb	r3, [r7, #7]
 8003864:	4613      	mov	r3, r2
 8003866:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 8003868:	f7ff ffc6 	bl	80037f8 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 800386c:	2102      	movs	r1, #2
 800386e:	4816      	ldr	r0, [pc, #88]	; (80038c8 <mcp25625_writeRegister+0x70>)
 8003870:	f7ff ff88 	bl	8003784 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	4619      	mov	r1, r3
 8003878:	4813      	ldr	r0, [pc, #76]	; (80038c8 <mcp25625_writeRegister+0x70>)
 800387a:	f7ff ff83 	bl	8003784 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 800387e:	79bb      	ldrb	r3, [r7, #6]
 8003880:	4619      	mov	r1, r3
 8003882:	4811      	ldr	r0, [pc, #68]	; (80038c8 <mcp25625_writeRegister+0x70>)
 8003884:	f7ff ff7e 	bl	8003784 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8003888:	bf00      	nop
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <mcp25625_writeRegister+0x70>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8003896:	bf00      	nop
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <mcp25625_writeRegister+0x70>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 80038a4:	f7ff ff9c 	bl	80037e0 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80038a8:	e002      	b.n	80038b0 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <mcp25625_writeRegister+0x70>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <mcp25625_writeRegister+0x70>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f6      	bne.n	80038aa <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40003800 	.word	0x40003800

080038cc <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 80038d6:	f7ff ff8f 	bl	80037f8 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 80038da:	2103      	movs	r1, #3
 80038dc:	4814      	ldr	r0, [pc, #80]	; (8003930 <mcp25625_readRegister+0x64>)
 80038de:	f7ff ff51 	bl	8003784 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4812      	ldr	r0, [pc, #72]	; (8003930 <mcp25625_readRegister+0x64>)
 80038e8:	f7ff ff4c 	bl	8003784 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 80038ec:	2100      	movs	r1, #0
 80038ee:	4810      	ldr	r0, [pc, #64]	; (8003930 <mcp25625_readRegister+0x64>)
 80038f0:	f7ff ff48 	bl	8003784 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80038f4:	bf00      	nop
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <mcp25625_readRegister+0x64>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f9      	bne.n	80038f6 <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8003902:	bf00      	nop
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <mcp25625_readRegister+0x64>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <mcp25625_readRegister+0x64>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <mcp25625_readRegister+0x64>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <mcp25625_readRegister+0x64>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();
 8003922:	f7ff ff5d 	bl	80037e0 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 8003926:	7bbb      	ldrb	r3, [r7, #14]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40003800 	.word	0x40003800

08003934 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	603a      	str	r2, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	460b      	mov	r3, r1
 8003942:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 8003944:	f7ff ff58 	bl	80037f8 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	4619      	mov	r1, r3
 800394c:	481d      	ldr	r0, [pc, #116]	; (80039c4 <mcp25625_loadTXB+0x90>)
 800394e:	f7ff ff19 	bl	8003784 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e011      	b.n	800397c <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 8003958:	bf00      	nop
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <mcp25625_loadTXB+0x90>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f9      	beq.n	800395a <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	4814      	ldr	r0, [pc, #80]	; (80039c4 <mcp25625_loadTXB+0x90>)
 8003972:	f7ff ff07 	bl	8003784 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	3301      	adds	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	79bb      	ldrb	r3, [r7, #6]
 8003980:	429a      	cmp	r2, r3
 8003982:	d3e9      	bcc.n	8003958 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 8003984:	bf00      	nop
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <mcp25625_loadTXB+0x90>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 8003992:	bf00      	nop
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <mcp25625_loadTXB+0x90>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 80039a0:	f7ff ff1e 	bl	80037e0 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 80039a4:	e002      	b.n	80039ac <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <mcp25625_loadTXB+0x90>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <mcp25625_loadTXB+0x90>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f6      	bne.n	80039a6 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40003800 	.word	0x40003800

080039c8 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 80039cc:	2030      	movs	r0, #48	; 0x30
 80039ce:	f7ff ff7d 	bl	80038cc <mcp25625_readRegister>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 80039dc:	2040      	movs	r0, #64	; 0x40
 80039de:	f7ff ff75 	bl	80038cc <mcp25625_readRegister>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 80039ec:	2050      	movs	r0, #80	; 0x50
 80039ee:	f7ff ff6d 	bl	80038cc <mcp25625_readRegister>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	210d      	movs	r1, #13
 8003a04:	2044      	movs	r0, #68	; 0x44
 8003a06:	f7ff ff95 	bl	8003934 <mcp25625_loadTXB>
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	210d      	movs	r1, #13
 8003a1e:	2042      	movs	r0, #66	; 0x42
 8003a20:	f7ff ff88 	bl	8003934 <mcp25625_loadTXB>
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	210d      	movs	r1, #13
 8003a38:	2040      	movs	r0, #64	; 0x40
 8003a3a:	f7ff ff7b 	bl	8003934 <mcp25625_loadTXB>
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8003a46:	b580      	push	{r7, lr}
 8003a48:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8003a4a:	210b      	movs	r1, #11
 8003a4c:	2050      	movs	r0, #80	; 0x50
 8003a4e:	f7ff ff03 	bl	8003858 <mcp25625_writeRegister>
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8003a56:	b580      	push	{r7, lr}
 8003a58:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8003a5a:	210b      	movs	r1, #11
 8003a5c:	2040      	movs	r0, #64	; 0x40
 8003a5e:	f7ff fefb 	bl	8003858 <mcp25625_writeRegister>
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8003a6a:	210b      	movs	r1, #11
 8003a6c:	2030      	movs	r0, #48	; 0x30
 8003a6e:	f7ff fef3 	bl	8003858 <mcp25625_writeRegister>
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8003a7e:	f7ff ffb3 	bl	80039e8 <getTXB2CTRL>
 8003a82:	4603      	mov	r3, r0
 8003a84:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8003a86:	7b3b      	ldrb	r3, [r7, #12]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ffaf 	bl	80039f8 <loadTXB2>
		setTXREQ2();
 8003a9a:	f7ff ffd4 	bl	8003a46 <setTXREQ2>
		return; // once txbuffer is loaded, return
 8003a9e:	e021      	b.n	8003ae4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8003aa0:	f7ff ff9a 	bl	80039d8 <getTXB1CTRL>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8003aa8:	7b3b      	ldrb	r3, [r7, #12]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ffab 	bl	8003a12 <loadTXB1>
		setTXREQ1();
 8003abc:	f7ff ffcb 	bl	8003a56 <setTXREQ1>
		return; //once tx buffer is loaded, return
 8003ac0:	e010      	b.n	8003ae4 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8003ac2:	f7ff ff81 	bl	80039c8 <getTXB0CTRL>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8003aca:	7b3b      	ldrb	r3, [r7, #12]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ffa7 	bl	8003a2c <loadTXB0>
		setTXREQ0();
 8003ade:	f7ff ffc2 	bl	8003a66 <setTXREQ0>
		return; // once tx buffer is loaded, return
 8003ae2:	bf00      	nop
	}
}
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	603a      	str	r2, [r7, #0]
 8003af4:	80fb      	strh	r3, [r7, #6]
 8003af6:	460b      	mov	r3, r1
 8003af8:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	220d      	movs	r2, #13
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fdf0 	bl	80056e8 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	015b      	lsls	r3, r3, #5
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8003b1a:	797b      	ldrb	r3, [r7, #5]
 8003b1c:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
 8003b22:	e00b      	b.n	8003b3c <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	441a      	add	r2, r3
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	443b      	add	r3, r7
 8003b32:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
 8003b3c:	7dfa      	ldrb	r2, [r7, #23]
 8003b3e:	797b      	ldrb	r3, [r7, #5]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d3ef      	bcc.n	8003b24 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff94 	bl	8003a76 <mcp25625_sendCAN>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <mcp25625_init>:

void mcp25625_init (void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8003b5c:	f240 2276 	movw	r2, #630	; 0x276
 8003b60:	2100      	movs	r1, #0
 8003b62:	4804      	ldr	r0, [pc, #16]	; (8003b74 <mcp25625_init+0x1c>)
 8003b64:	f001 fdc0 	bl	80056e8 <memset>
	clearChipSelect();
 8003b68:	f7ff fe3a 	bl	80037e0 <clearChipSelect>
	mcp25625_reset();
 8003b6c:	f7ff fe50 	bl	8003810 <mcp25625_reset>
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	2000027c 	.word	0x2000027c

08003b78 <CAN_configure>:

void CAN_configure()
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8003b7e:	23c0      	movs	r3, #192	; 0xc0
 8003b80:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8003b82:	2389      	movs	r3, #137	; 0x89
 8003b84:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8003b86:	2304      	movs	r3, #4
 8003b88:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8003b8e:	f7ff ffe3 	bl	8003b58 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 8003b92:	7b3b      	ldrb	r3, [r7, #12]
 8003b94:	4619      	mov	r1, r3
 8003b96:	202a      	movs	r0, #42	; 0x2a
 8003b98:	f7ff fe5e 	bl	8003858 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 8003b9c:	7a3b      	ldrb	r3, [r7, #8]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	2029      	movs	r0, #41	; 0x29
 8003ba2:	f7ff fe59 	bl	8003858 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 8003ba6:	793b      	ldrb	r3, [r7, #4]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	2028      	movs	r0, #40	; 0x28
 8003bac:	f7ff fe54 	bl	8003858 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 8003bb0:	783b      	ldrb	r3, [r7, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	200f      	movs	r0, #15
 8003bb6:	f7ff fe4f 	bl	8003858 <mcp25625_writeRegister>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <LL_SPI_IsActiveFlag_RXNE>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_SPI_IsActiveFlag_TXE>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d101      	bne.n	8003c00 <LL_SPI_IsActiveFlag_TXE+0x18>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_SPI_ReceiveData8>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_SPI_TransmitData8>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	701a      	strb	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_GPIO_SetOutputPin>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_GPIO_ResetOutputPin>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(SPI_TypeDef *spix, GPIO_TypeDef *cs_gpiox, uint16_t cs_pinx)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
	uint8_t whoAmI;

	mpu925x.spiHandle = spix;
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <MPU925x_Init+0x48>)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6013      	str	r3, [r2, #0]
	mpu925x.CS_GPIOx = cs_gpiox;
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <MPU925x_Init+0x48>)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6053      	str	r3, [r2, #4]
	mpu925x.CS_Pin = cs_pinx;
 8003ca2:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <MPU925x_Init+0x48>)
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	8113      	strh	r3, [r2, #8]

	MPU925x_ReadRegs(MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 8003ca8:	f107 0317 	add.w	r3, r7, #23
 8003cac:	2201      	movs	r2, #1
 8003cae:	4619      	mov	r1, r3
 8003cb0:	2075      	movs	r0, #117	; 0x75
 8003cb2:	f000 fa1f 	bl	80040f4 <MPU925x_ReadRegs>

	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b71      	cmp	r3, #113	; 0x71
 8003cba:	d004      	beq.n	8003cc6 <MPU925x_Init+0x3e>
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b73      	cmp	r3, #115	; 0x73
 8003cc0:	d001      	beq.n	8003cc6 <MPU925x_Init+0x3e>
		return 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <MPU925x_Init+0x40>

	return 0;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200004f4 	.word	0x200004f4

08003cd4 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(enum MPU925x_AccelSensitivity_e option)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d86d      	bhi.n	8003dc0 <MPU925x_SetAccelSensitivity+0xec>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <MPU925x_SetAccelSensitivity+0x18>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d29 	.word	0x08003d29
 8003cf4:	08003d5f 	.word	0x08003d5f
 8003cf8:	08003d95 	.word	0x08003d95
	{
	case mpu925x_accelSensitivity_2g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003cfc:	f107 030f 	add.w	r3, r7, #15
 8003d00:	2201      	movs	r2, #1
 8003d02:	4619      	mov	r1, r3
 8003d04:	201c      	movs	r0, #28
 8003d06:	f000 f9f5 	bl	80040f4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	f023 0318 	bic.w	r3, r3, #24
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	4619      	mov	r1, r3
 8003d18:	201c      	movs	r0, #28
 8003d1a:	f000 f995 	bl	8004048 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003d20:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003d24:	601a      	str	r2, [r3, #0]
		break;
 8003d26:	e04b      	b.n	8003dc0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_4g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003d28:	f107 030f 	add.w	r3, r7, #15
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4619      	mov	r1, r3
 8003d30:	201c      	movs	r0, #28
 8003d32:	f000 f9df 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f023 0318 	bic.w	r3, r3, #24
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	201c      	movs	r0, #28
 8003d50:	f000 f97a 	bl	8004048 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003d56:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003d5a:	601a      	str	r2, [r3, #0]
		break;
 8003d5c:	e030      	b.n	8003dc0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_8g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003d5e:	f107 030f 	add.w	r3, r7, #15
 8003d62:	2201      	movs	r2, #1
 8003d64:	4619      	mov	r1, r3
 8003d66:	201c      	movs	r0, #28
 8003d68:	f000 f9c4 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f023 0318 	bic.w	r3, r3, #24
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	f043 0310 	orr.w	r3, r3, #16
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	4619      	mov	r1, r3
 8003d84:	201c      	movs	r0, #28
 8003d86:	f000 f95f 	bl	8004048 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003d8c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003d90:	601a      	str	r2, [r3, #0]
		break;
 8003d92:	e015      	b.n	8003dc0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_16g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003d94:	f107 030f 	add.w	r3, r7, #15
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	201c      	movs	r0, #28
 8003d9e:	f000 f9a9 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	f043 0318 	orr.w	r3, r3, #24
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	4619      	mov	r1, r3
 8003db0:	201c      	movs	r0, #28
 8003db2:	f000 f949 	bl	8004048 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003db8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003dbc:	601a      	str	r2, [r3, #0]
		break;
 8003dbe:	bf00      	nop
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000014 	.word	0x20000014

08003dcc <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(enum MPU925x_GyroSensitivity_e option)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d86d      	bhi.n	8003eb8 <MPU925x_SetGyroSensitivity+0xec>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <MPU925x_SetGyroSensitivity+0x18>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e57 	.word	0x08003e57
 8003df0:	08003e8d 	.word	0x08003e8d
	{
	case mpu925x_gyroSensitivity_250dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003df4:	f107 030f 	add.w	r3, r7, #15
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	201b      	movs	r0, #27
 8003dfe:	f000 f979 	bl	80040f4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	f023 0318 	bic.w	r3, r3, #24
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	201b      	movs	r0, #27
 8003e12:	f000 f919 	bl	8004048 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8003e16:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003e18:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003e1c:	601a      	str	r2, [r3, #0]
		break;
 8003e1e:	e04b      	b.n	8003eb8 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_500dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003e20:	f107 030f 	add.w	r3, r7, #15
 8003e24:	2201      	movs	r2, #1
 8003e26:	4619      	mov	r1, r3
 8003e28:	201b      	movs	r0, #27
 8003e2a:	f000 f963 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	f023 0318 	bic.w	r3, r3, #24
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	4619      	mov	r1, r3
 8003e46:	201b      	movs	r0, #27
 8003e48:	f000 f8fe 	bl	8004048 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003e4e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003e52:	601a      	str	r2, [r3, #0]
		break;
 8003e54:	e030      	b.n	8003eb8 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_1000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003e56:	f107 030f 	add.w	r3, r7, #15
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	201b      	movs	r0, #27
 8003e60:	f000 f948 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f023 0318 	bic.w	r3, r3, #24
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f043 0310 	orr.w	r3, r3, #16
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	201b      	movs	r0, #27
 8003e7e:	f000 f8e3 	bl	8004048 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003e84:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003e88:	601a      	str	r2, [r3, #0]
		break;
 8003e8a:	e015      	b.n	8003eb8 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_2000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003e8c:	f107 030f 	add.w	r3, r7, #15
 8003e90:	2201      	movs	r2, #1
 8003e92:	4619      	mov	r1, r3
 8003e94:	201b      	movs	r0, #27
 8003e96:	f000 f92d 	bl	80040f4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	f043 0318 	orr.w	r3, r3, #24
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	201b      	movs	r0, #27
 8003eaa:	f000 f8cd 	bl	8004048 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003eb0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003eb4:	601a      	str	r2, [r3, #0]
		break;
 8003eb6:	bf00      	nop
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000018 	.word	0x20000018

08003ec4 <MPU925x_ReadIMU>:
{
	MPU925x_WriteReg(MPU925X_REG_SMPLRT_DIV, divider);
}

struct MPU925x_IMUData_s MPU925x_ReadIMU(void)
{
 8003ec4:	b5b0      	push	{r4, r5, r7, lr}
 8003ec6:	b096      	sub	sp, #88	; 0x58
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	struct MPU925x_IMUData_s IMUData;
	uint8_t data[14];

	MPU925x_ReadRegs(MPU925X_REG_ACCEL_XOUT_H, data, 14);
 8003ecc:	f107 0308 	add.w	r3, r7, #8
 8003ed0:	220e      	movs	r2, #14
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	203b      	movs	r0, #59	; 0x3b
 8003ed6:	f000 f90d 	bl	80040f4 <MPU925x_ReadRegs>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8003eda:	7a3b      	ldrb	r3, [r7, #8]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	b21a      	sxth	r2, r3
 8003ee0:	7a7b      	ldrb	r3, [r7, #9]
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8003eea:	7abb      	ldrb	r3, [r7, #10]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	b21a      	sxth	r2, r3
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8003efa:	7b3b      	ldrb	r3, [r7, #12]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	b21a      	sxth	r2, r3
 8003f00:	7b7b      	ldrb	r3, [r7, #13]
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8003f0a:	7c3b      	ldrb	r3, [r7, #16]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	b21b      	sxth	r3, r3
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8003f1a:	7cbb      	ldrb	r3, [r7, #18]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	b21a      	sxth	r2, r3
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8003f2a:	7d3b      	ldrb	r3, [r7, #20]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	7d7b      	ldrb	r3, [r7, #21]
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMUData.ax = ax / accelSensitivity;
 8003f3a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <MPU925x_ReadIMU+0x17c>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f50:	ee16 0a90 	vmov	r0, s13
 8003f54:	f7fc fa9c 	bl	8000490 <__aeabi_f2d>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMUData.ay = ay / accelSensitivity;
 8003f60:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <MPU925x_ReadIMU+0x17c>)
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f76:	ee16 0a90 	vmov	r0, s13
 8003f7a:	f7fc fa89 	bl	8000490 <__aeabi_f2d>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMUData.az = az / accelSensitivity;
 8003f86:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f92:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <MPU925x_ReadIMU+0x17c>)
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f9c:	ee16 0a90 	vmov	r0, s13
 8003fa0:	f7fc fa76 	bl	8000490 <__aeabi_f2d>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMUData.gx = gx / gyroSensitivity;
 8003fac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <MPU925x_ReadIMU+0x180>)
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fc2:	ee16 0a90 	vmov	r0, s13
 8003fc6:	f7fc fa63 	bl	8000490 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMUData.gy = gy / gyroSensitivity;
 8003fd2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fde:	4b19      	ldr	r3, [pc, #100]	; (8004044 <MPU925x_ReadIMU+0x180>)
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fe8:	ee16 0a90 	vmov	r0, s13
 8003fec:	f7fc fa50 	bl	8000490 <__aeabi_f2d>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMUData.gz = gz / gyroSensitivity;
 8003ff8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <MPU925x_ReadIMU+0x180>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800400e:	ee16 0a90 	vmov	r0, s13
 8004012:	f7fc fa3d 	bl	8000490 <__aeabi_f2d>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMUData;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	461d      	mov	r5, r3
 8004022:	f107 0418 	add.w	r4, r7, #24
 8004026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004032:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	3758      	adds	r7, #88	; 0x58
 800403a:	46bd      	mov	sp, r7
 800403c:	bdb0      	pop	{r4, r5, r7, pc}
 800403e:	bf00      	nop
 8004040:	20000014 	.word	0x20000014
 8004044:	20000018 	.word	0x20000018

08004048 <MPU925x_WriteReg>:

void MPU925x_WriteReg(uint8_t adress, uint8_t data)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	460a      	mov	r2, r1
 8004052:	71fb      	strb	r3, [r7, #7]
 8004054:	4613      	mov	r3, r2
 8004056:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 800405e:	8912      	ldrh	r2, [r2, #8]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe01 	bl	8003c6a <LL_GPIO_ResetOutputPin>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8004068:	bf00      	nop
 800406a:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f8      	beq.n	800406a <MPU925x_WriteReg+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, adress);
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	79fa      	ldrb	r2, [r7, #7]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fdd2 	bl	8003c2a <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8004086:	bf00      	nop
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f8      	beq.n	8004088 <MPU925x_WriteReg+0x40>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fdb7 	bl	8003c0e <LL_SPI_ReceiveData8>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 80040a0:	bf00      	nop
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f8      	beq.n	80040a2 <MPU925x_WriteReg+0x5a>
	LL_SPI_TransmitData8(mpu925x.spiHandle, data);
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	79ba      	ldrb	r2, [r7, #6]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fdb6 	bl	8003c2a <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 80040be:	bf00      	nop
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f8      	beq.n	80040c0 <MPU925x_WriteReg+0x78>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fd9b 	bl	8003c0e <LL_SPI_ReceiveData8>

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <MPU925x_WriteReg+0xa8>)
 80040de:	8912      	ldrh	r2, [r2, #8]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fdb3 	bl	8003c4e <LL_GPIO_SetOutputPin>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200004f4 	.word	0x200004f4

080040f4 <MPU925x_ReadRegs>:

void MPU925x_ReadRegs(uint8_t address, uint8_t *data, uint8_t bytes)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 800410a:	8912      	ldrh	r2, [r2, #8]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fdab 	bl	8003c6a <LL_GPIO_ResetOutputPin>

	while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 8004114:	bf00      	nop
 8004116:	4b2c      	ldr	r3, [pc, #176]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd64 	bl	8003be8 <LL_SPI_IsActiveFlag_TXE>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f7      	beq.n	8004116 <MPU925x_ReadRegs+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, (address | 0x80));
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7ff fd78 	bl	8003c2a <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 800413a:	bf00      	nop
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fd3e 	bl	8003bc2 <LL_SPI_IsActiveFlag_RXNE>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f7      	beq.n	800413c <MPU925x_ReadRegs+0x48>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);							// Read out bogus data
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fd5c 	bl	8003c0e <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < bytes; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e024      	b.n	80041a6 <MPU925x_ReadRegs+0xb2>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 800415c:	bf00      	nop
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fd40 	bl	8003be8 <LL_SPI_IsActiveFlag_TXE>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f7      	beq.n	800415e <MPU925x_ReadRegs+0x6a>
		LL_SPI_TransmitData8(mpu925x.spiHandle, 0x00);				// Send out 8 bits to read 8 more bits
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fd58 	bl	8003c2a <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 800417a:	bf00      	nop
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fd1e 	bl	8003bc2 <LL_SPI_IsActiveFlag_RXNE>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f7      	beq.n	800417c <MPU925x_ReadRegs+0x88>
		data[i] = LL_SPI_ReceiveData8(mpu925x.spiHandle);
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	18d4      	adds	r4, r2, r3
 8004196:	4608      	mov	r0, r1
 8004198:	f7ff fd39 	bl	8003c0e <LL_SPI_ReceiveData8>
 800419c:	4603      	mov	r3, r0
 800419e:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < bytes; i++)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	3301      	adds	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	79bb      	ldrb	r3, [r7, #6]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3d6      	bcc.n	800415c <MPU925x_ReadRegs+0x68>
	}

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <MPU925x_ReadRegs+0xd4>)
 80041b4:	8912      	ldrh	r2, [r2, #8]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fd48 	bl	8003c4e <LL_GPIO_SetOutputPin>
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	200004f4 	.word	0x200004f4

080041cc <LL_ADC_REG_SetSequencerLength>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_IsEnabled>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <LL_ADC_IsEnabled+0x18>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <LL_ADC_IsEnabled+0x1a>
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004226:	481c      	ldr	r0, [pc, #112]	; (8004298 <LL_ADC_CommonInit+0x80>)
 8004228:	f7ff ffe3 	bl	80041f2 <LL_ADC_IsEnabled>
 800422c:	4604      	mov	r4, r0
 800422e:	481b      	ldr	r0, [pc, #108]	; (800429c <LL_ADC_CommonInit+0x84>)
 8004230:	f7ff ffdf 	bl	80041f2 <LL_ADC_IsEnabled>
 8004234:	4603      	mov	r3, r0
 8004236:	431c      	orrs	r4, r3
 8004238:	4819      	ldr	r0, [pc, #100]	; (80042a0 <LL_ADC_CommonInit+0x88>)
 800423a:	f7ff ffda 	bl	80041f2 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	4323      	orrs	r3, r4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d120      	bne.n	8004288 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <LL_ADC_CommonInit+0x8c>)
 8004254:	4013      	ands	r3, r2
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6811      	ldr	r1, [r2, #0]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	6852      	ldr	r2, [r2, #4]
 800425e:	4311      	orrs	r1, r2
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	4311      	orrs	r1, r2
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	430a      	orrs	r2, r1
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	e00b      	b.n	800428c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <LL_ADC_CommonInit+0x8c>)
 800427a:	4013      	ands	r3, r2
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	e001      	b.n	800428c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	bf00      	nop
 8004298:	50040000 	.word	0x50040000
 800429c:	50040100 	.word	0x50040100
 80042a0:	50040200 	.word	0x50040200
 80042a4:	ffc030e0 	.word	0xffc030e0

080042a8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff9b 	bl	80041f2 <LL_ADC_IsEnabled>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d111      	bne.n	80042e6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	4311      	orrs	r1, r2
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	6892      	ldr	r2, [r2, #8]
 80042dc:	430a      	orrs	r2, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e001      	b.n	80042ea <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff75 	bl	80041f2 <LL_ADC_IsEnabled>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d132      	bne.n	8004374 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d015      	beq.n	8004342 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <LL_ADC_REG_Init+0x90>)
 800431c:	4013      	ands	r3, r2
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	6811      	ldr	r1, [r2, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	6892      	ldr	r2, [r2, #8]
 8004326:	4311      	orrs	r1, r2
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	68d2      	ldr	r2, [r2, #12]
 800432c:	4311      	orrs	r1, r2
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	6912      	ldr	r2, [r2, #16]
 8004332:	4311      	orrs	r1, r2
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	6952      	ldr	r2, [r2, #20]
 8004338:	430a      	orrs	r2, r1
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	e011      	b.n	8004366 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <LL_ADC_REG_Init+0x90>)
 8004348:	4013      	ands	r3, r2
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	6912      	ldr	r2, [r2, #16]
 8004358:	4311      	orrs	r1, r2
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	6952      	ldr	r2, [r2, #20]
 800435e:	430a      	orrs	r2, r1
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff2d 	bl	80041cc <LL_ADC_REG_SetSequencerLength>
 8004372:	e001      	b.n	8004378 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	fff0c03c 	.word	0xfff0c03c

08004388 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4904      	ldr	r1, [pc, #16]	; (80043a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40010400 	.word	0x40010400

080043ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <LL_EXTI_EnableIT_32_63+0x20>)
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <LL_EXTI_EnableIT_32_63+0x20>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4313      	orrs	r3, r2
 80043be:	620b      	str	r3, [r1, #32]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40010400 	.word	0x40010400

080043d0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	43db      	mvns	r3, r3
 80043e0:	4904      	ldr	r1, [pc, #16]	; (80043f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010400 	.word	0x40010400

080043f8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <LL_EXTI_DisableIT_32_63+0x24>)
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	43db      	mvns	r3, r3
 8004408:	4904      	ldr	r1, [pc, #16]	; (800441c <LL_EXTI_DisableIT_32_63+0x24>)
 800440a:	4013      	ands	r3, r2
 800440c:	620b      	str	r3, [r1, #32]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010400 	.word	0x40010400

08004420 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <LL_EXTI_EnableEvent_0_31+0x20>)
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4904      	ldr	r1, [pc, #16]	; (8004440 <LL_EXTI_EnableEvent_0_31+0x20>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]

}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40010400 	.word	0x40010400

08004444 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <LL_EXTI_EnableEvent_32_63+0x20>)
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4313      	orrs	r3, r2
 8004456:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40010400 	.word	0x40010400

08004468 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	43db      	mvns	r3, r3
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <LL_EXTI_DisableEvent_0_31+0x24>)
 800447a:	4013      	ands	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010400 	.word	0x40010400

08004490 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800449a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	43db      	mvns	r3, r3
 80044a0:	4904      	ldr	r1, [pc, #16]	; (80044b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010400 	.word	0x40010400

080044b8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]

}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40010400 	.word	0x40010400

080044dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80044e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	628b      	str	r3, [r1, #40]	; 0x28
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40010400 	.word	0x40010400

08004500 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	43db      	mvns	r3, r3
 8004510:	4904      	ldr	r1, [pc, #16]	; (8004524 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004512:	4013      	ands	r3, r2
 8004514:	608b      	str	r3, [r1, #8]

}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010400 	.word	0x40010400

08004528 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	43db      	mvns	r3, r3
 8004538:	4904      	ldr	r1, [pc, #16]	; (800454c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800453a:	4013      	ands	r3, r2
 800453c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010400 	.word	0x40010400

08004550 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	4904      	ldr	r1, [pc, #16]	; (8004570 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4313      	orrs	r3, r2
 8004562:	60cb      	str	r3, [r1, #12]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010400 	.word	0x40010400

08004574 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4904      	ldr	r1, [pc, #16]	; (8004594 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4313      	orrs	r3, r2
 8004586:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40010400 	.word	0x40010400

08004598 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	4904      	ldr	r1, [pc, #16]	; (80045bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	60cb      	str	r3, [r1, #12]
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40010400 	.word	0x40010400

080045c0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	4904      	ldr	r1, [pc, #16]	; (80045e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010400 	.word	0x40010400

080045e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7a1b      	ldrb	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80d1 	beq.w	80047a0 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7a5b      	ldrb	r3, [r3, #9]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d01c      	beq.n	8004648 <LL_EXTI_Init+0x60>
 800460e:	2b02      	cmp	r3, #2
 8004610:	dc25      	bgt.n	800465e <LL_EXTI_Init+0x76>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <LL_EXTI_Init+0x34>
 8004616:	2b01      	cmp	r3, #1
 8004618:	d00b      	beq.n	8004632 <LL_EXTI_Init+0x4a>
 800461a:	e020      	b.n	800465e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff21 	bl	8004468 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff feac 	bl	8004388 <LL_EXTI_EnableIT_0_31>
          break;
 8004630:	e018      	b.n	8004664 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff feca 	bl	80043d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff feed 	bl	8004420 <LL_EXTI_EnableEvent_0_31>
          break;
 8004646:	e00d      	b.n	8004664 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fe9b 	bl	8004388 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fee2 	bl	8004420 <LL_EXTI_EnableEvent_0_31>
          break;
 800465c:	e002      	b.n	8004664 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800465e:	2301      	movs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
          break;
 8004662:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7a9b      	ldrb	r3, [r3, #10]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d030      	beq.n	80046ce <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7a9b      	ldrb	r3, [r3, #10]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d01c      	beq.n	80046ae <LL_EXTI_Init+0xc6>
 8004674:	2b03      	cmp	r3, #3
 8004676:	dc25      	bgt.n	80046c4 <LL_EXTI_Init+0xdc>
 8004678:	2b01      	cmp	r3, #1
 800467a:	d002      	beq.n	8004682 <LL_EXTI_Init+0x9a>
 800467c:	2b02      	cmp	r3, #2
 800467e:	d00b      	beq.n	8004698 <LL_EXTI_Init+0xb0>
 8004680:	e020      	b.n	80046c4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff86 	bl	8004598 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff11 	bl	80044b8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004696:	e01b      	b.n	80046d0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff2f 	bl	8004500 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff52 	bl	8004550 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80046ac:	e010      	b.n	80046d0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff00 	bl	80044b8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff47 	bl	8004550 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80046c2:	e005      	b.n	80046d0 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f043 0302 	orr.w	r3, r3, #2
 80046ca:	60fb      	str	r3, [r7, #12]
            break;
 80046cc:	e000      	b.n	80046d0 <LL_EXTI_Init+0xe8>
        }
      }
 80046ce:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d078      	beq.n	80047ca <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7a5b      	ldrb	r3, [r3, #9]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d01c      	beq.n	800471a <LL_EXTI_Init+0x132>
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	dc25      	bgt.n	8004730 <LL_EXTI_Init+0x148>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <LL_EXTI_Init+0x106>
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d00b      	beq.n	8004704 <LL_EXTI_Init+0x11c>
 80046ec:	e020      	b.n	8004730 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fecc 	bl	8004490 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fe55 	bl	80043ac <LL_EXTI_EnableIT_32_63>
          break;
 8004702:	e01a      	b.n	800473a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fe75 	bl	80043f8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fe96 	bl	8004444 <LL_EXTI_EnableEvent_32_63>
          break;
 8004718:	e00f      	b.n	800473a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fe44 	bl	80043ac <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fe8b 	bl	8004444 <LL_EXTI_EnableEvent_32_63>
          break;
 800472e:	e004      	b.n	800473a <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
          break;
 8004738:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7a9b      	ldrb	r3, [r3, #10]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d043      	beq.n	80047ca <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7a9b      	ldrb	r3, [r3, #10]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d01c      	beq.n	8004784 <LL_EXTI_Init+0x19c>
 800474a:	2b03      	cmp	r3, #3
 800474c:	dc25      	bgt.n	800479a <LL_EXTI_Init+0x1b2>
 800474e:	2b01      	cmp	r3, #1
 8004750:	d002      	beq.n	8004758 <LL_EXTI_Init+0x170>
 8004752:	2b02      	cmp	r3, #2
 8004754:	d00b      	beq.n	800476e <LL_EXTI_Init+0x186>
 8004756:	e020      	b.n	800479a <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff2f 	bl	80045c0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff feb8 	bl	80044dc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800476c:	e02e      	b.n	80047cc <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fed8 	bl	8004528 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fef9 	bl	8004574 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004782:	e023      	b.n	80047cc <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fea7 	bl	80044dc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff feee 	bl	8004574 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004798:	e018      	b.n	80047cc <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
            break;
 800479e:	e015      	b.n	80047cc <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fe13 	bl	80043d0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fe5a 	bl	8004468 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fe1d 	bl	80043f8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fe64 	bl	8004490 <LL_EXTI_DisableEvent_32_63>
 80047c8:	e000      	b.n	80047cc <LL_EXTI_Init+0x1e4>
      }
 80047ca:	bf00      	nop
  }

  return status;
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <LL_GPIO_SetPinMode>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b08b      	sub	sp, #44	; 0x2c
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	613b      	str	r3, [r7, #16]
  return result;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80047fc:	2320      	movs	r3, #32
 80047fe:	e003      	b.n	8004808 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	61fb      	str	r3, [r7, #28]
  return result;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800482a:	2320      	movs	r3, #32
 800482c:	e003      	b.n	8004836 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	431a      	orrs	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	372c      	adds	r7, #44	; 0x2c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_GPIO_SetPinOutputType>:
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_GPIO_SetPinSpeed>:
{
 8004880:	b480      	push	{r7}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	613b      	str	r3, [r7, #16]
  return result;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80048a6:	2320      	movs	r3, #32
 80048a8:	e003      	b.n	80048b2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2103      	movs	r1, #3
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	401a      	ands	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	61fb      	str	r3, [r7, #28]
  return result;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	609a      	str	r2, [r3, #8]
}
 80048ee:	bf00      	nop
 80048f0:	372c      	adds	r7, #44	; 0x2c
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LL_GPIO_SetPinPull>:
{
 80048fa:	b480      	push	{r7}
 80048fc:	b08b      	sub	sp, #44	; 0x2c
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	613b      	str	r3, [r7, #16]
  return result;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e003      	b.n	800492c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2103      	movs	r1, #3
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	401a      	ands	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	61fb      	str	r3, [r7, #28]
  return result;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800494e:	2320      	movs	r3, #32
 8004950:	e003      	b.n	800495a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	fab3 f383 	clz	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	431a      	orrs	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
}
 8004968:	bf00      	nop
 800496a:	372c      	adds	r7, #44	; 0x2c
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_GPIO_SetAFPin_0_7>:
{
 8004974:	b480      	push	{r7}
 8004976:	b08b      	sub	sp, #44	; 0x2c
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	613b      	str	r3, [r7, #16]
  return result;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800499a:	2320      	movs	r3, #32
 800499c:	e003      	b.n	80049a6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	210f      	movs	r1, #15
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	401a      	ands	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	61fb      	str	r3, [r7, #28]
  return result;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	372c      	adds	r7, #44	; 0x2c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_GPIO_SetAFPin_8_15>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b08b      	sub	sp, #44	; 0x2c
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	613b      	str	r3, [r7, #16]
  return result;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004a16:	2320      	movs	r3, #32
 8004a18:	e003      	b.n	8004a22 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	210f      	movs	r1, #15
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	61fb      	str	r3, [r7, #28]
  return result;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004a46:	2320      	movs	r3, #32
 8004a48:	e003      	b.n	8004a52 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a60:	bf00      	nop
 8004a62:	372c      	adds	r7, #44	; 0x2c
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	60fb      	str	r3, [r7, #12]
  return result;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <LL_GPIO_Init+0x26>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e003      	b.n	8004a9a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004a9c:	e048      	b.n	8004b30 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03a      	beq.n	8004b2a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d003      	beq.n	8004ac4 <LL_GPIO_Init+0x58>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d10e      	bne.n	8004ae2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	69b9      	ldr	r1, [r7, #24]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fed7 	bl	8004880 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff feb7 	bl	8004850 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	69b9      	ldr	r1, [r7, #24]
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff05 	bl	80048fa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d111      	bne.n	8004b1c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2bff      	cmp	r3, #255	; 0xff
 8004afc:	d807      	bhi.n	8004b0e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	461a      	mov	r2, r3
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff34 	bl	8004974 <LL_GPIO_SetAFPin_0_7>
 8004b0c:	e006      	b.n	8004b1c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	461a      	mov	r2, r3
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff69 	bl	80049ee <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	461a      	mov	r2, r3
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe56 	bl	80047d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1af      	bne.n	8004a9e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <LL_RCC_HSI_IsReady>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <LL_RCC_HSI_IsReady+0x24>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d101      	bne.n	8004b5e <LL_RCC_HSI_IsReady+0x16>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <LL_RCC_HSI_IsReady+0x18>
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000

08004b70 <LL_RCC_LSE_IsReady>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <LL_RCC_LSE_IsReady+0x24>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d101      	bne.n	8004b86 <LL_RCC_LSE_IsReady+0x16>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <LL_RCC_LSE_IsReady+0x18>
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000

08004b98 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d101      	bne.n	8004bac <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40021000 	.word	0x40021000

08004bbc <LL_RCC_MSI_GetRange>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <LL_RCC_MSI_GetRange+0x18>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <LL_RCC_GetSysClkSource>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <LL_RCC_GetSysClkSource+0x18>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000

08004c10 <LL_RCC_GetAHBPrescaler>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <LL_RCC_GetAHBPrescaler+0x18>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000

08004c2c <LL_RCC_GetAPB1Prescaler>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000

08004c48 <LL_RCC_GetAPB2Prescaler>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000

08004c64 <LL_RCC_GetUSARTClockSource>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <LL_RCC_GetUSARTClockSource+0x24>)
 8004c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	4313      	orrs	r3, r2
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40021000 	.word	0x40021000

08004c8c <LL_RCC_GetUARTClockSource>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <LL_RCC_GetUARTClockSource+0x24>)
 8004c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	401a      	ands	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	4313      	orrs	r3, r2
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <LL_RCC_PLL_GetMainSource>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <LL_RCC_PLL_GetMainSource+0x18>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <LL_RCC_PLL_GetN>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <LL_RCC_PLL_GetN+0x18>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0a1b      	lsrs	r3, r3, #8
 8004cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40021000 	.word	0x40021000

08004cec <LL_RCC_PLL_GetR>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <LL_RCC_PLL_GetR+0x18>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000

08004d08 <LL_RCC_PLL_GetDivider>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <LL_RCC_PLL_GetDivider+0x18>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000

08004d24 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d137      	bne.n	8004da6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ff94 	bl	8004c64 <LL_RCC_GetUSARTClockSource>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	f200 80b3 	bhi.w	8004eae <LL_RCC_GetUSARTClockFreq+0x18a>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d61 	.word	0x08004d61
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d7b 	.word	0x08004d7b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004d60:	f000 f95c 	bl	800501c <RCC_GetSystemClockFreq>
 8004d64:	60f8      	str	r0, [r7, #12]
        break;
 8004d66:	e0b5      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004d68:	f7ff feee 	bl	8004b48 <LL_RCC_HSI_IsReady>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 809f 	beq.w	8004eb2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8004d74:	4b5a      	ldr	r3, [pc, #360]	; (8004ee0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004d76:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d78:	e09b      	b.n	8004eb2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004d7a:	f7ff fef9 	bl	8004b70 <LL_RCC_LSE_IsReady>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8098 	beq.w	8004eb6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d8c:	e093      	b.n	8004eb6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d8e:	f000 f945 	bl	800501c <RCC_GetSystemClockFreq>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f9d1 	bl	800513c <RCC_GetHCLKClockFreq>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 f9f7 	bl	8005190 <RCC_GetPCLK2ClockFreq>
 8004da2:	60f8      	str	r0, [r7, #12]
        break;
 8004da4:	e096      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d146      	bne.n	8004e3a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff59 	bl	8004c64 <LL_RCC_GetUSARTClockSource>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	d87e      	bhi.n	8004eba <LL_RCC_GetUSARTClockFreq+0x196>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004e23 	.word	0x08004e23
 8004dc8:	08004ebb 	.word	0x08004ebb
 8004dcc:	08004ebb 	.word	0x08004ebb
 8004dd0:	08004ebb 	.word	0x08004ebb
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004ebb 	.word	0x08004ebb
 8004ddc:	08004ebb 	.word	0x08004ebb
 8004de0:	08004ebb 	.word	0x08004ebb
 8004de4:	08004e01 	.word	0x08004e01
 8004de8:	08004ebb 	.word	0x08004ebb
 8004dec:	08004ebb 	.word	0x08004ebb
 8004df0:	08004ebb 	.word	0x08004ebb
 8004df4:	08004e11 	.word	0x08004e11
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004df8:	f000 f910 	bl	800501c <RCC_GetSystemClockFreq>
 8004dfc:	60f8      	str	r0, [r7, #12]
        break;
 8004dfe:	e069      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004e00:	f7ff fea2 	bl	8004b48 <LL_RCC_HSI_IsReady>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d059      	beq.n	8004ebe <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8004e0a:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004e0c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e0e:	e056      	b.n	8004ebe <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004e10:	f7ff feae 	bl	8004b70 <LL_RCC_LSE_IsReady>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d053      	beq.n	8004ec2 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8004e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e20:	e04f      	b.n	8004ec2 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e22:	f000 f8fb 	bl	800501c <RCC_GetSystemClockFreq>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f987 	bl	800513c <RCC_GetHCLKClockFreq>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f999 	bl	8005168 <RCC_GetPCLK1ClockFreq>
 8004e36:	60f8      	str	r0, [r7, #12]
        break;
 8004e38:	e04c      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d142      	bne.n	8004ec6 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff0f 	bl	8004c64 <LL_RCC_GetUSARTClockSource>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004e4c:	d01a      	beq.n	8004e84 <LL_RCC_GetUSARTClockFreq+0x160>
 8004e4e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004e52:	d83a      	bhi.n	8004eca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00c      	beq.n	8004e74 <LL_RCC_GetUSARTClockFreq+0x150>
 8004e5a:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d834      	bhi.n	8004eca <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e64:	d017      	beq.n	8004e96 <LL_RCC_GetUSARTClockFreq+0x172>
 8004e66:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d12e      	bne.n	8004eca <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004e6c:	f000 f8d6 	bl	800501c <RCC_GetSystemClockFreq>
 8004e70:	60f8      	str	r0, [r7, #12]
          break;
 8004e72:	e02f      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004e74:	f7ff fe68 	bl	8004b48 <LL_RCC_HSI_IsReady>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d027      	beq.n	8004ece <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004e80:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004e82:	e024      	b.n	8004ece <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004e84:	f7ff fe74 	bl	8004b70 <LL_RCC_LSE_IsReady>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d021      	beq.n	8004ed2 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004e94:	e01d      	b.n	8004ed2 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e96:	f000 f8c1 	bl	800501c <RCC_GetSystemClockFreq>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f94d 	bl	800513c <RCC_GetHCLKClockFreq>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f95f 	bl	8005168 <RCC_GetPCLK1ClockFreq>
 8004eaa:	60f8      	str	r0, [r7, #12]
          break;
 8004eac:	e012      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e010      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e00e      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e00c      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e00a      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e008      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8004ec2:	bf00      	nop
 8004ec4:	e006      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8004ed2:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	00300020 	.word	0x00300020
 8004ee8:	00300010 	.word	0x00300010

08004eec <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2bc0      	cmp	r3, #192	; 0xc0
 8004efc:	d136      	bne.n	8004f6c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fec4 	bl	8004c8c <LL_RCC_GetUARTClockSource>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004f0a:	d01a      	beq.n	8004f42 <LL_RCC_GetUARTClockFreq+0x56>
 8004f0c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004f10:	d82e      	bhi.n	8004f70 <LL_RCC_GetUARTClockFreq+0x84>
 8004f12:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00c      	beq.n	8004f32 <LL_RCC_GetUARTClockFreq+0x46>
 8004f18:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d828      	bhi.n	8004f70 <LL_RCC_GetUARTClockFreq+0x84>
 8004f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f22:	d017      	beq.n	8004f54 <LL_RCC_GetUARTClockFreq+0x68>
 8004f24:	4a39      	ldr	r2, [pc, #228]	; (800500c <LL_RCC_GetUARTClockFreq+0x120>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d122      	bne.n	8004f70 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004f2a:	f000 f877 	bl	800501c <RCC_GetSystemClockFreq>
 8004f2e:	60f8      	str	r0, [r7, #12]
        break;
 8004f30:	e023      	b.n	8004f7a <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004f32:	f7ff fe09 	bl	8004b48 <LL_RCC_HSI_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <LL_RCC_GetUARTClockFreq+0x124>)
 8004f3e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f40:	e018      	b.n	8004f74 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004f42:	f7ff fe15 	bl	8004b70 <LL_RCC_LSE_IsReady>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8004f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f50:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f52:	e011      	b.n	8004f78 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004f54:	f000 f862 	bl	800501c <RCC_GetSystemClockFreq>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f8ee 	bl	800513c <RCC_GetHCLKClockFreq>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f900 	bl	8005168 <RCC_GetPCLK1ClockFreq>
 8004f68:	60f8      	str	r0, [r7, #12]
        break;
 8004f6a:	e006      	b.n	8004f7a <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8004f6c:	bf00      	nop
 8004f6e:	e004      	b.n	8004f7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004f70:	bf00      	nop
 8004f72:	e002      	b.n	8004f7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8004f78:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f80:	d136      	bne.n	8004ff0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fe82 	bl	8004c8c <LL_RCC_GetUARTClockSource>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004f8e:	d01a      	beq.n	8004fc6 <LL_RCC_GetUARTClockFreq+0xda>
 8004f90:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004f94:	d82e      	bhi.n	8004ff4 <LL_RCC_GetUARTClockFreq+0x108>
 8004f96:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <LL_RCC_GetUARTClockFreq+0x128>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00c      	beq.n	8004fb6 <LL_RCC_GetUARTClockFreq+0xca>
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <LL_RCC_GetUARTClockFreq+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d828      	bhi.n	8004ff4 <LL_RCC_GetUARTClockFreq+0x108>
 8004fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fa6:	d017      	beq.n	8004fd8 <LL_RCC_GetUARTClockFreq+0xec>
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <LL_RCC_GetUARTClockFreq+0x12c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d122      	bne.n	8004ff4 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004fae:	f000 f835 	bl	800501c <RCC_GetSystemClockFreq>
 8004fb2:	60f8      	str	r0, [r7, #12]
        break;
 8004fb4:	e023      	b.n	8004ffe <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004fb6:	f7ff fdc7 	bl	8004b48 <LL_RCC_HSI_IsReady>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <LL_RCC_GetUARTClockFreq+0x124>)
 8004fc2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004fc4:	e018      	b.n	8004ff8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004fc6:	f7ff fdd3 	bl	8004b70 <LL_RCC_LSE_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8004fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004fd6:	e011      	b.n	8004ffc <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004fd8:	f000 f820 	bl	800501c <RCC_GetSystemClockFreq>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f8ac 	bl	800513c <RCC_GetHCLKClockFreq>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f8be 	bl	8005168 <RCC_GetPCLK1ClockFreq>
 8004fec:	60f8      	str	r0, [r7, #12]
        break;
 8004fee:	e006      	b.n	8004ffe <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8004ff0:	bf00      	nop
 8004ff2:	e004      	b.n	8004ffe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004ff4:	bf00      	nop
 8004ff6:	e002      	b.n	8004ffe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8004ffc:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	00c00080 	.word	0x00c00080
 800500c:	00c00040 	.word	0x00c00040
 8005010:	00f42400 	.word	0x00f42400
 8005014:	03000200 	.word	0x03000200
 8005018:	03000100 	.word	0x03000100

0800501c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005022:	f7ff fde7 	bl	8004bf4 <LL_RCC_GetSysClkSource>
 8005026:	4603      	mov	r3, r0
 8005028:	2b0c      	cmp	r3, #12
 800502a:	d851      	bhi.n	80050d0 <RCC_GetSystemClockFreq+0xb4>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <RCC_GetSystemClockFreq+0x18>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005069 	.word	0x08005069
 8005038:	080050d1 	.word	0x080050d1
 800503c:	080050d1 	.word	0x080050d1
 8005040:	080050d1 	.word	0x080050d1
 8005044:	080050bd 	.word	0x080050bd
 8005048:	080050d1 	.word	0x080050d1
 800504c:	080050d1 	.word	0x080050d1
 8005050:	080050d1 	.word	0x080050d1
 8005054:	080050c3 	.word	0x080050c3
 8005058:	080050d1 	.word	0x080050d1
 800505c:	080050d1 	.word	0x080050d1
 8005060:	080050d1 	.word	0x080050d1
 8005064:	080050c9 	.word	0x080050c9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005068:	f7ff fd96 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d111      	bne.n	8005096 <RCC_GetSystemClockFreq+0x7a>
 8005072:	f7ff fd91 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <RCC_GetSystemClockFreq+0x6a>
 800507c:	f7ff fd9e 	bl	8004bbc <LL_RCC_MSI_GetRange>
 8005080:	4603      	mov	r3, r0
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	e003      	b.n	800508e <RCC_GetSystemClockFreq+0x72>
 8005086:	f7ff fda7 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 800508a:	4603      	mov	r3, r0
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	4a28      	ldr	r2, [pc, #160]	; (8005130 <RCC_GetSystemClockFreq+0x114>)
 8005090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005094:	e010      	b.n	80050b8 <RCC_GetSystemClockFreq+0x9c>
 8005096:	f7ff fd7f 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <RCC_GetSystemClockFreq+0x8e>
 80050a0:	f7ff fd8c 	bl	8004bbc <LL_RCC_MSI_GetRange>
 80050a4:	4603      	mov	r3, r0
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	e003      	b.n	80050b2 <RCC_GetSystemClockFreq+0x96>
 80050aa:	f7ff fd95 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 80050ae:	4603      	mov	r3, r0
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <RCC_GetSystemClockFreq+0x114>)
 80050b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80050ba:	e033      	b.n	8005124 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <RCC_GetSystemClockFreq+0x118>)
 80050be:	607b      	str	r3, [r7, #4]
      break;
 80050c0:	e030      	b.n	8005124 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <RCC_GetSystemClockFreq+0x11c>)
 80050c4:	607b      	str	r3, [r7, #4]
      break;
 80050c6:	e02d      	b.n	8005124 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80050c8:	f000 f876 	bl	80051b8 <RCC_PLL_GetFreqDomain_SYS>
 80050cc:	6078      	str	r0, [r7, #4]
      break;
 80050ce:	e029      	b.n	8005124 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80050d0:	f7ff fd62 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d111      	bne.n	80050fe <RCC_GetSystemClockFreq+0xe2>
 80050da:	f7ff fd5d 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <RCC_GetSystemClockFreq+0xd2>
 80050e4:	f7ff fd6a 	bl	8004bbc <LL_RCC_MSI_GetRange>
 80050e8:	4603      	mov	r3, r0
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	e003      	b.n	80050f6 <RCC_GetSystemClockFreq+0xda>
 80050ee:	f7ff fd73 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 80050f2:	4603      	mov	r3, r0
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	4a0e      	ldr	r2, [pc, #56]	; (8005130 <RCC_GetSystemClockFreq+0x114>)
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	e010      	b.n	8005120 <RCC_GetSystemClockFreq+0x104>
 80050fe:	f7ff fd4b 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <RCC_GetSystemClockFreq+0xf6>
 8005108:	f7ff fd58 	bl	8004bbc <LL_RCC_MSI_GetRange>
 800510c:	4603      	mov	r3, r0
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	e003      	b.n	800511a <RCC_GetSystemClockFreq+0xfe>
 8005112:	f7ff fd61 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005116:	4603      	mov	r3, r0
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <RCC_GetSystemClockFreq+0x114>)
 800511c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005120:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005122:	bf00      	nop
  }

  return frequency;
 8005124:	687b      	ldr	r3, [r7, #4]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	0800690c 	.word	0x0800690c
 8005134:	00f42400 	.word	0x00f42400
 8005138:	007a1200 	.word	0x007a1200

0800513c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005144:	f7ff fd64 	bl	8004c10 <LL_RCC_GetAHBPrescaler>
 8005148:	4603      	mov	r3, r0
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <RCC_GetHCLKClockFreq+0x28>)
 8005152:	5cd3      	ldrb	r3, [r2, r3]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	40d3      	lsrs	r3, r2
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	080068f4 	.word	0x080068f4

08005168 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005170:	f7ff fd5c 	bl	8004c2c <LL_RCC_GetAPB1Prescaler>
 8005174:	4603      	mov	r3, r0
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <RCC_GetPCLK1ClockFreq+0x24>)
 800517a:	5cd3      	ldrb	r3, [r2, r3]
 800517c:	461a      	mov	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	40d3      	lsrs	r3, r2
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	08006904 	.word	0x08006904

08005190 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005198:	f7ff fd56 	bl	8004c48 <LL_RCC_GetAPB2Prescaler>
 800519c:	4603      	mov	r3, r0
 800519e:	0adb      	lsrs	r3, r3, #11
 80051a0:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80051a2:	5cd3      	ldrb	r3, [r2, r3]
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	40d3      	lsrs	r3, r2
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	08006904 	.word	0x08006904

080051b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80051be:	f7ff fd79 	bl	8004cb4 <LL_RCC_PLL_GetMainSource>
 80051c2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d036      	beq.n	8005238 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d836      	bhi.n	800523e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d003      	beq.n	80051de <RCC_PLL_GetFreqDomain_SYS+0x26>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d02a      	beq.n	8005232 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80051dc:	e02f      	b.n	800523e <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80051de:	f7ff fcdb 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d111      	bne.n	800520c <RCC_PLL_GetFreqDomain_SYS+0x54>
 80051e8:	f7ff fcd6 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80051f2:	f7ff fce3 	bl	8004bbc <LL_RCC_MSI_GetRange>
 80051f6:	4603      	mov	r3, r0
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	e003      	b.n	8005204 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80051fc:	f7ff fcec 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005200:	4603      	mov	r3, r0
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	e010      	b.n	800522e <RCC_PLL_GetFreqDomain_SYS+0x76>
 800520c:	f7ff fcc4 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005216:	f7ff fcd1 	bl	8004bbc <LL_RCC_MSI_GetRange>
 800521a:	4603      	mov	r3, r0
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	e003      	b.n	8005228 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005220:	f7ff fcda 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005224:	4603      	mov	r3, r0
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005230:	e02f      	b.n	8005292 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005232:	4b25      	ldr	r3, [pc, #148]	; (80052c8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005234:	607b      	str	r3, [r7, #4]
      break;
 8005236:	e02c      	b.n	8005292 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800523a:	607b      	str	r3, [r7, #4]
      break;
 800523c:	e029      	b.n	8005292 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800523e:	f7ff fcab 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005248:	f7ff fca6 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005252:	f7ff fcb3 	bl	8004bbc <LL_RCC_MSI_GetRange>
 8005256:	4603      	mov	r3, r0
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	e003      	b.n	8005264 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800525c:	f7ff fcbc 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005260:	4603      	mov	r3, r0
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	4a17      	ldr	r2, [pc, #92]	; (80052c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	e010      	b.n	800528e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800526c:	f7ff fc94 	bl	8004b98 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005276:	f7ff fca1 	bl	8004bbc <LL_RCC_MSI_GetRange>
 800527a:	4603      	mov	r3, r0
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	e003      	b.n	8005288 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005280:	f7ff fcaa 	bl	8004bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005284:	4603      	mov	r3, r0
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005290:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005292:	f7ff fd39 	bl	8004d08 <LL_RCC_PLL_GetDivider>
 8005296:	4603      	mov	r3, r0
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	3301      	adds	r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	fbb2 f4f3 	udiv	r4, r2, r3
 80052a2:	f7ff fd15 	bl	8004cd0 <LL_RCC_PLL_GetN>
 80052a6:	4603      	mov	r3, r0
 80052a8:	fb03 f404 	mul.w	r4, r3, r4
 80052ac:	f7ff fd1e 	bl	8004cec <LL_RCC_PLL_GetR>
 80052b0:	4603      	mov	r3, r0
 80052b2:	0e5b      	lsrs	r3, r3, #25
 80052b4:	3301      	adds	r3, #1
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}
 80052c4:	0800690c 	.word	0x0800690c
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	007a1200 	.word	0x007a1200

080052d0 <LL_SPI_IsEnabled>:
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d101      	bne.n	80052e8 <LL_SPI_IsEnabled+0x18>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <LL_SPI_IsEnabled+0x1a>
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <LL_SPI_SetRxFIFOThreshold>:
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_SPI_SetCRCPolynomial>:
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	611a      	str	r2, [r3, #16]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ffc0 	bl	80052d0 <LL_SPI_IsEnabled>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d145      	bne.n	80053e2 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	6852      	ldr	r2, [r2, #4]
 800536a:	4311      	orrs	r1, r2
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	4311      	orrs	r1, r2
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	6912      	ldr	r2, [r2, #16]
 8005376:	4311      	orrs	r1, r2
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	6952      	ldr	r2, [r2, #20]
 800537c:	4311      	orrs	r1, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	6992      	ldr	r2, [r2, #24]
 8005382:	4311      	orrs	r1, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	69d2      	ldr	r2, [r2, #28]
 8005388:	4311      	orrs	r1, r2
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	6a12      	ldr	r2, [r2, #32]
 800538e:	430a      	orrs	r2, r1
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800539e:	f023 0304 	bic.w	r3, r3, #4
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	6891      	ldr	r1, [r2, #8]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	6952      	ldr	r2, [r2, #20]
 80053aa:	0c12      	lsrs	r2, r2, #16
 80053ac:	430a      	orrs	r2, r1
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d204      	bcs.n	80053c8 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80053be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ff97 	bl	80052f6 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d105      	bne.n	80053de <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff9f 	bl	800531c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <LL_USART_IsEnabled>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <LL_USART_IsEnabled+0x18>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <LL_USART_IsEnabled+0x1a>
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <LL_USART_SetStopBitsLength>:
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <LL_USART_SetHWFlowCtrl>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <LL_USART_SetBaudRate>:
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005472:	d11a      	bne.n	80054aa <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	005a      	lsls	r2, r3, #1
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	441a      	add	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800548e:	4013      	ands	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	60da      	str	r2, [r3, #12]
}
 80054a8:	e00a      	b.n	80054c0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	085a      	lsrs	r2, r3, #1
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	441a      	add	r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	60da      	str	r2, [r3, #12]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff84 	bl	80053ec <LL_USART_IsEnabled>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d15b      	bne.n	80055a2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <LL_USART_Init+0xe0>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	6851      	ldr	r1, [r2, #4]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	6912      	ldr	r2, [r2, #16]
 8005500:	4311      	orrs	r1, r2
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6992      	ldr	r2, [r2, #24]
 8005506:	430a      	orrs	r2, r1
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ff7c 	bl	8005412 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff89 	bl	8005438 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <LL_USART_Init+0xe4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d104      	bne.n	8005538 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800552e:	2003      	movs	r0, #3
 8005530:	f7ff fbf8 	bl	8004d24 <LL_RCC_GetUSARTClockFreq>
 8005534:	60b8      	str	r0, [r7, #8]
 8005536:	e023      	b.n	8005580 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <LL_USART_Init+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d104      	bne.n	800554a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005540:	200c      	movs	r0, #12
 8005542:	f7ff fbef 	bl	8004d24 <LL_RCC_GetUSARTClockFreq>
 8005546:	60b8      	str	r0, [r7, #8]
 8005548:	e01a      	b.n	8005580 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <LL_USART_Init+0xec>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d104      	bne.n	800555c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005552:	2030      	movs	r0, #48	; 0x30
 8005554:	f7ff fbe6 	bl	8004d24 <LL_RCC_GetUSARTClockFreq>
 8005558:	60b8      	str	r0, [r7, #8]
 800555a:	e011      	b.n	8005580 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <LL_USART_Init+0xf0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d104      	bne.n	800556e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005564:	20c0      	movs	r0, #192	; 0xc0
 8005566:	f7ff fcc1 	bl	8004eec <LL_RCC_GetUARTClockFreq>
 800556a:	60b8      	str	r0, [r7, #8]
 800556c:	e008      	b.n	8005580 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <LL_USART_Init+0xf4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d104      	bne.n	8005580 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005576:	f44f 7040 	mov.w	r0, #768	; 0x300
 800557a:	f7ff fcb7 	bl	8004eec <LL_RCC_GetUARTClockFreq>
 800557e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ff5e 	bl	800545e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	efff69f3 	.word	0xefff69f3
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40004400 	.word	0x40004400
 80055b8:	40004800 	.word	0x40004800
 80055bc:	40004c00 	.word	0x40004c00
 80055c0:	40005000 	.word	0x40005000

080055c4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <LL_InitTick+0x30>)
 80055d8:	3b01      	subs	r3, #1
 80055da:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <LL_InitTick+0x30>)
 80055de:	2200      	movs	r2, #0
 80055e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <LL_InitTick+0x30>)
 80055e4:	2205      	movs	r2, #5
 80055e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	e000e010 	.word	0xe000e010

080055f8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ffdd 	bl	80055c4 <LL_InitTick>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <LL_mDelay+0x4c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005626:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d00c      	beq.n	800564a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005636:	e008      	b.n	800564a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <LL_mDelay+0x4c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f3      	bne.n	8005638 <LL_mDelay+0x24>
    }
  }
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	e000e010 	.word	0xe000e010

08005664 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <LL_SetSystemCoreClock+0x1c>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000010 	.word	0x20000010

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	; (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	; (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	; (80056c8 <__libc_init_array+0x44>)
 8005698:	f001 f91e 	bl	80068d8 <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	080069b0 	.word	0x080069b0
 80056c0:	080069b0 	.word	0x080069b0
 80056c4:	080069b0 	.word	0x080069b0
 80056c8:	080069b4 	.word	0x080069b4

080056cc <memcpy>:
 80056cc:	440a      	add	r2, r1
 80056ce:	4291      	cmp	r1, r2
 80056d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056d4:	d100      	bne.n	80056d8 <memcpy+0xc>
 80056d6:	4770      	bx	lr
 80056d8:	b510      	push	{r4, lr}
 80056da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e2:	4291      	cmp	r1, r2
 80056e4:	d1f9      	bne.n	80056da <memcpy+0xe>
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <memset>:
 80056e8:	4402      	add	r2, r0
 80056ea:	4603      	mov	r3, r0
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d100      	bne.n	80056f2 <memset+0xa>
 80056f0:	4770      	bx	lr
 80056f2:	f803 1b01 	strb.w	r1, [r3], #1
 80056f6:	e7f9      	b.n	80056ec <memset+0x4>

080056f8 <atan>:
 80056f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	ec55 4b10 	vmov	r4, r5, d0
 8005700:	4bc3      	ldr	r3, [pc, #780]	; (8005a10 <atan+0x318>)
 8005702:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005706:	429e      	cmp	r6, r3
 8005708:	46ab      	mov	fp, r5
 800570a:	dd18      	ble.n	800573e <atan+0x46>
 800570c:	4bc1      	ldr	r3, [pc, #772]	; (8005a14 <atan+0x31c>)
 800570e:	429e      	cmp	r6, r3
 8005710:	dc01      	bgt.n	8005716 <atan+0x1e>
 8005712:	d109      	bne.n	8005728 <atan+0x30>
 8005714:	b144      	cbz	r4, 8005728 <atan+0x30>
 8005716:	4622      	mov	r2, r4
 8005718:	462b      	mov	r3, r5
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fa fd59 	bl	80001d4 <__adddf3>
 8005722:	4604      	mov	r4, r0
 8005724:	460d      	mov	r5, r1
 8005726:	e006      	b.n	8005736 <atan+0x3e>
 8005728:	f1bb 0f00 	cmp.w	fp, #0
 800572c:	f300 8131 	bgt.w	8005992 <atan+0x29a>
 8005730:	a59b      	add	r5, pc, #620	; (adr r5, 80059a0 <atan+0x2a8>)
 8005732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005736:	ec45 4b10 	vmov	d0, r4, r5
 800573a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	4bb6      	ldr	r3, [pc, #728]	; (8005a18 <atan+0x320>)
 8005740:	429e      	cmp	r6, r3
 8005742:	dc14      	bgt.n	800576e <atan+0x76>
 8005744:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005748:	429e      	cmp	r6, r3
 800574a:	dc0d      	bgt.n	8005768 <atan+0x70>
 800574c:	a396      	add	r3, pc, #600	; (adr r3, 80059a8 <atan+0x2b0>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	ee10 0a10 	vmov	r0, s0
 8005756:	4629      	mov	r1, r5
 8005758:	f7fa fd3c 	bl	80001d4 <__adddf3>
 800575c:	4baf      	ldr	r3, [pc, #700]	; (8005a1c <atan+0x324>)
 800575e:	2200      	movs	r2, #0
 8005760:	f7fb f97e 	bl	8000a60 <__aeabi_dcmpgt>
 8005764:	2800      	cmp	r0, #0
 8005766:	d1e6      	bne.n	8005736 <atan+0x3e>
 8005768:	f04f 3aff 	mov.w	sl, #4294967295
 800576c:	e02b      	b.n	80057c6 <atan+0xce>
 800576e:	f000 f963 	bl	8005a38 <fabs>
 8005772:	4bab      	ldr	r3, [pc, #684]	; (8005a20 <atan+0x328>)
 8005774:	429e      	cmp	r6, r3
 8005776:	ec55 4b10 	vmov	r4, r5, d0
 800577a:	f300 80bf 	bgt.w	80058fc <atan+0x204>
 800577e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005782:	429e      	cmp	r6, r3
 8005784:	f300 80a0 	bgt.w	80058c8 <atan+0x1d0>
 8005788:	ee10 2a10 	vmov	r2, s0
 800578c:	ee10 0a10 	vmov	r0, s0
 8005790:	462b      	mov	r3, r5
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa fd1e 	bl	80001d4 <__adddf3>
 8005798:	4ba0      	ldr	r3, [pc, #640]	; (8005a1c <atan+0x324>)
 800579a:	2200      	movs	r2, #0
 800579c:	f7fa fd18 	bl	80001d0 <__aeabi_dsub>
 80057a0:	2200      	movs	r2, #0
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057aa:	4620      	mov	r0, r4
 80057ac:	4629      	mov	r1, r5
 80057ae:	f7fa fd11 	bl	80001d4 <__adddf3>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fa ffeb 	bl	8000794 <__aeabi_ddiv>
 80057be:	f04f 0a00 	mov.w	sl, #0
 80057c2:	4604      	mov	r4, r0
 80057c4:	460d      	mov	r5, r1
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa feb7 	bl	8000540 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4680      	mov	r8, r0
 80057d8:	4689      	mov	r9, r1
 80057da:	f7fa feb1 	bl	8000540 <__aeabi_dmul>
 80057de:	a374      	add	r3, pc, #464	; (adr r3, 80059b0 <atan+0x2b8>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	4606      	mov	r6, r0
 80057e6:	460f      	mov	r7, r1
 80057e8:	f7fa feaa 	bl	8000540 <__aeabi_dmul>
 80057ec:	a372      	add	r3, pc, #456	; (adr r3, 80059b8 <atan+0x2c0>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f7fa fcef 	bl	80001d4 <__adddf3>
 80057f6:	4632      	mov	r2, r6
 80057f8:	463b      	mov	r3, r7
 80057fa:	f7fa fea1 	bl	8000540 <__aeabi_dmul>
 80057fe:	a370      	add	r3, pc, #448	; (adr r3, 80059c0 <atan+0x2c8>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fce6 	bl	80001d4 <__adddf3>
 8005808:	4632      	mov	r2, r6
 800580a:	463b      	mov	r3, r7
 800580c:	f7fa fe98 	bl	8000540 <__aeabi_dmul>
 8005810:	a36d      	add	r3, pc, #436	; (adr r3, 80059c8 <atan+0x2d0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f7fa fcdd 	bl	80001d4 <__adddf3>
 800581a:	4632      	mov	r2, r6
 800581c:	463b      	mov	r3, r7
 800581e:	f7fa fe8f 	bl	8000540 <__aeabi_dmul>
 8005822:	a36b      	add	r3, pc, #428	; (adr r3, 80059d0 <atan+0x2d8>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fcd4 	bl	80001d4 <__adddf3>
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	f7fa fe86 	bl	8000540 <__aeabi_dmul>
 8005834:	a368      	add	r3, pc, #416	; (adr r3, 80059d8 <atan+0x2e0>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fccb 	bl	80001d4 <__adddf3>
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	f7fa fe7d 	bl	8000540 <__aeabi_dmul>
 8005846:	a366      	add	r3, pc, #408	; (adr r3, 80059e0 <atan+0x2e8>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	4680      	mov	r8, r0
 800584e:	4689      	mov	r9, r1
 8005850:	4630      	mov	r0, r6
 8005852:	4639      	mov	r1, r7
 8005854:	f7fa fe74 	bl	8000540 <__aeabi_dmul>
 8005858:	a363      	add	r3, pc, #396	; (adr r3, 80059e8 <atan+0x2f0>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fcb7 	bl	80001d0 <__aeabi_dsub>
 8005862:	4632      	mov	r2, r6
 8005864:	463b      	mov	r3, r7
 8005866:	f7fa fe6b 	bl	8000540 <__aeabi_dmul>
 800586a:	a361      	add	r3, pc, #388	; (adr r3, 80059f0 <atan+0x2f8>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fcae 	bl	80001d0 <__aeabi_dsub>
 8005874:	4632      	mov	r2, r6
 8005876:	463b      	mov	r3, r7
 8005878:	f7fa fe62 	bl	8000540 <__aeabi_dmul>
 800587c:	a35e      	add	r3, pc, #376	; (adr r3, 80059f8 <atan+0x300>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f7fa fca5 	bl	80001d0 <__aeabi_dsub>
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	f7fa fe59 	bl	8000540 <__aeabi_dmul>
 800588e:	a35c      	add	r3, pc, #368	; (adr r3, 8005a00 <atan+0x308>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fc9c 	bl	80001d0 <__aeabi_dsub>
 8005898:	4632      	mov	r2, r6
 800589a:	463b      	mov	r3, r7
 800589c:	f7fa fe50 	bl	8000540 <__aeabi_dmul>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4640      	mov	r0, r8
 80058a6:	4649      	mov	r1, r9
 80058a8:	f7fa fc94 	bl	80001d4 <__adddf3>
 80058ac:	4622      	mov	r2, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	f7fa fe46 	bl	8000540 <__aeabi_dmul>
 80058b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	d14b      	bne.n	8005956 <atan+0x25e>
 80058be:	4620      	mov	r0, r4
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7fa fc85 	bl	80001d0 <__aeabi_dsub>
 80058c6:	e72c      	b.n	8005722 <atan+0x2a>
 80058c8:	ee10 0a10 	vmov	r0, s0
 80058cc:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <atan+0x324>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fc7d 	bl	80001d0 <__aeabi_dsub>
 80058d6:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <atan+0x324>)
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	2200      	movs	r2, #0
 80058de:	4620      	mov	r0, r4
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7fa fc77 	bl	80001d4 <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4630      	mov	r0, r6
 80058ec:	4639      	mov	r1, r7
 80058ee:	f7fa ff51 	bl	8000794 <__aeabi_ddiv>
 80058f2:	f04f 0a01 	mov.w	sl, #1
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
 80058fa:	e764      	b.n	80057c6 <atan+0xce>
 80058fc:	4b49      	ldr	r3, [pc, #292]	; (8005a24 <atan+0x32c>)
 80058fe:	429e      	cmp	r6, r3
 8005900:	da1d      	bge.n	800593e <atan+0x246>
 8005902:	ee10 0a10 	vmov	r0, s0
 8005906:	4b48      	ldr	r3, [pc, #288]	; (8005a28 <atan+0x330>)
 8005908:	2200      	movs	r2, #0
 800590a:	4629      	mov	r1, r5
 800590c:	f7fa fc60 	bl	80001d0 <__aeabi_dsub>
 8005910:	4b45      	ldr	r3, [pc, #276]	; (8005a28 <atan+0x330>)
 8005912:	4606      	mov	r6, r0
 8005914:	460f      	mov	r7, r1
 8005916:	2200      	movs	r2, #0
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa fe10 	bl	8000540 <__aeabi_dmul>
 8005920:	4b3e      	ldr	r3, [pc, #248]	; (8005a1c <atan+0x324>)
 8005922:	2200      	movs	r2, #0
 8005924:	f7fa fc56 	bl	80001d4 <__adddf3>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4630      	mov	r0, r6
 800592e:	4639      	mov	r1, r7
 8005930:	f7fa ff30 	bl	8000794 <__aeabi_ddiv>
 8005934:	f04f 0a02 	mov.w	sl, #2
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	e743      	b.n	80057c6 <atan+0xce>
 800593e:	462b      	mov	r3, r5
 8005940:	ee10 2a10 	vmov	r2, s0
 8005944:	4939      	ldr	r1, [pc, #228]	; (8005a2c <atan+0x334>)
 8005946:	2000      	movs	r0, #0
 8005948:	f7fa ff24 	bl	8000794 <__aeabi_ddiv>
 800594c:	f04f 0a03 	mov.w	sl, #3
 8005950:	4604      	mov	r4, r0
 8005952:	460d      	mov	r5, r1
 8005954:	e737      	b.n	80057c6 <atan+0xce>
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <atan+0x338>)
 8005958:	4e36      	ldr	r6, [pc, #216]	; (8005a34 <atan+0x33c>)
 800595a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800595e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005962:	e9da 2300 	ldrd	r2, r3, [sl]
 8005966:	f7fa fc33 	bl	80001d0 <__aeabi_dsub>
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	f7fa fc2f 	bl	80001d0 <__aeabi_dsub>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	e9d6 0100 	ldrd	r0, r1, [r6]
 800597a:	f7fa fc29 	bl	80001d0 <__aeabi_dsub>
 800597e:	f1bb 0f00 	cmp.w	fp, #0
 8005982:	4604      	mov	r4, r0
 8005984:	460d      	mov	r5, r1
 8005986:	f6bf aed6 	bge.w	8005736 <atan+0x3e>
 800598a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800598e:	461d      	mov	r5, r3
 8005990:	e6d1      	b.n	8005736 <atan+0x3e>
 8005992:	a51d      	add	r5, pc, #116	; (adr r5, 8005a08 <atan+0x310>)
 8005994:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005998:	e6cd      	b.n	8005736 <atan+0x3e>
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w
 80059a0:	54442d18 	.word	0x54442d18
 80059a4:	bff921fb 	.word	0xbff921fb
 80059a8:	8800759c 	.word	0x8800759c
 80059ac:	7e37e43c 	.word	0x7e37e43c
 80059b0:	e322da11 	.word	0xe322da11
 80059b4:	3f90ad3a 	.word	0x3f90ad3a
 80059b8:	24760deb 	.word	0x24760deb
 80059bc:	3fa97b4b 	.word	0x3fa97b4b
 80059c0:	a0d03d51 	.word	0xa0d03d51
 80059c4:	3fb10d66 	.word	0x3fb10d66
 80059c8:	c54c206e 	.word	0xc54c206e
 80059cc:	3fb745cd 	.word	0x3fb745cd
 80059d0:	920083ff 	.word	0x920083ff
 80059d4:	3fc24924 	.word	0x3fc24924
 80059d8:	5555550d 	.word	0x5555550d
 80059dc:	3fd55555 	.word	0x3fd55555
 80059e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80059e4:	bfa2b444 	.word	0xbfa2b444
 80059e8:	52defd9a 	.word	0x52defd9a
 80059ec:	3fadde2d 	.word	0x3fadde2d
 80059f0:	af749a6d 	.word	0xaf749a6d
 80059f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80059f8:	fe231671 	.word	0xfe231671
 80059fc:	3fbc71c6 	.word	0x3fbc71c6
 8005a00:	9998ebc4 	.word	0x9998ebc4
 8005a04:	3fc99999 	.word	0x3fc99999
 8005a08:	54442d18 	.word	0x54442d18
 8005a0c:	3ff921fb 	.word	0x3ff921fb
 8005a10:	440fffff 	.word	0x440fffff
 8005a14:	7ff00000 	.word	0x7ff00000
 8005a18:	3fdbffff 	.word	0x3fdbffff
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	3ff2ffff 	.word	0x3ff2ffff
 8005a24:	40038000 	.word	0x40038000
 8005a28:	3ff80000 	.word	0x3ff80000
 8005a2c:	bff00000 	.word	0xbff00000
 8005a30:	08006960 	.word	0x08006960
 8005a34:	08006940 	.word	0x08006940

08005a38 <fabs>:
 8005a38:	ec51 0b10 	vmov	r0, r1, d0
 8005a3c:	ee10 2a10 	vmov	r2, s0
 8005a40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a44:	ec43 2b10 	vmov	d0, r2, r3
 8005a48:	4770      	bx	lr
	...

08005a4c <pow>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	ed2d 8b02 	vpush	{d8}
 8005a52:	eeb0 8a40 	vmov.f32	s16, s0
 8005a56:	eef0 8a60 	vmov.f32	s17, s1
 8005a5a:	ec55 4b11 	vmov	r4, r5, d1
 8005a5e:	f000 f893 	bl	8005b88 <__ieee754_pow>
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	ec57 6b10 	vmov	r6, r7, d0
 8005a6e:	f7fb f801 	bl	8000a74 <__aeabi_dcmpun>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d13b      	bne.n	8005aee <pow+0xa2>
 8005a76:	ec51 0b18 	vmov	r0, r1, d8
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f7fa ffc7 	bl	8000a10 <__aeabi_dcmpeq>
 8005a82:	b1b8      	cbz	r0, 8005ab4 <pow+0x68>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	f7fa ffc0 	bl	8000a10 <__aeabi_dcmpeq>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d146      	bne.n	8005b22 <pow+0xd6>
 8005a94:	ec45 4b10 	vmov	d0, r4, r5
 8005a98:	f000 fe86 	bl	80067a8 <finite>
 8005a9c:	b338      	cbz	r0, 8005aee <pow+0xa2>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa ffbd 	bl	8000a24 <__aeabi_dcmplt>
 8005aaa:	b300      	cbz	r0, 8005aee <pow+0xa2>
 8005aac:	f000 ff0e 	bl	80068cc <__errno>
 8005ab0:	2322      	movs	r3, #34	; 0x22
 8005ab2:	e01b      	b.n	8005aec <pow+0xa0>
 8005ab4:	ec47 6b10 	vmov	d0, r6, r7
 8005ab8:	f000 fe76 	bl	80067a8 <finite>
 8005abc:	b9e0      	cbnz	r0, 8005af8 <pow+0xac>
 8005abe:	eeb0 0a48 	vmov.f32	s0, s16
 8005ac2:	eef0 0a68 	vmov.f32	s1, s17
 8005ac6:	f000 fe6f 	bl	80067a8 <finite>
 8005aca:	b1a8      	cbz	r0, 8005af8 <pow+0xac>
 8005acc:	ec45 4b10 	vmov	d0, r4, r5
 8005ad0:	f000 fe6a 	bl	80067a8 <finite>
 8005ad4:	b180      	cbz	r0, 8005af8 <pow+0xac>
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa ffc9 	bl	8000a74 <__aeabi_dcmpun>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d0e2      	beq.n	8005aac <pow+0x60>
 8005ae6:	f000 fef1 	bl	80068cc <__errno>
 8005aea:	2321      	movs	r3, #33	; 0x21
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	ecbd 8b02 	vpop	{d8}
 8005af2:	ec47 6b10 	vmov	d0, r6, r7
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa ff86 	bl	8000a10 <__aeabi_dcmpeq>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0f2      	beq.n	8005aee <pow+0xa2>
 8005b08:	eeb0 0a48 	vmov.f32	s0, s16
 8005b0c:	eef0 0a68 	vmov.f32	s1, s17
 8005b10:	f000 fe4a 	bl	80067a8 <finite>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d0ea      	beq.n	8005aee <pow+0xa2>
 8005b18:	ec45 4b10 	vmov	d0, r4, r5
 8005b1c:	f000 fe44 	bl	80067a8 <finite>
 8005b20:	e7c3      	b.n	8005aaa <pow+0x5e>
 8005b22:	4f01      	ldr	r7, [pc, #4]	; (8005b28 <pow+0xdc>)
 8005b24:	2600      	movs	r6, #0
 8005b26:	e7e2      	b.n	8005aee <pow+0xa2>
 8005b28:	3ff00000 	.word	0x3ff00000

08005b2c <sqrt>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	ed2d 8b02 	vpush	{d8}
 8005b32:	ec55 4b10 	vmov	r4, r5, d0
 8005b36:	f000 fd55 	bl	80065e4 <__ieee754_sqrt>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	eeb0 8a40 	vmov.f32	s16, s0
 8005b46:	eef0 8a60 	vmov.f32	s17, s1
 8005b4a:	f7fa ff93 	bl	8000a74 <__aeabi_dcmpun>
 8005b4e:	b990      	cbnz	r0, 8005b76 <sqrt+0x4a>
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fa ff64 	bl	8000a24 <__aeabi_dcmplt>
 8005b5c:	b158      	cbz	r0, 8005b76 <sqrt+0x4a>
 8005b5e:	f000 feb5 	bl	80068cc <__errno>
 8005b62:	2321      	movs	r3, #33	; 0x21
 8005b64:	6003      	str	r3, [r0, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f7fa fe11 	bl	8000794 <__aeabi_ddiv>
 8005b72:	ec41 0b18 	vmov	d8, r0, r1
 8005b76:	eeb0 0a48 	vmov.f32	s0, s16
 8005b7a:	eef0 0a68 	vmov.f32	s1, s17
 8005b7e:	ecbd 8b02 	vpop	{d8}
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <__ieee754_pow>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	ed2d 8b06 	vpush	{d8-d10}
 8005b90:	b089      	sub	sp, #36	; 0x24
 8005b92:	ed8d 1b00 	vstr	d1, [sp]
 8005b96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005b9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005b9e:	ea58 0102 	orrs.w	r1, r8, r2
 8005ba2:	ec57 6b10 	vmov	r6, r7, d0
 8005ba6:	d115      	bne.n	8005bd4 <__ieee754_pow+0x4c>
 8005ba8:	19b3      	adds	r3, r6, r6
 8005baa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005bae:	4152      	adcs	r2, r2
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	4b89      	ldr	r3, [pc, #548]	; (8005dd8 <__ieee754_pow+0x250>)
 8005bb4:	4193      	sbcs	r3, r2
 8005bb6:	f080 84d2 	bcs.w	800655e <__ieee754_pow+0x9d6>
 8005bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb07 	bl	80001d4 <__adddf3>
 8005bc6:	ec41 0b10 	vmov	d0, r0, r1
 8005bca:	b009      	add	sp, #36	; 0x24
 8005bcc:	ecbd 8b06 	vpop	{d8-d10}
 8005bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd4:	4b81      	ldr	r3, [pc, #516]	; (8005ddc <__ieee754_pow+0x254>)
 8005bd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	ee10 aa10 	vmov	sl, s0
 8005be0:	463d      	mov	r5, r7
 8005be2:	dc06      	bgt.n	8005bf2 <__ieee754_pow+0x6a>
 8005be4:	d101      	bne.n	8005bea <__ieee754_pow+0x62>
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	d1e7      	bne.n	8005bba <__ieee754_pow+0x32>
 8005bea:	4598      	cmp	r8, r3
 8005bec:	dc01      	bgt.n	8005bf2 <__ieee754_pow+0x6a>
 8005bee:	d10f      	bne.n	8005c10 <__ieee754_pow+0x88>
 8005bf0:	b172      	cbz	r2, 8005c10 <__ieee754_pow+0x88>
 8005bf2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005bf6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005bfa:	ea55 050a 	orrs.w	r5, r5, sl
 8005bfe:	d1dc      	bne.n	8005bba <__ieee754_pow+0x32>
 8005c00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005c04:	18db      	adds	r3, r3, r3
 8005c06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005c0a:	4152      	adcs	r2, r2
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	e7d0      	b.n	8005bb2 <__ieee754_pow+0x2a>
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	da3b      	bge.n	8005c8c <__ieee754_pow+0x104>
 8005c14:	4b72      	ldr	r3, [pc, #456]	; (8005de0 <__ieee754_pow+0x258>)
 8005c16:	4598      	cmp	r8, r3
 8005c18:	dc51      	bgt.n	8005cbe <__ieee754_pow+0x136>
 8005c1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005c1e:	4598      	cmp	r8, r3
 8005c20:	f340 84ac 	ble.w	800657c <__ieee754_pow+0x9f4>
 8005c24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c2c:	2b14      	cmp	r3, #20
 8005c2e:	dd0f      	ble.n	8005c50 <__ieee754_pow+0xc8>
 8005c30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005c34:	fa22 f103 	lsr.w	r1, r2, r3
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	f040 849d 	bne.w	800657c <__ieee754_pow+0x9f4>
 8005c42:	f001 0101 	and.w	r1, r1, #1
 8005c46:	f1c1 0302 	rsb	r3, r1, #2
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	b182      	cbz	r2, 8005c70 <__ieee754_pow+0xe8>
 8005c4e:	e05f      	b.n	8005d10 <__ieee754_pow+0x188>
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d15b      	bne.n	8005d0c <__ieee754_pow+0x184>
 8005c54:	f1c3 0314 	rsb	r3, r3, #20
 8005c58:	fa48 f103 	asr.w	r1, r8, r3
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	4543      	cmp	r3, r8
 8005c62:	f040 8488 	bne.w	8006576 <__ieee754_pow+0x9ee>
 8005c66:	f001 0101 	and.w	r1, r1, #1
 8005c6a:	f1c1 0302 	rsb	r3, r1, #2
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	4b5c      	ldr	r3, [pc, #368]	; (8005de4 <__ieee754_pow+0x25c>)
 8005c72:	4598      	cmp	r8, r3
 8005c74:	d132      	bne.n	8005cdc <__ieee754_pow+0x154>
 8005c76:	f1b9 0f00 	cmp.w	r9, #0
 8005c7a:	f280 8478 	bge.w	800656e <__ieee754_pow+0x9e6>
 8005c7e:	4959      	ldr	r1, [pc, #356]	; (8005de4 <__ieee754_pow+0x25c>)
 8005c80:	4632      	mov	r2, r6
 8005c82:	463b      	mov	r3, r7
 8005c84:	2000      	movs	r0, #0
 8005c86:	f7fa fd85 	bl	8000794 <__aeabi_ddiv>
 8005c8a:	e79c      	b.n	8005bc6 <__ieee754_pow+0x3e>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d13d      	bne.n	8005d10 <__ieee754_pow+0x188>
 8005c94:	4b51      	ldr	r3, [pc, #324]	; (8005ddc <__ieee754_pow+0x254>)
 8005c96:	4598      	cmp	r8, r3
 8005c98:	d1ea      	bne.n	8005c70 <__ieee754_pow+0xe8>
 8005c9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8005ca6:	f000 845a 	beq.w	800655e <__ieee754_pow+0x9d6>
 8005caa:	4b4f      	ldr	r3, [pc, #316]	; (8005de8 <__ieee754_pow+0x260>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	dd08      	ble.n	8005cc2 <__ieee754_pow+0x13a>
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	f2c0 8457 	blt.w	8006566 <__ieee754_pow+0x9de>
 8005cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cbc:	e783      	b.n	8005bc6 <__ieee754_pow+0x3e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e7e5      	b.n	8005c8e <__ieee754_pow+0x106>
 8005cc2:	f1b9 0f00 	cmp.w	r9, #0
 8005cc6:	f04f 0000 	mov.w	r0, #0
 8005cca:	f04f 0100 	mov.w	r1, #0
 8005cce:	f6bf af7a 	bge.w	8005bc6 <__ieee754_pow+0x3e>
 8005cd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005cd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005cda:	e774      	b.n	8005bc6 <__ieee754_pow+0x3e>
 8005cdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005ce0:	d106      	bne.n	8005cf0 <__ieee754_pow+0x168>
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	f7fa fc29 	bl	8000540 <__aeabi_dmul>
 8005cee:	e76a      	b.n	8005bc6 <__ieee754_pow+0x3e>
 8005cf0:	4b3e      	ldr	r3, [pc, #248]	; (8005dec <__ieee754_pow+0x264>)
 8005cf2:	4599      	cmp	r9, r3
 8005cf4:	d10c      	bne.n	8005d10 <__ieee754_pow+0x188>
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	db0a      	blt.n	8005d10 <__ieee754_pow+0x188>
 8005cfa:	ec47 6b10 	vmov	d0, r6, r7
 8005cfe:	b009      	add	sp, #36	; 0x24
 8005d00:	ecbd 8b06 	vpop	{d8-d10}
 8005d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	f000 bc6c 	b.w	80065e4 <__ieee754_sqrt>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	ec47 6b10 	vmov	d0, r6, r7
 8005d14:	f7ff fe90 	bl	8005a38 <fabs>
 8005d18:	ec51 0b10 	vmov	r0, r1, d0
 8005d1c:	f1ba 0f00 	cmp.w	sl, #0
 8005d20:	d129      	bne.n	8005d76 <__ieee754_pow+0x1ee>
 8005d22:	b124      	cbz	r4, 8005d2e <__ieee754_pow+0x1a6>
 8005d24:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <__ieee754_pow+0x25c>)
 8005d26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d123      	bne.n	8005d76 <__ieee754_pow+0x1ee>
 8005d2e:	f1b9 0f00 	cmp.w	r9, #0
 8005d32:	da05      	bge.n	8005d40 <__ieee754_pow+0x1b8>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	2000      	movs	r0, #0
 8005d3a:	492a      	ldr	r1, [pc, #168]	; (8005de4 <__ieee754_pow+0x25c>)
 8005d3c:	f7fa fd2a 	bl	8000794 <__aeabi_ddiv>
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	f6bf af40 	bge.w	8005bc6 <__ieee754_pow+0x3e>
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d50:	4323      	orrs	r3, r4
 8005d52:	d108      	bne.n	8005d66 <__ieee754_pow+0x1de>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f7fa fa38 	bl	80001d0 <__aeabi_dsub>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	e78f      	b.n	8005c86 <__ieee754_pow+0xfe>
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f47f af2c 	bne.w	8005bc6 <__ieee754_pow+0x3e>
 8005d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d72:	4619      	mov	r1, r3
 8005d74:	e727      	b.n	8005bc6 <__ieee754_pow+0x3e>
 8005d76:	0feb      	lsrs	r3, r5, #31
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	9306      	str	r3, [sp, #24]
 8005d7c:	9a06      	ldr	r2, [sp, #24]
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d102      	bne.n	8005d8a <__ieee754_pow+0x202>
 8005d84:	4632      	mov	r2, r6
 8005d86:	463b      	mov	r3, r7
 8005d88:	e7e6      	b.n	8005d58 <__ieee754_pow+0x1d0>
 8005d8a:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <__ieee754_pow+0x268>)
 8005d8c:	4598      	cmp	r8, r3
 8005d8e:	f340 80fb 	ble.w	8005f88 <__ieee754_pow+0x400>
 8005d92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d96:	4598      	cmp	r8, r3
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <__ieee754_pow+0x260>)
 8005d9a:	dd0c      	ble.n	8005db6 <__ieee754_pow+0x22e>
 8005d9c:	429c      	cmp	r4, r3
 8005d9e:	dc0f      	bgt.n	8005dc0 <__ieee754_pow+0x238>
 8005da0:	f1b9 0f00 	cmp.w	r9, #0
 8005da4:	da0f      	bge.n	8005dc6 <__ieee754_pow+0x23e>
 8005da6:	2000      	movs	r0, #0
 8005da8:	b009      	add	sp, #36	; 0x24
 8005daa:	ecbd 8b06 	vpop	{d8-d10}
 8005dae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db2:	f000 bcf0 	b.w	8006796 <__math_oflow>
 8005db6:	429c      	cmp	r4, r3
 8005db8:	dbf2      	blt.n	8005da0 <__ieee754_pow+0x218>
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <__ieee754_pow+0x25c>)
 8005dbc:	429c      	cmp	r4, r3
 8005dbe:	dd19      	ble.n	8005df4 <__ieee754_pow+0x26c>
 8005dc0:	f1b9 0f00 	cmp.w	r9, #0
 8005dc4:	dcef      	bgt.n	8005da6 <__ieee754_pow+0x21e>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	b009      	add	sp, #36	; 0x24
 8005dca:	ecbd 8b06 	vpop	{d8-d10}
 8005dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd2:	f000 bcd7 	b.w	8006784 <__math_uflow>
 8005dd6:	bf00      	nop
 8005dd8:	fff00000 	.word	0xfff00000
 8005ddc:	7ff00000 	.word	0x7ff00000
 8005de0:	433fffff 	.word	0x433fffff
 8005de4:	3ff00000 	.word	0x3ff00000
 8005de8:	3fefffff 	.word	0x3fefffff
 8005dec:	3fe00000 	.word	0x3fe00000
 8005df0:	41e00000 	.word	0x41e00000
 8005df4:	4b60      	ldr	r3, [pc, #384]	; (8005f78 <__ieee754_pow+0x3f0>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	f7fa f9ea 	bl	80001d0 <__aeabi_dsub>
 8005dfc:	a354      	add	r3, pc, #336	; (adr r3, 8005f50 <__ieee754_pow+0x3c8>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	4604      	mov	r4, r0
 8005e04:	460d      	mov	r5, r1
 8005e06:	f7fa fb9b 	bl	8000540 <__aeabi_dmul>
 8005e0a:	a353      	add	r3, pc, #332	; (adr r3, 8005f58 <__ieee754_pow+0x3d0>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	4620      	mov	r0, r4
 8005e16:	4629      	mov	r1, r5
 8005e18:	f7fa fb92 	bl	8000540 <__aeabi_dmul>
 8005e1c:	4b57      	ldr	r3, [pc, #348]	; (8005f7c <__ieee754_pow+0x3f4>)
 8005e1e:	4682      	mov	sl, r0
 8005e20:	468b      	mov	fp, r1
 8005e22:	2200      	movs	r2, #0
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa fb8a 	bl	8000540 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	a14b      	add	r1, pc, #300	; (adr r1, 8005f60 <__ieee754_pow+0x3d8>)
 8005e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e36:	f7fa f9cb 	bl	80001d0 <__aeabi_dsub>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	f7fa fb7f 	bl	8000540 <__aeabi_dmul>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	2000      	movs	r0, #0
 8005e48:	494d      	ldr	r1, [pc, #308]	; (8005f80 <__ieee754_pow+0x3f8>)
 8005e4a:	f7fa f9c1 	bl	80001d0 <__aeabi_dsub>
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4680      	mov	r8, r0
 8005e52:	4689      	mov	r9, r1
 8005e54:	462b      	mov	r3, r5
 8005e56:	4620      	mov	r0, r4
 8005e58:	4629      	mov	r1, r5
 8005e5a:	f7fa fb71 	bl	8000540 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fb6b 	bl	8000540 <__aeabi_dmul>
 8005e6a:	a33f      	add	r3, pc, #252	; (adr r3, 8005f68 <__ieee754_pow+0x3e0>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa fb66 	bl	8000540 <__aeabi_dmul>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4650      	mov	r0, sl
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	f7fa f9a8 	bl	80001d0 <__aeabi_dsub>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4680      	mov	r8, r0
 8005e86:	4689      	mov	r9, r1
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa f9a2 	bl	80001d4 <__adddf3>
 8005e90:	2000      	movs	r0, #0
 8005e92:	4632      	mov	r2, r6
 8005e94:	463b      	mov	r3, r7
 8005e96:	4604      	mov	r4, r0
 8005e98:	460d      	mov	r5, r1
 8005e9a:	f7fa f999 	bl	80001d0 <__aeabi_dsub>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	f7fa f993 	bl	80001d0 <__aeabi_dsub>
 8005eaa:	9b04      	ldr	r3, [sp, #16]
 8005eac:	9a06      	ldr	r2, [sp, #24]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	468b      	mov	fp, r1
 8005eb6:	f040 81e7 	bne.w	8006288 <__ieee754_pow+0x700>
 8005eba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005f70 <__ieee754_pow+0x3e8>
 8005ebe:	eeb0 8a47 	vmov.f32	s16, s14
 8005ec2:	eef0 8a67 	vmov.f32	s17, s15
 8005ec6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005eca:	2600      	movs	r6, #0
 8005ecc:	4632      	mov	r2, r6
 8005ece:	463b      	mov	r3, r7
 8005ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ed4:	f7fa f97c 	bl	80001d0 <__aeabi_dsub>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	462b      	mov	r3, r5
 8005edc:	f7fa fb30 	bl	8000540 <__aeabi_dmul>
 8005ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4689      	mov	r9, r1
 8005ee8:	4650      	mov	r0, sl
 8005eea:	4659      	mov	r1, fp
 8005eec:	f7fa fb28 	bl	8000540 <__aeabi_dmul>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	f7fa f96c 	bl	80001d4 <__adddf3>
 8005efc:	4632      	mov	r2, r6
 8005efe:	463b      	mov	r3, r7
 8005f00:	4680      	mov	r8, r0
 8005f02:	4689      	mov	r9, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fb1a 	bl	8000540 <__aeabi_dmul>
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4604      	mov	r4, r0
 8005f10:	460d      	mov	r5, r1
 8005f12:	4602      	mov	r2, r0
 8005f14:	4649      	mov	r1, r9
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7fa f95c 	bl	80001d4 <__adddf3>
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <__ieee754_pow+0x3fc>)
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	ec45 4b19 	vmov	d9, r4, r5
 8005f24:	4606      	mov	r6, r0
 8005f26:	460f      	mov	r7, r1
 8005f28:	468b      	mov	fp, r1
 8005f2a:	f340 82f1 	ble.w	8006510 <__ieee754_pow+0x988>
 8005f2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005f32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005f36:	4303      	orrs	r3, r0
 8005f38:	f000 81e4 	beq.w	8006304 <__ieee754_pow+0x77c>
 8005f3c:	ec51 0b18 	vmov	r0, r1, d8
 8005f40:	2200      	movs	r2, #0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f7fa fd6e 	bl	8000a24 <__aeabi_dcmplt>
 8005f48:	3800      	subs	r0, #0
 8005f4a:	bf18      	it	ne
 8005f4c:	2001      	movne	r0, #1
 8005f4e:	e72b      	b.n	8005da8 <__ieee754_pow+0x220>
 8005f50:	60000000 	.word	0x60000000
 8005f54:	3ff71547 	.word	0x3ff71547
 8005f58:	f85ddf44 	.word	0xf85ddf44
 8005f5c:	3e54ae0b 	.word	0x3e54ae0b
 8005f60:	55555555 	.word	0x55555555
 8005f64:	3fd55555 	.word	0x3fd55555
 8005f68:	652b82fe 	.word	0x652b82fe
 8005f6c:	3ff71547 	.word	0x3ff71547
 8005f70:	00000000 	.word	0x00000000
 8005f74:	bff00000 	.word	0xbff00000
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	3fd00000 	.word	0x3fd00000
 8005f80:	3fe00000 	.word	0x3fe00000
 8005f84:	408fffff 	.word	0x408fffff
 8005f88:	4bd5      	ldr	r3, [pc, #852]	; (80062e0 <__ieee754_pow+0x758>)
 8005f8a:	402b      	ands	r3, r5
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	b92b      	cbnz	r3, 8005f9c <__ieee754_pow+0x414>
 8005f90:	4bd4      	ldr	r3, [pc, #848]	; (80062e4 <__ieee754_pow+0x75c>)
 8005f92:	f7fa fad5 	bl	8000540 <__aeabi_dmul>
 8005f96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	1523      	asrs	r3, r4, #20
 8005f9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005fa2:	4413      	add	r3, r2
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	4bd0      	ldr	r3, [pc, #832]	; (80062e8 <__ieee754_pow+0x760>)
 8005fa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005fac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005fb6:	dd08      	ble.n	8005fca <__ieee754_pow+0x442>
 8005fb8:	4bcc      	ldr	r3, [pc, #816]	; (80062ec <__ieee754_pow+0x764>)
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	f340 8162 	ble.w	8006284 <__ieee754_pow+0x6fc>
 8005fc0:	9b05      	ldr	r3, [sp, #20]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005fca:	2400      	movs	r4, #0
 8005fcc:	00e3      	lsls	r3, r4, #3
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	4bc7      	ldr	r3, [pc, #796]	; (80062f0 <__ieee754_pow+0x768>)
 8005fd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fd6:	ed93 7b00 	vldr	d7, [r3]
 8005fda:	4629      	mov	r1, r5
 8005fdc:	ec53 2b17 	vmov	r2, r3, d7
 8005fe0:	eeb0 9a47 	vmov.f32	s18, s14
 8005fe4:	eef0 9a67 	vmov.f32	s19, s15
 8005fe8:	4682      	mov	sl, r0
 8005fea:	f7fa f8f1 	bl	80001d0 <__aeabi_dsub>
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	460f      	mov	r7, r1
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	ec51 0b19 	vmov	r0, r1, d9
 8005ffa:	f7fa f8eb 	bl	80001d4 <__adddf3>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	2000      	movs	r0, #0
 8006004:	49bb      	ldr	r1, [pc, #748]	; (80062f4 <__ieee754_pow+0x76c>)
 8006006:	f7fa fbc5 	bl	8000794 <__aeabi_ddiv>
 800600a:	ec41 0b1a 	vmov	d10, r0, r1
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa fa93 	bl	8000540 <__aeabi_dmul>
 800601a:	2300      	movs	r3, #0
 800601c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006020:	9302      	str	r3, [sp, #8]
 8006022:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006026:	46ab      	mov	fp, r5
 8006028:	106d      	asrs	r5, r5, #1
 800602a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800602e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006032:	ec41 0b18 	vmov	d8, r0, r1
 8006036:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800603a:	2200      	movs	r2, #0
 800603c:	4640      	mov	r0, r8
 800603e:	4649      	mov	r1, r9
 8006040:	4614      	mov	r4, r2
 8006042:	461d      	mov	r5, r3
 8006044:	f7fa fa7c 	bl	8000540 <__aeabi_dmul>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4630      	mov	r0, r6
 800604e:	4639      	mov	r1, r7
 8006050:	f7fa f8be 	bl	80001d0 <__aeabi_dsub>
 8006054:	ec53 2b19 	vmov	r2, r3, d9
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa f8b6 	bl	80001d0 <__aeabi_dsub>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4650      	mov	r0, sl
 800606a:	4659      	mov	r1, fp
 800606c:	f7fa f8b0 	bl	80001d0 <__aeabi_dsub>
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	f7fa fa64 	bl	8000540 <__aeabi_dmul>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa f8a6 	bl	80001d0 <__aeabi_dsub>
 8006084:	ec53 2b1a 	vmov	r2, r3, d10
 8006088:	f7fa fa5a 	bl	8000540 <__aeabi_dmul>
 800608c:	ec53 2b18 	vmov	r2, r3, d8
 8006090:	ec41 0b19 	vmov	d9, r0, r1
 8006094:	ec51 0b18 	vmov	r0, r1, d8
 8006098:	f7fa fa52 	bl	8000540 <__aeabi_dmul>
 800609c:	a37c      	add	r3, pc, #496	; (adr r3, 8006290 <__ieee754_pow+0x708>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	4604      	mov	r4, r0
 80060a4:	460d      	mov	r5, r1
 80060a6:	f7fa fa4b 	bl	8000540 <__aeabi_dmul>
 80060aa:	a37b      	add	r3, pc, #492	; (adr r3, 8006298 <__ieee754_pow+0x710>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa f890 	bl	80001d4 <__adddf3>
 80060b4:	4622      	mov	r2, r4
 80060b6:	462b      	mov	r3, r5
 80060b8:	f7fa fa42 	bl	8000540 <__aeabi_dmul>
 80060bc:	a378      	add	r3, pc, #480	; (adr r3, 80062a0 <__ieee754_pow+0x718>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f7fa f887 	bl	80001d4 <__adddf3>
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	f7fa fa39 	bl	8000540 <__aeabi_dmul>
 80060ce:	a376      	add	r3, pc, #472	; (adr r3, 80062a8 <__ieee754_pow+0x720>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa f87e 	bl	80001d4 <__adddf3>
 80060d8:	4622      	mov	r2, r4
 80060da:	462b      	mov	r3, r5
 80060dc:	f7fa fa30 	bl	8000540 <__aeabi_dmul>
 80060e0:	a373      	add	r3, pc, #460	; (adr r3, 80062b0 <__ieee754_pow+0x728>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa f875 	bl	80001d4 <__adddf3>
 80060ea:	4622      	mov	r2, r4
 80060ec:	462b      	mov	r3, r5
 80060ee:	f7fa fa27 	bl	8000540 <__aeabi_dmul>
 80060f2:	a371      	add	r3, pc, #452	; (adr r3, 80062b8 <__ieee754_pow+0x730>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa f86c 	bl	80001d4 <__adddf3>
 80060fc:	4622      	mov	r2, r4
 80060fe:	4606      	mov	r6, r0
 8006100:	460f      	mov	r7, r1
 8006102:	462b      	mov	r3, r5
 8006104:	4620      	mov	r0, r4
 8006106:	4629      	mov	r1, r5
 8006108:	f7fa fa1a 	bl	8000540 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa fa14 	bl	8000540 <__aeabi_dmul>
 8006118:	4642      	mov	r2, r8
 800611a:	4604      	mov	r4, r0
 800611c:	460d      	mov	r5, r1
 800611e:	464b      	mov	r3, r9
 8006120:	ec51 0b18 	vmov	r0, r1, d8
 8006124:	f7fa f856 	bl	80001d4 <__adddf3>
 8006128:	ec53 2b19 	vmov	r2, r3, d9
 800612c:	f7fa fa08 	bl	8000540 <__aeabi_dmul>
 8006130:	4622      	mov	r2, r4
 8006132:	462b      	mov	r3, r5
 8006134:	f7fa f84e 	bl	80001d4 <__adddf3>
 8006138:	4642      	mov	r2, r8
 800613a:	4682      	mov	sl, r0
 800613c:	468b      	mov	fp, r1
 800613e:	464b      	mov	r3, r9
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa f9fc 	bl	8000540 <__aeabi_dmul>
 8006148:	4b6b      	ldr	r3, [pc, #428]	; (80062f8 <__ieee754_pow+0x770>)
 800614a:	2200      	movs	r2, #0
 800614c:	4606      	mov	r6, r0
 800614e:	460f      	mov	r7, r1
 8006150:	f7fa f840 	bl	80001d4 <__adddf3>
 8006154:	4652      	mov	r2, sl
 8006156:	465b      	mov	r3, fp
 8006158:	f7fa f83c 	bl	80001d4 <__adddf3>
 800615c:	2000      	movs	r0, #0
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4640      	mov	r0, r8
 8006168:	4649      	mov	r1, r9
 800616a:	f7fa f9e9 	bl	8000540 <__aeabi_dmul>
 800616e:	4b62      	ldr	r3, [pc, #392]	; (80062f8 <__ieee754_pow+0x770>)
 8006170:	4680      	mov	r8, r0
 8006172:	4689      	mov	r9, r1
 8006174:	2200      	movs	r2, #0
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa f829 	bl	80001d0 <__aeabi_dsub>
 800617e:	4632      	mov	r2, r6
 8006180:	463b      	mov	r3, r7
 8006182:	f7fa f825 	bl	80001d0 <__aeabi_dsub>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4650      	mov	r0, sl
 800618c:	4659      	mov	r1, fp
 800618e:	f7fa f81f 	bl	80001d0 <__aeabi_dsub>
 8006192:	ec53 2b18 	vmov	r2, r3, d8
 8006196:	f7fa f9d3 	bl	8000540 <__aeabi_dmul>
 800619a:	4622      	mov	r2, r4
 800619c:	4606      	mov	r6, r0
 800619e:	460f      	mov	r7, r1
 80061a0:	462b      	mov	r3, r5
 80061a2:	ec51 0b19 	vmov	r0, r1, d9
 80061a6:	f7fa f9cb 	bl	8000540 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	f7fa f80f 	bl	80001d4 <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa f807 	bl	80001d4 <__adddf3>
 80061c6:	a33e      	add	r3, pc, #248	; (adr r3, 80062c0 <__ieee754_pow+0x738>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	2000      	movs	r0, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	460d      	mov	r5, r1
 80061d2:	f7fa f9b5 	bl	8000540 <__aeabi_dmul>
 80061d6:	4642      	mov	r2, r8
 80061d8:	ec41 0b18 	vmov	d8, r0, r1
 80061dc:	464b      	mov	r3, r9
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7f9 fff5 	bl	80001d0 <__aeabi_dsub>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4630      	mov	r0, r6
 80061ec:	4639      	mov	r1, r7
 80061ee:	f7f9 ffef 	bl	80001d0 <__aeabi_dsub>
 80061f2:	a335      	add	r3, pc, #212	; (adr r3, 80062c8 <__ieee754_pow+0x740>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f9a2 	bl	8000540 <__aeabi_dmul>
 80061fc:	a334      	add	r3, pc, #208	; (adr r3, 80062d0 <__ieee754_pow+0x748>)
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f999 	bl	8000540 <__aeabi_dmul>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7f9 ffdd 	bl	80001d4 <__adddf3>
 800621a:	9a07      	ldr	r2, [sp, #28]
 800621c:	4b37      	ldr	r3, [pc, #220]	; (80062fc <__ieee754_pow+0x774>)
 800621e:	4413      	add	r3, r2
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7f9 ffd6 	bl	80001d4 <__adddf3>
 8006228:	4682      	mov	sl, r0
 800622a:	9805      	ldr	r0, [sp, #20]
 800622c:	468b      	mov	fp, r1
 800622e:	f7fa f91d 	bl	800046c <__aeabi_i2d>
 8006232:	9a07      	ldr	r2, [sp, #28]
 8006234:	4b32      	ldr	r3, [pc, #200]	; (8006300 <__ieee754_pow+0x778>)
 8006236:	4413      	add	r3, r2
 8006238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	4652      	mov	r2, sl
 8006242:	465b      	mov	r3, fp
 8006244:	ec51 0b18 	vmov	r0, r1, d8
 8006248:	f7f9 ffc4 	bl	80001d4 <__adddf3>
 800624c:	4642      	mov	r2, r8
 800624e:	464b      	mov	r3, r9
 8006250:	f7f9 ffc0 	bl	80001d4 <__adddf3>
 8006254:	4632      	mov	r2, r6
 8006256:	463b      	mov	r3, r7
 8006258:	f7f9 ffbc 	bl	80001d4 <__adddf3>
 800625c:	2000      	movs	r0, #0
 800625e:	4632      	mov	r2, r6
 8006260:	463b      	mov	r3, r7
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	f7f9 ffb3 	bl	80001d0 <__aeabi_dsub>
 800626a:	4642      	mov	r2, r8
 800626c:	464b      	mov	r3, r9
 800626e:	f7f9 ffaf 	bl	80001d0 <__aeabi_dsub>
 8006272:	ec53 2b18 	vmov	r2, r3, d8
 8006276:	f7f9 ffab 	bl	80001d0 <__aeabi_dsub>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4650      	mov	r0, sl
 8006280:	4659      	mov	r1, fp
 8006282:	e610      	b.n	8005ea6 <__ieee754_pow+0x31e>
 8006284:	2401      	movs	r4, #1
 8006286:	e6a1      	b.n	8005fcc <__ieee754_pow+0x444>
 8006288:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80062d8 <__ieee754_pow+0x750>
 800628c:	e617      	b.n	8005ebe <__ieee754_pow+0x336>
 800628e:	bf00      	nop
 8006290:	4a454eef 	.word	0x4a454eef
 8006294:	3fca7e28 	.word	0x3fca7e28
 8006298:	93c9db65 	.word	0x93c9db65
 800629c:	3fcd864a 	.word	0x3fcd864a
 80062a0:	a91d4101 	.word	0xa91d4101
 80062a4:	3fd17460 	.word	0x3fd17460
 80062a8:	518f264d 	.word	0x518f264d
 80062ac:	3fd55555 	.word	0x3fd55555
 80062b0:	db6fabff 	.word	0xdb6fabff
 80062b4:	3fdb6db6 	.word	0x3fdb6db6
 80062b8:	33333303 	.word	0x33333303
 80062bc:	3fe33333 	.word	0x3fe33333
 80062c0:	e0000000 	.word	0xe0000000
 80062c4:	3feec709 	.word	0x3feec709
 80062c8:	dc3a03fd 	.word	0xdc3a03fd
 80062cc:	3feec709 	.word	0x3feec709
 80062d0:	145b01f5 	.word	0x145b01f5
 80062d4:	be3e2fe0 	.word	0xbe3e2fe0
 80062d8:	00000000 	.word	0x00000000
 80062dc:	3ff00000 	.word	0x3ff00000
 80062e0:	7ff00000 	.word	0x7ff00000
 80062e4:	43400000 	.word	0x43400000
 80062e8:	0003988e 	.word	0x0003988e
 80062ec:	000bb679 	.word	0x000bb679
 80062f0:	08006980 	.word	0x08006980
 80062f4:	3ff00000 	.word	0x3ff00000
 80062f8:	40080000 	.word	0x40080000
 80062fc:	080069a0 	.word	0x080069a0
 8006300:	08006990 	.word	0x08006990
 8006304:	a3b5      	add	r3, pc, #724	; (adr r3, 80065dc <__ieee754_pow+0xa54>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7f9 ff61 	bl	80001d4 <__adddf3>
 8006312:	4622      	mov	r2, r4
 8006314:	ec41 0b1a 	vmov	d10, r0, r1
 8006318:	462b      	mov	r3, r5
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7f9 ff57 	bl	80001d0 <__aeabi_dsub>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	ec51 0b1a 	vmov	r0, r1, d10
 800632a:	f7fa fb99 	bl	8000a60 <__aeabi_dcmpgt>
 800632e:	2800      	cmp	r0, #0
 8006330:	f47f ae04 	bne.w	8005f3c <__ieee754_pow+0x3b4>
 8006334:	4aa4      	ldr	r2, [pc, #656]	; (80065c8 <__ieee754_pow+0xa40>)
 8006336:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800633a:	4293      	cmp	r3, r2
 800633c:	f340 8108 	ble.w	8006550 <__ieee754_pow+0x9c8>
 8006340:	151b      	asrs	r3, r3, #20
 8006342:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006346:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800634a:	fa4a f303 	asr.w	r3, sl, r3
 800634e:	445b      	add	r3, fp
 8006350:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006354:	4e9d      	ldr	r6, [pc, #628]	; (80065cc <__ieee754_pow+0xa44>)
 8006356:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800635a:	4116      	asrs	r6, r2
 800635c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006360:	2000      	movs	r0, #0
 8006362:	ea23 0106 	bic.w	r1, r3, r6
 8006366:	f1c2 0214 	rsb	r2, r2, #20
 800636a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800636e:	fa4a fa02 	asr.w	sl, sl, r2
 8006372:	f1bb 0f00 	cmp.w	fp, #0
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	bfb8      	it	lt
 8006380:	f1ca 0a00 	rsblt	sl, sl, #0
 8006384:	f7f9 ff24 	bl	80001d0 <__aeabi_dsub>
 8006388:	ec41 0b19 	vmov	d9, r0, r1
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	ec51 0b19 	vmov	r0, r1, d9
 8006394:	f7f9 ff1e 	bl	80001d4 <__adddf3>
 8006398:	a37b      	add	r3, pc, #492	; (adr r3, 8006588 <__ieee754_pow+0xa00>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	2000      	movs	r0, #0
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	f7fa f8cc 	bl	8000540 <__aeabi_dmul>
 80063a8:	ec53 2b19 	vmov	r2, r3, d9
 80063ac:	4606      	mov	r6, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7f9 ff0c 	bl	80001d0 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4640      	mov	r0, r8
 80063be:	4649      	mov	r1, r9
 80063c0:	f7f9 ff06 	bl	80001d0 <__aeabi_dsub>
 80063c4:	a372      	add	r3, pc, #456	; (adr r3, 8006590 <__ieee754_pow+0xa08>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f7fa f8b9 	bl	8000540 <__aeabi_dmul>
 80063ce:	a372      	add	r3, pc, #456	; (adr r3, 8006598 <__ieee754_pow+0xa10>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	4620      	mov	r0, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	f7fa f8b0 	bl	8000540 <__aeabi_dmul>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	f7f9 fef4 	bl	80001d4 <__adddf3>
 80063ec:	4604      	mov	r4, r0
 80063ee:	460d      	mov	r5, r1
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4630      	mov	r0, r6
 80063f6:	4639      	mov	r1, r7
 80063f8:	f7f9 feec 	bl	80001d4 <__adddf3>
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	4680      	mov	r8, r0
 8006402:	4689      	mov	r9, r1
 8006404:	f7f9 fee4 	bl	80001d0 <__aeabi_dsub>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4620      	mov	r0, r4
 800640e:	4629      	mov	r1, r5
 8006410:	f7f9 fede 	bl	80001d0 <__aeabi_dsub>
 8006414:	4642      	mov	r2, r8
 8006416:	4606      	mov	r6, r0
 8006418:	460f      	mov	r7, r1
 800641a:	464b      	mov	r3, r9
 800641c:	4640      	mov	r0, r8
 800641e:	4649      	mov	r1, r9
 8006420:	f7fa f88e 	bl	8000540 <__aeabi_dmul>
 8006424:	a35e      	add	r3, pc, #376	; (adr r3, 80065a0 <__ieee754_pow+0xa18>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	4604      	mov	r4, r0
 800642c:	460d      	mov	r5, r1
 800642e:	f7fa f887 	bl	8000540 <__aeabi_dmul>
 8006432:	a35d      	add	r3, pc, #372	; (adr r3, 80065a8 <__ieee754_pow+0xa20>)
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f7f9 feca 	bl	80001d0 <__aeabi_dsub>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa f87e 	bl	8000540 <__aeabi_dmul>
 8006444:	a35a      	add	r3, pc, #360	; (adr r3, 80065b0 <__ieee754_pow+0xa28>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fec3 	bl	80001d4 <__adddf3>
 800644e:	4622      	mov	r2, r4
 8006450:	462b      	mov	r3, r5
 8006452:	f7fa f875 	bl	8000540 <__aeabi_dmul>
 8006456:	a358      	add	r3, pc, #352	; (adr r3, 80065b8 <__ieee754_pow+0xa30>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f7f9 feb8 	bl	80001d0 <__aeabi_dsub>
 8006460:	4622      	mov	r2, r4
 8006462:	462b      	mov	r3, r5
 8006464:	f7fa f86c 	bl	8000540 <__aeabi_dmul>
 8006468:	a355      	add	r3, pc, #340	; (adr r3, 80065c0 <__ieee754_pow+0xa38>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7f9 feb1 	bl	80001d4 <__adddf3>
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f7fa f863 	bl	8000540 <__aeabi_dmul>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f7f9 fea5 	bl	80001d0 <__aeabi_dsub>
 8006486:	4604      	mov	r4, r0
 8006488:	460d      	mov	r5, r1
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa f855 	bl	8000540 <__aeabi_dmul>
 8006496:	2200      	movs	r2, #0
 8006498:	ec41 0b19 	vmov	d9, r0, r1
 800649c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 fe94 	bl	80001d0 <__aeabi_dsub>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	ec51 0b19 	vmov	r0, r1, d9
 80064b0:	f7fa f970 	bl	8000794 <__aeabi_ddiv>
 80064b4:	4632      	mov	r2, r6
 80064b6:	4604      	mov	r4, r0
 80064b8:	460d      	mov	r5, r1
 80064ba:	463b      	mov	r3, r7
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7fa f83e 	bl	8000540 <__aeabi_dmul>
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	f7f9 fe84 	bl	80001d4 <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7f9 fe7c 	bl	80001d0 <__aeabi_dsub>
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	f7f9 fe78 	bl	80001d0 <__aeabi_dsub>
 80064e0:	460b      	mov	r3, r1
 80064e2:	4602      	mov	r2, r0
 80064e4:	493a      	ldr	r1, [pc, #232]	; (80065d0 <__ieee754_pow+0xa48>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7f9 fe72 	bl	80001d0 <__aeabi_dsub>
 80064ec:	ec41 0b10 	vmov	d0, r0, r1
 80064f0:	ee10 3a90 	vmov	r3, s1
 80064f4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80064f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fc:	da2b      	bge.n	8006556 <__ieee754_pow+0x9ce>
 80064fe:	4650      	mov	r0, sl
 8006500:	f000 f95e 	bl	80067c0 <scalbn>
 8006504:	ec51 0b10 	vmov	r0, r1, d0
 8006508:	ec53 2b18 	vmov	r2, r3, d8
 800650c:	f7ff bbed 	b.w	8005cea <__ieee754_pow+0x162>
 8006510:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <__ieee754_pow+0xa4c>)
 8006512:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006516:	429e      	cmp	r6, r3
 8006518:	f77f af0c 	ble.w	8006334 <__ieee754_pow+0x7ac>
 800651c:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <__ieee754_pow+0xa50>)
 800651e:	440b      	add	r3, r1
 8006520:	4303      	orrs	r3, r0
 8006522:	d009      	beq.n	8006538 <__ieee754_pow+0x9b0>
 8006524:	ec51 0b18 	vmov	r0, r1, d8
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	f7fa fa7a 	bl	8000a24 <__aeabi_dcmplt>
 8006530:	3800      	subs	r0, #0
 8006532:	bf18      	it	ne
 8006534:	2001      	movne	r0, #1
 8006536:	e447      	b.n	8005dc8 <__ieee754_pow+0x240>
 8006538:	4622      	mov	r2, r4
 800653a:	462b      	mov	r3, r5
 800653c:	f7f9 fe48 	bl	80001d0 <__aeabi_dsub>
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	f7fa fa82 	bl	8000a4c <__aeabi_dcmpge>
 8006548:	2800      	cmp	r0, #0
 800654a:	f43f aef3 	beq.w	8006334 <__ieee754_pow+0x7ac>
 800654e:	e7e9      	b.n	8006524 <__ieee754_pow+0x99c>
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	e71a      	b.n	800638c <__ieee754_pow+0x804>
 8006556:	ec51 0b10 	vmov	r0, r1, d0
 800655a:	4619      	mov	r1, r3
 800655c:	e7d4      	b.n	8006508 <__ieee754_pow+0x980>
 800655e:	491c      	ldr	r1, [pc, #112]	; (80065d0 <__ieee754_pow+0xa48>)
 8006560:	2000      	movs	r0, #0
 8006562:	f7ff bb30 	b.w	8005bc6 <__ieee754_pow+0x3e>
 8006566:	2000      	movs	r0, #0
 8006568:	2100      	movs	r1, #0
 800656a:	f7ff bb2c 	b.w	8005bc6 <__ieee754_pow+0x3e>
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	f7ff bb28 	b.w	8005bc6 <__ieee754_pow+0x3e>
 8006576:	9204      	str	r2, [sp, #16]
 8006578:	f7ff bb7a 	b.w	8005c70 <__ieee754_pow+0xe8>
 800657c:	2300      	movs	r3, #0
 800657e:	f7ff bb64 	b.w	8005c4a <__ieee754_pow+0xc2>
 8006582:	bf00      	nop
 8006584:	f3af 8000 	nop.w
 8006588:	00000000 	.word	0x00000000
 800658c:	3fe62e43 	.word	0x3fe62e43
 8006590:	fefa39ef 	.word	0xfefa39ef
 8006594:	3fe62e42 	.word	0x3fe62e42
 8006598:	0ca86c39 	.word	0x0ca86c39
 800659c:	be205c61 	.word	0xbe205c61
 80065a0:	72bea4d0 	.word	0x72bea4d0
 80065a4:	3e663769 	.word	0x3e663769
 80065a8:	c5d26bf1 	.word	0xc5d26bf1
 80065ac:	3ebbbd41 	.word	0x3ebbbd41
 80065b0:	af25de2c 	.word	0xaf25de2c
 80065b4:	3f11566a 	.word	0x3f11566a
 80065b8:	16bebd93 	.word	0x16bebd93
 80065bc:	3f66c16c 	.word	0x3f66c16c
 80065c0:	5555553e 	.word	0x5555553e
 80065c4:	3fc55555 	.word	0x3fc55555
 80065c8:	3fe00000 	.word	0x3fe00000
 80065cc:	000fffff 	.word	0x000fffff
 80065d0:	3ff00000 	.word	0x3ff00000
 80065d4:	4090cbff 	.word	0x4090cbff
 80065d8:	3f6f3400 	.word	0x3f6f3400
 80065dc:	652b82fe 	.word	0x652b82fe
 80065e0:	3c971547 	.word	0x3c971547

080065e4 <__ieee754_sqrt>:
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	ec55 4b10 	vmov	r4, r5, d0
 80065ec:	4e55      	ldr	r6, [pc, #340]	; (8006744 <__ieee754_sqrt+0x160>)
 80065ee:	43ae      	bics	r6, r5
 80065f0:	ee10 0a10 	vmov	r0, s0
 80065f4:	ee10 3a10 	vmov	r3, s0
 80065f8:	462a      	mov	r2, r5
 80065fa:	4629      	mov	r1, r5
 80065fc:	d110      	bne.n	8006620 <__ieee754_sqrt+0x3c>
 80065fe:	ee10 2a10 	vmov	r2, s0
 8006602:	462b      	mov	r3, r5
 8006604:	f7f9 ff9c 	bl	8000540 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7f9 fde0 	bl	80001d4 <__adddf3>
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	ec45 4b10 	vmov	d0, r4, r5
 800661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006620:	2d00      	cmp	r5, #0
 8006622:	dc10      	bgt.n	8006646 <__ieee754_sqrt+0x62>
 8006624:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006628:	4330      	orrs	r0, r6
 800662a:	d0f5      	beq.n	8006618 <__ieee754_sqrt+0x34>
 800662c:	b15d      	cbz	r5, 8006646 <__ieee754_sqrt+0x62>
 800662e:	ee10 2a10 	vmov	r2, s0
 8006632:	462b      	mov	r3, r5
 8006634:	ee10 0a10 	vmov	r0, s0
 8006638:	f7f9 fdca 	bl	80001d0 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	f7fa f8a8 	bl	8000794 <__aeabi_ddiv>
 8006644:	e7e6      	b.n	8006614 <__ieee754_sqrt+0x30>
 8006646:	1512      	asrs	r2, r2, #20
 8006648:	d074      	beq.n	8006734 <__ieee754_sqrt+0x150>
 800664a:	07d4      	lsls	r4, r2, #31
 800664c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006650:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006658:	bf5e      	ittt	pl
 800665a:	0fda      	lsrpl	r2, r3, #31
 800665c:	005b      	lslpl	r3, r3, #1
 800665e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006662:	2400      	movs	r4, #0
 8006664:	0fda      	lsrs	r2, r3, #31
 8006666:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800666a:	107f      	asrs	r7, r7, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	2516      	movs	r5, #22
 8006670:	4620      	mov	r0, r4
 8006672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006676:	1886      	adds	r6, r0, r2
 8006678:	428e      	cmp	r6, r1
 800667a:	bfde      	ittt	le
 800667c:	1b89      	suble	r1, r1, r6
 800667e:	18b0      	addle	r0, r6, r2
 8006680:	18a4      	addle	r4, r4, r2
 8006682:	0049      	lsls	r1, r1, #1
 8006684:	3d01      	subs	r5, #1
 8006686:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800668a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800668e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006692:	d1f0      	bne.n	8006676 <__ieee754_sqrt+0x92>
 8006694:	462a      	mov	r2, r5
 8006696:	f04f 0e20 	mov.w	lr, #32
 800669a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800669e:	4281      	cmp	r1, r0
 80066a0:	eb06 0c05 	add.w	ip, r6, r5
 80066a4:	dc02      	bgt.n	80066ac <__ieee754_sqrt+0xc8>
 80066a6:	d113      	bne.n	80066d0 <__ieee754_sqrt+0xec>
 80066a8:	459c      	cmp	ip, r3
 80066aa:	d811      	bhi.n	80066d0 <__ieee754_sqrt+0xec>
 80066ac:	f1bc 0f00 	cmp.w	ip, #0
 80066b0:	eb0c 0506 	add.w	r5, ip, r6
 80066b4:	da43      	bge.n	800673e <__ieee754_sqrt+0x15a>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	db41      	blt.n	800673e <__ieee754_sqrt+0x15a>
 80066ba:	f100 0801 	add.w	r8, r0, #1
 80066be:	1a09      	subs	r1, r1, r0
 80066c0:	459c      	cmp	ip, r3
 80066c2:	bf88      	it	hi
 80066c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80066c8:	eba3 030c 	sub.w	r3, r3, ip
 80066cc:	4432      	add	r2, r6
 80066ce:	4640      	mov	r0, r8
 80066d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80066d4:	f1be 0e01 	subs.w	lr, lr, #1
 80066d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80066dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80066e4:	d1db      	bne.n	800669e <__ieee754_sqrt+0xba>
 80066e6:	430b      	orrs	r3, r1
 80066e8:	d006      	beq.n	80066f8 <__ieee754_sqrt+0x114>
 80066ea:	1c50      	adds	r0, r2, #1
 80066ec:	bf13      	iteet	ne
 80066ee:	3201      	addne	r2, #1
 80066f0:	3401      	addeq	r4, #1
 80066f2:	4672      	moveq	r2, lr
 80066f4:	f022 0201 	bicne.w	r2, r2, #1
 80066f8:	1063      	asrs	r3, r4, #1
 80066fa:	0852      	lsrs	r2, r2, #1
 80066fc:	07e1      	lsls	r1, r4, #31
 80066fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006702:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006706:	bf48      	it	mi
 8006708:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800670c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006710:	4614      	mov	r4, r2
 8006712:	e781      	b.n	8006618 <__ieee754_sqrt+0x34>
 8006714:	0ad9      	lsrs	r1, r3, #11
 8006716:	3815      	subs	r0, #21
 8006718:	055b      	lsls	r3, r3, #21
 800671a:	2900      	cmp	r1, #0
 800671c:	d0fa      	beq.n	8006714 <__ieee754_sqrt+0x130>
 800671e:	02cd      	lsls	r5, r1, #11
 8006720:	d50a      	bpl.n	8006738 <__ieee754_sqrt+0x154>
 8006722:	f1c2 0420 	rsb	r4, r2, #32
 8006726:	fa23 f404 	lsr.w	r4, r3, r4
 800672a:	1e55      	subs	r5, r2, #1
 800672c:	4093      	lsls	r3, r2
 800672e:	4321      	orrs	r1, r4
 8006730:	1b42      	subs	r2, r0, r5
 8006732:	e78a      	b.n	800664a <__ieee754_sqrt+0x66>
 8006734:	4610      	mov	r0, r2
 8006736:	e7f0      	b.n	800671a <__ieee754_sqrt+0x136>
 8006738:	0049      	lsls	r1, r1, #1
 800673a:	3201      	adds	r2, #1
 800673c:	e7ef      	b.n	800671e <__ieee754_sqrt+0x13a>
 800673e:	4680      	mov	r8, r0
 8006740:	e7bd      	b.n	80066be <__ieee754_sqrt+0xda>
 8006742:	bf00      	nop
 8006744:	7ff00000 	.word	0x7ff00000

08006748 <with_errno>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4604      	mov	r4, r0
 800674c:	460d      	mov	r5, r1
 800674e:	4616      	mov	r6, r2
 8006750:	f000 f8bc 	bl	80068cc <__errno>
 8006754:	4629      	mov	r1, r5
 8006756:	6006      	str	r6, [r0, #0]
 8006758:	4620      	mov	r0, r4
 800675a:	bd70      	pop	{r4, r5, r6, pc}

0800675c <xflow>:
 800675c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800675e:	4614      	mov	r4, r2
 8006760:	461d      	mov	r5, r3
 8006762:	b108      	cbz	r0, 8006768 <xflow+0xc>
 8006764:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006768:	e9cd 2300 	strd	r2, r3, [sp]
 800676c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7f9 fee4 	bl	8000540 <__aeabi_dmul>
 8006778:	2222      	movs	r2, #34	; 0x22
 800677a:	b003      	add	sp, #12
 800677c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006780:	f7ff bfe2 	b.w	8006748 <with_errno>

08006784 <__math_uflow>:
 8006784:	b508      	push	{r3, lr}
 8006786:	2200      	movs	r2, #0
 8006788:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800678c:	f7ff ffe6 	bl	800675c <xflow>
 8006790:	ec41 0b10 	vmov	d0, r0, r1
 8006794:	bd08      	pop	{r3, pc}

08006796 <__math_oflow>:
 8006796:	b508      	push	{r3, lr}
 8006798:	2200      	movs	r2, #0
 800679a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800679e:	f7ff ffdd 	bl	800675c <xflow>
 80067a2:	ec41 0b10 	vmov	d0, r0, r1
 80067a6:	bd08      	pop	{r3, pc}

080067a8 <finite>:
 80067a8:	b082      	sub	sp, #8
 80067aa:	ed8d 0b00 	vstr	d0, [sp]
 80067ae:	9801      	ldr	r0, [sp, #4]
 80067b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80067b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80067b8:	0fc0      	lsrs	r0, r0, #31
 80067ba:	b002      	add	sp, #8
 80067bc:	4770      	bx	lr
	...

080067c0 <scalbn>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	ec55 4b10 	vmov	r4, r5, d0
 80067c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80067ca:	4606      	mov	r6, r0
 80067cc:	462b      	mov	r3, r5
 80067ce:	b99a      	cbnz	r2, 80067f8 <scalbn+0x38>
 80067d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067d4:	4323      	orrs	r3, r4
 80067d6:	d036      	beq.n	8006846 <scalbn+0x86>
 80067d8:	4b39      	ldr	r3, [pc, #228]	; (80068c0 <scalbn+0x100>)
 80067da:	4629      	mov	r1, r5
 80067dc:	ee10 0a10 	vmov	r0, s0
 80067e0:	2200      	movs	r2, #0
 80067e2:	f7f9 fead 	bl	8000540 <__aeabi_dmul>
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <scalbn+0x104>)
 80067e8:	429e      	cmp	r6, r3
 80067ea:	4604      	mov	r4, r0
 80067ec:	460d      	mov	r5, r1
 80067ee:	da10      	bge.n	8006812 <scalbn+0x52>
 80067f0:	a32b      	add	r3, pc, #172	; (adr r3, 80068a0 <scalbn+0xe0>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	e03a      	b.n	800686e <scalbn+0xae>
 80067f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80067fc:	428a      	cmp	r2, r1
 80067fe:	d10c      	bne.n	800681a <scalbn+0x5a>
 8006800:	ee10 2a10 	vmov	r2, s0
 8006804:	4620      	mov	r0, r4
 8006806:	4629      	mov	r1, r5
 8006808:	f7f9 fce4 	bl	80001d4 <__adddf3>
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	e019      	b.n	8006846 <scalbn+0x86>
 8006812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006816:	460b      	mov	r3, r1
 8006818:	3a36      	subs	r2, #54	; 0x36
 800681a:	4432      	add	r2, r6
 800681c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006820:	428a      	cmp	r2, r1
 8006822:	dd08      	ble.n	8006836 <scalbn+0x76>
 8006824:	2d00      	cmp	r5, #0
 8006826:	a120      	add	r1, pc, #128	; (adr r1, 80068a8 <scalbn+0xe8>)
 8006828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682c:	da1c      	bge.n	8006868 <scalbn+0xa8>
 800682e:	a120      	add	r1, pc, #128	; (adr r1, 80068b0 <scalbn+0xf0>)
 8006830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006834:	e018      	b.n	8006868 <scalbn+0xa8>
 8006836:	2a00      	cmp	r2, #0
 8006838:	dd08      	ble.n	800684c <scalbn+0x8c>
 800683a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800683e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006846:	ec45 4b10 	vmov	d0, r4, r5
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006850:	da19      	bge.n	8006886 <scalbn+0xc6>
 8006852:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006856:	429e      	cmp	r6, r3
 8006858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800685c:	dd0a      	ble.n	8006874 <scalbn+0xb4>
 800685e:	a112      	add	r1, pc, #72	; (adr r1, 80068a8 <scalbn+0xe8>)
 8006860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e2      	bne.n	800682e <scalbn+0x6e>
 8006868:	a30f      	add	r3, pc, #60	; (adr r3, 80068a8 <scalbn+0xe8>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7f9 fe67 	bl	8000540 <__aeabi_dmul>
 8006872:	e7cb      	b.n	800680c <scalbn+0x4c>
 8006874:	a10a      	add	r1, pc, #40	; (adr r1, 80068a0 <scalbn+0xe0>)
 8006876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0b8      	beq.n	80067f0 <scalbn+0x30>
 800687e:	a10e      	add	r1, pc, #56	; (adr r1, 80068b8 <scalbn+0xf8>)
 8006880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006884:	e7b4      	b.n	80067f0 <scalbn+0x30>
 8006886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800688a:	3236      	adds	r2, #54	; 0x36
 800688c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006894:	4620      	mov	r0, r4
 8006896:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <scalbn+0x108>)
 8006898:	2200      	movs	r2, #0
 800689a:	e7e8      	b.n	800686e <scalbn+0xae>
 800689c:	f3af 8000 	nop.w
 80068a0:	c2f8f359 	.word	0xc2f8f359
 80068a4:	01a56e1f 	.word	0x01a56e1f
 80068a8:	8800759c 	.word	0x8800759c
 80068ac:	7e37e43c 	.word	0x7e37e43c
 80068b0:	8800759c 	.word	0x8800759c
 80068b4:	fe37e43c 	.word	0xfe37e43c
 80068b8:	c2f8f359 	.word	0xc2f8f359
 80068bc:	81a56e1f 	.word	0x81a56e1f
 80068c0:	43500000 	.word	0x43500000
 80068c4:	ffff3cb0 	.word	0xffff3cb0
 80068c8:	3c900000 	.word	0x3c900000

080068cc <__errno>:
 80068cc:	4b01      	ldr	r3, [pc, #4]	; (80068d4 <__errno+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2000001c 	.word	0x2000001c

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
