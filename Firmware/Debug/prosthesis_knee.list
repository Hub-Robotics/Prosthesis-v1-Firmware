
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080069d0  080069d0  000169d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a88  08006a88  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006a88  08006a88  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a88  08006a88  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006a90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000088  08006b14  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08006b14  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b994  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b5  00000000  00000000  0002ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fb7  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0f7  00000000  00000000  00053a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b73  00000000  00000000  0005fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aec  00000000  00000000  001216ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069b8 	.word	0x080069b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080069b8 	.word	0x080069b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
 8000d80:	2304      	movs	r3, #4
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d92:	f003 fedb 	bl	8004b4c <LL_GPIO_Init>
 8000d96:	2104      	movs	r1, #4
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000db2:	f003 fae9 	bl	8004388 <LL_ADC_Init>
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dd6:	f003 fafd 	bl	80043d4 <LL_ADC_REG_Init>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dea:	f003 fa85 	bl	80042f8 <LL_ADC_CommonInit>
 8000dee:	2100      	movs	r1, #0
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000df2:	f7ff fea5 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000df8:	f7ff ff30 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dfe:	f7ff ff3f 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	099a      	lsrs	r2, r3, #6
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e24:	e002      	b.n	8000e2c <MX_ADC1_Init+0x104>
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <MX_ADC1_Init+0xfe>
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e34:	2106      	movs	r1, #6
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e38:	f7ff fe95 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e42:	f7ff febc 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
 8000e46:	227f      	movs	r2, #127	; 0x7f
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e4c:	f7ff fee2 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	; 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	50040300 	.word	0x50040300
 8000e64:	20000014 	.word	0x20000014
 8000e68:	053e2d63 	.word	0x053e2d63
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	0c900008 	.word	0x0c900008

08000e74 <MX_ADC2_Init>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000eba:	f7ff fef5 	bl	8000ca8 <LL_RCC_SetADCClockSource>
 8000ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec2:	f7ff ff07 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff04 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
 8000ecc:	2308      	movs	r3, #8
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ede:	f003 fe35 	bl	8004b4c <LL_GPIO_Init>
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ee6:	f7ff ff0d 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000efe:	f003 fa43 	bl	8004388 <LL_ADC_Init>
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f22:	f003 fa57 	bl	80043d4 <LL_ADC_REG_Init>
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f32:	f003 f9e1 	bl	80042f8 <LL_ADC_CommonInit>
 8000f36:	2100      	movs	r1, #0
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f3a:	f7ff fe01 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f40:	f7ff fe8c 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f46:	f7ff fe9b 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC2_Init+0x138>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0x13c>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099a      	lsrs	r2, r3, #6
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x140>)
 8000f64:	fba3 2302 	umull	r2, r3, r3, r2
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f6c:	e002      	b.n	8000f74 <MX_ADC2_Init+0x100>
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	3b01      	subs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <MX_ADC2_Init+0xfa>
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f80:	f7ff fdf1 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
 8000f84:	2200      	movs	r2, #0
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f8a:	f7ff fe18 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
 8000f8e:	227f      	movs	r2, #127	; 0x7f
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f94:	f7ff fe3e 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	50040100 	.word	0x50040100
 8000fa8:	50040300 	.word	0x50040300
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	053e2d63 	.word	0x053e2d63
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	10c00010 	.word	0x10c00010

08000fbc <LL_AHB2_GRP1_EnableClock>:
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_SYSCFG_SetEXTISource>:
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	43db      	mvns	r3, r3
 8001008:	ea02 0103 	and.w	r1, r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <LL_SYSCFG_SetEXTISource+0x3c>
 8001024:	2320      	movs	r3, #32
 8001026:	e003      	b.n	8001030 <LL_SYSCFG_SetEXTISource+0x44>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fa03 f202 	lsl.w	r2, r3, r2
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <LL_SYSCFG_SetEXTISource+0x68>)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	430a      	orrs	r2, r1
 8001040:	3302      	adds	r3, #2
 8001042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000

08001058 <LL_GPIO_SetPinMode>:
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <LL_GPIO_SetPinMode+0x2a>
 800107e:	2320      	movs	r3, #32
 8001080:	e003      	b.n	800108a <LL_GPIO_SetPinMode+0x32>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2103      	movs	r1, #3
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	401a      	ands	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <LL_GPIO_SetPinMode+0x58>
 80010ac:	2320      	movs	r3, #32
 80010ae:	e003      	b.n	80010b8 <LL_GPIO_SetPinMode+0x60>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	bf00      	nop
 80010c8:	372c      	adds	r7, #44	; 0x2c
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_GPIO_SetPinPull>:
 80010d2:	b480      	push	{r7}
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LL_GPIO_SetPinPull+0x2a>
 80010f8:	2320      	movs	r3, #32
 80010fa:	e003      	b.n	8001104 <LL_GPIO_SetPinPull+0x32>
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2103      	movs	r1, #3
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	401a      	ands	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	623b      	str	r3, [r7, #32]
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <LL_GPIO_SetPinPull+0x58>
 8001126:	2320      	movs	r3, #32
 8001128:	e003      	b.n	8001132 <LL_GPIO_SetPinPull+0x60>
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_GPIO_ResetOutputPin>:
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <MX_GPIO_Init>:
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff ff16 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
 8001190:	2080      	movs	r0, #128	; 0x80
 8001192:	f7ff ff13 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff10 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ff0d 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
 80011a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <MX_GPIO_Init+0x11c>)
 80011a8:	f7ff ffd0 	bl	800114c <LL_GPIO_ResetOutputPin>
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4836      	ldr	r0, [pc, #216]	; (8001288 <MX_GPIO_Init+0x120>)
 80011b0:	f7ff ffcc 	bl	800114c <LL_GPIO_ResetOutputPin>
 80011b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011bc:	f7ff ffc6 	bl	800114c <LL_GPIO_ResetOutputPin>
 80011c0:	4932      	ldr	r1, [pc, #200]	; (800128c <MX_GPIO_Init+0x124>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff ff12 	bl	8000fec <LL_SYSCFG_SetEXTISource>
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011de:	2302      	movs	r3, #2
 80011e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fa6d 	bl	80046c8 <LL_EXTI_Init>
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <MX_GPIO_Init+0x120>)
 80011f6:	f7ff ff6c 	bl	80010d2 <LL_GPIO_SetPinPull>
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_GPIO_Init+0x120>)
 8001202:	f7ff ff29 	bl	8001058 <LL_GPIO_SetPinMode>
 8001206:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_GPIO_Init+0x11c>)
 8001222:	f003 fc93 	bl	8004b4c <LL_GPIO_Init>
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	2301      	movs	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_GPIO_Init+0x120>)
 8001240:	f003 fc84 	bl	8004b4c <LL_GPIO_Init>
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_GPIO_Init+0x120>)
 8001256:	f003 fc79 	bl	8004b4c <LL_GPIO_Init>
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f003 fc68 	bl	8004b4c <LL_GPIO_Init>
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	00f00003 	.word	0x00f00003

08001290 <__NVIC_GetPriorityGrouping>:
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
 8001394:	4313      	orrs	r3, r2
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_LPTIM_SetUpdateMode>:
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_LPTIM_SetCounterMode>:
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_LPTIM_SetPolarity>:
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_LPTIM_SetPrescaler>:
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_LPTIM_SetInput1Src>:
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f023 0203 	bic.w	r2, r3, #3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	621a      	str	r2, [r3, #32]
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_LPTIM_TrigSw>:
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_LPTIM_SetClockSource>:
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f023 0201 	bic.w	r2, r3, #1
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <LL_RCC_SetLPTIMClockSource>:
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	4904      	ldr	r1, [pc, #16]	; (80014d8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_APB1_GRP2_EnableClock>:
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	65cb      	str	r3, [r1, #92]	; 0x5c
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <LL_APB1_GRP2_EnableClock+0x2c>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <MX_LPTIM2_Init>:
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
 8001510:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001514:	f7ff ffc8 	bl	80014a8 <LL_RCC_SetLPTIMClockSource>
 8001518:	2020      	movs	r0, #32
 800151a:	f7ff ffdf 	bl	80014dc <LL_APB1_GRP2_EnableClock>
 800151e:	f7ff feb7 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001522:	4603      	mov	r3, r0
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff07 	bl	800133c <NVIC_EncodePriority>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	2042      	movs	r0, #66	; 0x42
 8001534:	f7ff fed8 	bl	80012e8 <__NVIC_SetPriority>
 8001538:	2042      	movs	r0, #66	; 0x42
 800153a:	f7ff feb7 	bl	80012ac <__NVIC_EnableIRQ>
 800153e:	2100      	movs	r1, #0
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001542:	f7ff ff9d 	bl	8001480 <LL_LPTIM_SetClockSource>
 8001546:	2100      	movs	r1, #0
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800154a:	f7ff ff63 	bl	8001414 <LL_LPTIM_SetPrescaler>
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001552:	f7ff ff4c 	bl	80013ee <LL_LPTIM_SetPolarity>
 8001556:	2100      	movs	r1, #0
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 800155a:	f7ff ff22 	bl	80013a2 <LL_LPTIM_SetUpdateMode>
 800155e:	2100      	movs	r1, #0
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001562:	f7ff ff31 	bl	80013c8 <LL_LPTIM_SetCounterMode>
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001568:	f7ff ff7a 	bl	8001460 <LL_LPTIM_TrigSw>
 800156c:	2100      	movs	r1, #0
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <MX_LPTIM2_Init+0x6c>)
 8001570:	f7ff ff63 	bl	800143a <LL_LPTIM_SetInput1Src>
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40009400 	.word	0x40009400

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_LPTIM_Enable>:
  * @rmtoll CR           ENABLE        LL_LPTIM_Enable
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_LPTIM_StartCounter>:
  *         @arg @ref LL_LPTIM_OPERATING_MODE_CONTINUOUS
  *         @arg @ref LL_LPTIM_OPERATING_MODE_ONESHOT
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f023 0206 	bic.w	r2, r3, #6
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_LPTIM_SetAutoReload>:
  * @param  LPTIMx Low-Power Timer instance
  * @param  AutoReload Value between Min_Data=0x0001 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <LL_RCC_LSE_Enable+0x20>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	f023 0218 	bic.w	r2, r3, #24
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <LL_RCC_LSE_IsReady+0x24>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <LL_RCC_LSE_IsReady+0x16>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_RCC_LSE_IsReady+0x18>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <LL_RCC_MSI_Enable+0x1c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <LL_RCC_MSI_IsReady+0x20>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b02      	cmp	r3, #2
 800171e:	d101      	bne.n	8001724 <LL_RCC_MSI_IsReady+0x14>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_RCC_MSI_IsReady+0x16>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <LL_RCC_MSI_SetRange+0x24>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 0203 	bic.w	r2, r3, #3
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_GetSysClkSource+0x18>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LL_RCC_PLL_Enable+0x1c>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <LL_RCC_PLL_IsReady+0x24>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b4:	d101      	bne.n	80018ba <LL_RCC_PLL_IsReady+0x16>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_RCC_PLL_IsReady+0x18>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0212      	lsls	r2, r2, #8
 80018ec:	4311      	orrs	r1, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	4904      	ldr	r1, [pc, #16]	; (8001904 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	f9ff808c 	.word	0xf9ff808c

0800190c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40022000 	.word	0x40022000

080019b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <LL_FLASH_GetLatency+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <LL_SYSTICK_EnableIT+0x1c>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001a00:	4904      	ldr	r1, [pc, #16]	; (8001a14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40007000 	.word	0x40007000

08001a18 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff ff7c 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a68:	f7ff ff60 	bl	800192c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f7ff fd85 	bl	800157c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a72:	f000 f87f 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a76:	f7ff fb77 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a7a:	f001 fc6d 	bl	8003358 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a7e:	f001 fa77 	bl	8002f70 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001a82:	f7ff fd43 	bl	800150c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001a86:	f001 fac9 	bl	800301c <MX_SPI2_Init>
  MX_ADC2_Init();
 8001a8a:	f7ff f9f3 	bl	8000e74 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a8e:	f7ff f94b 	bl	8000d28 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t MagEnc;
	MagEnc.DO_GPIOx = ENC_DO_GPIO_Port;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <main+0xf8>)
 8001a94:	603b      	str	r3, [r7, #0]
	MagEnc.CLK_GPIOx = ENC_CLK_GPIO_Port;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <main+0xfc>)
 8001a98:	607b      	str	r3, [r7, #4]
	MagEnc.CSn_GPIOx = ENC_CSn_GPIO_Port;
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <main+0xf8>)
 8001a9c:	60bb      	str	r3, [r7, #8]
	MagEnc.DO_Pin = ENC_DO_Pin;
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	81bb      	strh	r3, [r7, #12]
	MagEnc.CLK_Pin = ENC_CLK_Pin;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	81fb      	strh	r3, [r7, #14]
	MagEnc.CSn_Pin = ENC_CSn_Pin;
 8001aa6:	2340      	movs	r3, #64	; 0x40
 8001aa8:	823b      	strh	r3, [r7, #16]

/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	LL_SYSTICK_EnableIT();
 8001aaa:	f7ff ff91 	bl	80019d0 <LL_SYSTICK_EnableIT>

	LL_LPTIM_Enable(LPTIM2);
 8001aae:	482a      	ldr	r0, [pc, #168]	; (8001b58 <main+0x100>)
 8001ab0:	f7ff fd9c 	bl	80015ec <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001ab4:	4828      	ldr	r0, [pc, #160]	; (8001b58 <main+0x100>)
 8001ab6:	f7ff fdcf 	bl	8001658 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001aba:	213f      	movs	r1, #63	; 0x3f
 8001abc:	4826      	ldr	r0, [pc, #152]	; (8001b58 <main+0x100>)
 8001abe:	f7ff fdb8 	bl	8001632 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	4824      	ldr	r0, [pc, #144]	; (8001b58 <main+0x100>)
 8001ac6:	f7ff fda1 	bl	800160c <LL_LPTIM_StartCounter>

	LL_SPI_Enable(SPI1);
 8001aca:	4824      	ldr	r0, [pc, #144]	; (8001b5c <main+0x104>)
 8001acc:	f7ff ffb4 	bl	8001a38 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001ad0:	4823      	ldr	r0, [pc, #140]	; (8001b60 <main+0x108>)
 8001ad2:	f7ff ffb1 	bl	8001a38 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <main+0x10c>)
 8001ad8:	f7ff fd74 	bl	80015c4 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001adc:	4822      	ldr	r0, [pc, #136]	; (8001b68 <main+0x110>)
 8001ade:	f7ff fd71 	bl	80015c4 <LL_ADC_Enable>

	if(MPU925x_Init(SPI1, IMU_CS_GPIO_Port, IMU_CS_Pin))
 8001ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001aea:	481c      	ldr	r0, [pc, #112]	; (8001b5c <main+0x104>)
 8001aec:	f002 f93c 	bl	8003d68 <MPU925x_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <main+0xa2>
		Error_Handler();
 8001af6:	f000 f89b 	bl	8001c30 <Error_Handler>
	MPU925x_SetAccelSensitivity(mpu925x_accelSensitivity_8g);
 8001afa:	2002      	movs	r0, #2
 8001afc:	f002 f95a 	bl	8003db4 <MPU925x_SetAccelSensitivity>
	MPU925x_SetGyroSensitivity(mpu925x_gyroSensitivity_1000dps);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f002 f9d3 	bl	8003eac <MPU925x_SetGyroSensitivity>

	CAN_configure();
 8001b06:	f002 f8a7 	bl	8003c58 <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <main+0x114>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fdd1 	bl	80036b6 <EPOS4_SetCSTMode>
	AS5145B_Init(&MagEnc);
 8001b14:	463b      	mov	r3, r7
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fccc 	bl	80034b4 <AS5145B_Init>

	InitProsthesisControl();
 8001b1c:	f000 f8ce 	bl	8001cbc <InitProsthesisControl>

	// Remove spikes from beginning
	for(uint16_t i = 0; i < 1000; i++);
 8001b20:	2300      	movs	r3, #0
 8001b22:	82fb      	strh	r3, [r7, #22]
 8001b24:	e002      	b.n	8001b2c <main+0xd4>
 8001b26:	8afb      	ldrh	r3, [r7, #22]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	82fb      	strh	r3, [r7, #22]
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b32:	d3f8      	bcc.n	8001b26 <main+0xce>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(None);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 f943 	bl	8001dc0 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <main+0x118>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0fb      	beq.n	8001b3a <main+0xe2>
	  {
		  RunProsthesisControl();
 8001b42:	f000 f957 	bl	8001df4 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <main+0x118>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8001b4c:	e7f5      	b.n	8001b3a <main+0xe2>
 8001b4e:	bf00      	nop
 8001b50:	48000800 	.word	0x48000800
 8001b54:	48000400 	.word	0x48000400
 8001b58:	40009400 	.word	0x40009400
 8001b5c:	40013000 	.word	0x40013000
 8001b60:	40003800 	.word	0x40003800
 8001b64:	50040000 	.word	0x50040000
 8001b68:	50040100 	.word	0x50040100
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	200000a4 	.word	0x200000a4

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001b78:	2004      	movs	r0, #4
 8001b7a:	f7ff ff07 	bl	800198c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ff18 	bl	80019b4 <LL_FLASH_GetLatency>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d1fa      	bne.n	8001b80 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b8e:	f7ff ff2f 	bl	80019f0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001b92:	f7ff fdad 	bl	80016f0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001b96:	bf00      	nop
 8001b98:	f7ff fdba 	bl	8001710 <LL_RCC_MSI_IsReady>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d1fa      	bne.n	8001b98 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001ba2:	f7ff fdd7 	bl	8001754 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001ba6:	20b0      	movs	r0, #176	; 0xb0
 8001ba8:	f7ff fde4 	bl	8001774 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff fdf5 	bl	800179c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001bb2:	f7ff ff31 	bl	8001a18 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fd70 	bl	800169c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001bbc:	f7ff fd5c 	bl	8001678 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001bc0:	bf00      	nop
 8001bc2:	f7ff fd81 	bl	80016c8 <LL_RCC_LSE_IsReady>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d1fa      	bne.n	8001bc2 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001bcc:	f7ff fdb2 	bl	8001734 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	2228      	movs	r2, #40	; 0x28
 8001bd6:	2150      	movs	r1, #80	; 0x50
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff fe77 	bl	80018cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001bde:	f7ff fe95 	bl	800190c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001be2:	f7ff fe4f 	bl	8001884 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001be6:	bf00      	nop
 8001be8:	f7ff fe5c 	bl	80018a4 <LL_RCC_PLL_IsReady>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d1fa      	bne.n	8001be8 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	f7ff fde8 	bl	80017c8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bf8:	bf00      	nop
 8001bfa:	f7ff fdf9 	bl	80017f0 <LL_RCC_GetSysClkSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d1fa      	bne.n	8001bfa <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff fe01 	bl	800180c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001c0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c0e:	f7ff fe11 	bl	8001834 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001c12:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c16:	f7ff fe21 	bl	800185c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <SystemClock_Config+0xb8>)
 8001c1c:	f003 fd5c 	bl	80056d8 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <SystemClock_Config+0xb8>)
 8001c22:	f003 fd8f 	bl	8005744 <LL_SetSystemCoreClock>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	04c4b400 	.word	0x04c4b400

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>

08001c3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4e:	f043 0204 	orr.w	r2, r3, #4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	b29b      	uxth	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <InitProsthesisControl>:
* PUBLIC FUNCTIONS
*******************************************************************************/

// This is to localize variables that are subject to change during testing
void InitProsthesisControl(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
	CM_Ankle.encBias = 1325 * AS5145B_RAW2DEG;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cc2:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <InitProsthesisControl+0xec>)
 8001cc4:	621a      	str	r2, [r3, #32]
	CM_Knee.encBias = 2244 * AS5145B_RAW2DEG;
 8001cc6:	4b39      	ldr	r3, [pc, #228]	; (8001dac <InitProsthesisControl+0xf0>)
 8001cc8:	4a39      	ldr	r2, [pc, #228]	; (8001db0 <InitProsthesisControl+0xf4>)
 8001cca:	621a      	str	r2, [r3, #32]

	CM_Ankle.ImpCtrl.eqPoint = 0.0f;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
	CM_Ankle.ImpCtrl.kd = 0.0f;
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
	CM_Ankle.ImpCtrl.kp = 0.0f;
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
	CM_Ankle.StanceCtrl.eqPoint = 0.0f;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
	CM_Ankle.StanceCtrl.kd = 0.0f;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
	CM_Ankle.StanceCtrl.kp = 0.0f;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
	CM_Ankle.SwingFlexCtrl.eqPoint = 0.0f;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
	CM_Ankle.SwingFlexCtrl.kd = 0.0f;
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44
	CM_Ankle.SwingFlexCtrl.kp = 0.0f;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	649a      	str	r2, [r3, #72]	; 0x48
	CM_Ankle.SwingExtCtrl.eqPoint = 0.f;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	64da      	str	r2, [r3, #76]	; 0x4c
	CM_Ankle.SwingExtCtrl.kd = 0.0f;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
	CM_Ankle.SwingExtCtrl.kp = 0.0f;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <InitProsthesisControl+0xe8>)
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54

	CM_Knee.ImpCtrl.eqPoint = 0.0f;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
	CM_Knee.ImpCtrl.kd = 0.0f;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	CM_Knee.ImpCtrl.kp = 0.0f;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
	CM_Knee.StanceCtrl.eqPoint = 0.0f;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34
	CM_Knee.StanceCtrl.kd = 0.0f;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
	CM_Knee.StanceCtrl.kp = 0.0f;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	CM_Knee.SwingFlexCtrl.eqPoint = 0.0f;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
	CM_Knee.SwingFlexCtrl.kd = 0.0f;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
	CM_Knee.SwingFlexCtrl.kp = 0.0f;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	649a      	str	r2, [r3, #72]	; 0x48
	CM_Knee.SwingExtCtrl.eqPoint = 0.f;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	64da      	str	r2, [r3, #76]	; 0x4c
	CM_Knee.SwingExtCtrl.kd = 0.0f;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50
	CM_Knee.SwingExtCtrl.kp = 0.0f;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <InitProsthesisControl+0xf0>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54

	CM_lcBot_staticUpperLimit = 2300.0f;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <InitProsthesisControl+0xf8>)
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <InitProsthesisControl+0xfc>)
 8001d90:	601a      	str	r2, [r3, #0]
	CM_lcTop_staticUpperLimit = 2300.0f;
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <InitProsthesisControl+0x100>)
 8001d94:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <InitProsthesisControl+0xfc>)
 8001d96:	601a      	str	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200000f8 	.word	0x200000f8
 8001da8:	42e8e900 	.word	0x42e8e900
 8001dac:	20000180 	.word	0x20000180
 8001db0:	43453a00 	.word	0x43453a00
 8001db4:	200000ec 	.word	0x200000ec
 8001db8:	450fc000 	.word	0x450fc000
 8001dbc:	200000f0 	.word	0x200000f0

08001dc0 <RequireTestProgram>:

void RequireTestProgram(enum TestPrograms_e option)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <RequireTestProgram+0x2c>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	7013      	strb	r3, [r2, #0]

	if(testProgram != None)
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <RequireTestProgram+0x2c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <RequireTestProgram+0x30>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200000a5 	.word	0x200000a5
 8001df0:	200000e9 	.word	0x200000e9

08001df4 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	GetInputs();
 8001df8:	f000 f828 	bl	8001e4c <GetInputs>
	ProcessInputs();
 8001dfc:	f000 f88c 	bl	8001f18 <ProcessInputs>

	if(isTestProgramRequired)
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <RunProsthesisControl+0x4c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <RunProsthesisControl+0x1a>
	{
		RunTestProgram();
 8001e08:	f000 ffbe 	bl	8002d88 <RunTestProgram>
 8001e0c:	e003      	b.n	8001e16 <RunProsthesisControl+0x22>
	}
	else
	{
		RunStateMachine();
 8001e0e:	f000 fe9f 	bl	8002b50 <RunStateMachine>
		RunImpedanceControl();
 8001e12:	f000 ff43 	bl	8002c9c <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <RunProsthesisControl+0x50>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <RunProsthesisControl+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <RunProsthesisControl+0x54>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
	{
		isSecond = 0;
	}
}
 8001e2a:	e006      	b.n	8001e3a <RunProsthesisControl+0x46>
	else if(isSecond)
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <RunProsthesisControl+0x54>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <RunProsthesisControl+0x46>
		isSecond = 0;
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <RunProsthesisControl+0x54>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200000e9 	.word	0x200000e9
 8001e44:	20000010 	.word	0x20000010
 8001e48:	200000e8 	.word	0x200000e8

08001e4c <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

void GetInputs(void)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
	CM_Knee.jointAngle[0] = AS5145B_ReadPosition_Deg() - CM_Knee.encBias;
 8001e52:	f001 fbf1 	bl	8003638 <AS5145B_ReadPosition_Deg>
 8001e56:	eeb0 7a40 	vmov.f32	s14, s0
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <GetInputs+0x80>)
 8001e5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e64:	ee17 0a90 	vmov	r0, s15
 8001e68:	f7fe fb12 	bl	8000490 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <GetInputs+0x80>)
 8001e72:	e9c1 2300 	strd	r2, r3, [r1]
	CM_LoadCell->bot[0] = ReadLoadCell(ADC2);
 8001e76:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <GetInputs+0x84>)
 8001e78:	f000 f832 	bl	8001ee0 <ReadLoadCell>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fae4 	bl	800044c <__aeabi_ui2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4912      	ldr	r1, [pc, #72]	; (8001ed4 <GetInputs+0x88>)
 8001e8a:	e9c1 2300 	strd	r2, r3, [r1]
	CM_LoadCell->top[0] = ReadLoadCell(ADC1);
 8001e8e:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <GetInputs+0x8c>)
 8001e90:	f000 f826 	bl	8001ee0 <ReadLoadCell>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fad8 	bl	800044c <__aeabi_ui2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <GetInputs+0x88>)
 8001ea2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	IMUData = MPU925x_ReadIMU();
 8001ea6:	4c0d      	ldr	r4, [pc, #52]	; (8001edc <GetInputs+0x90>)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 f87a 	bl	8003fa4 <MPU925x_ReadIMU>
 8001eb0:	4625      	mov	r5, r4
 8001eb2:	463c      	mov	r4, r7
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ec0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ecc:	20000180 	.word	0x20000180
 8001ed0:	50040100 	.word	0x50040100
 8001ed4:	20000208 	.word	0x20000208
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	200000b8 	.word	0x200000b8

08001ee0 <ReadLoadCell>:

// Should be moved to ADC driver??
uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fea6 	bl	8001c3a <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8001eee:	bf00      	nop
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fec3 	bl	8001c7c <LL_ADC_IsActiveFlag_EOC>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f9      	beq.n	8001ef0 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fed0 	bl	8001ca2 <LL_ADC_ClearFlag_EOC>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fead 	bl	8001c62 <LL_ADC_REG_ReadConversionData12>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <ProcessInputs>:

void ProcessInputs(void)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	double tau = 1.0 / (2 * M_PI * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8001f1e:	a364      	add	r3, pc, #400	; (adr r3, 80020b0 <ProcessInputs+0x198>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	e9c7 2300 	strd	r2, r3, [r7]

	// Derivative of angle and filtering of load cells
	// No derivative of angle (angular speed) on first execution
	// No filtering of load cells on first or second execution
	if(isFirst)
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <ProcessInputs+0x180>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d031      	beq.n	8001f94 <ProcessInputs+0x7c>
	{
		CM_Knee.jointSpeed = 0.0;
 8001f30:	495a      	ldr	r1, [pc, #360]	; (800209c <ProcessInputs+0x184>)
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <ProcessInputs+0x184>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	4955      	ldr	r1, [pc, #340]	; (800209c <ProcessInputs+0x184>)
 8001f46:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[0];
 8001f4a:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <ProcessInputs+0x188>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	4953      	ldr	r1, [pc, #332]	; (80020a0 <ProcessInputs+0x188>)
 8001f52:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell->top[2] = CM_LoadCell->top[0];
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <ProcessInputs+0x188>)
 8001f58:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f5c:	4950      	ldr	r1, [pc, #320]	; (80020a0 <ProcessInputs+0x188>)
 8001f5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <ProcessInputs+0x188>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	494e      	ldr	r1, [pc, #312]	; (80020a4 <ProcessInputs+0x18c>)
 8001f6a:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <ProcessInputs+0x188>)
 8001f70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f74:	494b      	ldr	r1, [pc, #300]	; (80020a4 <ProcessInputs+0x18c>)
 8001f76:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <ProcessInputs+0x18c>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	4948      	ldr	r1, [pc, #288]	; (80020a4 <ProcessInputs+0x18c>)
 8001f82:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <ProcessInputs+0x18c>)
 8001f88:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f8c:	4945      	ldr	r1, [pc, #276]	; (80020a4 <ProcessInputs+0x18c>)
 8001f8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001f92:	e1c1      	b.n	8002318 <ProcessInputs+0x400>
	}
	else if(isSecond)
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <ProcessInputs+0x190>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 808d 	beq.w	80020b8 <ProcessInputs+0x1a0>
	{
		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <ProcessInputs+0x184>)
 8001fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <ProcessInputs+0x184>)
 8001fa6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001faa:	f7fe f911 	bl	80001d0 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	f7fe f90b 	bl	80001d4 <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f7fe f901 	bl	80001d4 <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4b34      	ldr	r3, [pc, #208]	; (80020ac <ProcessInputs+0x194>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe f8f6 	bl	80001d0 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <ProcessInputs+0x184>)
 8001fee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ff2:	f7fe faa5 	bl	8000540 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7fe f8e9 	bl	80001d4 <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	f7fe f8df 	bl	80001d4 <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <ProcessInputs+0x194>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe f8d6 	bl	80001d4 <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4620      	mov	r0, r4
 800202e:	4629      	mov	r1, r5
 8002030:	f7fe fbb0 	bl	8000794 <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4918      	ldr	r1, [pc, #96]	; (800209c <ProcessInputs+0x184>)
 800203a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <ProcessInputs+0x184>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	4915      	ldr	r1, [pc, #84]	; (800209c <ProcessInputs+0x184>)
 8002046:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <ProcessInputs+0x188>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	4913      	ldr	r1, [pc, #76]	; (80020a0 <ProcessInputs+0x188>)
 8002052:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <ProcessInputs+0x188>)
 8002058:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800205c:	4910      	ldr	r1, [pc, #64]	; (80020a0 <ProcessInputs+0x188>)
 800205e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <ProcessInputs+0x188>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <ProcessInputs+0x18c>)
 800206a:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <ProcessInputs+0x188>)
 8002070:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002074:	490b      	ldr	r1, [pc, #44]	; (80020a4 <ProcessInputs+0x18c>)
 8002076:	e9c1 2306 	strd	r2, r3, [r1, #24]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <ProcessInputs+0x18c>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	4908      	ldr	r1, [pc, #32]	; (80020a4 <ProcessInputs+0x18c>)
 8002082:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <ProcessInputs+0x18c>)
 8002088:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800208c:	4905      	ldr	r1, [pc, #20]	; (80020a4 <ProcessInputs+0x18c>)
 800208e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002092:	e141      	b.n	8002318 <ProcessInputs+0x400>
 8002094:	f3af 8000 	nop.w
 8002098:	20000010 	.word	0x20000010
 800209c:	20000180 	.word	0x20000180
 80020a0:	20000208 	.word	0x20000208
 80020a4:	20000298 	.word	0x20000298
 80020a8:	200000e8 	.word	0x200000e8
 80020ac:	20000008 	.word	0x20000008
 80020b0:	be3b06cf 	.word	0xbe3b06cf
 80020b4:	3f904c26 	.word	0x3f904c26
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_Knee.jointSpeed = (2*(CM_Knee.jointAngle[0] - CM_Knee.jointAngle[1]) + (2*tau - dt)*CM_Knee.jointSpeed) / (dt + 2*tau);
 80020b8:	4ba3      	ldr	r3, [pc, #652]	; (8002348 <ProcessInputs+0x430>)
 80020ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020be:	4ba2      	ldr	r3, [pc, #648]	; (8002348 <ProcessInputs+0x430>)
 80020c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020c4:	f7fe f884 	bl	80001d0 <__aeabi_dsub>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	f7fe f87e 	bl	80001d4 <__adddf3>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	f7fe f874 	bl	80001d4 <__adddf3>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	4b95      	ldr	r3, [pc, #596]	; (800234c <ProcessInputs+0x434>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe f869 	bl	80001d0 <__aeabi_dsub>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	4b90      	ldr	r3, [pc, #576]	; (8002348 <ProcessInputs+0x430>)
 8002108:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800210c:	f7fe fa18 	bl	8000540 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4620      	mov	r0, r4
 8002116:	4629      	mov	r1, r5
 8002118:	f7fe f85c 	bl	80001d4 <__adddf3>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	f7fe f852 	bl	80001d4 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <ProcessInputs+0x434>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f849 	bl	80001d4 <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe fb23 	bl	8000794 <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	497d      	ldr	r1, [pc, #500]	; (8002348 <ProcessInputs+0x430>)
 8002154:	e9c1 2304 	strd	r2, r3, [r1, #16]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 8002158:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <ProcessInputs+0x438>)
 800215a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800215e:	a372      	add	r3, pc, #456	; (adr r3, 8002328 <ProcessInputs+0x410>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe f9ec 	bl	8000540 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4614      	mov	r4, r2
 800216e:	461d      	mov	r5, r3
 8002170:	4b77      	ldr	r3, [pc, #476]	; (8002350 <ProcessInputs+0x438>)
 8002172:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002176:	a36e      	add	r3, pc, #440	; (adr r3, 8002330 <ProcessInputs+0x418>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe f9e0 	bl	8000540 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fe f822 	bl	80001d0 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
									   + 0.0128 * CM_LoadCell->bot[0] + 0.0256 * CM_LoadCell->bot[1] + 0.0128 * CM_LoadCell->bot[2];
 8002194:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <ProcessInputs+0x43c>)
 8002196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219a:	a367      	add	r3, pc, #412	; (adr r3, 8002338 <ProcessInputs+0x420>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f9ce 	bl	8000540 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f7fe f812 	bl	80001d4 <__adddf3>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <ProcessInputs+0x43c>)
 80021ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021be:	a360      	add	r3, pc, #384	; (adr r3, 8002340 <ProcessInputs+0x428>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f9bc 	bl	8000540 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fe f800 	bl	80001d4 <__adddf3>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	461d      	mov	r5, r3
 80021dc:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <ProcessInputs+0x43c>)
 80021de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021e2:	a355      	add	r3, pc, #340	; (adr r3, 8002338 <ProcessInputs+0x420>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f9aa 	bl	8000540 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fd ffee 	bl	80001d4 <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->bot[0] =   1.6556 * CM_LoadCell_Filtered->bot[1] - 0.7068 * CM_LoadCell_Filtered->bot[2]
 80021fc:	4954      	ldr	r1, [pc, #336]	; (8002350 <ProcessInputs+0x438>)
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <ProcessInputs+0x438>)
 8002204:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002208:	a347      	add	r3, pc, #284	; (adr r3, 8002328 <ProcessInputs+0x410>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe f997 	bl	8000540 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4614      	mov	r4, r2
 8002218:	461d      	mov	r5, r3
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <ProcessInputs+0x438>)
 800221c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002220:	a343      	add	r3, pc, #268	; (adr r3, 8002330 <ProcessInputs+0x418>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe f98b 	bl	8000540 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fd ffcd 	bl	80001d0 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4614      	mov	r4, r2
 800223c:	461d      	mov	r5, r3
									   + 0.0128 * CM_LoadCell->top[0] + 0.0256 * CM_LoadCell->top[1] + 0.0128 * CM_LoadCell->top[2];
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <ProcessInputs+0x43c>)
 8002240:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002244:	a33c      	add	r3, pc, #240	; (adr r3, 8002338 <ProcessInputs+0x420>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f979 	bl	8000540 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fd ffbd 	bl	80001d4 <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	461d      	mov	r5, r3
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <ProcessInputs+0x43c>)
 8002264:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002268:	a335      	add	r3, pc, #212	; (adr r3, 8002340 <ProcessInputs+0x428>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f967 	bl	8000540 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fd ffab 	bl	80001d4 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <ProcessInputs+0x43c>)
 8002288:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800228c:	a32a      	add	r3, pc, #168	; (adr r3, 8002338 <ProcessInputs+0x420>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fe f955 	bl	8000540 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fd ff99 	bl	80001d4 <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
		CM_LoadCell_Filtered->top[0] =   1.6556 * CM_LoadCell_Filtered->top[1] - 0.7068 * CM_LoadCell_Filtered->top[2]
 80022a6:	492a      	ldr	r1, [pc, #168]	; (8002350 <ProcessInputs+0x438>)
 80022a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		CM_Knee.jointAngle[1] = CM_Knee.jointAngle[0];
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <ProcessInputs+0x430>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <ProcessInputs+0x430>)
 80022b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[1];
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <ProcessInputs+0x43c>)
 80022ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022be:	4925      	ldr	r1, [pc, #148]	; (8002354 <ProcessInputs+0x43c>)
 80022c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <ProcessInputs+0x43c>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	4922      	ldr	r1, [pc, #136]	; (8002354 <ProcessInputs+0x43c>)
 80022cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell->top[2] = CM_LoadCell->top[1];
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <ProcessInputs+0x43c>)
 80022d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022d6:	491f      	ldr	r1, [pc, #124]	; (8002354 <ProcessInputs+0x43c>)
 80022d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <ProcessInputs+0x43c>)
 80022de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022e2:	491c      	ldr	r1, [pc, #112]	; (8002354 <ProcessInputs+0x43c>)
 80022e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <ProcessInputs+0x438>)
 80022ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022ee:	4918      	ldr	r1, [pc, #96]	; (8002350 <ProcessInputs+0x438>)
 80022f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <ProcessInputs+0x438>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	4915      	ldr	r1, [pc, #84]	; (8002350 <ProcessInputs+0x438>)
 80022fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <ProcessInputs+0x438>)
 8002302:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002306:	4912      	ldr	r1, [pc, #72]	; (8002350 <ProcessInputs+0x438>)
 8002308:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <ProcessInputs+0x438>)
 800230e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002312:	490f      	ldr	r1, [pc, #60]	; (8002350 <ProcessInputs+0x438>)
 8002314:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}

	CalibrateIMU();
 8002318:	f000 f81e 	bl	8002358 <CalibrateIMU>
	ComputeLimbAngle();
 800231c:	f000 fb48 	bl	80029b0 <ComputeLimbAngle>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bdb0      	pop	{r4, r5, r7, pc}
 8002328:	6cf41f21 	.word	0x6cf41f21
 800232c:	3ffa7d56 	.word	0x3ffa7d56
 8002330:	089a0275 	.word	0x089a0275
 8002334:	3fe69e1b 	.word	0x3fe69e1b
 8002338:	eb1c432d 	.word	0xeb1c432d
 800233c:	3f8a36e2 	.word	0x3f8a36e2
 8002340:	eb1c432d 	.word	0xeb1c432d
 8002344:	3f9a36e2 	.word	0x3f9a36e2
 8002348:	20000180 	.word	0x20000180
 800234c:	20000008 	.word	0x20000008
 8002350:	20000298 	.word	0x20000298
 8002354:	20000208 	.word	0x20000208

08002358 <CalibrateIMU>:

void CalibrateIMU(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b0a0      	sub	sp, #128	; 0x80
 800235e:	af00      	add	r7, sp, #0
	double axBias = 0.0;
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double ayBias = 0.0;
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double azBias = 0.0;
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double gxBias = 0.0;
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double gyBias = 0.0;
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double gzBias = 0.0;
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double n = 1.0;
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	4bbe      	ldr	r3, [pc, #760]	; (80026a8 <CalibrateIMU+0x350>)
 80023ae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double s1 = sin(0.0);
	double s2 = sin(0.0);
	double s3 = sin(0.0);
	#endif
	#ifdef LEFT
	double c1 = cos(M_PI);
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	4bbd      	ldr	r3, [pc, #756]	; (80026ac <CalibrateIMU+0x354>)
 80023b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double c2 = cos(M_PI);
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4bba      	ldr	r3, [pc, #744]	; (80026ac <CalibrateIMU+0x354>)
 80023c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double c3 = cos(0.0);
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4bb7      	ldr	r3, [pc, #732]	; (80026a8 <CalibrateIMU+0x350>)
 80023cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double s1 = sin(M_PI);
 80023d0:	a3b3      	add	r3, pc, #716	; (adr r3, 80026a0 <CalibrateIMU+0x348>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double s2 = sin(M_PI);
 80023da:	a3b1      	add	r3, pc, #708	; (adr r3, 80026a0 <CalibrateIMU+0x348>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s3 = sin(0.0);
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	#endif

	// Rotate IMU data and remove biases
	CM_Knee.IMUData.ax = n * (IMUData.ax*(c1*c3 - c2*s1*s3) + IMUData.ay*(  -c3*s1 - c1*c2*s3) + IMUData.az*( s2*s3)) - axBias;
 80023f0:	4baf      	ldr	r3, [pc, #700]	; (80026b0 <CalibrateIMU+0x358>)
 80023f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80023f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023fe:	f7fe f89f 	bl	8000540 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4692      	mov	sl, r2
 8002408:	469b      	mov	fp, r3
 800240a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800240e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002412:	f7fe f895 	bl	8000540 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002422:	f7fe f88d 	bl	8000540 <__aeabi_dmul>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4650      	mov	r0, sl
 800242c:	4659      	mov	r1, fp
 800242e:	f7fd fecf 	bl	80001d0 <__aeabi_dsub>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4640      	mov	r0, r8
 8002438:	4649      	mov	r1, r9
 800243a:	f7fe f881 	bl	8000540 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4692      	mov	sl, r2
 8002444:	469b      	mov	fp, r3
 8002446:	4b9a      	ldr	r3, [pc, #616]	; (80026b0 <CalibrateIMU+0x358>)
 8002448:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800244c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fe f870 	bl	8000540 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800246c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002470:	f7fe f866 	bl	8000540 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002480:	f7fe f85e 	bl	8000540 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fd fea0 	bl	80001d0 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4640      	mov	r0, r8
 8002496:	4649      	mov	r1, r9
 8002498:	f7fe f852 	bl	8000540 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4650      	mov	r0, sl
 80024a2:	4659      	mov	r1, fp
 80024a4:	f7fd fe96 	bl	80001d4 <__adddf3>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4690      	mov	r8, r2
 80024ae:	4699      	mov	r9, r3
 80024b0:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <CalibrateIMU+0x358>)
 80024b2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80024b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024be:	f7fe f83f 	bl	8000540 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f7fe f839 	bl	8000540 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4640      	mov	r0, r8
 80024d4:	4649      	mov	r1, r9
 80024d6:	f7fd fe7d 	bl	80001d4 <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024e6:	f7fe f82b 	bl	8000540 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80024f6:	f7fd fe6b 	bl	80001d0 <__aeabi_dsub>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	496d      	ldr	r1, [pc, #436]	; (80026b4 <CalibrateIMU+0x35c>)
 8002500:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	CM_Knee.IMUData.ay = n * (IMUData.ax*(c1*s3 + c2*c3*s1) + IMUData.ay*(c1*c2*c3 - s1*s3   ) + IMUData.az*(-c3*s2)) - ayBias;
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <CalibrateIMU+0x358>)
 8002506:	e9d3 4500 	ldrd	r4, r5, [r3]
 800250a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002512:	f7fe f815 	bl	8000540 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4690      	mov	r8, r2
 800251c:	4699      	mov	r9, r3
 800251e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002522:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002526:	f7fe f80b 	bl	8000540 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002536:	f7fe f803 	bl	8000540 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4640      	mov	r0, r8
 8002540:	4649      	mov	r1, r9
 8002542:	f7fd fe47 	bl	80001d4 <__adddf3>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fff7 	bl	8000540 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4692      	mov	sl, r2
 8002558:	469b      	mov	fp, r3
 800255a:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <CalibrateIMU+0x358>)
 800255c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002564:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002568:	f7fd ffea 	bl	8000540 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002578:	f7fd ffe2 	bl	8000540 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4690      	mov	r8, r2
 8002582:	4699      	mov	r9, r3
 8002584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002588:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800258c:	f7fd ffd8 	bl	8000540 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4640      	mov	r0, r8
 8002596:	4649      	mov	r1, r9
 8002598:	f7fd fe1a 	bl	80001d0 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4620      	mov	r0, r4
 80025a2:	4629      	mov	r1, r5
 80025a4:	f7fd ffcc 	bl	8000540 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4650      	mov	r0, sl
 80025ae:	4659      	mov	r1, fp
 80025b0:	f7fd fe10 	bl	80001d4 <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4690      	mov	r8, r2
 80025ba:	4699      	mov	r9, r3
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <CalibrateIMU+0x358>)
 80025be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025d6:	f7fd ffb3 	bl	8000540 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fd ffad 	bl	8000540 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4640      	mov	r0, r8
 80025ec:	4649      	mov	r1, r9
 80025ee:	f7fd fdf1 	bl	80001d4 <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025fe:	f7fd ff9f 	bl	8000540 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800260e:	f7fd fddf 	bl	80001d0 <__aeabi_dsub>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4927      	ldr	r1, [pc, #156]	; (80026b4 <CalibrateIMU+0x35c>)
 8002618:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	CM_Knee.IMUData.az = n * (IMUData.ax*(        s1*s2   ) + IMUData.ay*(           c1*s2   ) + IMUData.az*( c2   )) - azBias;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <CalibrateIMU+0x358>)
 800261e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002626:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800262a:	f7fd ff89 	bl	8000540 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd ff83 	bl	8000540 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <CalibrateIMU+0x358>)
 8002644:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002648:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002650:	f7fd ff76 	bl	8000540 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fd ff70 	bl	8000540 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4640      	mov	r0, r8
 8002666:	4649      	mov	r1, r9
 8002668:	f7fd fdb4 	bl	80001d4 <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <CalibrateIMU+0x358>)
 8002676:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800267a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800267e:	f7fd ff5f 	bl	8000540 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd fda3 	bl	80001d4 <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	f7fd ff51 	bl	8000540 <__aeabi_dmul>
 800269e:	e00b      	b.n	80026b8 <CalibrateIMU+0x360>
 80026a0:	33145c07 	.word	0x33145c07
 80026a4:	3ca1a626 	.word	0x3ca1a626
 80026a8:	3ff00000 	.word	0x3ff00000
 80026ac:	bff00000 	.word	0xbff00000
 80026b0:	200000b8 	.word	0x200000b8
 80026b4:	20000180 	.word	0x20000180
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80026c4:	f7fd fd84 	bl	80001d0 <__aeabi_dsub>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	49b6      	ldr	r1, [pc, #728]	; (80029a8 <CalibrateIMU+0x650>)
 80026ce:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	CM_Knee.IMUData.gx = n * (IMUData.gx*(c1*c3 - c2*s1*s3) + IMUData.gy*(  -c3*s1 - c1*c2*s3) + IMUData.gz*( s2*s3)) - gxBias;
 80026d2:	4bb6      	ldr	r3, [pc, #728]	; (80029ac <CalibrateIMU+0x654>)
 80026d4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80026d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026e0:	f7fd ff2e 	bl	8000540 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4690      	mov	r8, r2
 80026ea:	4699      	mov	r9, r3
 80026ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80026f4:	f7fd ff24 	bl	8000540 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002704:	f7fd ff1c 	bl	8000540 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4640      	mov	r0, r8
 800270e:	4649      	mov	r1, r9
 8002710:	f7fd fd5e 	bl	80001d0 <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd ff10 	bl	8000540 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4690      	mov	r8, r2
 8002726:	4699      	mov	r9, r3
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <CalibrateIMU+0x654>)
 800272a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002742:	f7fd fefd 	bl	8000540 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4692      	mov	sl, r2
 800274c:	469b      	mov	fp, r3
 800274e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002752:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002756:	f7fd fef3 	bl	8000540 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002766:	f7fd feeb 	bl	8000540 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4650      	mov	r0, sl
 8002770:	4659      	mov	r1, fp
 8002772:	f7fd fd2d 	bl	80001d0 <__aeabi_dsub>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd fedf 	bl	8000540 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4640      	mov	r0, r8
 8002788:	4649      	mov	r1, r9
 800278a:	f7fd fd23 	bl	80001d4 <__adddf3>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4690      	mov	r8, r2
 8002794:	4699      	mov	r9, r3
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <CalibrateIMU+0x654>)
 8002798:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800279c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027a4:	f7fd fecc 	bl	8000540 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fec6 	bl	8000540 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4640      	mov	r0, r8
 80027ba:	4649      	mov	r1, r9
 80027bc:	f7fd fd0a 	bl	80001d4 <__adddf3>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027cc:	f7fd feb8 	bl	8000540 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027dc:	f7fd fcf8 	bl	80001d0 <__aeabi_dsub>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4970      	ldr	r1, [pc, #448]	; (80029a8 <CalibrateIMU+0x650>)
 80027e6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	CM_Knee.IMUData.gy = n * (IMUData.gx*(c1*s3 + c2*c3*s1) + IMUData.gy*(c1*c2*c3 - s1*s3   ) + IMUData.gz*(-c3*s2)) - gyBias;
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <CalibrateIMU+0x654>)
 80027ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80027f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80027f8:	f7fd fea2 	bl	8000540 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4690      	mov	r8, r2
 8002802:	4699      	mov	r9, r3
 8002804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002808:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800280c:	f7fd fe98 	bl	8000540 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800281c:	f7fd fe90 	bl	8000540 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4640      	mov	r0, r8
 8002826:	4649      	mov	r1, r9
 8002828:	f7fd fcd4 	bl	80001d4 <__adddf3>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fd fe84 	bl	8000540 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4690      	mov	r8, r2
 800283e:	4699      	mov	r9, r3
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <CalibrateIMU+0x654>)
 8002842:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002846:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800284a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800284e:	f7fd fe77 	bl	8000540 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800285e:	f7fd fe6f 	bl	8000540 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4692      	mov	sl, r2
 8002868:	469b      	mov	fp, r3
 800286a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002872:	f7fd fe65 	bl	8000540 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4650      	mov	r0, sl
 800287c:	4659      	mov	r1, fp
 800287e:	f7fd fca7 	bl	80001d0 <__aeabi_dsub>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4620      	mov	r0, r4
 8002888:	4629      	mov	r1, r5
 800288a:	f7fd fe59 	bl	8000540 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4640      	mov	r0, r8
 8002894:	4649      	mov	r1, r9
 8002896:	f7fd fc9d 	bl	80001d4 <__adddf3>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4690      	mov	r8, r2
 80028a0:	4699      	mov	r9, r3
 80028a2:	4b42      	ldr	r3, [pc, #264]	; (80029ac <CalibrateIMU+0x654>)
 80028a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028bc:	f7fd fe40 	bl	8000540 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd fe3a 	bl	8000540 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4640      	mov	r0, r8
 80028d2:	4649      	mov	r1, r9
 80028d4:	f7fd fc7e 	bl	80001d4 <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028e4:	f7fd fe2c 	bl	8000540 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028f4:	f7fd fc6c 	bl	80001d0 <__aeabi_dsub>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	492a      	ldr	r1, [pc, #168]	; (80029a8 <CalibrateIMU+0x650>)
 80028fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	CM_Knee.IMUData.gz = n * (IMUData.gx*(        s1*s2   ) + IMUData.gy*(           c1*s2   ) + IMUData.gz*( c2   )) - gzBias;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <CalibrateIMU+0x654>)
 8002904:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002908:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800290c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002910:	f7fd fe16 	bl	8000540 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fe10 	bl	8000540 <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4690      	mov	r8, r2
 8002926:	4699      	mov	r9, r3
 8002928:	4b20      	ldr	r3, [pc, #128]	; (80029ac <CalibrateIMU+0x654>)
 800292a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800292e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002932:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002936:	f7fd fe03 	bl	8000540 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fdfd 	bl	8000540 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4640      	mov	r0, r8
 800294c:	4649      	mov	r1, r9
 800294e:	f7fd fc41 	bl	80001d4 <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4614      	mov	r4, r2
 8002958:	461d      	mov	r5, r3
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <CalibrateIMU+0x654>)
 800295c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002964:	f7fd fdec 	bl	8000540 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fc30 	bl	80001d4 <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002980:	f7fd fdde 	bl	8000540 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002990:	f7fd fc1e 	bl	80001d0 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <CalibrateIMU+0x650>)
 800299a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
}
 800299e:	bf00      	nop
 80029a0:	3780      	adds	r7, #128	; 0x80
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a8:	20000180 	.word	0x20000180
 80029ac:	200000b8 	.word	0x200000b8

080029b0 <ComputeLimbAngle>:

void ComputeLimbAngle(void)
{
 80029b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
	double accelAngle = (atan(CM_Knee.IMUData.ax / sqrt(pow(CM_Knee.IMUData.ay, 2) + pow(CM_Knee.IMUData.az, 2)))) * 180.0/M_PI;
 80029b8:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <ComputeLimbAngle+0x188>)
 80029ba:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <ComputeLimbAngle+0x188>)
 80029c0:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80029c4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002b20 <ComputeLimbAngle+0x170>
 80029c8:	eeb0 0a47 	vmov.f32	s0, s14
 80029cc:	eef0 0a67 	vmov.f32	s1, s15
 80029d0:	f003 f8ac 	bl	8005b2c <pow>
 80029d4:	ec59 8b10 	vmov	r8, r9, d0
 80029d8:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <ComputeLimbAngle+0x188>)
 80029da:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80029de:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002b20 <ComputeLimbAngle+0x170>
 80029e2:	eeb0 0a47 	vmov.f32	s0, s14
 80029e6:	eef0 0a67 	vmov.f32	s1, s15
 80029ea:	f003 f89f 	bl	8005b2c <pow>
 80029ee:	ec53 2b10 	vmov	r2, r3, d0
 80029f2:	4640      	mov	r0, r8
 80029f4:	4649      	mov	r1, r9
 80029f6:	f7fd fbed 	bl	80001d4 <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	ec43 2b17 	vmov	d7, r2, r3
 8002a02:	eeb0 0a47 	vmov.f32	s0, s14
 8002a06:	eef0 0a67 	vmov.f32	s1, s15
 8002a0a:	f003 f8ff 	bl	8005c0c <sqrt>
 8002a0e:	ec53 2b10 	vmov	r2, r3, d0
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd febd 	bl	8000794 <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	ec43 2b17 	vmov	d7, r2, r3
 8002a22:	eeb0 0a47 	vmov.f32	s0, s14
 8002a26:	eef0 0a67 	vmov.f32	s1, s15
 8002a2a:	f002 fed5 	bl	80057d8 <atan>
 8002a2e:	ec51 0b10 	vmov	r0, r1, d0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <ComputeLimbAngle+0x18c>)
 8002a38:	f7fd fd82 	bl	8000540 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	a338      	add	r3, pc, #224	; (adr r3, 8002b28 <ComputeLimbAngle+0x178>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fea3 	bl	8000794 <__aeabi_ddiv>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	static double compFiltAngle = 0.0;
	static double dGyroAngle = 0.0;

	// Change in angle from gyro (trapezoidal used)
	dGyroAngle = dt/2 * (CM_Knee.IMUData.gz + dGyroAngle);
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <ComputeLimbAngle+0x190>)
 8002a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a64:	f7fd fe96 	bl	8000794 <__aeabi_ddiv>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <ComputeLimbAngle+0x188>)
 8002a72:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8002a76:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <ComputeLimbAngle+0x194>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fbaa 	bl	80001d4 <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd fd5a 	bl	8000540 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	492c      	ldr	r1, [pc, #176]	; (8002b44 <ComputeLimbAngle+0x194>)
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]

	// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
	double alpha = 0.002;
 8002a96:	a326      	add	r3, pc, #152	; (adr r3, 8002b30 <ComputeLimbAngle+0x180>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	e9c7 2300 	strd	r2, r3, [r7]
	compFiltAngle = accelAngle*alpha + (1 - alpha) * (dGyroAngle + compFiltAngle);
 8002aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aa8:	f7fd fd4a 	bl	8000540 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	4922      	ldr	r1, [pc, #136]	; (8002b48 <ComputeLimbAngle+0x198>)
 8002abe:	f7fd fb87 	bl	80001d0 <__aeabi_dsub>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4690      	mov	r8, r2
 8002ac8:	4699      	mov	r9, r3
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <ComputeLimbAngle+0x194>)
 8002acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <ComputeLimbAngle+0x19c>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fb7d 	bl	80001d4 <__adddf3>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4640      	mov	r0, r8
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	f7fd fd2d 	bl	8000540 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fb71 	bl	80001d4 <__adddf3>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4915      	ldr	r1, [pc, #84]	; (8002b4c <ComputeLimbAngle+0x19c>)
 8002af8:	e9c1 2300 	strd	r2, r3, [r1]

	CM_Knee.limbAngle = compFiltAngle - CM_Knee.jointAngle[0];
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <ComputeLimbAngle+0x19c>)
 8002afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <ComputeLimbAngle+0x188>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fb62 	bl	80001d0 <__aeabi_dsub>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4909      	ldr	r1, [pc, #36]	; (8002b38 <ComputeLimbAngle+0x188>)
 8002b12:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	CM_Ankle.limbAngle = compFiltAngle + CM_jointAngle[0]; ??
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40000000 	.word	0x40000000
 8002b28:	54442d18 	.word	0x54442d18
 8002b2c:	400921fb 	.word	0x400921fb
 8002b30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b34:	3f60624d 	.word	0x3f60624d
 8002b38:	20000180 	.word	0x20000180
 8002b3c:	40668000 	.word	0x40668000
 8002b40:	20000008 	.word	0x20000008
 8002b44:	20000330 	.word	0x20000330
 8002b48:	3ff00000 	.word	0x3ff00000
 8002b4c:	20000338 	.word	0x20000338

08002b50 <RunStateMachine>:

void RunStateMachine(void)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	static enum StateMachine_e state;

	if(isFirst)
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <RunStateMachine+0x12c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <RunStateMachine+0x12>
	{
		state = Stance;
 8002b5c:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <RunStateMachine+0x130>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
	}

	switch(state)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <RunStateMachine+0x130>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d060      	beq.n	8002c2c <RunStateMachine+0xdc>
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	f300 8084 	bgt.w	8002c78 <RunStateMachine+0x128>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <RunStateMachine+0x2a>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d038      	beq.n	8002bea <RunStateMachine+0x9a>
			state = Stance;
		}

		break;
	}
}
 8002b78:	e07e      	b.n	8002c78 <RunStateMachine+0x128>
		CM_state = 1800;
 8002b7a:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <RunStateMachine+0x134>)
 8002b7c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002b80:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.StanceCtrl.eqPoint;
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <RunStateMachine+0x138>)
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	4a41      	ldr	r2, [pc, #260]	; (8002c8c <RunStateMachine+0x13c>)
 8002b88:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.StanceCtrl.kd;
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <RunStateMachine+0x138>)
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <RunStateMachine+0x13c>)
 8002b90:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.StanceCtrl.kp;
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <RunStateMachine+0x138>)
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <RunStateMachine+0x13c>)
 8002b98:	6093      	str	r3, [r2, #8]
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <RunStateMachine+0x140>)
 8002b9c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ba0:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <RunStateMachine+0x144>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fc73 	bl	8000490 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd ff37 	bl	8000a24 <__aeabi_dcmplt>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d100      	bne.n	8002bbe <RunStateMachine+0x6e>
		break;
 8002bbc:	e05c      	b.n	8002c78 <RunStateMachine+0x128>
		if((CM_LoadCell_Filtered->top[0] < CM_lcTop_staticUpperLimit) && (CM_LoadCell_Filtered->bot[0] < CM_lcBot_staticUpperLimit))
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <RunStateMachine+0x140>)
 8002bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <RunStateMachine+0x148>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fc61 	bl	8000490 <__aeabi_f2d>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	f7fd ff25 	bl	8000a24 <__aeabi_dcmplt>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d100      	bne.n	8002be2 <RunStateMachine+0x92>
		break;
 8002be0:	e04a      	b.n	8002c78 <RunStateMachine+0x128>
			state = SwingFlexion;
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <RunStateMachine+0x130>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
		break;
 8002be8:	e046      	b.n	8002c78 <RunStateMachine+0x128>
		CM_state = 2400;
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <RunStateMachine+0x134>)
 8002bec:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002bf0:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.SwingFlexCtrl.eqPoint;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <RunStateMachine+0x138>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <RunStateMachine+0x13c>)
 8002bf8:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.SwingFlexCtrl.kd;
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <RunStateMachine+0x138>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <RunStateMachine+0x13c>)
 8002c00:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.SwingFlexCtrl.kp;
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <RunStateMachine+0x138>)
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <RunStateMachine+0x13c>)
 8002c08:	6093      	str	r3, [r2, #8]
		if(CM_Knee.jointSpeed > 0)
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <RunStateMachine+0x138>)
 8002c0c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f7fd ff22 	bl	8000a60 <__aeabi_dcmpgt>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d100      	bne.n	8002c24 <RunStateMachine+0xd4>
		break;
 8002c22:	e029      	b.n	8002c78 <RunStateMachine+0x128>
			state = SwingExtension;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <RunStateMachine+0x130>)
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
		break;
 8002c2a:	e025      	b.n	8002c78 <RunStateMachine+0x128>
		CM_state = 2900;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <RunStateMachine+0x134>)
 8002c2e:	f640 3254 	movw	r2, #2900	; 0xb54
 8002c32:	801a      	strh	r2, [r3, #0]
		ProsCtrl.eqPoint = CM_Knee.SwingExtCtrl.eqPoint;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <RunStateMachine+0x138>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <RunStateMachine+0x13c>)
 8002c3a:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_Knee.SwingExtCtrl.kd;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <RunStateMachine+0x138>)
 8002c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <RunStateMachine+0x13c>)
 8002c42:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_Knee.SwingExtCtrl.kp;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <RunStateMachine+0x138>)
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <RunStateMachine+0x13c>)
 8002c4a:	6093      	str	r3, [r2, #8]
		if(CM_LoadCell_Filtered->bot[0] > CM_lcBot_staticUpperLimit)
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <RunStateMachine+0x140>)
 8002c4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <RunStateMachine+0x148>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc1a 	bl	8000490 <__aeabi_f2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4620      	mov	r0, r4
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7fd fefc 	bl	8000a60 <__aeabi_dcmpgt>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d100      	bne.n	8002c70 <RunStateMachine+0x120>
		break;
 8002c6e:	e002      	b.n	8002c76 <RunStateMachine+0x126>
			state = Stance;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <RunStateMachine+0x130>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
		break;
 8002c76:	bf00      	nop
}
 8002c78:	bf00      	nop
 8002c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000340 	.word	0x20000340
 8002c84:	2000032a 	.word	0x2000032a
 8002c88:	20000180 	.word	0x20000180
 8002c8c:	200000a8 	.word	0x200000a8
 8002c90:	20000298 	.word	0x20000298
 8002c94:	200000f0 	.word	0x200000f0
 8002c98:	200000ec 	.word	0x200000ec

08002c9c <RunImpedanceControl>:

void RunImpedanceControl(void)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 8002ca2:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <RunImpedanceControl+0xd4>)
 8002ca4:	617b      	str	r3, [r7, #20]
	float nomCurrent = 8.0f;						// is this number accurate??
 8002ca6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002caa:	613b      	str	r3, [r7, #16]
	float torqueConst = 60.0f / (2*M_PI * 100);		// Units in N*m/A, for Kv = 100 rpm/V
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <RunImpedanceControl+0xd8>)
 8002cae:	60fb      	str	r3, [r7, #12]

	float errorPos = ProsCtrl.eqPoint - CM_Knee.jointAngle[0];
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <RunImpedanceControl+0xdc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fbeb 	bl	8000490 <__aeabi_f2d>
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <RunImpedanceControl+0xe0>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fa86 	bl	80001d0 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7fd fee8 	bl	8000aa0 <__aeabi_d2f>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60bb      	str	r3, [r7, #8]

	CM_Knee.jointTorque = -(ProsCtrl.kp*errorPos - ProsCtrl.kd*CM_Knee.jointSpeed);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <RunImpedanceControl+0xdc>)
 8002cd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	ee17 0a90 	vmov	r0, s15
 8002ce6:	f7fd fbd3 	bl	8000490 <__aeabi_f2d>
 8002cea:	4604      	mov	r4, r0
 8002cec:	460d      	mov	r5, r1
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <RunImpedanceControl+0xdc>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fbcc 	bl	8000490 <__aeabi_f2d>
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <RunImpedanceControl+0xe0>)
 8002cfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cfe:	f7fd fc1f 	bl	8000540 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fa61 	bl	80001d0 <__aeabi_dsub>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd fec3 	bl	8000aa0 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef1 7a67 	vneg.f32	s15, s15
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <RunImpedanceControl+0xe0>)
 8002d26:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
//	CM_Ankle.jointTorque_nm = ProsCtrl.kp*errorPos - ProsCtrl.kd*CM_Ankle.jointSpeed; ??

	int32_t motorTorque = CM_Knee.jointTorque / (torqueConst * gearRatio * nomCurrent) * 1000;
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <RunImpedanceControl+0xe0>)
 8002d2c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002d30:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002d80 <RunImpedanceControl+0xe4>
 8002d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque(CAN_ID, motorTorque);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <RunImpedanceControl+0xe8>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd0b 	bl	800377c <EPOS4_SetTorque>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	42200000 	.word	0x42200000
 8002d74:	3dc391d1 	.word	0x3dc391d1
 8002d78:	200000a8 	.word	0x200000a8
 8002d7c:	20000180 	.word	0x20000180
 8002d80:	447a0000 	.word	0x447a0000
 8002d84:	20000000 	.word	0x20000000

08002d88 <RunTestProgram>:

void RunTestProgram(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
	switch (testProgram)
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <RunTestProgram+0xf8>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d870      	bhi.n	8002e78 <RunTestProgram+0xf0>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <RunTestProgram+0x14>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002e77 	.word	0x08002e77
 8002da0:	08002e77 	.word	0x08002e77
 8002da4:	08002db1 	.word	0x08002db1
 8002da8:	08002dc3 	.word	0x08002dc3
 8002dac:	08002dfb 	.word	0x08002dfb
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 100;
 8002db0:	2364      	movs	r3, #100	; 0x64
 8002db2:	607b      	str	r3, [r7, #4]
		EPOS4_SetTorque(CAN_ID, torque);
 8002db4:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <RunTestProgram+0xfc>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fcde 	bl	800377c <EPOS4_SetTorque>
		break;
 8002dc0:	e05a      	b.n	8002e78 <RunTestProgram+0xf0>
	}
	case MagneticEncoderBias:
	{
		uint16_t i;

		uint32_t sum = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < 1000; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	83fb      	strh	r3, [r7, #30]
 8002dca:	e00a      	b.n	8002de2 <RunTestProgram+0x5a>
		{
			uint16_t bias = AS5145B_ReadPosition_Raw();
 8002dcc:	f000 fc26 	bl	800361c <AS5145B_ReadPosition_Raw>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	817b      	strh	r3, [r7, #10]
			sum += bias;
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4413      	add	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < 1000; i++)
 8002ddc:	8bfb      	ldrh	r3, [r7, #30]
 8002dde:	3301      	adds	r3, #1
 8002de0:	83fb      	strh	r3, [r7, #30]
 8002de2:	8bfb      	ldrh	r3, [r7, #30]
 8002de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de8:	d3f0      	bcc.n	8002dcc <RunTestProgram+0x44>
		}

		CM_kneeEncBias = sum / i;
 8002dea:	8bfb      	ldrh	r3, [r7, #30]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <RunTestProgram+0x100>)
 8002df6:	801a      	strh	r2, [r3, #0]

		break;
 8002df8:	e03e      	b.n	8002e78 <RunTestProgram+0xf0>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <RunTestProgram+0x104>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02a      	beq.n	8002e58 <RunTestProgram+0xd0>
		{
			uint16_t i;
			float sum = 0.0f;
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]

			for(i = 0; i < 1000; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	82fb      	strh	r3, [r7, #22]
 8002e0c:	e00e      	b.n	8002e2c <RunTestProgram+0xa4>
			{
				float pos = AS5145B_ReadPosition_Deg();
 8002e0e:	f000 fc13 	bl	8003638 <AS5145B_ReadPosition_Deg>
 8002e12:	ed87 0a03 	vstr	s0, [r7, #12]
				sum += pos;
 8002e16:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 8002e26:	8afb      	ldrh	r3, [r7, #22]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	82fb      	strh	r3, [r7, #22]
 8002e2c:	8afb      	ldrh	r3, [r7, #22]
 8002e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e32:	d3ec      	bcc.n	8002e0e <RunTestProgram+0x86>
			}

			CM_Knee.ImpCtrl.eqPoint = sum / i - CM_Knee.encBias;
 8002e34:	8afb      	ldrh	r3, [r7, #22]
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <RunTestProgram+0x108>)
 8002e48:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <RunTestProgram+0x108>)
 8002e52:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			ProsCtrl.eqPoint = CM_Knee.ImpCtrl.eqPoint;

			RunImpedanceControl();
		}

		break;
 8002e56:	e00f      	b.n	8002e78 <RunTestProgram+0xf0>
			ProsCtrl.kd = CM_Knee.ImpCtrl.kd;
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <RunTestProgram+0x108>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <RunTestProgram+0x10c>)
 8002e5e:	6053      	str	r3, [r2, #4]
			ProsCtrl.kp = CM_Knee.ImpCtrl.kp;
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <RunTestProgram+0x108>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <RunTestProgram+0x10c>)
 8002e66:	6093      	str	r3, [r2, #8]
			ProsCtrl.eqPoint = CM_Knee.ImpCtrl.eqPoint;
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <RunTestProgram+0x108>)
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <RunTestProgram+0x10c>)
 8002e6e:	6013      	str	r3, [r2, #0]
			RunImpedanceControl();
 8002e70:	f7ff ff14 	bl	8002c9c <RunImpedanceControl>
		break;
 8002e74:	e000      	b.n	8002e78 <RunTestProgram+0xf0>
		break;
 8002e76:	bf00      	nop
	}
	}
}
 8002e78:	bf00      	nop
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200000a5 	.word	0x200000a5
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000328 	.word	0x20000328
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	20000180 	.word	0x20000180
 8002e94:	200000a8 	.word	0x200000a8

08002e98 <LL_AHB2_GRP1_EnableClock>:
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <LL_APB1_GRP1_EnableClock>:
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ed2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ed4:	4907      	ldr	r1, [pc, #28]	; (8002ef4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	658b      	str	r3, [r1, #88]	; 0x58
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ede:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <LL_APB2_GRP1_EnableClock>:
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	660b      	str	r3, [r1, #96]	; 0x60
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4013      	ands	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000

08002f28 <LL_SPI_SetStandard>:
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 0210 	bic.w	r2, r3, #16
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_SPI_DisableNSSPulseMgt>:
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f023 0208 	bic.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <MX_SPI1_Init>:
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b090      	sub	sp, #64	; 0x40
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	f107 0318 	add.w	r3, r7, #24
 8002f7a:	2228      	movs	r2, #40	; 0x28
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fc22 	bl	80057c8 <memset>
 8002f84:	463b      	mov	r3, r7
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	611a      	str	r2, [r3, #16]
 8002f92:	615a      	str	r2, [r3, #20]
 8002f94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f98:	f7ff ffae 	bl	8002ef8 <LL_APB2_GRP1_EnableClock>
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f7ff ff7b 	bl	8002e98 <LL_AHB2_GRP1_EnableClock>
 8002fa2:	23e0      	movs	r3, #224	; 0xe0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	2303      	movs	r3, #3
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	463b      	mov	r3, r7
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc2:	f001 fdc3 	bl	8004b4c <LL_GPIO_Init>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	2300      	movs	r3, #0
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff0:	2307      	movs	r3, #7
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff4:	f107 0318 	add.w	r3, r7, #24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4807      	ldr	r0, [pc, #28]	; (8003018 <MX_SPI1_Init+0xa8>)
 8002ffc:	f002 fa0e 	bl	800541c <LL_SPI_Init>
 8003000:	2100      	movs	r1, #0
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_SPI1_Init+0xa8>)
 8003004:	f7ff ff90 	bl	8002f28 <LL_SPI_SetStandard>
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <MX_SPI1_Init+0xa8>)
 800300a:	f7ff ffa0 	bl	8002f4e <LL_SPI_DisableNSSPulseMgt>
 800300e:	bf00      	nop
 8003010:	3740      	adds	r7, #64	; 0x40
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40013000 	.word	0x40013000

0800301c <MX_SPI2_Init>:
 800301c:	b580      	push	{r7, lr}
 800301e:	b090      	sub	sp, #64	; 0x40
 8003020:	af00      	add	r7, sp, #0
 8003022:	f107 0318 	add.w	r3, r7, #24
 8003026:	2228      	movs	r2, #40	; 0x28
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fbcc 	bl	80057c8 <memset>
 8003030:	463b      	mov	r3, r7
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003044:	f7ff ff40 	bl	8002ec8 <LL_APB1_GRP1_EnableClock>
 8003048:	2002      	movs	r0, #2
 800304a:	f7ff ff25 	bl	8002e98 <LL_AHB2_GRP1_EnableClock>
 800304e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	2302      	movs	r3, #2
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	2303      	movs	r3, #3
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	2305      	movs	r3, #5
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	463b      	mov	r3, r7
 800306a:	4619      	mov	r1, r3
 800306c:	4815      	ldr	r0, [pc, #84]	; (80030c4 <MX_SPI2_Init+0xa8>)
 800306e:	f001 fd6d 	bl	8004b4c <LL_GPIO_Init>
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	f44f 7382 	mov.w	r3, #260	; 0x104
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	2302      	movs	r3, #2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	2301      	movs	r3, #1
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
 800308a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	2308      	movs	r3, #8
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
 8003098:	2300      	movs	r3, #0
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
 800309c:	2307      	movs	r3, #7
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	4619      	mov	r1, r3
 80030a6:	4808      	ldr	r0, [pc, #32]	; (80030c8 <MX_SPI2_Init+0xac>)
 80030a8:	f002 f9b8 	bl	800541c <LL_SPI_Init>
 80030ac:	2100      	movs	r1, #0
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <MX_SPI2_Init+0xac>)
 80030b0:	f7ff ff3a 	bl	8002f28 <LL_SPI_SetStandard>
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <MX_SPI2_Init+0xac>)
 80030b6:	f7ff ff4a 	bl	8002f4e <LL_SPI_DisableNSSPulseMgt>
 80030ba:	bf00      	nop
 80030bc:	3740      	adds	r7, #64	; 0x40
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	48000400 	.word	0x48000400
 80030c8:	40003800 	.word	0x40003800

080030cc <LL_LPTIM_ClearFLAG_ARRM>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_LPTIM_IsActiveFlag_ARRM>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d101      	bne.n	8003104 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <NMI_Handler+0x4>

08003118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <HardFault_Handler+0x4>

0800311e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <MemManage_Handler+0x4>

08003124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <BusFault_Handler+0x4>

0800312a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <UsageFault_Handler+0x4>

08003130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler
******************************************************************************/

	systick_app_timer_tickAndProcess();
 800315e:	f000 f829 	bl	80031b4 <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 800316c:	4806      	ldr	r0, [pc, #24]	; (8003188 <LPTIM2_IRQHandler+0x20>)
 800316e:	f7ff ffbd 	bl	80030ec <LL_LPTIM_IsActiveFlag_ARRM>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <LPTIM2_IRQHandler+0x24>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 800317e:	4802      	ldr	r0, [pc, #8]	; (8003188 <LPTIM2_IRQHandler+0x20>)
 8003180:	f7ff ffa4 	bl	80030cc <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40009400 	.word	0x40009400
 800318c:	200000a4 	.word	0x200000a4

08003190 <SystemInit>:
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <SystemInit+0x20>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <SystemInit+0x20>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <systick_app_timer_tickAndProcess>:
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	2300      	movs	r3, #0
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	e050      	b.n	8003262 <systick_app_timer_tickAndProcess+0xae>
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d046      	beq.n	800325c <systick_app_timer_tickAndProcess+0xa8>
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	4a28      	ldr	r2, [pc, #160]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 80031d2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d040      	beq.n	800325c <systick_app_timer_tickAndProcess+0xa8>
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	4a25      	ldr	r2, [pc, #148]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	3201      	adds	r2, #1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d030      	beq.n	800325c <systick_app_timer_tickAndProcess+0xa8>
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	491a      	ldr	r1, [pc, #104]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	429a      	cmp	r2, r3
 8003214:	d322      	bcc.n	800325c <systick_app_timer_tickAndProcess+0xa8>
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <systick_app_timer_tickAndProcess+0x8e>
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4798      	blx	r3
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	7a1b      	ldrb	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d104      	bne.n	800325c <systick_app_timer_tickAndProcess+0xa8>
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <systick_app_timer_tickAndProcess+0xc0>)
 8003256:	2100      	movs	r1, #0
 8003258:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	3301      	adds	r3, #1
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d9ab      	bls.n	80031c0 <systick_app_timer_tickAndProcess+0xc>
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000344 	.word	0x20000344

08003278 <LL_RCC_SetUSARTClockSource>:
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <LL_RCC_SetUSARTClockSource+0x30>)
 8003282:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	43db      	mvns	r3, r3
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4905      	ldr	r1, [pc, #20]	; (80032a8 <LL_RCC_SetUSARTClockSource+0x30>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <LL_AHB2_GRP1_EnableClock>:
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80032b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4313      	orrs	r3, r2
 80032be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80032c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4013      	ands	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40021000 	.word	0x40021000

080032dc <LL_APB1_GRP1_EnableClock>:
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032e8:	4907      	ldr	r1, [pc, #28]	; (8003308 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	658b      	str	r3, [r1, #88]	; 0x58
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <LL_APB1_GRP1_EnableClock+0x2c>)
 80032f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4013      	ands	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000

0800330c <LL_USART_Enable>:
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_USART_ConfigAsyncMode>:
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <MX_USART2_UART_Init>:
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	615a      	str	r2, [r3, #20]
 8003370:	619a      	str	r2, [r3, #24]
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	615a      	str	r2, [r3, #20]
 8003382:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003386:	f7ff ff77 	bl	8003278 <LL_RCC_SetUSARTClockSource>
 800338a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800338e:	f7ff ffa5 	bl	80032dc <LL_APB1_GRP1_EnableClock>
 8003392:	2001      	movs	r0, #1
 8003394:	f7ff ff8a 	bl	80032ac <LL_AHB2_GRP1_EnableClock>
 8003398:	230c      	movs	r3, #12
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	2302      	movs	r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	2303      	movs	r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2307      	movs	r3, #7
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b8:	f001 fbc8 	bl	8004b4c <LL_GPIO_Init>
 80033bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	2300      	movs	r3, #0
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ce:	230c      	movs	r3, #12
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	2300      	movs	r3, #0
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
 80033d6:	2300      	movs	r3, #0
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4619      	mov	r1, r3
 80033e0:	4806      	ldr	r0, [pc, #24]	; (80033fc <MX_USART2_UART_Init+0xa4>)
 80033e2:	f002 f8e3 	bl	80055ac <LL_USART_Init>
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART2_UART_Init+0xa4>)
 80033e8:	f7ff ffa0 	bl	800332c <LL_USART_ConfigAsyncMode>
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <MX_USART2_UART_Init+0xa4>)
 80033ee:	f7ff ff8d 	bl	800330c <LL_USART_Enable>
 80033f2:	bf00      	nop
 80033f4:	3738      	adds	r7, #56	; 0x38
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40004400 	.word	0x40004400

08003400 <Reset_Handler>:
 8003400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003438 <LoopForever+0x2>
 8003404:	f7ff fec4 	bl	8003190 <SystemInit>
 8003408:	480c      	ldr	r0, [pc, #48]	; (800343c <LoopForever+0x6>)
 800340a:	490d      	ldr	r1, [pc, #52]	; (8003440 <LoopForever+0xa>)
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <LoopForever+0xe>)
 800340e:	2300      	movs	r3, #0
 8003410:	e002      	b.n	8003418 <LoopCopyDataInit>

08003412 <CopyDataInit>:
 8003412:	58d4      	ldr	r4, [r2, r3]
 8003414:	50c4      	str	r4, [r0, r3]
 8003416:	3304      	adds	r3, #4

08003418 <LoopCopyDataInit>:
 8003418:	18c4      	adds	r4, r0, r3
 800341a:	428c      	cmp	r4, r1
 800341c:	d3f9      	bcc.n	8003412 <CopyDataInit>
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <LoopForever+0x12>)
 8003420:	4c0a      	ldr	r4, [pc, #40]	; (800344c <LoopForever+0x16>)
 8003422:	2300      	movs	r3, #0
 8003424:	e001      	b.n	800342a <LoopFillZerobss>

08003426 <FillZerobss>:
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	3204      	adds	r2, #4

0800342a <LoopFillZerobss>:
 800342a:	42a2      	cmp	r2, r4
 800342c:	d3fb      	bcc.n	8003426 <FillZerobss>
 800342e:	f002 f999 	bl	8005764 <__libc_init_array>
 8003432:	f7fe fb11 	bl	8001a58 <main>

08003436 <LoopForever>:
 8003436:	e7fe      	b.n	8003436 <LoopForever>
 8003438:	20018000 	.word	0x20018000
 800343c:	20000000 	.word	0x20000000
 8003440:	20000084 	.word	0x20000084
 8003444:	08006a90 	.word	0x08006a90
 8003448:	20000088 	.word	0x20000088
 800344c:	20000630 	.word	0x20000630

08003450 <ADC1_2_IRQHandler>:
 8003450:	e7fe      	b.n	8003450 <ADC1_2_IRQHandler>

08003452 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d101      	bne.n	800346e <LL_GPIO_IsInputPinSet+0x1c>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_GPIO_IsInputPinSet+0x1e>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	619a      	str	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(AS5145B_Init_t *AS5145B_Init)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 80034bc:	2214      	movs	r2, #20
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <AS5145B_Init+0x3c>)
 80034c2:	f002 f973 	bl	80057ac <memcpy>

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);		// Chip select pin initially high (Figure 13 in DS)
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <AS5145B_Init+0x3c>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <AS5145B_Init+0x3c>)
 80034cc:	8a12      	ldrh	r2, [r2, #16]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ffd3 	bl	800347c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);		// Clock pin initially high (Figure 13 in DS)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <AS5145B_Init+0x3c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <AS5145B_Init+0x3c>)
 80034dc:	89d2      	ldrh	r2, [r2, #14]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ffcb 	bl	800347c <LL_GPIO_SetOutputPin>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000398 	.word	0x20000398

080034f4 <AS5145B_ReadData>:

struct AS5145B_Data_s AS5145B_ReadData(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data;

	data.pos_raw = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	80bb      	strh	r3, [r7, #4]
	data.status = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003502:	4b45      	ldr	r3, [pc, #276]	; (8003618 <AS5145B_ReadData+0x124>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a44      	ldr	r2, [pc, #272]	; (8003618 <AS5145B_ReadData+0x124>)
 8003508:	8a12      	ldrh	r2, [r2, #16]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ffc3 	bl	8003498 <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 8003512:	f000 f8b3 	bl	800367c <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for(int i = 12-1; i >= 0; i--)
 8003516:	230b      	movs	r3, #11
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e02d      	b.n	8003578 <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <AS5145B_ReadData+0x124>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <AS5145B_ReadData+0x124>)
 8003522:	89d2      	ldrh	r2, [r2, #14]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ffb6 	bl	8003498 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 800352c:	f000 f8a6 	bl	800367c <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <AS5145B_ReadData+0x124>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a38      	ldr	r2, [pc, #224]	; (8003618 <AS5145B_ReadData+0x124>)
 8003536:	89d2      	ldrh	r2, [r2, #14]
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff9e 	bl	800347c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003540:	f000 f89c 	bl	800367c <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <AS5145B_ReadData+0x124>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a33      	ldr	r2, [pc, #204]	; (8003618 <AS5145B_ReadData+0x124>)
 800354a:	8992      	ldrh	r2, [r2, #12]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff7f 	bl	8003452 <LL_GPIO_IsInputPinSet>
 8003554:	4603      	mov	r3, r0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	73bb      	strb	r3, [r7, #14]
		data.pos_raw |= (temp) << i;
 800355e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003562:	7bb9      	ldrb	r1, [r7, #14]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b21b      	sxth	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	b21b      	sxth	r3, r3
 8003570:	80bb      	strh	r3, [r7, #4]
	for(int i = 12-1; i >= 0; i--)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3b01      	subs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dace      	bge.n	800351c <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 800357e:	2305      	movs	r3, #5
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e02e      	b.n	80035e2 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <AS5145B_ReadData+0x124>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a23      	ldr	r2, [pc, #140]	; (8003618 <AS5145B_ReadData+0x124>)
 800358a:	89d2      	ldrh	r2, [r2, #14]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff82 	bl	8003498 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003594:	f000 f872 	bl	800367c <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <AS5145B_ReadData+0x124>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <AS5145B_ReadData+0x124>)
 800359e:	89d2      	ldrh	r2, [r2, #14]
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff6a 	bl	800347c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80035a8:	f000 f868 	bl	800367c <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <AS5145B_ReadData+0x124>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <AS5145B_ReadData+0x124>)
 80035b2:	8992      	ldrh	r2, [r2, #12]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff4b 	bl	8003452 <LL_GPIO_IsInputPinSet>
 80035bc:	4603      	mov	r3, r0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;
 80035c6:	79bb      	ldrb	r3, [r7, #6]
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	7bf9      	ldrb	r1, [r7, #15]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	71bb      	strb	r3, [r7, #6]
	for(int i = 6-1; i >= 0; i--)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	3b01      	subs	r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	dacd      	bge.n	8003584 <AS5145B_ReadData+0x90>
	}

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <AS5145B_ReadData+0x124>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <AS5145B_ReadData+0x124>)
 80035ee:	8a12      	ldrh	r2, [r2, #16]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff42 	bl	800347c <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 80035f8:	f000 f840 	bl	800367c <AS5145B_Delay_500ns>

	return data;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	2300      	movs	r3, #0
 8003602:	893a      	ldrh	r2, [r7, #8]
 8003604:	f362 030f 	bfi	r3, r2, #0, #16
 8003608:	897a      	ldrh	r2, [r7, #10]
 800360a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000398 	.word	0x20000398

0800361c <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data = AS5145B_ReadData();
 8003622:	f7ff ff67 	bl	80034f4 <AS5145B_ReadData>
 8003626:	4603      	mov	r3, r0
 8003628:	607b      	str	r3, [r7, #4]
	return data.pos_raw;
 800362a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800362e:	b29b      	uxth	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <AS5145B_ReadPosition_Deg>:

float AS5145B_ReadPosition_Deg(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
	uint16_t pos_raw = AS5145B_ReadPosition_Raw();
 800363e:	f7ff ffed 	bl	800361c <AS5145B_ReadPosition_Raw>
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
	float pos_deg = (float) pos_raw * AS5145B_RAW2DEG;
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003650:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003674 <AS5145B_ReadPosition_Deg+0x3c>
 8003654:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003658:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003678 <AS5145B_ReadPosition_Deg+0x40>
 800365c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003660:	edc7 7a00 	vstr	s15, [r7]
	return pos_deg;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	ee07 3a90 	vmov	s15, r3
}
 800366a:	eeb0 0a67 	vmov.f32	s0, s15
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	43b40000 	.word	0x43b40000
 8003678:	45800000 	.word	0x45800000

0800367c <AS5145B_Delay_500ns>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// See NOTES at the top of this file for more information
static void AS5145B_Delay_500ns(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 8003682:	2300      	movs	r3, #0
 8003684:	71fb      	strb	r3, [r7, #7]
 8003686:	e00c      	b.n	80036a2 <AS5145B_Delay_500ns+0x26>
	{
		for(uint8_t j = 0; j < 3; j++)
 8003688:	2300      	movs	r3, #0
 800368a:	71bb      	strb	r3, [r7, #6]
 800368c:	e003      	b.n	8003696 <AS5145B_Delay_500ns+0x1a>
			__NOP();
 800368e:	bf00      	nop
		for(uint8_t j = 0; j < 3; j++)
 8003690:	79bb      	ldrb	r3, [r7, #6]
 8003692:	3301      	adds	r3, #1
 8003694:	71bb      	strb	r3, [r7, #6]
 8003696:	79bb      	ldrb	r3, [r7, #6]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d9f8      	bls.n	800368e <AS5145B_Delay_500ns+0x12>
	for(uint8_t i = 0; i < 2; i++)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	3301      	adds	r3, #1
 80036a0:	71fb      	strb	r3, [r7, #7]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d9ef      	bls.n	8003688 <AS5145B_Delay_500ns+0xc>
	}
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <EPOS4_SetCSTMode>:
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	80fb      	strh	r3, [r7, #6]
 80036c0:	f107 0008 	add.w	r0, r7, #8
 80036c4:	2306      	movs	r3, #6
 80036c6:	2200      	movs	r2, #0
 80036c8:	f246 0140 	movw	r1, #24640	; 0x6040
 80036cc:	f000 f872 	bl	80037b4 <EPOS4_DataFramer>
 80036d0:	f107 0208 	add.w	r2, r7, #8
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2108      	movs	r1, #8
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fa76 	bl	8003bca <CAN_transmit>
 80036de:	200a      	movs	r0, #10
 80036e0:	f002 f808 	bl	80056f4 <LL_mDelay>
 80036e4:	f107 0008 	add.w	r0, r7, #8
 80036e8:	230f      	movs	r3, #15
 80036ea:	2200      	movs	r2, #0
 80036ec:	f246 0140 	movw	r1, #24640	; 0x6040
 80036f0:	f000 f860 	bl	80037b4 <EPOS4_DataFramer>
 80036f4:	f107 0208 	add.w	r2, r7, #8
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2108      	movs	r1, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa64 	bl	8003bca <CAN_transmit>
 8003702:	200a      	movs	r0, #10
 8003704:	f001 fff6 	bl	80056f4 <LL_mDelay>
 8003708:	f107 0008 	add.w	r0, r7, #8
 800370c:	230a      	movs	r3, #10
 800370e:	2200      	movs	r2, #0
 8003710:	f246 0160 	movw	r1, #24672	; 0x6060
 8003714:	f000 f84e 	bl	80037b4 <EPOS4_DataFramer>
 8003718:	f107 0208 	add.w	r2, r7, #8
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	2108      	movs	r1, #8
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fa52 	bl	8003bca <CAN_transmit>
 8003726:	200a      	movs	r0, #10
 8003728:	f001 ffe4 	bl	80056f4 <LL_mDelay>
 800372c:	f107 0008 	add.w	r0, r7, #8
 8003730:	2306      	movs	r3, #6
 8003732:	2200      	movs	r2, #0
 8003734:	f246 0140 	movw	r1, #24640	; 0x6040
 8003738:	f000 f83c 	bl	80037b4 <EPOS4_DataFramer>
 800373c:	f107 0208 	add.w	r2, r7, #8
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	2108      	movs	r1, #8
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fa40 	bl	8003bca <CAN_transmit>
 800374a:	200a      	movs	r0, #10
 800374c:	f001 ffd2 	bl	80056f4 <LL_mDelay>
 8003750:	f107 0008 	add.w	r0, r7, #8
 8003754:	230f      	movs	r3, #15
 8003756:	2200      	movs	r2, #0
 8003758:	f246 0140 	movw	r1, #24640	; 0x6040
 800375c:	f000 f82a 	bl	80037b4 <EPOS4_DataFramer>
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2108      	movs	r1, #8
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa2e 	bl	8003bca <CAN_transmit>
 800376e:	200a      	movs	r0, #10
 8003770:	f001 ffc0 	bl	80056f4 <LL_mDelay>
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <EPOS4_SetTorque>:
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	80fb      	strh	r3, [r7, #6]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f107 0008 	add.w	r0, r7, #8
 800378e:	2200      	movs	r2, #0
 8003790:	f246 0171 	movw	r1, #24689	; 0x6071
 8003794:	f000 f80e 	bl	80037b4 <EPOS4_DataFramer>
 8003798:	f107 0208 	add.w	r2, r7, #8
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2108      	movs	r1, #8
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa12 	bl	8003bca <CAN_transmit>
 80037a6:	2032      	movs	r0, #50	; 0x32
 80037a8:	f000 f83d 	bl	8003826 <EPOS4_usDelay>
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <EPOS4_DataFramer>:
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	4613      	mov	r3, r2
 80037c4:	727b      	strb	r3, [r7, #9]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2222      	movs	r2, #34	; 0x22
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	897a      	ldrh	r2, [r7, #10]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3302      	adds	r3, #2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3303      	adds	r3, #3
 80037e8:	7a7a      	ldrb	r2, [r7, #9]
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3304      	adds	r3, #4
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0a1a      	lsrs	r2, r3, #8
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3305      	adds	r3, #5
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0c1a      	lsrs	r2, r3, #16
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3306      	adds	r3, #6
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0e1a      	lsrs	r2, r3, #24
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3307      	adds	r3, #7
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <EPOS4_usDelay>:
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	e00c      	b.n	800384e <EPOS4_usDelay+0x28>
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e003      	b.n	8003842 <EPOS4_usDelay+0x1c>
 800383a:	bf00      	nop
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b0a      	cmp	r3, #10
 8003846:	d9f8      	bls.n	800383a <EPOS4_usDelay+0x14>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	3301      	adds	r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d3ee      	bcc.n	8003834 <EPOS4_usDelay+0xe>
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_SPI_TransmitData8>:
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	330c      	adds	r3, #12
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_GPIO_SetOutputPin>:
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	619a      	str	r2, [r3, #24]
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_GPIO_ResetOutputPin>:
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <clearChipSelect>:
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <clearChipSelect+0x14>)
 80038ca:	f7ff ffdd 	bl	8003888 <LL_GPIO_SetOutputPin>
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	48000400 	.word	0x48000400

080038d8 <setChipSelect>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <setChipSelect+0x14>)
 80038e2:	f7ff ffdf 	bl	80038a4 <LL_GPIO_ResetOutputPin>
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	48000400 	.word	0x48000400

080038f0 <mcp25625_reset>:
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	f7ff ffef 	bl	80038d8 <setChipSelect>
 80038fa:	21c0      	movs	r1, #192	; 0xc0
 80038fc:	480d      	ldr	r0, [pc, #52]	; (8003934 <mcp25625_reset+0x44>)
 80038fe:	f7ff ffb1 	bl	8003864 <LL_SPI_TransmitData8>
 8003902:	bf00      	nop
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <mcp25625_reset+0x44>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <mcp25625_reset+0x14>
 8003910:	f7ff ffd6 	bl	80038c0 <clearChipSelect>
 8003914:	e002      	b.n	800391c <mcp25625_reset+0x2c>
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <mcp25625_reset+0x44>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	71fb      	strb	r3, [r7, #7]
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <mcp25625_reset+0x44>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f6      	bne.n	8003916 <mcp25625_reset+0x26>
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40003800 	.word	0x40003800

08003938 <mcp25625_writeRegister>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	460a      	mov	r2, r1
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	4613      	mov	r3, r2
 8003946:	71bb      	strb	r3, [r7, #6]
 8003948:	f7ff ffc6 	bl	80038d8 <setChipSelect>
 800394c:	2102      	movs	r1, #2
 800394e:	4816      	ldr	r0, [pc, #88]	; (80039a8 <mcp25625_writeRegister+0x70>)
 8003950:	f7ff ff88 	bl	8003864 <LL_SPI_TransmitData8>
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	4619      	mov	r1, r3
 8003958:	4813      	ldr	r0, [pc, #76]	; (80039a8 <mcp25625_writeRegister+0x70>)
 800395a:	f7ff ff83 	bl	8003864 <LL_SPI_TransmitData8>
 800395e:	79bb      	ldrb	r3, [r7, #6]
 8003960:	4619      	mov	r1, r3
 8003962:	4811      	ldr	r0, [pc, #68]	; (80039a8 <mcp25625_writeRegister+0x70>)
 8003964:	f7ff ff7e 	bl	8003864 <LL_SPI_TransmitData8>
 8003968:	bf00      	nop
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <mcp25625_writeRegister+0x70>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f9      	bne.n	800396a <mcp25625_writeRegister+0x32>
 8003976:	bf00      	nop
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <mcp25625_writeRegister+0x70>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f9      	bne.n	8003978 <mcp25625_writeRegister+0x40>
 8003984:	f7ff ff9c 	bl	80038c0 <clearChipSelect>
 8003988:	e002      	b.n	8003990 <mcp25625_writeRegister+0x58>
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <mcp25625_writeRegister+0x70>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	73fb      	strb	r3, [r7, #15]
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <mcp25625_writeRegister+0x70>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f6      	bne.n	800398a <mcp25625_writeRegister+0x52>
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40003800 	.word	0x40003800

080039ac <mcp25625_readRegister>:
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
 80039b6:	f7ff ff8f 	bl	80038d8 <setChipSelect>
 80039ba:	2103      	movs	r1, #3
 80039bc:	4814      	ldr	r0, [pc, #80]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039be:	f7ff ff51 	bl	8003864 <LL_SPI_TransmitData8>
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4619      	mov	r1, r3
 80039c6:	4812      	ldr	r0, [pc, #72]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039c8:	f7ff ff4c 	bl	8003864 <LL_SPI_TransmitData8>
 80039cc:	2100      	movs	r1, #0
 80039ce:	4810      	ldr	r0, [pc, #64]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039d0:	f7ff ff48 	bl	8003864 <LL_SPI_TransmitData8>
 80039d4:	bf00      	nop
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f9      	bne.n	80039d6 <mcp25625_readRegister+0x2a>
 80039e2:	bf00      	nop
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f9      	bne.n	80039e4 <mcp25625_readRegister+0x38>
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <mcp25625_readRegister+0x64>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	73bb      	strb	r3, [r7, #14]
 8003a02:	f7ff ff5d 	bl	80038c0 <clearChipSelect>
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40003800 	.word	0x40003800

08003a14 <mcp25625_loadTXB>:
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	603a      	str	r2, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
 8003a20:	460b      	mov	r3, r1
 8003a22:	71bb      	strb	r3, [r7, #6]
 8003a24:	f7ff ff58 	bl	80038d8 <setChipSelect>
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	481d      	ldr	r0, [pc, #116]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a2e:	f7ff ff19 	bl	8003864 <LL_SPI_TransmitData8>
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e011      	b.n	8003a5c <mcp25625_loadTXB+0x48>
 8003a38:	bf00      	nop
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f9      	beq.n	8003a3a <mcp25625_loadTXB+0x26>
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4814      	ldr	r0, [pc, #80]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a52:	f7ff ff07 	bl	8003864 <LL_SPI_TransmitData8>
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	79bb      	ldrb	r3, [r7, #6]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3e9      	bcc.n	8003a38 <mcp25625_loadTXB+0x24>
 8003a64:	bf00      	nop
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f9      	bne.n	8003a66 <mcp25625_loadTXB+0x52>
 8003a72:	bf00      	nop
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f9      	bne.n	8003a74 <mcp25625_loadTXB+0x60>
 8003a80:	f7ff ff1e 	bl	80038c0 <clearChipSelect>
 8003a84:	e002      	b.n	8003a8c <mcp25625_loadTXB+0x78>
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	73bb      	strb	r3, [r7, #14]
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <mcp25625_loadTXB+0x90>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f6      	bne.n	8003a86 <mcp25625_loadTXB+0x72>
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40003800 	.word	0x40003800

08003aa8 <getTXB0CTRL>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	2030      	movs	r0, #48	; 0x30
 8003aae:	f7ff ff7d 	bl	80039ac <mcp25625_readRegister>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <getTXB1CTRL>:
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	2040      	movs	r0, #64	; 0x40
 8003abe:	f7ff ff75 	bl	80039ac <mcp25625_readRegister>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <getTXB2CTRL>:
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	2050      	movs	r0, #80	; 0x50
 8003ace:	f7ff ff6d 	bl	80039ac <mcp25625_readRegister>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <loadTXB2>:
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	210d      	movs	r1, #13
 8003ae4:	2044      	movs	r0, #68	; 0x44
 8003ae6:	f7ff ff95 	bl	8003a14 <mcp25625_loadTXB>
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <loadTXB1>:
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	210d      	movs	r1, #13
 8003afe:	2042      	movs	r0, #66	; 0x42
 8003b00:	f7ff ff88 	bl	8003a14 <mcp25625_loadTXB>
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <loadTXB0>:
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	210d      	movs	r1, #13
 8003b18:	2040      	movs	r0, #64	; 0x40
 8003b1a:	f7ff ff7b 	bl	8003a14 <mcp25625_loadTXB>
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <setTXREQ2>:
 8003b26:	b580      	push	{r7, lr}
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	210b      	movs	r1, #11
 8003b2c:	2050      	movs	r0, #80	; 0x50
 8003b2e:	f7ff ff03 	bl	8003938 <mcp25625_writeRegister>
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <setTXREQ1>:
 8003b36:	b580      	push	{r7, lr}
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	210b      	movs	r1, #11
 8003b3c:	2040      	movs	r0, #64	; 0x40
 8003b3e:	f7ff fefb 	bl	8003938 <mcp25625_writeRegister>
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <setTXREQ0>:
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	210b      	movs	r1, #11
 8003b4c:	2030      	movs	r0, #48	; 0x30
 8003b4e:	f7ff fef3 	bl	8003938 <mcp25625_writeRegister>
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <mcp25625_sendCAN>:
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	f7ff ffb3 	bl	8003ac8 <getTXB2CTRL>
 8003b62:	4603      	mov	r3, r0
 8003b64:	733b      	strb	r3, [r7, #12]
 8003b66:	7b3b      	ldrb	r3, [r7, #12]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <mcp25625_sendCAN+0x2a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ffaf 	bl	8003ad8 <loadTXB2>
 8003b7a:	f7ff ffd4 	bl	8003b26 <setTXREQ2>
 8003b7e:	e021      	b.n	8003bc4 <mcp25625_sendCAN+0x6e>
 8003b80:	f7ff ff9a 	bl	8003ab8 <getTXB1CTRL>
 8003b84:	4603      	mov	r3, r0
 8003b86:	733b      	strb	r3, [r7, #12]
 8003b88:	7b3b      	ldrb	r3, [r7, #12]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <mcp25625_sendCAN+0x4c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ffab 	bl	8003af2 <loadTXB1>
 8003b9c:	f7ff ffcb 	bl	8003b36 <setTXREQ1>
 8003ba0:	e010      	b.n	8003bc4 <mcp25625_sendCAN+0x6e>
 8003ba2:	f7ff ff81 	bl	8003aa8 <getTXB0CTRL>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	733b      	strb	r3, [r7, #12]
 8003baa:	7b3b      	ldrb	r3, [r7, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <mcp25625_sendCAN+0x6e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ffa7 	bl	8003b0c <loadTXB0>
 8003bbe:	f7ff ffc2 	bl	8003b46 <setTXREQ0>
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <CAN_transmit>:
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	603a      	str	r2, [r7, #0]
 8003bd4:	80fb      	strh	r3, [r7, #6]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	717b      	strb	r3, [r7, #5]
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	220d      	movs	r2, #13
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fdf0 	bl	80057c8 <memset>
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	723b      	strb	r3, [r7, #8]
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	015b      	lsls	r3, r3, #5
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	727b      	strb	r3, [r7, #9]
 8003bfa:	797b      	ldrb	r3, [r7, #5]
 8003bfc:	733b      	strb	r3, [r7, #12]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]
 8003c02:	e00b      	b.n	8003c1c <CAN_transmit+0x52>
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	441a      	add	r2, r3
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	443b      	add	r3, r7
 8003c12:	f803 2c0b 	strb.w	r2, [r3, #-11]
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
 8003c1c:	7dfa      	ldrb	r2, [r7, #23]
 8003c1e:	797b      	ldrb	r3, [r7, #5]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3ef      	bcc.n	8003c04 <CAN_transmit+0x3a>
 8003c24:	f107 0308 	add.w	r3, r7, #8
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff94 	bl	8003b56 <mcp25625_sendCAN>
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <mcp25625_init>:
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	f240 2276 	movw	r2, #630	; 0x276
 8003c40:	2100      	movs	r1, #0
 8003c42:	4804      	ldr	r0, [pc, #16]	; (8003c54 <mcp25625_init+0x1c>)
 8003c44:	f001 fdc0 	bl	80057c8 <memset>
 8003c48:	f7ff fe3a 	bl	80038c0 <clearChipSelect>
 8003c4c:	f7ff fe50 	bl	80038f0 <mcp25625_reset>
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200003ac 	.word	0x200003ac

08003c58 <CAN_configure>:
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	23c0      	movs	r3, #192	; 0xc0
 8003c60:	733b      	strb	r3, [r7, #12]
 8003c62:	2389      	movs	r3, #137	; 0x89
 8003c64:	723b      	strb	r3, [r7, #8]
 8003c66:	2304      	movs	r3, #4
 8003c68:	713b      	strb	r3, [r7, #4]
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	703b      	strb	r3, [r7, #0]
 8003c6e:	f7ff ffe3 	bl	8003c38 <mcp25625_init>
 8003c72:	7b3b      	ldrb	r3, [r7, #12]
 8003c74:	4619      	mov	r1, r3
 8003c76:	202a      	movs	r0, #42	; 0x2a
 8003c78:	f7ff fe5e 	bl	8003938 <mcp25625_writeRegister>
 8003c7c:	7a3b      	ldrb	r3, [r7, #8]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	2029      	movs	r0, #41	; 0x29
 8003c82:	f7ff fe59 	bl	8003938 <mcp25625_writeRegister>
 8003c86:	793b      	ldrb	r3, [r7, #4]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	2028      	movs	r0, #40	; 0x28
 8003c8c:	f7ff fe54 	bl	8003938 <mcp25625_writeRegister>
 8003c90:	783b      	ldrb	r3, [r7, #0]
 8003c92:	4619      	mov	r1, r3
 8003c94:	200f      	movs	r0, #15
 8003c96:	f7ff fe4f 	bl	8003938 <mcp25625_writeRegister>
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d101      	bne.n	8003ce0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_GPIO_SetOutputPin>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_GPIO_ResetOutputPin>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

uint8_t MPU925x_Init(SPI_TypeDef *spix, GPIO_TypeDef *cs_gpiox, uint16_t cs_pinx)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
	uint8_t whoAmI;

	mpu925x.spiHandle = spix;
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <MPU925x_Init+0x48>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6013      	str	r3, [r2, #0]
	mpu925x.CS_GPIOx = cs_gpiox;
 8003d7c:	4a0c      	ldr	r2, [pc, #48]	; (8003db0 <MPU925x_Init+0x48>)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6053      	str	r3, [r2, #4]
	mpu925x.CS_Pin = cs_pinx;
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <MPU925x_Init+0x48>)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	8113      	strh	r3, [r2, #8]

	MPU925x_ReadRegs(MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 8003d88:	f107 0317 	add.w	r3, r7, #23
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4619      	mov	r1, r3
 8003d90:	2075      	movs	r0, #117	; 0x75
 8003d92:	f000 fa1f 	bl	80041d4 <MPU925x_ReadRegs>

	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b71      	cmp	r3, #113	; 0x71
 8003d9a:	d004      	beq.n	8003da6 <MPU925x_Init+0x3e>
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b73      	cmp	r3, #115	; 0x73
 8003da0:	d001      	beq.n	8003da6 <MPU925x_Init+0x3e>
		return 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <MPU925x_Init+0x40>

	return 0;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000624 	.word	0x20000624

08003db4 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(enum MPU925x_AccelSensitivity_e option)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d86d      	bhi.n	8003ea0 <MPU925x_SetAccelSensitivity+0xec>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <MPU925x_SetAccelSensitivity+0x18>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003e09 	.word	0x08003e09
 8003dd4:	08003e3f 	.word	0x08003e3f
 8003dd8:	08003e75 	.word	0x08003e75
	{
	case mpu925x_accelSensitivity_2g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003ddc:	f107 030f 	add.w	r3, r7, #15
 8003de0:	2201      	movs	r2, #1
 8003de2:	4619      	mov	r1, r3
 8003de4:	201c      	movs	r0, #28
 8003de6:	f000 f9f5 	bl	80041d4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	f023 0318 	bic.w	r3, r3, #24
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4619      	mov	r1, r3
 8003df8:	201c      	movs	r0, #28
 8003dfa:	f000 f995 	bl	8004128 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003e00:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003e04:	601a      	str	r2, [r3, #0]
		break;
 8003e06:	e04b      	b.n	8003ea0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_4g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003e08:	f107 030f 	add.w	r3, r7, #15
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	4619      	mov	r1, r3
 8003e10:	201c      	movs	r0, #28
 8003e12:	f000 f9df 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	f023 0318 	bic.w	r3, r3, #24
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f043 0308 	orr.w	r3, r3, #8
 8003e24:	b25b      	sxtb	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	201c      	movs	r0, #28
 8003e30:	f000 f97a 	bl	8004128 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003e36:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003e3a:	601a      	str	r2, [r3, #0]
		break;
 8003e3c:	e030      	b.n	8003ea0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_8g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003e3e:	f107 030f 	add.w	r3, r7, #15
 8003e42:	2201      	movs	r2, #1
 8003e44:	4619      	mov	r1, r3
 8003e46:	201c      	movs	r0, #28
 8003e48:	f000 f9c4 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	f023 0318 	bic.w	r3, r3, #24
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	f043 0310 	orr.w	r3, r3, #16
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	4619      	mov	r1, r3
 8003e64:	201c      	movs	r0, #28
 8003e66:	f000 f95f 	bl	8004128 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003e6c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003e70:	601a      	str	r2, [r3, #0]
		break;
 8003e72:	e015      	b.n	8003ea0 <MPU925x_SetAccelSensitivity+0xec>

	case mpu925x_accelSensitivity_16g:
		MPU925x_ReadRegs(MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003e74:	f107 030f 	add.w	r3, r7, #15
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	201c      	movs	r0, #28
 8003e7e:	f000 f9a9 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	f043 0318 	orr.w	r3, r3, #24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_ACCEL_CONFIG, data);
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	201c      	movs	r0, #28
 8003e92:	f000 f949 	bl	8004128 <MPU925x_WriteReg>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <MPU925x_SetAccelSensitivity+0xf4>)
 8003e98:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003e9c:	601a      	str	r2, [r3, #0]
		break;
 8003e9e:	bf00      	nop
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000018 	.word	0x20000018

08003eac <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(enum MPU925x_GyroSensitivity_e option)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (option)
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d86d      	bhi.n	8003f98 <MPU925x_SetGyroSensitivity+0xec>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <MPU925x_SetGyroSensitivity+0x18>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003f01 	.word	0x08003f01
 8003ecc:	08003f37 	.word	0x08003f37
 8003ed0:	08003f6d 	.word	0x08003f6d
	{
	case mpu925x_gyroSensitivity_250dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003ed4:	f107 030f 	add.w	r3, r7, #15
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4619      	mov	r1, r3
 8003edc:	201b      	movs	r0, #27
 8003ede:	f000 f979 	bl	80041d4 <MPU925x_ReadRegs>
		data = data & ~0x18;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	f023 0318 	bic.w	r3, r3, #24
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	201b      	movs	r0, #27
 8003ef2:	f000 f919 	bl	8004128 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003ef8:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003efc:	601a      	str	r2, [r3, #0]
		break;
 8003efe:	e04b      	b.n	8003f98 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_500dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003f00:	f107 030f 	add.w	r3, r7, #15
 8003f04:	2201      	movs	r2, #1
 8003f06:	4619      	mov	r1, r3
 8003f08:	201b      	movs	r0, #27
 8003f0a:	f000 f963 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x08;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	f023 0318 	bic.w	r3, r3, #24
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	4619      	mov	r1, r3
 8003f26:	201b      	movs	r0, #27
 8003f28:	f000 f8fe 	bl	8004128 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003f2e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003f32:	601a      	str	r2, [r3, #0]
		break;
 8003f34:	e030      	b.n	8003f98 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_1000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003f36:	f107 030f 	add.w	r3, r7, #15
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	201b      	movs	r0, #27
 8003f40:	f000 f948 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x10;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	f023 0318 	bic.w	r3, r3, #24
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	f043 0310 	orr.w	r3, r3, #16
 8003f52:	b25b      	sxtb	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	201b      	movs	r0, #27
 8003f5e:	f000 f8e3 	bl	8004128 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003f64:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003f68:	601a      	str	r2, [r3, #0]
		break;
 8003f6a:	e015      	b.n	8003f98 <MPU925x_SetGyroSensitivity+0xec>

	case mpu925x_gyroSensitivity_2000dps:
		MPU925x_ReadRegs(MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003f6c:	f107 030f 	add.w	r3, r7, #15
 8003f70:	2201      	movs	r2, #1
 8003f72:	4619      	mov	r1, r3
 8003f74:	201b      	movs	r0, #27
 8003f76:	f000 f92d 	bl	80041d4 <MPU925x_ReadRegs>
		data = (data & ~0x18) | 0x18;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	f043 0318 	orr.w	r3, r3, #24
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73fb      	strb	r3, [r7, #15]
		MPU925x_WriteReg(MPU925X_REG_GYRO_CONFIG, data);
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4619      	mov	r1, r3
 8003f88:	201b      	movs	r0, #27
 8003f8a:	f000 f8cd 	bl	8004128 <MPU925x_WriteReg>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <MPU925x_SetGyroSensitivity+0xf4>)
 8003f90:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003f94:	601a      	str	r2, [r3, #0]
		break;
 8003f96:	bf00      	nop
	}
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000001c 	.word	0x2000001c

08003fa4 <MPU925x_ReadIMU>:
{
	MPU925x_WriteReg(MPU925X_REG_SMPLRT_DIV, divider);
}

struct MPU925x_IMUData_s MPU925x_ReadIMU(void)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b096      	sub	sp, #88	; 0x58
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	struct MPU925x_IMUData_s IMUData;
	uint8_t data[14];

	MPU925x_ReadRegs(MPU925X_REG_ACCEL_XOUT_H, data, 14);
 8003fac:	f107 0308 	add.w	r3, r7, #8
 8003fb0:	220e      	movs	r2, #14
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	203b      	movs	r0, #59	; 0x3b
 8003fb6:	f000 f90d 	bl	80041d4 <MPU925x_ReadRegs>

	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8003fba:	7a3b      	ldrb	r3, [r7, #8]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	7a7b      	ldrb	r3, [r7, #9]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8003fca:	7abb      	ldrb	r3, [r7, #10]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	b21a      	sxth	r2, r3
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	b21b      	sxth	r3, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8003fda:	7b3b      	ldrb	r3, [r7, #12]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b21a      	sxth	r2, r3
 8003fe0:	7b7b      	ldrb	r3, [r7, #13]
 8003fe2:	b21b      	sxth	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8003fea:	7c3b      	ldrb	r3, [r7, #16]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b21a      	sxth	r2, r3
 8003ff0:	7c7b      	ldrb	r3, [r7, #17]
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8003ffa:	7cbb      	ldrb	r3, [r7, #18]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	b21b      	sxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 800400a:	7d3b      	ldrb	r3, [r7, #20]
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	b21a      	sxth	r2, r3
 8004010:	7d7b      	ldrb	r3, [r7, #21]
 8004012:	b21b      	sxth	r3, r3
 8004014:	4313      	orrs	r3, r2
 8004016:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	IMUData.ax = ax / accelSensitivity;
 800401a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004026:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <MPU925x_ReadIMU+0x17c>)
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004030:	ee16 0a90 	vmov	r0, s13
 8004034:	f7fc fa2c 	bl	8000490 <__aeabi_f2d>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMUData.ay = ay / accelSensitivity;
 8004040:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800404c:	4b34      	ldr	r3, [pc, #208]	; (8004120 <MPU925x_ReadIMU+0x17c>)
 800404e:	edd3 7a00 	vldr	s15, [r3]
 8004052:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004056:	ee16 0a90 	vmov	r0, s13
 800405a:	f7fc fa19 	bl	8000490 <__aeabi_f2d>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMUData.az = az / accelSensitivity;
 8004066:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004072:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <MPU925x_ReadIMU+0x17c>)
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800407c:	ee16 0a90 	vmov	r0, s13
 8004080:	f7fc fa06 	bl	8000490 <__aeabi_f2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMUData.gx = gx / gyroSensitivity;
 800408c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <MPU925x_ReadIMU+0x180>)
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040a2:	ee16 0a90 	vmov	r0, s13
 80040a6:	f7fc f9f3 	bl	8000490 <__aeabi_f2d>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMUData.gy = gy / gyroSensitivity;
 80040b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <MPU925x_ReadIMU+0x180>)
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040c8:	ee16 0a90 	vmov	r0, s13
 80040cc:	f7fc f9e0 	bl	8000490 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMUData.gz = gz / gyroSensitivity;
 80040d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <MPU925x_ReadIMU+0x180>)
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040ee:	ee16 0a90 	vmov	r0, s13
 80040f2:	f7fc f9cd 	bl	8000490 <__aeabi_f2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	return IMUData;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	461d      	mov	r5, r3
 8004102:	f107 0418 	add.w	r4, r7, #24
 8004106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004112:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	3758      	adds	r7, #88	; 0x58
 800411a:	46bd      	mov	sp, r7
 800411c:	bdb0      	pop	{r4, r5, r7, pc}
 800411e:	bf00      	nop
 8004120:	20000018 	.word	0x20000018
 8004124:	2000001c 	.word	0x2000001c

08004128 <MPU925x_WriteReg>:

void MPU925x_WriteReg(uint8_t adress, uint8_t data)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	460a      	mov	r2, r1
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	4613      	mov	r3, r2
 8004136:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 800413e:	8912      	ldrh	r2, [r2, #8]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fe01 	bl	8003d4a <LL_GPIO_ResetOutputPin>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8004148:	bf00      	nop
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f8      	beq.n	800414a <MPU925x_WriteReg+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, adress);
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	79fa      	ldrb	r2, [r7, #7]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fdd2 	bl	8003d0a <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 8004166:	bf00      	nop
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f8      	beq.n	8004168 <MPU925x_WriteReg+0x40>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fdb7 	bl	8003cee <LL_SPI_ReceiveData8>

	while (!(mpu925x.spiHandle->SR & SPI_SR_TXE));
 8004180:	bf00      	nop
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f8      	beq.n	8004182 <MPU925x_WriteReg+0x5a>
	LL_SPI_TransmitData8(mpu925x.spiHandle, data);
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	79ba      	ldrb	r2, [r7, #6]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fdb6 	bl	8003d0a <LL_SPI_TransmitData8>
	while (!(mpu925x.spiHandle->SR & SPI_SR_RXNE));
 800419e:	bf00      	nop
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f8      	beq.n	80041a0 <MPU925x_WriteReg+0x78>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);						// Read out bogus data
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fd9b 	bl	8003cee <LL_SPI_ReceiveData8>

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <MPU925x_WriteReg+0xa8>)
 80041be:	8912      	ldrh	r2, [r2, #8]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fdb3 	bl	8003d2e <LL_GPIO_SetOutputPin>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000624 	.word	0x20000624

080041d4 <MPU925x_ReadRegs>:

void MPU925x_ReadRegs(uint8_t address, uint8_t *data, uint8_t bytes)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	71fb      	strb	r3, [r7, #7]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 80041e4:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 80041ea:	8912      	ldrh	r2, [r2, #8]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fdab 	bl	8003d4a <LL_GPIO_ResetOutputPin>

	while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 80041f4:	bf00      	nop
 80041f6:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fd64 	bl	8003cc8 <LL_SPI_IsActiveFlag_TXE>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f7      	beq.n	80041f6 <MPU925x_ReadRegs+0x22>
	LL_SPI_TransmitData8(mpu925x.spiHandle, (address | 0x80));
 8004206:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004210:	b2db      	uxtb	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7ff fd78 	bl	8003d0a <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 800421a:	bf00      	nop
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fd3e 	bl	8003ca2 <LL_SPI_IsActiveFlag_RXNE>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f7      	beq.n	800421c <MPU925x_ReadRegs+0x48>
	LL_SPI_ReceiveData8(mpu925x.spiHandle);							// Read out bogus data
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd5c 	bl	8003cee <LL_SPI_ReceiveData8>

	for(uint8_t i = 0; i < bytes; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e024      	b.n	8004286 <MPU925x_ReadRegs+0xb2>
	{
		while(!(LL_SPI_IsActiveFlag_TXE(mpu925x.spiHandle)));
 800423c:	bf00      	nop
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fd40 	bl	8003cc8 <LL_SPI_IsActiveFlag_TXE>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f7      	beq.n	800423e <MPU925x_ReadRegs+0x6a>
		LL_SPI_TransmitData8(mpu925x.spiHandle, 0x00);				// Send out 8 bits to read 8 more bits
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fd58 	bl	8003d0a <LL_SPI_TransmitData8>
		while(!(LL_SPI_IsActiveFlag_RXNE(mpu925x.spiHandle)));
 800425a:	bf00      	nop
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd1e 	bl	8003ca2 <LL_SPI_IsActiveFlag_RXNE>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f7      	beq.n	800425c <MPU925x_ReadRegs+0x88>
		data[i] = LL_SPI_ReceiveData8(mpu925x.spiHandle);
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 800426e:	6819      	ldr	r1, [r3, #0]
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	18d4      	adds	r4, r2, r3
 8004276:	4608      	mov	r0, r1
 8004278:	f7ff fd39 	bl	8003cee <LL_SPI_ReceiveData8>
 800427c:	4603      	mov	r3, r0
 800427e:	7023      	strb	r3, [r4, #0]
	for(uint8_t i = 0; i < bytes; i++)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	3301      	adds	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	79bb      	ldrb	r3, [r7, #6]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3d6      	bcc.n	800423c <MPU925x_ReadRegs+0x68>
	}

	LL_GPIO_SetOutputPin(mpu925x.CS_GPIOx, mpu925x.CS_Pin);
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <MPU925x_ReadRegs+0xd4>)
 8004294:	8912      	ldrh	r2, [r2, #8]
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fd48 	bl	8003d2e <LL_GPIO_SetOutputPin>
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd90      	pop	{r4, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000624 	.word	0x20000624

080042ac <LL_ADC_REG_SetSequencerLength>:
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_ADC_IsEnabled>:
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <LL_ADC_IsEnabled+0x18>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_ADC_IsEnabled+0x1a>
 80042ea:	2300      	movs	r3, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_ADC_CommonInit>:
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	481c      	ldr	r0, [pc, #112]	; (8004378 <LL_ADC_CommonInit+0x80>)
 8004308:	f7ff ffe3 	bl	80042d2 <LL_ADC_IsEnabled>
 800430c:	4604      	mov	r4, r0
 800430e:	481b      	ldr	r0, [pc, #108]	; (800437c <LL_ADC_CommonInit+0x84>)
 8004310:	f7ff ffdf 	bl	80042d2 <LL_ADC_IsEnabled>
 8004314:	4603      	mov	r3, r0
 8004316:	431c      	orrs	r4, r3
 8004318:	4819      	ldr	r0, [pc, #100]	; (8004380 <LL_ADC_CommonInit+0x88>)
 800431a:	f7ff ffda 	bl	80042d2 <LL_ADC_IsEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	4323      	orrs	r3, r4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d120      	bne.n	8004368 <LL_ADC_CommonInit+0x70>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <LL_ADC_CommonInit+0x5c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <LL_ADC_CommonInit+0x8c>)
 8004334:	4013      	ands	r3, r2
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	6811      	ldr	r1, [r2, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	4311      	orrs	r1, r2
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	6892      	ldr	r2, [r2, #8]
 8004344:	4311      	orrs	r1, r2
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	430a      	orrs	r2, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	e00b      	b.n	800436c <LL_ADC_CommonInit+0x74>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <LL_ADC_CommonInit+0x8c>)
 800435a:	4013      	ands	r3, r2
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
 8004366:	e001      	b.n	800436c <LL_ADC_CommonInit+0x74>
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	bf00      	nop
 8004378:	50040000 	.word	0x50040000
 800437c:	50040100 	.word	0x50040100
 8004380:	50040200 	.word	0x50040200
 8004384:	ffc030e0 	.word	0xffc030e0

08004388 <LL_ADC_Init>:
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ff9b 	bl	80042d2 <LL_ADC_IsEnabled>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d111      	bne.n	80043c6 <LL_ADC_Init+0x3e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043aa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	4311      	orrs	r1, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	430a      	orrs	r2, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	e001      	b.n	80043ca <LL_ADC_Init+0x42>
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <LL_ADC_REG_Init>:
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff75 	bl	80042d2 <LL_ADC_IsEnabled>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d132      	bne.n	8004454 <LL_ADC_REG_Init+0x80>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d015      	beq.n	8004422 <LL_ADC_REG_Init+0x4e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <LL_ADC_REG_Init+0x90>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	6811      	ldr	r1, [r2, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	4311      	orrs	r1, r2
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	68d2      	ldr	r2, [r2, #12]
 800440c:	4311      	orrs	r1, r2
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	6912      	ldr	r2, [r2, #16]
 8004412:	4311      	orrs	r1, r2
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	6952      	ldr	r2, [r2, #20]
 8004418:	430a      	orrs	r2, r1
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	e011      	b.n	8004446 <LL_ADC_REG_Init+0x72>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <LL_ADC_REG_Init+0x90>)
 8004428:	4013      	ands	r3, r2
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68d2      	ldr	r2, [r2, #12]
 8004432:	4311      	orrs	r1, r2
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	6912      	ldr	r2, [r2, #16]
 8004438:	4311      	orrs	r1, r2
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	6952      	ldr	r2, [r2, #20]
 800443e:	430a      	orrs	r2, r1
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff2d 	bl	80042ac <LL_ADC_REG_SetSequencerLength>
 8004452:	e001      	b.n	8004458 <LL_ADC_REG_Init+0x84>
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	fff0c03c 	.word	0xfff0c03c

08004468 <LL_EXTI_EnableIT_0_31>:
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <LL_EXTI_EnableIT_0_31+0x20>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4904      	ldr	r1, [pc, #16]	; (8004488 <LL_EXTI_EnableIT_0_31+0x20>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40010400 	.word	0x40010400

0800448c <LL_EXTI_EnableIT_32_63>:
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <LL_EXTI_EnableIT_32_63+0x20>)
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	4904      	ldr	r1, [pc, #16]	; (80044ac <LL_EXTI_EnableIT_32_63+0x20>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4313      	orrs	r3, r2
 800449e:	620b      	str	r3, [r1, #32]
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40010400 	.word	0x40010400

080044b0 <LL_EXTI_DisableIT_0_31>:
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	43db      	mvns	r3, r3
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010400 	.word	0x40010400

080044d8 <LL_EXTI_DisableIT_32_63>:
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <LL_EXTI_DisableIT_32_63+0x24>)
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <LL_EXTI_DisableIT_32_63+0x24>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	620b      	str	r3, [r1, #32]
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010400 	.word	0x40010400

08004500 <LL_EXTI_EnableEvent_0_31>:
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <LL_EXTI_EnableEvent_0_31+0x20>)
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4904      	ldr	r1, [pc, #16]	; (8004520 <LL_EXTI_EnableEvent_0_31+0x20>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40010400 	.word	0x40010400

08004524 <LL_EXTI_EnableEvent_32_63>:
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <LL_EXTI_EnableEvent_32_63+0x20>)
 800452e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4313      	orrs	r3, r2
 8004536:	624b      	str	r3, [r1, #36]	; 0x24
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40010400 	.word	0x40010400

08004548 <LL_EXTI_DisableEvent_0_31>:
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	43db      	mvns	r3, r3
 8004558:	4904      	ldr	r1, [pc, #16]	; (800456c <LL_EXTI_DisableEvent_0_31+0x24>)
 800455a:	4013      	ands	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010400 	.word	0x40010400

08004570 <LL_EXTI_DisableEvent_32_63>:
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <LL_EXTI_DisableEvent_32_63+0x24>)
 800457a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	43db      	mvns	r3, r3
 8004580:	4904      	ldr	r1, [pc, #16]	; (8004594 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004582:	4013      	ands	r3, r2
 8004584:	624b      	str	r3, [r1, #36]	; 0x24
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010400 	.word	0x40010400

08004598 <LL_EXTI_EnableRisingTrig_0_31>:
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	4904      	ldr	r1, [pc, #16]	; (80045b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40010400 	.word	0x40010400

080045bc <LL_EXTI_EnableRisingTrig_32_63>:
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80045c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c8:	4904      	ldr	r1, [pc, #16]	; (80045dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	628b      	str	r3, [r1, #40]	; 0x28
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <LL_EXTI_DisableRisingTrig_0_31>:
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4904      	ldr	r1, [pc, #16]	; (8004604 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40010400 	.word	0x40010400

08004608 <LL_EXTI_DisableRisingTrig_32_63>:
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	43db      	mvns	r3, r3
 8004618:	4904      	ldr	r1, [pc, #16]	; (800462c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800461a:	4013      	ands	r3, r2
 800461c:	628b      	str	r3, [r1, #40]	; 0x28
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010400 	.word	0x40010400

08004630 <LL_EXTI_EnableFallingTrig_0_31>:
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	4904      	ldr	r1, [pc, #16]	; (8004650 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40010400 	.word	0x40010400

08004654 <LL_EXTI_EnableFallingTrig_32_63>:
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4313      	orrs	r3, r2
 8004666:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40010400 	.word	0x40010400

08004678 <LL_EXTI_DisableFallingTrig_0_31>:
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	43db      	mvns	r3, r3
 8004688:	4904      	ldr	r1, [pc, #16]	; (800469c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800468a:	4013      	ands	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40010400 	.word	0x40010400

080046a0 <LL_EXTI_DisableFallingTrig_32_63>:
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010400 	.word	0x40010400

080046c8 <LL_EXTI_Init>:
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7a1b      	ldrb	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80d1 	beq.w	8004880 <LL_EXTI_Init+0x1b8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <LL_EXTI_Init+0xe6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7a5b      	ldrb	r3, [r3, #9]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d01c      	beq.n	8004728 <LL_EXTI_Init+0x60>
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	dc25      	bgt.n	800473e <LL_EXTI_Init+0x76>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <LL_EXTI_Init+0x34>
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d00b      	beq.n	8004712 <LL_EXTI_Init+0x4a>
 80046fa:	e020      	b.n	800473e <LL_EXTI_Init+0x76>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff21 	bl	8004548 <LL_EXTI_DisableEvent_0_31>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff feac 	bl	8004468 <LL_EXTI_EnableIT_0_31>
 8004710:	e018      	b.n	8004744 <LL_EXTI_Init+0x7c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff feca 	bl	80044b0 <LL_EXTI_DisableIT_0_31>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff feed 	bl	8004500 <LL_EXTI_EnableEvent_0_31>
 8004726:	e00d      	b.n	8004744 <LL_EXTI_Init+0x7c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fe9b 	bl	8004468 <LL_EXTI_EnableIT_0_31>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fee2 	bl	8004500 <LL_EXTI_EnableEvent_0_31>
 800473c:	e002      	b.n	8004744 <LL_EXTI_Init+0x7c>
 800473e:	2301      	movs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	bf00      	nop
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7a9b      	ldrb	r3, [r3, #10]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d030      	beq.n	80047ae <LL_EXTI_Init+0xe6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7a9b      	ldrb	r3, [r3, #10]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d01c      	beq.n	800478e <LL_EXTI_Init+0xc6>
 8004754:	2b03      	cmp	r3, #3
 8004756:	dc25      	bgt.n	80047a4 <LL_EXTI_Init+0xdc>
 8004758:	2b01      	cmp	r3, #1
 800475a:	d002      	beq.n	8004762 <LL_EXTI_Init+0x9a>
 800475c:	2b02      	cmp	r3, #2
 800475e:	d00b      	beq.n	8004778 <LL_EXTI_Init+0xb0>
 8004760:	e020      	b.n	80047a4 <LL_EXTI_Init+0xdc>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff86 	bl	8004678 <LL_EXTI_DisableFallingTrig_0_31>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff11 	bl	8004598 <LL_EXTI_EnableRisingTrig_0_31>
 8004776:	e01b      	b.n	80047b0 <LL_EXTI_Init+0xe8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff2f 	bl	80045e0 <LL_EXTI_DisableRisingTrig_0_31>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff52 	bl	8004630 <LL_EXTI_EnableFallingTrig_0_31>
 800478c:	e010      	b.n	80047b0 <LL_EXTI_Init+0xe8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff00 	bl	8004598 <LL_EXTI_EnableRisingTrig_0_31>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff47 	bl	8004630 <LL_EXTI_EnableFallingTrig_0_31>
 80047a2:	e005      	b.n	80047b0 <LL_EXTI_Init+0xe8>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f043 0302 	orr.w	r3, r3, #2
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e000      	b.n	80047b0 <LL_EXTI_Init+0xe8>
 80047ae:	bf00      	nop
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d078      	beq.n	80048aa <LL_EXTI_Init+0x1e2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	7a5b      	ldrb	r3, [r3, #9]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d01c      	beq.n	80047fa <LL_EXTI_Init+0x132>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	dc25      	bgt.n	8004810 <LL_EXTI_Init+0x148>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <LL_EXTI_Init+0x106>
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d00b      	beq.n	80047e4 <LL_EXTI_Init+0x11c>
 80047cc:	e020      	b.n	8004810 <LL_EXTI_Init+0x148>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fecc 	bl	8004570 <LL_EXTI_DisableEvent_32_63>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fe55 	bl	800448c <LL_EXTI_EnableIT_32_63>
 80047e2:	e01a      	b.n	800481a <LL_EXTI_Init+0x152>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fe75 	bl	80044d8 <LL_EXTI_DisableIT_32_63>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fe96 	bl	8004524 <LL_EXTI_EnableEvent_32_63>
 80047f8:	e00f      	b.n	800481a <LL_EXTI_Init+0x152>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fe44 	bl	800448c <LL_EXTI_EnableIT_32_63>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fe8b 	bl	8004524 <LL_EXTI_EnableEvent_32_63>
 800480e:	e004      	b.n	800481a <LL_EXTI_Init+0x152>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 0304 	orr.w	r3, r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	bf00      	nop
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7a9b      	ldrb	r3, [r3, #10]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d043      	beq.n	80048aa <LL_EXTI_Init+0x1e2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7a9b      	ldrb	r3, [r3, #10]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d01c      	beq.n	8004864 <LL_EXTI_Init+0x19c>
 800482a:	2b03      	cmp	r3, #3
 800482c:	dc25      	bgt.n	800487a <LL_EXTI_Init+0x1b2>
 800482e:	2b01      	cmp	r3, #1
 8004830:	d002      	beq.n	8004838 <LL_EXTI_Init+0x170>
 8004832:	2b02      	cmp	r3, #2
 8004834:	d00b      	beq.n	800484e <LL_EXTI_Init+0x186>
 8004836:	e020      	b.n	800487a <LL_EXTI_Init+0x1b2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff2f 	bl	80046a0 <LL_EXTI_DisableFallingTrig_32_63>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff feb8 	bl	80045bc <LL_EXTI_EnableRisingTrig_32_63>
 800484c:	e02e      	b.n	80048ac <LL_EXTI_Init+0x1e4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fed8 	bl	8004608 <LL_EXTI_DisableRisingTrig_32_63>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fef9 	bl	8004654 <LL_EXTI_EnableFallingTrig_32_63>
 8004862:	e023      	b.n	80048ac <LL_EXTI_Init+0x1e4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fea7 	bl	80045bc <LL_EXTI_EnableRisingTrig_32_63>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff feee 	bl	8004654 <LL_EXTI_EnableFallingTrig_32_63>
 8004878:	e018      	b.n	80048ac <LL_EXTI_Init+0x1e4>
 800487a:	2301      	movs	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e015      	b.n	80048ac <LL_EXTI_Init+0x1e4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fe13 	bl	80044b0 <LL_EXTI_DisableIT_0_31>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fe5a 	bl	8004548 <LL_EXTI_DisableEvent_0_31>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fe1d 	bl	80044d8 <LL_EXTI_DisableIT_32_63>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fe64 	bl	8004570 <LL_EXTI_DisableEvent_32_63>
 80048a8:	e000      	b.n	80048ac <LL_EXTI_Init+0x1e4>
 80048aa:	bf00      	nop
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <LL_GPIO_SetPinMode>:
 80048b6:	b480      	push	{r7}
 80048b8:	b08b      	sub	sp, #44	; 0x2c
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <LL_GPIO_SetPinMode+0x2a>
 80048dc:	2320      	movs	r3, #32
 80048de:	e003      	b.n	80048e8 <LL_GPIO_SetPinMode+0x32>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2103      	movs	r1, #3
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	401a      	ands	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	623b      	str	r3, [r7, #32]
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <LL_GPIO_SetPinMode+0x58>
 800490a:	2320      	movs	r3, #32
 800490c:	e003      	b.n	8004916 <LL_GPIO_SetPinMode+0x60>
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	431a      	orrs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	bf00      	nop
 8004926:	372c      	adds	r7, #44	; 0x2c
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_GPIO_SetPinOutputType>:
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	43db      	mvns	r3, r3
 8004944:	401a      	ands	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_GPIO_SetPinSpeed>:
 8004960:	b480      	push	{r7}
 8004962:	b08b      	sub	sp, #44	; 0x2c
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <LL_GPIO_SetPinSpeed+0x2a>
 8004986:	2320      	movs	r3, #32
 8004988:	e003      	b.n	8004992 <LL_GPIO_SetPinSpeed+0x32>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	2103      	movs	r1, #3
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	401a      	ands	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	fa93 f3a3 	rbit	r3, r3
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <LL_GPIO_SetPinSpeed+0x58>
 80049b4:	2320      	movs	r3, #32
 80049b6:	e003      	b.n	80049c0 <LL_GPIO_SetPinSpeed+0x60>
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	bf00      	nop
 80049d0:	372c      	adds	r7, #44	; 0x2c
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_GPIO_SetPinPull>:
 80049da:	b480      	push	{r7}
 80049dc:	b08b      	sub	sp, #44	; 0x2c
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <LL_GPIO_SetPinPull+0x2a>
 8004a00:	2320      	movs	r3, #32
 8004a02:	e003      	b.n	8004a0c <LL_GPIO_SetPinPull+0x32>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2103      	movs	r1, #3
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	401a      	ands	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <LL_GPIO_SetPinPull+0x58>
 8004a2e:	2320      	movs	r3, #32
 8004a30:	e003      	b.n	8004a3a <LL_GPIO_SetPinPull+0x60>
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	431a      	orrs	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	bf00      	nop
 8004a4a:	372c      	adds	r7, #44	; 0x2c
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_GPIO_SetAFPin_0_7>:
 8004a54:	b480      	push	{r7}
 8004a56:	b08b      	sub	sp, #44	; 0x2c
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <LL_GPIO_SetAFPin_0_7+0x2a>
 8004a7a:	2320      	movs	r3, #32
 8004a7c:	e003      	b.n	8004a86 <LL_GPIO_SetAFPin_0_7+0x32>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	210f      	movs	r1, #15
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	401a      	ands	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <LL_GPIO_SetAFPin_0_7+0x58>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	e003      	b.n	8004ab4 <LL_GPIO_SetAFPin_0_7+0x60>
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
 8004ac2:	bf00      	nop
 8004ac4:	372c      	adds	r7, #44	; 0x2c
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_GPIO_SetAFPin_8_15>:
 8004ace:	b480      	push	{r7}
 8004ad0:	b08b      	sub	sp, #44	; 0x2c
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <LL_GPIO_SetAFPin_8_15+0x2c>
 8004af6:	2320      	movs	r3, #32
 8004af8:	e003      	b.n	8004b02 <LL_GPIO_SetAFPin_8_15+0x34>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	210f      	movs	r1, #15
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <LL_GPIO_SetAFPin_8_15+0x5c>
 8004b26:	2320      	movs	r3, #32
 8004b28:	e003      	b.n	8004b32 <LL_GPIO_SetAFPin_8_15+0x64>
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b40:	bf00      	nop
 8004b42:	372c      	adds	r7, #44	; 0x2c
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_GPIO_Init>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <LL_GPIO_Init+0x26>
 8004b6e:	2320      	movs	r3, #32
 8004b70:	e003      	b.n	8004b7a <LL_GPIO_Init+0x2e>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	fab3 f383 	clz	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e048      	b.n	8004c10 <LL_GPIO_Init+0xc4>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2101      	movs	r1, #1
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03a      	beq.n	8004c0a <LL_GPIO_Init+0xbe>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d003      	beq.n	8004ba4 <LL_GPIO_Init+0x58>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d10e      	bne.n	8004bc2 <LL_GPIO_Init+0x76>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	69b9      	ldr	r1, [r7, #24]
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fed7 	bl	8004960 <LL_GPIO_SetPinSpeed>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff feb7 	bl	8004930 <LL_GPIO_SetPinOutputType>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ff05 	bl	80049da <LL_GPIO_SetPinPull>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d111      	bne.n	8004bfc <LL_GPIO_Init+0xb0>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2bff      	cmp	r3, #255	; 0xff
 8004bdc:	d807      	bhi.n	8004bee <LL_GPIO_Init+0xa2>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	461a      	mov	r2, r3
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff34 	bl	8004a54 <LL_GPIO_SetAFPin_0_7>
 8004bec:	e006      	b.n	8004bfc <LL_GPIO_Init+0xb0>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ff69 	bl	8004ace <LL_GPIO_SetAFPin_8_15>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	461a      	mov	r2, r3
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fe56 	bl	80048b6 <LL_GPIO_SetPinMode>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1af      	bne.n	8004b7e <LL_GPIO_Init+0x32>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LL_RCC_HSI_IsReady>:
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <LL_RCC_HSI_IsReady+0x24>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d101      	bne.n	8004c3e <LL_RCC_HSI_IsReady+0x16>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_RCC_HSI_IsReady+0x18>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <LL_RCC_LSE_IsReady>:
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <LL_RCC_LSE_IsReady+0x24>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d101      	bne.n	8004c66 <LL_RCC_LSE_IsReady+0x16>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <LL_RCC_LSE_IsReady+0x18>
 8004c66:	2300      	movs	r3, #0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000

08004c78 <LL_RCC_MSI_IsEnabledRangeSelect>:
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d101      	bne.n	8004c8c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40021000 	.word	0x40021000

08004c9c <LL_RCC_MSI_GetRange>:
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <LL_RCC_MSI_GetRange+0x18>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <LL_RCC_MSI_GetRangeAfterStandby>:
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <LL_RCC_GetSysClkSource>:
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <LL_RCC_GetSysClkSource+0x18>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000

08004cf0 <LL_RCC_GetAHBPrescaler>:
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <LL_RCC_GetAHBPrescaler+0x18>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <LL_RCC_GetAPB1Prescaler>:
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000

08004d28 <LL_RCC_GetAPB2Prescaler>:
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000

08004d44 <LL_RCC_GetUSARTClockSource>:
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <LL_RCC_GetUSARTClockSource+0x24>)
 8004d4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	401a      	ands	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40021000 	.word	0x40021000

08004d6c <LL_RCC_GetUARTClockSource>:
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <LL_RCC_GetUARTClockSource+0x24>)
 8004d76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	4313      	orrs	r3, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	40021000 	.word	0x40021000

08004d94 <LL_RCC_PLL_GetMainSource>:
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <LL_RCC_PLL_GetMainSource+0x18>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <LL_RCC_PLL_GetN>:
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <LL_RCC_PLL_GetN+0x18>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40021000 	.word	0x40021000

08004dcc <LL_RCC_PLL_GetR>:
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <LL_RCC_PLL_GetR+0x18>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000

08004de8 <LL_RCC_PLL_GetDivider>:
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <LL_RCC_PLL_GetDivider+0x18>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000

08004e04 <LL_RCC_GetUSARTClockFreq>:
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d137      	bne.n	8004e86 <LL_RCC_GetUSARTClockFreq+0x82>
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff94 	bl	8004d44 <LL_RCC_GetUSARTClockSource>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f200 80b3 	bhi.w	8004f8e <LL_RCC_GetUSARTClockFreq+0x18a>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e6f 	.word	0x08004e6f
 8004e34:	08004e41 	.word	0x08004e41
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e5b 	.word	0x08004e5b
 8004e40:	f000 f95c 	bl	80050fc <RCC_GetSystemClockFreq>
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	e0b5      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004e48:	f7ff feee 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 809f 	beq.w	8004f92 <LL_RCC_GetUSARTClockFreq+0x18e>
 8004e54:	4b5a      	ldr	r3, [pc, #360]	; (8004fc0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e09b      	b.n	8004f92 <LL_RCC_GetUSARTClockFreq+0x18e>
 8004e5a:	f7ff fef9 	bl	8004c50 <LL_RCC_LSE_IsReady>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8098 	beq.w	8004f96 <LL_RCC_GetUSARTClockFreq+0x192>
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e093      	b.n	8004f96 <LL_RCC_GetUSARTClockFreq+0x192>
 8004e6e:	f000 f945 	bl	80050fc <RCC_GetSystemClockFreq>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f9d1 	bl	800521c <RCC_GetHCLKClockFreq>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f9f7 	bl	8005270 <RCC_GetPCLK2ClockFreq>
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	e096      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d146      	bne.n	8004f1a <LL_RCC_GetUSARTClockFreq+0x116>
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff59 	bl	8004d44 <LL_RCC_GetUSARTClockSource>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d87e      	bhi.n	8004f9a <LL_RCC_GetUSARTClockFreq+0x196>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004f03 	.word	0x08004f03
 8004ea8:	08004f9b 	.word	0x08004f9b
 8004eac:	08004f9b 	.word	0x08004f9b
 8004eb0:	08004f9b 	.word	0x08004f9b
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004f9b 	.word	0x08004f9b
 8004ebc:	08004f9b 	.word	0x08004f9b
 8004ec0:	08004f9b 	.word	0x08004f9b
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004f9b 	.word	0x08004f9b
 8004ecc:	08004f9b 	.word	0x08004f9b
 8004ed0:	08004f9b 	.word	0x08004f9b
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	f000 f910 	bl	80050fc <RCC_GetSystemClockFreq>
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	e069      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004ee0:	f7ff fea2 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d059      	beq.n	8004f9e <LL_RCC_GetUSARTClockFreq+0x19a>
 8004eea:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e056      	b.n	8004f9e <LL_RCC_GetUSARTClockFreq+0x19a>
 8004ef0:	f7ff feae 	bl	8004c50 <LL_RCC_LSE_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d053      	beq.n	8004fa2 <LL_RCC_GetUSARTClockFreq+0x19e>
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e04f      	b.n	8004fa2 <LL_RCC_GetUSARTClockFreq+0x19e>
 8004f02:	f000 f8fb 	bl	80050fc <RCC_GetSystemClockFreq>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f987 	bl	800521c <RCC_GetHCLKClockFreq>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f999 	bl	8005248 <RCC_GetPCLK1ClockFreq>
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	e04c      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d142      	bne.n	8004fa6 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff0f 	bl	8004d44 <LL_RCC_GetUSARTClockSource>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004f2c:	d01a      	beq.n	8004f64 <LL_RCC_GetUSARTClockFreq+0x160>
 8004f2e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004f32:	d83a      	bhi.n	8004faa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004f34:	4a23      	ldr	r2, [pc, #140]	; (8004fc4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00c      	beq.n	8004f54 <LL_RCC_GetUSARTClockFreq+0x150>
 8004f3a:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d834      	bhi.n	8004faa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f44:	d017      	beq.n	8004f76 <LL_RCC_GetUSARTClockFreq+0x172>
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d12e      	bne.n	8004faa <LL_RCC_GetUSARTClockFreq+0x1a6>
 8004f4c:	f000 f8d6 	bl	80050fc <RCC_GetSystemClockFreq>
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	e02f      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f54:	f7ff fe68 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d027      	beq.n	8004fae <LL_RCC_GetUSARTClockFreq+0x1aa>
 8004f5e:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e024      	b.n	8004fae <LL_RCC_GetUSARTClockFreq+0x1aa>
 8004f64:	f7ff fe74 	bl	8004c50 <LL_RCC_LSE_IsReady>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d021      	beq.n	8004fb2 <LL_RCC_GetUSARTClockFreq+0x1ae>
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e01d      	b.n	8004fb2 <LL_RCC_GetUSARTClockFreq+0x1ae>
 8004f76:	f000 f8c1 	bl	80050fc <RCC_GetSystemClockFreq>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f94d 	bl	800521c <RCC_GetHCLKClockFreq>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f95f 	bl	8005248 <RCC_GetPCLK1ClockFreq>
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	e012      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f8e:	bf00      	nop
 8004f90:	e010      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f92:	bf00      	nop
 8004f94:	e00e      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f96:	bf00      	nop
 8004f98:	e00c      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f9a:	bf00      	nop
 8004f9c:	e00a      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004f9e:	bf00      	nop
 8004fa0:	e008      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004fa2:	bf00      	nop
 8004fa4:	e006      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004fa6:	bf00      	nop
 8004fa8:	e004      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <LL_RCC_GetUSARTClockFreq+0x1b0>
 8004fb2:	bf00      	nop
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	00300020 	.word	0x00300020
 8004fc8:	00300010 	.word	0x00300010

08004fcc <LL_RCC_GetUARTClockFreq>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2bc0      	cmp	r3, #192	; 0xc0
 8004fdc:	d136      	bne.n	800504c <LL_RCC_GetUARTClockFreq+0x80>
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fec4 	bl	8004d6c <LL_RCC_GetUARTClockSource>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004fea:	d01a      	beq.n	8005022 <LL_RCC_GetUARTClockFreq+0x56>
 8004fec:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004ff0:	d82e      	bhi.n	8005050 <LL_RCC_GetUARTClockFreq+0x84>
 8004ff2:	4a3d      	ldr	r2, [pc, #244]	; (80050e8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00c      	beq.n	8005012 <LL_RCC_GetUARTClockFreq+0x46>
 8004ff8:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d828      	bhi.n	8005050 <LL_RCC_GetUARTClockFreq+0x84>
 8004ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005002:	d017      	beq.n	8005034 <LL_RCC_GetUARTClockFreq+0x68>
 8005004:	4a39      	ldr	r2, [pc, #228]	; (80050ec <LL_RCC_GetUARTClockFreq+0x120>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d122      	bne.n	8005050 <LL_RCC_GetUARTClockFreq+0x84>
 800500a:	f000 f877 	bl	80050fc <RCC_GetSystemClockFreq>
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	e023      	b.n	800505a <LL_RCC_GetUARTClockFreq+0x8e>
 8005012:	f7ff fe09 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <LL_RCC_GetUARTClockFreq+0x88>
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <LL_RCC_GetUARTClockFreq+0x124>)
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e018      	b.n	8005054 <LL_RCC_GetUARTClockFreq+0x88>
 8005022:	f7ff fe15 	bl	8004c50 <LL_RCC_LSE_IsReady>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <LL_RCC_GetUARTClockFreq+0x8c>
 800502c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e011      	b.n	8005058 <LL_RCC_GetUARTClockFreq+0x8c>
 8005034:	f000 f862 	bl	80050fc <RCC_GetSystemClockFreq>
 8005038:	4603      	mov	r3, r0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f8ee 	bl	800521c <RCC_GetHCLKClockFreq>
 8005040:	4603      	mov	r3, r0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f900 	bl	8005248 <RCC_GetPCLK1ClockFreq>
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	e006      	b.n	800505a <LL_RCC_GetUARTClockFreq+0x8e>
 800504c:	bf00      	nop
 800504e:	e004      	b.n	800505a <LL_RCC_GetUARTClockFreq+0x8e>
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <LL_RCC_GetUARTClockFreq+0x8e>
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <LL_RCC_GetUARTClockFreq+0x8e>
 8005058:	bf00      	nop
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005060:	d136      	bne.n	80050d0 <LL_RCC_GetUARTClockFreq+0x104>
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fe82 	bl	8004d6c <LL_RCC_GetUARTClockSource>
 8005068:	4603      	mov	r3, r0
 800506a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800506e:	d01a      	beq.n	80050a6 <LL_RCC_GetUARTClockFreq+0xda>
 8005070:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005074:	d82e      	bhi.n	80050d4 <LL_RCC_GetUARTClockFreq+0x108>
 8005076:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <LL_RCC_GetUARTClockFreq+0x128>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00c      	beq.n	8005096 <LL_RCC_GetUARTClockFreq+0xca>
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <LL_RCC_GetUARTClockFreq+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d828      	bhi.n	80050d4 <LL_RCC_GetUARTClockFreq+0x108>
 8005082:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005086:	d017      	beq.n	80050b8 <LL_RCC_GetUARTClockFreq+0xec>
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <LL_RCC_GetUARTClockFreq+0x12c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d122      	bne.n	80050d4 <LL_RCC_GetUARTClockFreq+0x108>
 800508e:	f000 f835 	bl	80050fc <RCC_GetSystemClockFreq>
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	e023      	b.n	80050de <LL_RCC_GetUARTClockFreq+0x112>
 8005096:	f7ff fdc7 	bl	8004c28 <LL_RCC_HSI_IsReady>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <LL_RCC_GetUARTClockFreq+0x10c>
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <LL_RCC_GetUARTClockFreq+0x124>)
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e018      	b.n	80050d8 <LL_RCC_GetUARTClockFreq+0x10c>
 80050a6:	f7ff fdd3 	bl	8004c50 <LL_RCC_LSE_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <LL_RCC_GetUARTClockFreq+0x110>
 80050b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e011      	b.n	80050dc <LL_RCC_GetUARTClockFreq+0x110>
 80050b8:	f000 f820 	bl	80050fc <RCC_GetSystemClockFreq>
 80050bc:	4603      	mov	r3, r0
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f8ac 	bl	800521c <RCC_GetHCLKClockFreq>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f8be 	bl	8005248 <RCC_GetPCLK1ClockFreq>
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	e006      	b.n	80050de <LL_RCC_GetUARTClockFreq+0x112>
 80050d0:	bf00      	nop
 80050d2:	e004      	b.n	80050de <LL_RCC_GetUARTClockFreq+0x112>
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <LL_RCC_GetUARTClockFreq+0x112>
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <LL_RCC_GetUARTClockFreq+0x112>
 80050dc:	bf00      	nop
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00c00080 	.word	0x00c00080
 80050ec:	00c00040 	.word	0x00c00040
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	03000200 	.word	0x03000200
 80050f8:	03000100 	.word	0x03000100

080050fc <RCC_GetSystemClockFreq>:
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	f7ff fde7 	bl	8004cd4 <LL_RCC_GetSysClkSource>
 8005106:	4603      	mov	r3, r0
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d851      	bhi.n	80051b0 <RCC_GetSystemClockFreq+0xb4>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <RCC_GetSystemClockFreq+0x18>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005149 	.word	0x08005149
 8005118:	080051b1 	.word	0x080051b1
 800511c:	080051b1 	.word	0x080051b1
 8005120:	080051b1 	.word	0x080051b1
 8005124:	0800519d 	.word	0x0800519d
 8005128:	080051b1 	.word	0x080051b1
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080051b1 	.word	0x080051b1
 8005134:	080051a3 	.word	0x080051a3
 8005138:	080051b1 	.word	0x080051b1
 800513c:	080051b1 	.word	0x080051b1
 8005140:	080051b1 	.word	0x080051b1
 8005144:	080051a9 	.word	0x080051a9
 8005148:	f7ff fd96 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d111      	bne.n	8005176 <RCC_GetSystemClockFreq+0x7a>
 8005152:	f7ff fd91 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <RCC_GetSystemClockFreq+0x6a>
 800515c:	f7ff fd9e 	bl	8004c9c <LL_RCC_MSI_GetRange>
 8005160:	4603      	mov	r3, r0
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	e003      	b.n	800516e <RCC_GetSystemClockFreq+0x72>
 8005166:	f7ff fda7 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 800516a:	4603      	mov	r3, r0
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	4a28      	ldr	r2, [pc, #160]	; (8005210 <RCC_GetSystemClockFreq+0x114>)
 8005170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005174:	e010      	b.n	8005198 <RCC_GetSystemClockFreq+0x9c>
 8005176:	f7ff fd7f 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <RCC_GetSystemClockFreq+0x8e>
 8005180:	f7ff fd8c 	bl	8004c9c <LL_RCC_MSI_GetRange>
 8005184:	4603      	mov	r3, r0
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	e003      	b.n	8005192 <RCC_GetSystemClockFreq+0x96>
 800518a:	f7ff fd95 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 800518e:	4603      	mov	r3, r0
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <RCC_GetSystemClockFreq+0x114>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	e033      	b.n	8005204 <RCC_GetSystemClockFreq+0x108>
 800519c:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <RCC_GetSystemClockFreq+0x118>)
 800519e:	607b      	str	r3, [r7, #4]
 80051a0:	e030      	b.n	8005204 <RCC_GetSystemClockFreq+0x108>
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <RCC_GetSystemClockFreq+0x11c>)
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	e02d      	b.n	8005204 <RCC_GetSystemClockFreq+0x108>
 80051a8:	f000 f876 	bl	8005298 <RCC_PLL_GetFreqDomain_SYS>
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	e029      	b.n	8005204 <RCC_GetSystemClockFreq+0x108>
 80051b0:	f7ff fd62 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d111      	bne.n	80051de <RCC_GetSystemClockFreq+0xe2>
 80051ba:	f7ff fd5d 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <RCC_GetSystemClockFreq+0xd2>
 80051c4:	f7ff fd6a 	bl	8004c9c <LL_RCC_MSI_GetRange>
 80051c8:	4603      	mov	r3, r0
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	e003      	b.n	80051d6 <RCC_GetSystemClockFreq+0xda>
 80051ce:	f7ff fd73 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 80051d2:	4603      	mov	r3, r0
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <RCC_GetSystemClockFreq+0x114>)
 80051d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051dc:	e010      	b.n	8005200 <RCC_GetSystemClockFreq+0x104>
 80051de:	f7ff fd4b 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <RCC_GetSystemClockFreq+0xf6>
 80051e8:	f7ff fd58 	bl	8004c9c <LL_RCC_MSI_GetRange>
 80051ec:	4603      	mov	r3, r0
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	e003      	b.n	80051fa <RCC_GetSystemClockFreq+0xfe>
 80051f2:	f7ff fd61 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 80051f6:	4603      	mov	r3, r0
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	4a05      	ldr	r2, [pc, #20]	; (8005210 <RCC_GetSystemClockFreq+0x114>)
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	bf00      	nop
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	080069e8 	.word	0x080069e8
 8005214:	00f42400 	.word	0x00f42400
 8005218:	007a1200 	.word	0x007a1200

0800521c <RCC_GetHCLKClockFreq>:
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	f7ff fd64 	bl	8004cf0 <LL_RCC_GetAHBPrescaler>
 8005228:	4603      	mov	r3, r0
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	4a04      	ldr	r2, [pc, #16]	; (8005244 <RCC_GetHCLKClockFreq+0x28>)
 8005232:	5cd3      	ldrb	r3, [r2, r3]
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	40d3      	lsrs	r3, r2
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	080069d0 	.word	0x080069d0

08005248 <RCC_GetPCLK1ClockFreq>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	f7ff fd5c 	bl	8004d0c <LL_RCC_GetAPB1Prescaler>
 8005254:	4603      	mov	r3, r0
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <RCC_GetPCLK1ClockFreq+0x24>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	40d3      	lsrs	r3, r2
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	080069e0 	.word	0x080069e0

08005270 <RCC_GetPCLK2ClockFreq>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	f7ff fd56 	bl	8004d28 <LL_RCC_GetAPB2Prescaler>
 800527c:	4603      	mov	r3, r0
 800527e:	0adb      	lsrs	r3, r3, #11
 8005280:	4a04      	ldr	r2, [pc, #16]	; (8005294 <RCC_GetPCLK2ClockFreq+0x24>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	40d3      	lsrs	r3, r2
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	080069e0 	.word	0x080069e0

08005298 <RCC_PLL_GetFreqDomain_SYS>:
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	f7ff fd79 	bl	8004d94 <LL_RCC_PLL_GetMainSource>
 80052a2:	6038      	str	r0, [r7, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d036      	beq.n	8005318 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d836      	bhi.n	800531e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d003      	beq.n	80052be <RCC_PLL_GetFreqDomain_SYS+0x26>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d02a      	beq.n	8005312 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80052bc:	e02f      	b.n	800531e <RCC_PLL_GetFreqDomain_SYS+0x86>
 80052be:	f7ff fcdb 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d111      	bne.n	80052ec <RCC_PLL_GetFreqDomain_SYS+0x54>
 80052c8:	f7ff fcd6 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <RCC_PLL_GetFreqDomain_SYS+0x44>
 80052d2:	f7ff fce3 	bl	8004c9c <LL_RCC_MSI_GetRange>
 80052d6:	4603      	mov	r3, r0
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	e003      	b.n	80052e4 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80052dc:	f7ff fcec 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 80052e0:	4603      	mov	r3, r0
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ea:	e010      	b.n	800530e <RCC_PLL_GetFreqDomain_SYS+0x76>
 80052ec:	f7ff fcc4 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80052f6:	f7ff fcd1 	bl	8004c9c <LL_RCC_MSI_GetRange>
 80052fa:	4603      	mov	r3, r0
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	e003      	b.n	8005308 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005300:	f7ff fcda 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005304:	4603      	mov	r3, r0
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	e02f      	b.n	8005372 <RCC_PLL_GetFreqDomain_SYS+0xda>
 8005312:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	e02c      	b.n	8005372 <RCC_PLL_GetFreqDomain_SYS+0xda>
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e029      	b.n	8005372 <RCC_PLL_GetFreqDomain_SYS+0xda>
 800531e:	f7ff fcab 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d111      	bne.n	800534c <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005328:	f7ff fca6 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005332:	f7ff fcb3 	bl	8004c9c <LL_RCC_MSI_GetRange>
 8005336:	4603      	mov	r3, r0
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	e003      	b.n	8005344 <RCC_PLL_GetFreqDomain_SYS+0xac>
 800533c:	f7ff fcbc 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005340:	4603      	mov	r3, r0
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534a:	e010      	b.n	800536e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 800534c:	f7ff fc94 	bl	8004c78 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005356:	f7ff fca1 	bl	8004c9c <LL_RCC_MSI_GetRange>
 800535a:	4603      	mov	r3, r0
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	e003      	b.n	8005368 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005360:	f7ff fcaa 	bl	8004cb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005364:	4603      	mov	r3, r0
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	bf00      	nop
 8005372:	f7ff fd39 	bl	8004de8 <LL_RCC_PLL_GetDivider>
 8005376:	4603      	mov	r3, r0
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	3301      	adds	r3, #1
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	fbb2 f4f3 	udiv	r4, r2, r3
 8005382:	f7ff fd15 	bl	8004db0 <LL_RCC_PLL_GetN>
 8005386:	4603      	mov	r3, r0
 8005388:	fb03 f404 	mul.w	r4, r3, r4
 800538c:	f7ff fd1e 	bl	8004dcc <LL_RCC_PLL_GetR>
 8005390:	4603      	mov	r3, r0
 8005392:	0e5b      	lsrs	r3, r3, #25
 8005394:	3301      	adds	r3, #1
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fbb4 f3f3 	udiv	r3, r4, r3
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}
 80053a4:	080069e8 	.word	0x080069e8
 80053a8:	00f42400 	.word	0x00f42400
 80053ac:	007a1200 	.word	0x007a1200

080053b0 <LL_SPI_IsEnabled>:
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d101      	bne.n	80053c8 <LL_SPI_IsEnabled+0x18>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <LL_SPI_IsEnabled+0x1a>
 80053c8:	2300      	movs	r3, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <LL_SPI_SetRxFIFOThreshold>:
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <LL_SPI_SetCRCPolynomial>:
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	611a      	str	r2, [r3, #16]
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_SPI_Init>:
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ffc0 	bl	80053b0 <LL_SPI_IsEnabled>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d145      	bne.n	80054c2 <LL_SPI_Init+0xa6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	4311      	orrs	r1, r2
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	68d2      	ldr	r2, [r2, #12]
 8005450:	4311      	orrs	r1, r2
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	6912      	ldr	r2, [r2, #16]
 8005456:	4311      	orrs	r1, r2
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	6952      	ldr	r2, [r2, #20]
 800545c:	4311      	orrs	r1, r2
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	6992      	ldr	r2, [r2, #24]
 8005462:	4311      	orrs	r1, r2
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	69d2      	ldr	r2, [r2, #28]
 8005468:	4311      	orrs	r1, r2
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	6a12      	ldr	r2, [r2, #32]
 800546e:	430a      	orrs	r2, r1
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800547e:	f023 0304 	bic.w	r3, r3, #4
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	6891      	ldr	r1, [r2, #8]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	6952      	ldr	r2, [r2, #20]
 800548a:	0c12      	lsrs	r2, r2, #16
 800548c:	430a      	orrs	r2, r1
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549c:	d204      	bcs.n	80054a8 <LL_SPI_Init+0x8c>
 800549e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ff97 	bl	80053d6 <LL_SPI_SetRxFIFOThreshold>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b0:	d105      	bne.n	80054be <LL_SPI_Init+0xa2>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff9f 	bl	80053fc <LL_SPI_SetCRCPolynomial>
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <LL_USART_IsEnabled>:
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <LL_USART_IsEnabled+0x18>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <LL_USART_IsEnabled+0x1a>
 80054e4:	2300      	movs	r3, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <LL_USART_SetStopBitsLength>:
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <LL_USART_SetHWFlowCtrl>:
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_USART_SetBaudRate>:
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005552:	d11a      	bne.n	800558a <LL_USART_SetBaudRate+0x4c>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	005a      	lsls	r2, r3, #1
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	441a      	add	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	b29b      	uxth	r3, r3
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	e00a      	b.n	80055a0 <LL_USART_SetBaudRate+0x62>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	085a      	lsrs	r2, r3, #1
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	441a      	add	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_USART_Init>:
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ff84 	bl	80054cc <LL_USART_IsEnabled>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d15b      	bne.n	8005682 <LL_USART_Init+0xd6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b2f      	ldr	r3, [pc, #188]	; (800568c <LL_USART_Init+0xe0>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	6851      	ldr	r1, [r2, #4]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	68d2      	ldr	r2, [r2, #12]
 80055da:	4311      	orrs	r1, r2
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	6912      	ldr	r2, [r2, #16]
 80055e0:	4311      	orrs	r1, r2
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	6992      	ldr	r2, [r2, #24]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff7c 	bl	80054f2 <LL_USART_SetStopBitsLength>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff89 	bl	8005518 <LL_USART_SetHWFlowCtrl>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a21      	ldr	r2, [pc, #132]	; (8005690 <LL_USART_Init+0xe4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d104      	bne.n	8005618 <LL_USART_Init+0x6c>
 800560e:	2003      	movs	r0, #3
 8005610:	f7ff fbf8 	bl	8004e04 <LL_RCC_GetUSARTClockFreq>
 8005614:	60b8      	str	r0, [r7, #8]
 8005616:	e023      	b.n	8005660 <LL_USART_Init+0xb4>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <LL_USART_Init+0xe8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d104      	bne.n	800562a <LL_USART_Init+0x7e>
 8005620:	200c      	movs	r0, #12
 8005622:	f7ff fbef 	bl	8004e04 <LL_RCC_GetUSARTClockFreq>
 8005626:	60b8      	str	r0, [r7, #8]
 8005628:	e01a      	b.n	8005660 <LL_USART_Init+0xb4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1a      	ldr	r2, [pc, #104]	; (8005698 <LL_USART_Init+0xec>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d104      	bne.n	800563c <LL_USART_Init+0x90>
 8005632:	2030      	movs	r0, #48	; 0x30
 8005634:	f7ff fbe6 	bl	8004e04 <LL_RCC_GetUSARTClockFreq>
 8005638:	60b8      	str	r0, [r7, #8]
 800563a:	e011      	b.n	8005660 <LL_USART_Init+0xb4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <LL_USART_Init+0xf0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d104      	bne.n	800564e <LL_USART_Init+0xa2>
 8005644:	20c0      	movs	r0, #192	; 0xc0
 8005646:	f7ff fcc1 	bl	8004fcc <LL_RCC_GetUARTClockFreq>
 800564a:	60b8      	str	r0, [r7, #8]
 800564c:	e008      	b.n	8005660 <LL_USART_Init+0xb4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <LL_USART_Init+0xf4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d104      	bne.n	8005660 <LL_USART_Init+0xb4>
 8005656:	f44f 7040 	mov.w	r0, #768	; 0x300
 800565a:	f7ff fcb7 	bl	8004fcc <LL_RCC_GetUARTClockFreq>
 800565e:	60b8      	str	r0, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <LL_USART_Init+0xd6>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <LL_USART_Init+0xd6>
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff ff5e 	bl	800553e <LL_USART_SetBaudRate>
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	efff69f3 	.word	0xefff69f3
 8005690:	40013800 	.word	0x40013800
 8005694:	40004400 	.word	0x40004400
 8005698:	40004800 	.word	0x40004800
 800569c:	40004c00 	.word	0x40004c00
 80056a0:	40005000 	.word	0x40005000

080056a4 <LL_InitTick>:
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <LL_InitTick+0x30>)
 80056b8:	3b01      	subs	r3, #1
 80056ba:	6053      	str	r3, [r2, #4]
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <LL_InitTick+0x30>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <LL_InitTick+0x30>)
 80056c4:	2205      	movs	r2, #5
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000e010 	.word	0xe000e010

080056d8 <LL_Init1msTick>:
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ffdd 	bl	80056a4 <LL_InitTick>
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <LL_mDelay>:
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <LL_mDelay+0x4c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d00c      	beq.n	800572a <LL_mDelay+0x36>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e008      	b.n	800572a <LL_mDelay+0x36>
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <LL_mDelay+0x4c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <LL_mDelay+0x36>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f3      	bne.n	8005718 <LL_mDelay+0x24>
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e010 	.word	0xe000e010

08005744 <LL_SetSystemCoreClock>:
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	4a04      	ldr	r2, [pc, #16]	; (8005760 <LL_SetSystemCoreClock+0x1c>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000014 	.word	0x20000014

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f001 f91e 	bl	80069b8 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08006a88 	.word	0x08006a88
 80057a0:	08006a88 	.word	0x08006a88
 80057a4:	08006a88 	.word	0x08006a88
 80057a8:	08006a8c 	.word	0x08006a8c

080057ac <memcpy>:
 80057ac:	440a      	add	r2, r1
 80057ae:	4291      	cmp	r1, r2
 80057b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b4:	d100      	bne.n	80057b8 <memcpy+0xc>
 80057b6:	4770      	bx	lr
 80057b8:	b510      	push	{r4, lr}
 80057ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c2:	4291      	cmp	r1, r2
 80057c4:	d1f9      	bne.n	80057ba <memcpy+0xe>
 80057c6:	bd10      	pop	{r4, pc}

080057c8 <memset>:
 80057c8:	4402      	add	r2, r0
 80057ca:	4603      	mov	r3, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <atan>:
 80057d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	ec55 4b10 	vmov	r4, r5, d0
 80057e0:	4bc3      	ldr	r3, [pc, #780]	; (8005af0 <atan+0x318>)
 80057e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80057e6:	429e      	cmp	r6, r3
 80057e8:	46ab      	mov	fp, r5
 80057ea:	dd18      	ble.n	800581e <atan+0x46>
 80057ec:	4bc1      	ldr	r3, [pc, #772]	; (8005af4 <atan+0x31c>)
 80057ee:	429e      	cmp	r6, r3
 80057f0:	dc01      	bgt.n	80057f6 <atan+0x1e>
 80057f2:	d109      	bne.n	8005808 <atan+0x30>
 80057f4:	b144      	cbz	r4, 8005808 <atan+0x30>
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	f7fa fce9 	bl	80001d4 <__adddf3>
 8005802:	4604      	mov	r4, r0
 8005804:	460d      	mov	r5, r1
 8005806:	e006      	b.n	8005816 <atan+0x3e>
 8005808:	f1bb 0f00 	cmp.w	fp, #0
 800580c:	f300 8131 	bgt.w	8005a72 <atan+0x29a>
 8005810:	a59b      	add	r5, pc, #620	; (adr r5, 8005a80 <atan+0x2a8>)
 8005812:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005816:	ec45 4b10 	vmov	d0, r4, r5
 800581a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581e:	4bb6      	ldr	r3, [pc, #728]	; (8005af8 <atan+0x320>)
 8005820:	429e      	cmp	r6, r3
 8005822:	dc14      	bgt.n	800584e <atan+0x76>
 8005824:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005828:	429e      	cmp	r6, r3
 800582a:	dc0d      	bgt.n	8005848 <atan+0x70>
 800582c:	a396      	add	r3, pc, #600	; (adr r3, 8005a88 <atan+0x2b0>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	ee10 0a10 	vmov	r0, s0
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fccc 	bl	80001d4 <__adddf3>
 800583c:	4baf      	ldr	r3, [pc, #700]	; (8005afc <atan+0x324>)
 800583e:	2200      	movs	r2, #0
 8005840:	f7fb f90e 	bl	8000a60 <__aeabi_dcmpgt>
 8005844:	2800      	cmp	r0, #0
 8005846:	d1e6      	bne.n	8005816 <atan+0x3e>
 8005848:	f04f 3aff 	mov.w	sl, #4294967295
 800584c:	e02b      	b.n	80058a6 <atan+0xce>
 800584e:	f000 f963 	bl	8005b18 <fabs>
 8005852:	4bab      	ldr	r3, [pc, #684]	; (8005b00 <atan+0x328>)
 8005854:	429e      	cmp	r6, r3
 8005856:	ec55 4b10 	vmov	r4, r5, d0
 800585a:	f300 80bf 	bgt.w	80059dc <atan+0x204>
 800585e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005862:	429e      	cmp	r6, r3
 8005864:	f300 80a0 	bgt.w	80059a8 <atan+0x1d0>
 8005868:	ee10 2a10 	vmov	r2, s0
 800586c:	ee10 0a10 	vmov	r0, s0
 8005870:	462b      	mov	r3, r5
 8005872:	4629      	mov	r1, r5
 8005874:	f7fa fcae 	bl	80001d4 <__adddf3>
 8005878:	4ba0      	ldr	r3, [pc, #640]	; (8005afc <atan+0x324>)
 800587a:	2200      	movs	r2, #0
 800587c:	f7fa fca8 	bl	80001d0 <__aeabi_dsub>
 8005880:	2200      	movs	r2, #0
 8005882:	4606      	mov	r6, r0
 8005884:	460f      	mov	r7, r1
 8005886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800588a:	4620      	mov	r0, r4
 800588c:	4629      	mov	r1, r5
 800588e:	f7fa fca1 	bl	80001d4 <__adddf3>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f7fa ff7b 	bl	8000794 <__aeabi_ddiv>
 800589e:	f04f 0a00 	mov.w	sl, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f7fa fe47 	bl	8000540 <__aeabi_dmul>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4680      	mov	r8, r0
 80058b8:	4689      	mov	r9, r1
 80058ba:	f7fa fe41 	bl	8000540 <__aeabi_dmul>
 80058be:	a374      	add	r3, pc, #464	; (adr r3, 8005a90 <atan+0x2b8>)
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	f7fa fe3a 	bl	8000540 <__aeabi_dmul>
 80058cc:	a372      	add	r3, pc, #456	; (adr r3, 8005a98 <atan+0x2c0>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa fc7f 	bl	80001d4 <__adddf3>
 80058d6:	4632      	mov	r2, r6
 80058d8:	463b      	mov	r3, r7
 80058da:	f7fa fe31 	bl	8000540 <__aeabi_dmul>
 80058de:	a370      	add	r3, pc, #448	; (adr r3, 8005aa0 <atan+0x2c8>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fc76 	bl	80001d4 <__adddf3>
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	f7fa fe28 	bl	8000540 <__aeabi_dmul>
 80058f0:	a36d      	add	r3, pc, #436	; (adr r3, 8005aa8 <atan+0x2d0>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f7fa fc6d 	bl	80001d4 <__adddf3>
 80058fa:	4632      	mov	r2, r6
 80058fc:	463b      	mov	r3, r7
 80058fe:	f7fa fe1f 	bl	8000540 <__aeabi_dmul>
 8005902:	a36b      	add	r3, pc, #428	; (adr r3, 8005ab0 <atan+0x2d8>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fc64 	bl	80001d4 <__adddf3>
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	f7fa fe16 	bl	8000540 <__aeabi_dmul>
 8005914:	a368      	add	r3, pc, #416	; (adr r3, 8005ab8 <atan+0x2e0>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f7fa fc5b 	bl	80001d4 <__adddf3>
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	f7fa fe0d 	bl	8000540 <__aeabi_dmul>
 8005926:	a366      	add	r3, pc, #408	; (adr r3, 8005ac0 <atan+0x2e8>)
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	f7fa fe04 	bl	8000540 <__aeabi_dmul>
 8005938:	a363      	add	r3, pc, #396	; (adr r3, 8005ac8 <atan+0x2f0>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fc47 	bl	80001d0 <__aeabi_dsub>
 8005942:	4632      	mov	r2, r6
 8005944:	463b      	mov	r3, r7
 8005946:	f7fa fdfb 	bl	8000540 <__aeabi_dmul>
 800594a:	a361      	add	r3, pc, #388	; (adr r3, 8005ad0 <atan+0x2f8>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fc3e 	bl	80001d0 <__aeabi_dsub>
 8005954:	4632      	mov	r2, r6
 8005956:	463b      	mov	r3, r7
 8005958:	f7fa fdf2 	bl	8000540 <__aeabi_dmul>
 800595c:	a35e      	add	r3, pc, #376	; (adr r3, 8005ad8 <atan+0x300>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc35 	bl	80001d0 <__aeabi_dsub>
 8005966:	4632      	mov	r2, r6
 8005968:	463b      	mov	r3, r7
 800596a:	f7fa fde9 	bl	8000540 <__aeabi_dmul>
 800596e:	a35c      	add	r3, pc, #368	; (adr r3, 8005ae0 <atan+0x308>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fc2c 	bl	80001d0 <__aeabi_dsub>
 8005978:	4632      	mov	r2, r6
 800597a:	463b      	mov	r3, r7
 800597c:	f7fa fde0 	bl	8000540 <__aeabi_dmul>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fa fc24 	bl	80001d4 <__adddf3>
 800598c:	4622      	mov	r2, r4
 800598e:	462b      	mov	r3, r5
 8005990:	f7fa fdd6 	bl	8000540 <__aeabi_dmul>
 8005994:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	d14b      	bne.n	8005a36 <atan+0x25e>
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fc15 	bl	80001d0 <__aeabi_dsub>
 80059a6:	e72c      	b.n	8005802 <atan+0x2a>
 80059a8:	ee10 0a10 	vmov	r0, s0
 80059ac:	4b53      	ldr	r3, [pc, #332]	; (8005afc <atan+0x324>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	4629      	mov	r1, r5
 80059b2:	f7fa fc0d 	bl	80001d0 <__aeabi_dsub>
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <atan+0x324>)
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	2200      	movs	r2, #0
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fc07 	bl	80001d4 <__adddf3>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	f7fa fee1 	bl	8000794 <__aeabi_ddiv>
 80059d2:	f04f 0a01 	mov.w	sl, #1
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	e764      	b.n	80058a6 <atan+0xce>
 80059dc:	4b49      	ldr	r3, [pc, #292]	; (8005b04 <atan+0x32c>)
 80059de:	429e      	cmp	r6, r3
 80059e0:	da1d      	bge.n	8005a1e <atan+0x246>
 80059e2:	ee10 0a10 	vmov	r0, s0
 80059e6:	4b48      	ldr	r3, [pc, #288]	; (8005b08 <atan+0x330>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7fa fbf0 	bl	80001d0 <__aeabi_dsub>
 80059f0:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <atan+0x330>)
 80059f2:	4606      	mov	r6, r0
 80059f4:	460f      	mov	r7, r1
 80059f6:	2200      	movs	r2, #0
 80059f8:	4620      	mov	r0, r4
 80059fa:	4629      	mov	r1, r5
 80059fc:	f7fa fda0 	bl	8000540 <__aeabi_dmul>
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <atan+0x324>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fa fbe6 	bl	80001d4 <__adddf3>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fec0 	bl	8000794 <__aeabi_ddiv>
 8005a14:	f04f 0a02 	mov.w	sl, #2
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	e743      	b.n	80058a6 <atan+0xce>
 8005a1e:	462b      	mov	r3, r5
 8005a20:	ee10 2a10 	vmov	r2, s0
 8005a24:	4939      	ldr	r1, [pc, #228]	; (8005b0c <atan+0x334>)
 8005a26:	2000      	movs	r0, #0
 8005a28:	f7fa feb4 	bl	8000794 <__aeabi_ddiv>
 8005a2c:	f04f 0a03 	mov.w	sl, #3
 8005a30:	4604      	mov	r4, r0
 8005a32:	460d      	mov	r5, r1
 8005a34:	e737      	b.n	80058a6 <atan+0xce>
 8005a36:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <atan+0x338>)
 8005a38:	4e36      	ldr	r6, [pc, #216]	; (8005b14 <atan+0x33c>)
 8005a3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005a3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005a42:	e9da 2300 	ldrd	r2, r3, [sl]
 8005a46:	f7fa fbc3 	bl	80001d0 <__aeabi_dsub>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f7fa fbbf 	bl	80001d0 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005a5a:	f7fa fbb9 	bl	80001d0 <__aeabi_dsub>
 8005a5e:	f1bb 0f00 	cmp.w	fp, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	f6bf aed6 	bge.w	8005816 <atan+0x3e>
 8005a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a6e:	461d      	mov	r5, r3
 8005a70:	e6d1      	b.n	8005816 <atan+0x3e>
 8005a72:	a51d      	add	r5, pc, #116	; (adr r5, 8005ae8 <atan+0x310>)
 8005a74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a78:	e6cd      	b.n	8005816 <atan+0x3e>
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w
 8005a80:	54442d18 	.word	0x54442d18
 8005a84:	bff921fb 	.word	0xbff921fb
 8005a88:	8800759c 	.word	0x8800759c
 8005a8c:	7e37e43c 	.word	0x7e37e43c
 8005a90:	e322da11 	.word	0xe322da11
 8005a94:	3f90ad3a 	.word	0x3f90ad3a
 8005a98:	24760deb 	.word	0x24760deb
 8005a9c:	3fa97b4b 	.word	0x3fa97b4b
 8005aa0:	a0d03d51 	.word	0xa0d03d51
 8005aa4:	3fb10d66 	.word	0x3fb10d66
 8005aa8:	c54c206e 	.word	0xc54c206e
 8005aac:	3fb745cd 	.word	0x3fb745cd
 8005ab0:	920083ff 	.word	0x920083ff
 8005ab4:	3fc24924 	.word	0x3fc24924
 8005ab8:	5555550d 	.word	0x5555550d
 8005abc:	3fd55555 	.word	0x3fd55555
 8005ac0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ac4:	bfa2b444 	.word	0xbfa2b444
 8005ac8:	52defd9a 	.word	0x52defd9a
 8005acc:	3fadde2d 	.word	0x3fadde2d
 8005ad0:	af749a6d 	.word	0xaf749a6d
 8005ad4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005ad8:	fe231671 	.word	0xfe231671
 8005adc:	3fbc71c6 	.word	0x3fbc71c6
 8005ae0:	9998ebc4 	.word	0x9998ebc4
 8005ae4:	3fc99999 	.word	0x3fc99999
 8005ae8:	54442d18 	.word	0x54442d18
 8005aec:	3ff921fb 	.word	0x3ff921fb
 8005af0:	440fffff 	.word	0x440fffff
 8005af4:	7ff00000 	.word	0x7ff00000
 8005af8:	3fdbffff 	.word	0x3fdbffff
 8005afc:	3ff00000 	.word	0x3ff00000
 8005b00:	3ff2ffff 	.word	0x3ff2ffff
 8005b04:	40038000 	.word	0x40038000
 8005b08:	3ff80000 	.word	0x3ff80000
 8005b0c:	bff00000 	.word	0xbff00000
 8005b10:	08006a38 	.word	0x08006a38
 8005b14:	08006a18 	.word	0x08006a18

08005b18 <fabs>:
 8005b18:	ec51 0b10 	vmov	r0, r1, d0
 8005b1c:	ee10 2a10 	vmov	r2, s0
 8005b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b24:	ec43 2b10 	vmov	d0, r2, r3
 8005b28:	4770      	bx	lr
	...

08005b2c <pow>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	ed2d 8b02 	vpush	{d8}
 8005b32:	eeb0 8a40 	vmov.f32	s16, s0
 8005b36:	eef0 8a60 	vmov.f32	s17, s1
 8005b3a:	ec55 4b11 	vmov	r4, r5, d1
 8005b3e:	f000 f893 	bl	8005c68 <__ieee754_pow>
 8005b42:	4622      	mov	r2, r4
 8005b44:	462b      	mov	r3, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	ec57 6b10 	vmov	r6, r7, d0
 8005b4e:	f7fa ff91 	bl	8000a74 <__aeabi_dcmpun>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d13b      	bne.n	8005bce <pow+0xa2>
 8005b56:	ec51 0b18 	vmov	r0, r1, d8
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f7fa ff57 	bl	8000a10 <__aeabi_dcmpeq>
 8005b62:	b1b8      	cbz	r0, 8005b94 <pow+0x68>
 8005b64:	2200      	movs	r2, #0
 8005b66:	2300      	movs	r3, #0
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	f7fa ff50 	bl	8000a10 <__aeabi_dcmpeq>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d146      	bne.n	8005c02 <pow+0xd6>
 8005b74:	ec45 4b10 	vmov	d0, r4, r5
 8005b78:	f000 fe86 	bl	8006888 <finite>
 8005b7c:	b338      	cbz	r0, 8005bce <pow+0xa2>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	4620      	mov	r0, r4
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fa ff4d 	bl	8000a24 <__aeabi_dcmplt>
 8005b8a:	b300      	cbz	r0, 8005bce <pow+0xa2>
 8005b8c:	f000 ff0e 	bl	80069ac <__errno>
 8005b90:	2322      	movs	r3, #34	; 0x22
 8005b92:	e01b      	b.n	8005bcc <pow+0xa0>
 8005b94:	ec47 6b10 	vmov	d0, r6, r7
 8005b98:	f000 fe76 	bl	8006888 <finite>
 8005b9c:	b9e0      	cbnz	r0, 8005bd8 <pow+0xac>
 8005b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8005ba2:	eef0 0a68 	vmov.f32	s1, s17
 8005ba6:	f000 fe6f 	bl	8006888 <finite>
 8005baa:	b1a8      	cbz	r0, 8005bd8 <pow+0xac>
 8005bac:	ec45 4b10 	vmov	d0, r4, r5
 8005bb0:	f000 fe6a 	bl	8006888 <finite>
 8005bb4:	b180      	cbz	r0, 8005bd8 <pow+0xac>
 8005bb6:	4632      	mov	r2, r6
 8005bb8:	463b      	mov	r3, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	f7fa ff59 	bl	8000a74 <__aeabi_dcmpun>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d0e2      	beq.n	8005b8c <pow+0x60>
 8005bc6:	f000 fef1 	bl	80069ac <__errno>
 8005bca:	2321      	movs	r3, #33	; 0x21
 8005bcc:	6003      	str	r3, [r0, #0]
 8005bce:	ecbd 8b02 	vpop	{d8}
 8005bd2:	ec47 6b10 	vmov	d0, r6, r7
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa ff16 	bl	8000a10 <__aeabi_dcmpeq>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0f2      	beq.n	8005bce <pow+0xa2>
 8005be8:	eeb0 0a48 	vmov.f32	s0, s16
 8005bec:	eef0 0a68 	vmov.f32	s1, s17
 8005bf0:	f000 fe4a 	bl	8006888 <finite>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d0ea      	beq.n	8005bce <pow+0xa2>
 8005bf8:	ec45 4b10 	vmov	d0, r4, r5
 8005bfc:	f000 fe44 	bl	8006888 <finite>
 8005c00:	e7c3      	b.n	8005b8a <pow+0x5e>
 8005c02:	4f01      	ldr	r7, [pc, #4]	; (8005c08 <pow+0xdc>)
 8005c04:	2600      	movs	r6, #0
 8005c06:	e7e2      	b.n	8005bce <pow+0xa2>
 8005c08:	3ff00000 	.word	0x3ff00000

08005c0c <sqrt>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	ed2d 8b02 	vpush	{d8}
 8005c12:	ec55 4b10 	vmov	r4, r5, d0
 8005c16:	f000 fd55 	bl	80066c4 <__ieee754_sqrt>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	4620      	mov	r0, r4
 8005c20:	4629      	mov	r1, r5
 8005c22:	eeb0 8a40 	vmov.f32	s16, s0
 8005c26:	eef0 8a60 	vmov.f32	s17, s1
 8005c2a:	f7fa ff23 	bl	8000a74 <__aeabi_dcmpun>
 8005c2e:	b990      	cbnz	r0, 8005c56 <sqrt+0x4a>
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fef4 	bl	8000a24 <__aeabi_dcmplt>
 8005c3c:	b158      	cbz	r0, 8005c56 <sqrt+0x4a>
 8005c3e:	f000 feb5 	bl	80069ac <__errno>
 8005c42:	2321      	movs	r3, #33	; 0x21
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f7fa fda1 	bl	8000794 <__aeabi_ddiv>
 8005c52:	ec41 0b18 	vmov	d8, r0, r1
 8005c56:	eeb0 0a48 	vmov.f32	s0, s16
 8005c5a:	eef0 0a68 	vmov.f32	s1, s17
 8005c5e:	ecbd 8b02 	vpop	{d8}
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	0000      	movs	r0, r0
	...

08005c68 <__ieee754_pow>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	ed2d 8b06 	vpush	{d8-d10}
 8005c70:	b089      	sub	sp, #36	; 0x24
 8005c72:	ed8d 1b00 	vstr	d1, [sp]
 8005c76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005c7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005c7e:	ea58 0102 	orrs.w	r1, r8, r2
 8005c82:	ec57 6b10 	vmov	r6, r7, d0
 8005c86:	d115      	bne.n	8005cb4 <__ieee754_pow+0x4c>
 8005c88:	19b3      	adds	r3, r6, r6
 8005c8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005c8e:	4152      	adcs	r2, r2
 8005c90:	4299      	cmp	r1, r3
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <__ieee754_pow+0x250>)
 8005c94:	4193      	sbcs	r3, r2
 8005c96:	f080 84d2 	bcs.w	800663e <__ieee754_pow+0x9d6>
 8005c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	f7fa fa97 	bl	80001d4 <__adddf3>
 8005ca6:	ec41 0b10 	vmov	d0, r0, r1
 8005caa:	b009      	add	sp, #36	; 0x24
 8005cac:	ecbd 8b06 	vpop	{d8-d10}
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb4:	4b81      	ldr	r3, [pc, #516]	; (8005ebc <__ieee754_pow+0x254>)
 8005cb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	ee10 aa10 	vmov	sl, s0
 8005cc0:	463d      	mov	r5, r7
 8005cc2:	dc06      	bgt.n	8005cd2 <__ieee754_pow+0x6a>
 8005cc4:	d101      	bne.n	8005cca <__ieee754_pow+0x62>
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	d1e7      	bne.n	8005c9a <__ieee754_pow+0x32>
 8005cca:	4598      	cmp	r8, r3
 8005ccc:	dc01      	bgt.n	8005cd2 <__ieee754_pow+0x6a>
 8005cce:	d10f      	bne.n	8005cf0 <__ieee754_pow+0x88>
 8005cd0:	b172      	cbz	r2, 8005cf0 <__ieee754_pow+0x88>
 8005cd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005cd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005cda:	ea55 050a 	orrs.w	r5, r5, sl
 8005cde:	d1dc      	bne.n	8005c9a <__ieee754_pow+0x32>
 8005ce0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ce4:	18db      	adds	r3, r3, r3
 8005ce6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005cea:	4152      	adcs	r2, r2
 8005cec:	429d      	cmp	r5, r3
 8005cee:	e7d0      	b.n	8005c92 <__ieee754_pow+0x2a>
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	da3b      	bge.n	8005d6c <__ieee754_pow+0x104>
 8005cf4:	4b72      	ldr	r3, [pc, #456]	; (8005ec0 <__ieee754_pow+0x258>)
 8005cf6:	4598      	cmp	r8, r3
 8005cf8:	dc51      	bgt.n	8005d9e <__ieee754_pow+0x136>
 8005cfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005cfe:	4598      	cmp	r8, r3
 8005d00:	f340 84ac 	ble.w	800665c <__ieee754_pow+0x9f4>
 8005d04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d0c:	2b14      	cmp	r3, #20
 8005d0e:	dd0f      	ble.n	8005d30 <__ieee754_pow+0xc8>
 8005d10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d14:	fa22 f103 	lsr.w	r1, r2, r3
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	f040 849d 	bne.w	800665c <__ieee754_pow+0x9f4>
 8005d22:	f001 0101 	and.w	r1, r1, #1
 8005d26:	f1c1 0302 	rsb	r3, r1, #2
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	b182      	cbz	r2, 8005d50 <__ieee754_pow+0xe8>
 8005d2e:	e05f      	b.n	8005df0 <__ieee754_pow+0x188>
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d15b      	bne.n	8005dec <__ieee754_pow+0x184>
 8005d34:	f1c3 0314 	rsb	r3, r3, #20
 8005d38:	fa48 f103 	asr.w	r1, r8, r3
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	4543      	cmp	r3, r8
 8005d42:	f040 8488 	bne.w	8006656 <__ieee754_pow+0x9ee>
 8005d46:	f001 0101 	and.w	r1, r1, #1
 8005d4a:	f1c1 0302 	rsb	r3, r1, #2
 8005d4e:	9304      	str	r3, [sp, #16]
 8005d50:	4b5c      	ldr	r3, [pc, #368]	; (8005ec4 <__ieee754_pow+0x25c>)
 8005d52:	4598      	cmp	r8, r3
 8005d54:	d132      	bne.n	8005dbc <__ieee754_pow+0x154>
 8005d56:	f1b9 0f00 	cmp.w	r9, #0
 8005d5a:	f280 8478 	bge.w	800664e <__ieee754_pow+0x9e6>
 8005d5e:	4959      	ldr	r1, [pc, #356]	; (8005ec4 <__ieee754_pow+0x25c>)
 8005d60:	4632      	mov	r2, r6
 8005d62:	463b      	mov	r3, r7
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fa fd15 	bl	8000794 <__aeabi_ddiv>
 8005d6a:	e79c      	b.n	8005ca6 <__ieee754_pow+0x3e>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	d13d      	bne.n	8005df0 <__ieee754_pow+0x188>
 8005d74:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <__ieee754_pow+0x254>)
 8005d76:	4598      	cmp	r8, r3
 8005d78:	d1ea      	bne.n	8005d50 <__ieee754_pow+0xe8>
 8005d7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005d7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005d82:	ea53 030a 	orrs.w	r3, r3, sl
 8005d86:	f000 845a 	beq.w	800663e <__ieee754_pow+0x9d6>
 8005d8a:	4b4f      	ldr	r3, [pc, #316]	; (8005ec8 <__ieee754_pow+0x260>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	dd08      	ble.n	8005da2 <__ieee754_pow+0x13a>
 8005d90:	f1b9 0f00 	cmp.w	r9, #0
 8005d94:	f2c0 8457 	blt.w	8006646 <__ieee754_pow+0x9de>
 8005d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d9c:	e783      	b.n	8005ca6 <__ieee754_pow+0x3e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e7e5      	b.n	8005d6e <__ieee754_pow+0x106>
 8005da2:	f1b9 0f00 	cmp.w	r9, #0
 8005da6:	f04f 0000 	mov.w	r0, #0
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	f6bf af7a 	bge.w	8005ca6 <__ieee754_pow+0x3e>
 8005db2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005db6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005dba:	e774      	b.n	8005ca6 <__ieee754_pow+0x3e>
 8005dbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005dc0:	d106      	bne.n	8005dd0 <__ieee754_pow+0x168>
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa fbb9 	bl	8000540 <__aeabi_dmul>
 8005dce:	e76a      	b.n	8005ca6 <__ieee754_pow+0x3e>
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <__ieee754_pow+0x264>)
 8005dd2:	4599      	cmp	r9, r3
 8005dd4:	d10c      	bne.n	8005df0 <__ieee754_pow+0x188>
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	db0a      	blt.n	8005df0 <__ieee754_pow+0x188>
 8005dda:	ec47 6b10 	vmov	d0, r6, r7
 8005dde:	b009      	add	sp, #36	; 0x24
 8005de0:	ecbd 8b06 	vpop	{d8-d10}
 8005de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	f000 bc6c 	b.w	80066c4 <__ieee754_sqrt>
 8005dec:	2300      	movs	r3, #0
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	ec47 6b10 	vmov	d0, r6, r7
 8005df4:	f7ff fe90 	bl	8005b18 <fabs>
 8005df8:	ec51 0b10 	vmov	r0, r1, d0
 8005dfc:	f1ba 0f00 	cmp.w	sl, #0
 8005e00:	d129      	bne.n	8005e56 <__ieee754_pow+0x1ee>
 8005e02:	b124      	cbz	r4, 8005e0e <__ieee754_pow+0x1a6>
 8005e04:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <__ieee754_pow+0x25c>)
 8005e06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d123      	bne.n	8005e56 <__ieee754_pow+0x1ee>
 8005e0e:	f1b9 0f00 	cmp.w	r9, #0
 8005e12:	da05      	bge.n	8005e20 <__ieee754_pow+0x1b8>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	2000      	movs	r0, #0
 8005e1a:	492a      	ldr	r1, [pc, #168]	; (8005ec4 <__ieee754_pow+0x25c>)
 8005e1c:	f7fa fcba 	bl	8000794 <__aeabi_ddiv>
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	f6bf af40 	bge.w	8005ca6 <__ieee754_pow+0x3e>
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e30:	4323      	orrs	r3, r4
 8005e32:	d108      	bne.n	8005e46 <__ieee754_pow+0x1de>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f7fa f9c8 	bl	80001d0 <__aeabi_dsub>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e78f      	b.n	8005d66 <__ieee754_pow+0xfe>
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f47f af2c 	bne.w	8005ca6 <__ieee754_pow+0x3e>
 8005e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e52:	4619      	mov	r1, r3
 8005e54:	e727      	b.n	8005ca6 <__ieee754_pow+0x3e>
 8005e56:	0feb      	lsrs	r3, r5, #31
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	9306      	str	r3, [sp, #24]
 8005e5c:	9a06      	ldr	r2, [sp, #24]
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d102      	bne.n	8005e6a <__ieee754_pow+0x202>
 8005e64:	4632      	mov	r2, r6
 8005e66:	463b      	mov	r3, r7
 8005e68:	e7e6      	b.n	8005e38 <__ieee754_pow+0x1d0>
 8005e6a:	4b19      	ldr	r3, [pc, #100]	; (8005ed0 <__ieee754_pow+0x268>)
 8005e6c:	4598      	cmp	r8, r3
 8005e6e:	f340 80fb 	ble.w	8006068 <__ieee754_pow+0x400>
 8005e72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005e76:	4598      	cmp	r8, r3
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <__ieee754_pow+0x260>)
 8005e7a:	dd0c      	ble.n	8005e96 <__ieee754_pow+0x22e>
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	dc0f      	bgt.n	8005ea0 <__ieee754_pow+0x238>
 8005e80:	f1b9 0f00 	cmp.w	r9, #0
 8005e84:	da0f      	bge.n	8005ea6 <__ieee754_pow+0x23e>
 8005e86:	2000      	movs	r0, #0
 8005e88:	b009      	add	sp, #36	; 0x24
 8005e8a:	ecbd 8b06 	vpop	{d8-d10}
 8005e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e92:	f000 bcf0 	b.w	8006876 <__math_oflow>
 8005e96:	429c      	cmp	r4, r3
 8005e98:	dbf2      	blt.n	8005e80 <__ieee754_pow+0x218>
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <__ieee754_pow+0x25c>)
 8005e9c:	429c      	cmp	r4, r3
 8005e9e:	dd19      	ble.n	8005ed4 <__ieee754_pow+0x26c>
 8005ea0:	f1b9 0f00 	cmp.w	r9, #0
 8005ea4:	dcef      	bgt.n	8005e86 <__ieee754_pow+0x21e>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	b009      	add	sp, #36	; 0x24
 8005eaa:	ecbd 8b06 	vpop	{d8-d10}
 8005eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb2:	f000 bcd7 	b.w	8006864 <__math_uflow>
 8005eb6:	bf00      	nop
 8005eb8:	fff00000 	.word	0xfff00000
 8005ebc:	7ff00000 	.word	0x7ff00000
 8005ec0:	433fffff 	.word	0x433fffff
 8005ec4:	3ff00000 	.word	0x3ff00000
 8005ec8:	3fefffff 	.word	0x3fefffff
 8005ecc:	3fe00000 	.word	0x3fe00000
 8005ed0:	41e00000 	.word	0x41e00000
 8005ed4:	4b60      	ldr	r3, [pc, #384]	; (8006058 <__ieee754_pow+0x3f0>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f7fa f97a 	bl	80001d0 <__aeabi_dsub>
 8005edc:	a354      	add	r3, pc, #336	; (adr r3, 8006030 <__ieee754_pow+0x3c8>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	f7fa fb2b 	bl	8000540 <__aeabi_dmul>
 8005eea:	a353      	add	r3, pc, #332	; (adr r3, 8006038 <__ieee754_pow+0x3d0>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7fa fb22 	bl	8000540 <__aeabi_dmul>
 8005efc:	4b57      	ldr	r3, [pc, #348]	; (800605c <__ieee754_pow+0x3f4>)
 8005efe:	4682      	mov	sl, r0
 8005f00:	468b      	mov	fp, r1
 8005f02:	2200      	movs	r2, #0
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fb1a 	bl	8000540 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	a14b      	add	r1, pc, #300	; (adr r1, 8006040 <__ieee754_pow+0x3d8>)
 8005f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f16:	f7fa f95b 	bl	80001d0 <__aeabi_dsub>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f7fa fb0f 	bl	8000540 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	2000      	movs	r0, #0
 8005f28:	494d      	ldr	r1, [pc, #308]	; (8006060 <__ieee754_pow+0x3f8>)
 8005f2a:	f7fa f951 	bl	80001d0 <__aeabi_dsub>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4680      	mov	r8, r0
 8005f32:	4689      	mov	r9, r1
 8005f34:	462b      	mov	r3, r5
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f7fa fb01 	bl	8000540 <__aeabi_dmul>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa fafb 	bl	8000540 <__aeabi_dmul>
 8005f4a:	a33f      	add	r3, pc, #252	; (adr r3, 8006048 <__ieee754_pow+0x3e0>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa faf6 	bl	8000540 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4650      	mov	r0, sl
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	f7fa f938 	bl	80001d0 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4680      	mov	r8, r0
 8005f66:	4689      	mov	r9, r1
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa f932 	bl	80001d4 <__adddf3>
 8005f70:	2000      	movs	r0, #0
 8005f72:	4632      	mov	r2, r6
 8005f74:	463b      	mov	r3, r7
 8005f76:	4604      	mov	r4, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	f7fa f929 	bl	80001d0 <__aeabi_dsub>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f923 	bl	80001d0 <__aeabi_dsub>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	9a06      	ldr	r2, [sp, #24]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	4682      	mov	sl, r0
 8005f94:	468b      	mov	fp, r1
 8005f96:	f040 81e7 	bne.w	8006368 <__ieee754_pow+0x700>
 8005f9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006050 <__ieee754_pow+0x3e8>
 8005f9e:	eeb0 8a47 	vmov.f32	s16, s14
 8005fa2:	eef0 8a67 	vmov.f32	s17, s15
 8005fa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005faa:	2600      	movs	r6, #0
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb4:	f7fa f90c 	bl	80001d0 <__aeabi_dsub>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f7fa fac0 	bl	8000540 <__aeabi_dmul>
 8005fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4689      	mov	r9, r1
 8005fc8:	4650      	mov	r0, sl
 8005fca:	4659      	mov	r1, fp
 8005fcc:	f7fa fab8 	bl	8000540 <__aeabi_dmul>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	f7fa f8fc 	bl	80001d4 <__adddf3>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	463b      	mov	r3, r7
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa faaa 	bl	8000540 <__aeabi_dmul>
 8005fec:	460b      	mov	r3, r1
 8005fee:	4604      	mov	r4, r0
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7fa f8ec 	bl	80001d4 <__adddf3>
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <__ieee754_pow+0x3fc>)
 8005ffe:	4299      	cmp	r1, r3
 8006000:	ec45 4b19 	vmov	d9, r4, r5
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	468b      	mov	fp, r1
 800600a:	f340 82f1 	ble.w	80065f0 <__ieee754_pow+0x988>
 800600e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006016:	4303      	orrs	r3, r0
 8006018:	f000 81e4 	beq.w	80063e4 <__ieee754_pow+0x77c>
 800601c:	ec51 0b18 	vmov	r0, r1, d8
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fcfe 	bl	8000a24 <__aeabi_dcmplt>
 8006028:	3800      	subs	r0, #0
 800602a:	bf18      	it	ne
 800602c:	2001      	movne	r0, #1
 800602e:	e72b      	b.n	8005e88 <__ieee754_pow+0x220>
 8006030:	60000000 	.word	0x60000000
 8006034:	3ff71547 	.word	0x3ff71547
 8006038:	f85ddf44 	.word	0xf85ddf44
 800603c:	3e54ae0b 	.word	0x3e54ae0b
 8006040:	55555555 	.word	0x55555555
 8006044:	3fd55555 	.word	0x3fd55555
 8006048:	652b82fe 	.word	0x652b82fe
 800604c:	3ff71547 	.word	0x3ff71547
 8006050:	00000000 	.word	0x00000000
 8006054:	bff00000 	.word	0xbff00000
 8006058:	3ff00000 	.word	0x3ff00000
 800605c:	3fd00000 	.word	0x3fd00000
 8006060:	3fe00000 	.word	0x3fe00000
 8006064:	408fffff 	.word	0x408fffff
 8006068:	4bd5      	ldr	r3, [pc, #852]	; (80063c0 <__ieee754_pow+0x758>)
 800606a:	402b      	ands	r3, r5
 800606c:	2200      	movs	r2, #0
 800606e:	b92b      	cbnz	r3, 800607c <__ieee754_pow+0x414>
 8006070:	4bd4      	ldr	r3, [pc, #848]	; (80063c4 <__ieee754_pow+0x75c>)
 8006072:	f7fa fa65 	bl	8000540 <__aeabi_dmul>
 8006076:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800607a:	460c      	mov	r4, r1
 800607c:	1523      	asrs	r3, r4, #20
 800607e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006082:	4413      	add	r3, r2
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	4bd0      	ldr	r3, [pc, #832]	; (80063c8 <__ieee754_pow+0x760>)
 8006088:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800608c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006090:	429c      	cmp	r4, r3
 8006092:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006096:	dd08      	ble.n	80060aa <__ieee754_pow+0x442>
 8006098:	4bcc      	ldr	r3, [pc, #816]	; (80063cc <__ieee754_pow+0x764>)
 800609a:	429c      	cmp	r4, r3
 800609c:	f340 8162 	ble.w	8006364 <__ieee754_pow+0x6fc>
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	3301      	adds	r3, #1
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80060aa:	2400      	movs	r4, #0
 80060ac:	00e3      	lsls	r3, r4, #3
 80060ae:	9307      	str	r3, [sp, #28]
 80060b0:	4bc7      	ldr	r3, [pc, #796]	; (80063d0 <__ieee754_pow+0x768>)
 80060b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060b6:	ed93 7b00 	vldr	d7, [r3]
 80060ba:	4629      	mov	r1, r5
 80060bc:	ec53 2b17 	vmov	r2, r3, d7
 80060c0:	eeb0 9a47 	vmov.f32	s18, s14
 80060c4:	eef0 9a67 	vmov.f32	s19, s15
 80060c8:	4682      	mov	sl, r0
 80060ca:	f7fa f881 	bl	80001d0 <__aeabi_dsub>
 80060ce:	4652      	mov	r2, sl
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	462b      	mov	r3, r5
 80060d6:	ec51 0b19 	vmov	r0, r1, d9
 80060da:	f7fa f87b 	bl	80001d4 <__adddf3>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	2000      	movs	r0, #0
 80060e4:	49bb      	ldr	r1, [pc, #748]	; (80063d4 <__ieee754_pow+0x76c>)
 80060e6:	f7fa fb55 	bl	8000794 <__aeabi_ddiv>
 80060ea:	ec41 0b1a 	vmov	d10, r0, r1
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa fa23 	bl	8000540 <__aeabi_dmul>
 80060fa:	2300      	movs	r3, #0
 80060fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006106:	46ab      	mov	fp, r5
 8006108:	106d      	asrs	r5, r5, #1
 800610a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800610e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006112:	ec41 0b18 	vmov	d8, r0, r1
 8006116:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800611a:	2200      	movs	r2, #0
 800611c:	4640      	mov	r0, r8
 800611e:	4649      	mov	r1, r9
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	f7fa fa0c 	bl	8000540 <__aeabi_dmul>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa f84e 	bl	80001d0 <__aeabi_dsub>
 8006134:	ec53 2b19 	vmov	r2, r3, d9
 8006138:	4606      	mov	r6, r0
 800613a:	460f      	mov	r7, r1
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa f846 	bl	80001d0 <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4650      	mov	r0, sl
 800614a:	4659      	mov	r1, fp
 800614c:	f7fa f840 	bl	80001d0 <__aeabi_dsub>
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	f7fa f9f4 	bl	8000540 <__aeabi_dmul>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4630      	mov	r0, r6
 800615e:	4639      	mov	r1, r7
 8006160:	f7fa f836 	bl	80001d0 <__aeabi_dsub>
 8006164:	ec53 2b1a 	vmov	r2, r3, d10
 8006168:	f7fa f9ea 	bl	8000540 <__aeabi_dmul>
 800616c:	ec53 2b18 	vmov	r2, r3, d8
 8006170:	ec41 0b19 	vmov	d9, r0, r1
 8006174:	ec51 0b18 	vmov	r0, r1, d8
 8006178:	f7fa f9e2 	bl	8000540 <__aeabi_dmul>
 800617c:	a37c      	add	r3, pc, #496	; (adr r3, 8006370 <__ieee754_pow+0x708>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	4604      	mov	r4, r0
 8006184:	460d      	mov	r5, r1
 8006186:	f7fa f9db 	bl	8000540 <__aeabi_dmul>
 800618a:	a37b      	add	r3, pc, #492	; (adr r3, 8006378 <__ieee754_pow+0x710>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa f820 	bl	80001d4 <__adddf3>
 8006194:	4622      	mov	r2, r4
 8006196:	462b      	mov	r3, r5
 8006198:	f7fa f9d2 	bl	8000540 <__aeabi_dmul>
 800619c:	a378      	add	r3, pc, #480	; (adr r3, 8006380 <__ieee754_pow+0x718>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f817 	bl	80001d4 <__adddf3>
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	f7fa f9c9 	bl	8000540 <__aeabi_dmul>
 80061ae:	a376      	add	r3, pc, #472	; (adr r3, 8006388 <__ieee754_pow+0x720>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa f80e 	bl	80001d4 <__adddf3>
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	f7fa f9c0 	bl	8000540 <__aeabi_dmul>
 80061c0:	a373      	add	r3, pc, #460	; (adr r3, 8006390 <__ieee754_pow+0x728>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa f805 	bl	80001d4 <__adddf3>
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	f7fa f9b7 	bl	8000540 <__aeabi_dmul>
 80061d2:	a371      	add	r3, pc, #452	; (adr r3, 8006398 <__ieee754_pow+0x730>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7f9 fffc 	bl	80001d4 <__adddf3>
 80061dc:	4622      	mov	r2, r4
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	462b      	mov	r3, r5
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7fa f9aa 	bl	8000540 <__aeabi_dmul>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4630      	mov	r0, r6
 80061f2:	4639      	mov	r1, r7
 80061f4:	f7fa f9a4 	bl	8000540 <__aeabi_dmul>
 80061f8:	4642      	mov	r2, r8
 80061fa:	4604      	mov	r4, r0
 80061fc:	460d      	mov	r5, r1
 80061fe:	464b      	mov	r3, r9
 8006200:	ec51 0b18 	vmov	r0, r1, d8
 8006204:	f7f9 ffe6 	bl	80001d4 <__adddf3>
 8006208:	ec53 2b19 	vmov	r2, r3, d9
 800620c:	f7fa f998 	bl	8000540 <__aeabi_dmul>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7f9 ffde 	bl	80001d4 <__adddf3>
 8006218:	4642      	mov	r2, r8
 800621a:	4682      	mov	sl, r0
 800621c:	468b      	mov	fp, r1
 800621e:	464b      	mov	r3, r9
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	f7fa f98c 	bl	8000540 <__aeabi_dmul>
 8006228:	4b6b      	ldr	r3, [pc, #428]	; (80063d8 <__ieee754_pow+0x770>)
 800622a:	2200      	movs	r2, #0
 800622c:	4606      	mov	r6, r0
 800622e:	460f      	mov	r7, r1
 8006230:	f7f9 ffd0 	bl	80001d4 <__adddf3>
 8006234:	4652      	mov	r2, sl
 8006236:	465b      	mov	r3, fp
 8006238:	f7f9 ffcc 	bl	80001d4 <__adddf3>
 800623c:	2000      	movs	r0, #0
 800623e:	4604      	mov	r4, r0
 8006240:	460d      	mov	r5, r1
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa f979 	bl	8000540 <__aeabi_dmul>
 800624e:	4b62      	ldr	r3, [pc, #392]	; (80063d8 <__ieee754_pow+0x770>)
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	2200      	movs	r2, #0
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7f9 ffb9 	bl	80001d0 <__aeabi_dsub>
 800625e:	4632      	mov	r2, r6
 8006260:	463b      	mov	r3, r7
 8006262:	f7f9 ffb5 	bl	80001d0 <__aeabi_dsub>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4650      	mov	r0, sl
 800626c:	4659      	mov	r1, fp
 800626e:	f7f9 ffaf 	bl	80001d0 <__aeabi_dsub>
 8006272:	ec53 2b18 	vmov	r2, r3, d8
 8006276:	f7fa f963 	bl	8000540 <__aeabi_dmul>
 800627a:	4622      	mov	r2, r4
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	462b      	mov	r3, r5
 8006282:	ec51 0b19 	vmov	r0, r1, d9
 8006286:	f7fa f95b 	bl	8000540 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7f9 ff9f 	bl	80001d4 <__adddf3>
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7f9 ff97 	bl	80001d4 <__adddf3>
 80062a6:	a33e      	add	r3, pc, #248	; (adr r3, 80063a0 <__ieee754_pow+0x738>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	2000      	movs	r0, #0
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	f7fa f945 	bl	8000540 <__aeabi_dmul>
 80062b6:	4642      	mov	r2, r8
 80062b8:	ec41 0b18 	vmov	d8, r0, r1
 80062bc:	464b      	mov	r3, r9
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7f9 ff85 	bl	80001d0 <__aeabi_dsub>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4630      	mov	r0, r6
 80062cc:	4639      	mov	r1, r7
 80062ce:	f7f9 ff7f 	bl	80001d0 <__aeabi_dsub>
 80062d2:	a335      	add	r3, pc, #212	; (adr r3, 80063a8 <__ieee754_pow+0x740>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa f932 	bl	8000540 <__aeabi_dmul>
 80062dc:	a334      	add	r3, pc, #208	; (adr r3, 80063b0 <__ieee754_pow+0x748>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa f929 	bl	8000540 <__aeabi_dmul>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4630      	mov	r0, r6
 80062f4:	4639      	mov	r1, r7
 80062f6:	f7f9 ff6d 	bl	80001d4 <__adddf3>
 80062fa:	9a07      	ldr	r2, [sp, #28]
 80062fc:	4b37      	ldr	r3, [pc, #220]	; (80063dc <__ieee754_pow+0x774>)
 80062fe:	4413      	add	r3, r2
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7f9 ff66 	bl	80001d4 <__adddf3>
 8006308:	4682      	mov	sl, r0
 800630a:	9805      	ldr	r0, [sp, #20]
 800630c:	468b      	mov	fp, r1
 800630e:	f7fa f8ad 	bl	800046c <__aeabi_i2d>
 8006312:	9a07      	ldr	r2, [sp, #28]
 8006314:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <__ieee754_pow+0x778>)
 8006316:	4413      	add	r3, r2
 8006318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	4652      	mov	r2, sl
 8006322:	465b      	mov	r3, fp
 8006324:	ec51 0b18 	vmov	r0, r1, d8
 8006328:	f7f9 ff54 	bl	80001d4 <__adddf3>
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	f7f9 ff50 	bl	80001d4 <__adddf3>
 8006334:	4632      	mov	r2, r6
 8006336:	463b      	mov	r3, r7
 8006338:	f7f9 ff4c 	bl	80001d4 <__adddf3>
 800633c:	2000      	movs	r0, #0
 800633e:	4632      	mov	r2, r6
 8006340:	463b      	mov	r3, r7
 8006342:	4604      	mov	r4, r0
 8006344:	460d      	mov	r5, r1
 8006346:	f7f9 ff43 	bl	80001d0 <__aeabi_dsub>
 800634a:	4642      	mov	r2, r8
 800634c:	464b      	mov	r3, r9
 800634e:	f7f9 ff3f 	bl	80001d0 <__aeabi_dsub>
 8006352:	ec53 2b18 	vmov	r2, r3, d8
 8006356:	f7f9 ff3b 	bl	80001d0 <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4650      	mov	r0, sl
 8006360:	4659      	mov	r1, fp
 8006362:	e610      	b.n	8005f86 <__ieee754_pow+0x31e>
 8006364:	2401      	movs	r4, #1
 8006366:	e6a1      	b.n	80060ac <__ieee754_pow+0x444>
 8006368:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80063b8 <__ieee754_pow+0x750>
 800636c:	e617      	b.n	8005f9e <__ieee754_pow+0x336>
 800636e:	bf00      	nop
 8006370:	4a454eef 	.word	0x4a454eef
 8006374:	3fca7e28 	.word	0x3fca7e28
 8006378:	93c9db65 	.word	0x93c9db65
 800637c:	3fcd864a 	.word	0x3fcd864a
 8006380:	a91d4101 	.word	0xa91d4101
 8006384:	3fd17460 	.word	0x3fd17460
 8006388:	518f264d 	.word	0x518f264d
 800638c:	3fd55555 	.word	0x3fd55555
 8006390:	db6fabff 	.word	0xdb6fabff
 8006394:	3fdb6db6 	.word	0x3fdb6db6
 8006398:	33333303 	.word	0x33333303
 800639c:	3fe33333 	.word	0x3fe33333
 80063a0:	e0000000 	.word	0xe0000000
 80063a4:	3feec709 	.word	0x3feec709
 80063a8:	dc3a03fd 	.word	0xdc3a03fd
 80063ac:	3feec709 	.word	0x3feec709
 80063b0:	145b01f5 	.word	0x145b01f5
 80063b4:	be3e2fe0 	.word	0xbe3e2fe0
 80063b8:	00000000 	.word	0x00000000
 80063bc:	3ff00000 	.word	0x3ff00000
 80063c0:	7ff00000 	.word	0x7ff00000
 80063c4:	43400000 	.word	0x43400000
 80063c8:	0003988e 	.word	0x0003988e
 80063cc:	000bb679 	.word	0x000bb679
 80063d0:	08006a58 	.word	0x08006a58
 80063d4:	3ff00000 	.word	0x3ff00000
 80063d8:	40080000 	.word	0x40080000
 80063dc:	08006a78 	.word	0x08006a78
 80063e0:	08006a68 	.word	0x08006a68
 80063e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80066bc <__ieee754_pow+0xa54>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7f9 fef1 	bl	80001d4 <__adddf3>
 80063f2:	4622      	mov	r2, r4
 80063f4:	ec41 0b1a 	vmov	d10, r0, r1
 80063f8:	462b      	mov	r3, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7f9 fee7 	bl	80001d0 <__aeabi_dsub>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	ec51 0b1a 	vmov	r0, r1, d10
 800640a:	f7fa fb29 	bl	8000a60 <__aeabi_dcmpgt>
 800640e:	2800      	cmp	r0, #0
 8006410:	f47f ae04 	bne.w	800601c <__ieee754_pow+0x3b4>
 8006414:	4aa4      	ldr	r2, [pc, #656]	; (80066a8 <__ieee754_pow+0xa40>)
 8006416:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800641a:	4293      	cmp	r3, r2
 800641c:	f340 8108 	ble.w	8006630 <__ieee754_pow+0x9c8>
 8006420:	151b      	asrs	r3, r3, #20
 8006422:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006426:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800642a:	fa4a f303 	asr.w	r3, sl, r3
 800642e:	445b      	add	r3, fp
 8006430:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006434:	4e9d      	ldr	r6, [pc, #628]	; (80066ac <__ieee754_pow+0xa44>)
 8006436:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800643a:	4116      	asrs	r6, r2
 800643c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006440:	2000      	movs	r0, #0
 8006442:	ea23 0106 	bic.w	r1, r3, r6
 8006446:	f1c2 0214 	rsb	r2, r2, #20
 800644a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800644e:	fa4a fa02 	asr.w	sl, sl, r2
 8006452:	f1bb 0f00 	cmp.w	fp, #0
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4620      	mov	r0, r4
 800645c:	4629      	mov	r1, r5
 800645e:	bfb8      	it	lt
 8006460:	f1ca 0a00 	rsblt	sl, sl, #0
 8006464:	f7f9 feb4 	bl	80001d0 <__aeabi_dsub>
 8006468:	ec41 0b19 	vmov	d9, r0, r1
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	ec51 0b19 	vmov	r0, r1, d9
 8006474:	f7f9 feae 	bl	80001d4 <__adddf3>
 8006478:	a37b      	add	r3, pc, #492	; (adr r3, 8006668 <__ieee754_pow+0xa00>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	2000      	movs	r0, #0
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	f7fa f85c 	bl	8000540 <__aeabi_dmul>
 8006488:	ec53 2b19 	vmov	r2, r3, d9
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	4620      	mov	r0, r4
 8006492:	4629      	mov	r1, r5
 8006494:	f7f9 fe9c 	bl	80001d0 <__aeabi_dsub>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7f9 fe96 	bl	80001d0 <__aeabi_dsub>
 80064a4:	a372      	add	r3, pc, #456	; (adr r3, 8006670 <__ieee754_pow+0xa08>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7fa f849 	bl	8000540 <__aeabi_dmul>
 80064ae:	a372      	add	r3, pc, #456	; (adr r3, 8006678 <__ieee754_pow+0xa10>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	4680      	mov	r8, r0
 80064b6:	4689      	mov	r9, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7fa f840 	bl	8000540 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7f9 fe84 	bl	80001d4 <__adddf3>
 80064cc:	4604      	mov	r4, r0
 80064ce:	460d      	mov	r5, r1
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7f9 fe7c 	bl	80001d4 <__adddf3>
 80064dc:	4632      	mov	r2, r6
 80064de:	463b      	mov	r3, r7
 80064e0:	4680      	mov	r8, r0
 80064e2:	4689      	mov	r9, r1
 80064e4:	f7f9 fe74 	bl	80001d0 <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7f9 fe6e 	bl	80001d0 <__aeabi_dsub>
 80064f4:	4642      	mov	r2, r8
 80064f6:	4606      	mov	r6, r0
 80064f8:	460f      	mov	r7, r1
 80064fa:	464b      	mov	r3, r9
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7fa f81e 	bl	8000540 <__aeabi_dmul>
 8006504:	a35e      	add	r3, pc, #376	; (adr r3, 8006680 <__ieee754_pow+0xa18>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	4604      	mov	r4, r0
 800650c:	460d      	mov	r5, r1
 800650e:	f7fa f817 	bl	8000540 <__aeabi_dmul>
 8006512:	a35d      	add	r3, pc, #372	; (adr r3, 8006688 <__ieee754_pow+0xa20>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7f9 fe5a 	bl	80001d0 <__aeabi_dsub>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7fa f80e 	bl	8000540 <__aeabi_dmul>
 8006524:	a35a      	add	r3, pc, #360	; (adr r3, 8006690 <__ieee754_pow+0xa28>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7f9 fe53 	bl	80001d4 <__adddf3>
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	f7fa f805 	bl	8000540 <__aeabi_dmul>
 8006536:	a358      	add	r3, pc, #352	; (adr r3, 8006698 <__ieee754_pow+0xa30>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 fe48 	bl	80001d0 <__aeabi_dsub>
 8006540:	4622      	mov	r2, r4
 8006542:	462b      	mov	r3, r5
 8006544:	f7f9 fffc 	bl	8000540 <__aeabi_dmul>
 8006548:	a355      	add	r3, pc, #340	; (adr r3, 80066a0 <__ieee754_pow+0xa38>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7f9 fe41 	bl	80001d4 <__adddf3>
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f7f9 fff3 	bl	8000540 <__aeabi_dmul>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fe35 	bl	80001d0 <__aeabi_dsub>
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4640      	mov	r0, r8
 8006570:	4649      	mov	r1, r9
 8006572:	f7f9 ffe5 	bl	8000540 <__aeabi_dmul>
 8006576:	2200      	movs	r2, #0
 8006578:	ec41 0b19 	vmov	d9, r0, r1
 800657c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7f9 fe24 	bl	80001d0 <__aeabi_dsub>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	ec51 0b19 	vmov	r0, r1, d9
 8006590:	f7fa f900 	bl	8000794 <__aeabi_ddiv>
 8006594:	4632      	mov	r2, r6
 8006596:	4604      	mov	r4, r0
 8006598:	460d      	mov	r5, r1
 800659a:	463b      	mov	r3, r7
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	f7f9 ffce 	bl	8000540 <__aeabi_dmul>
 80065a4:	4632      	mov	r2, r6
 80065a6:	463b      	mov	r3, r7
 80065a8:	f7f9 fe14 	bl	80001d4 <__adddf3>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4620      	mov	r0, r4
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7f9 fe0c 	bl	80001d0 <__aeabi_dsub>
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	f7f9 fe08 	bl	80001d0 <__aeabi_dsub>
 80065c0:	460b      	mov	r3, r1
 80065c2:	4602      	mov	r2, r0
 80065c4:	493a      	ldr	r1, [pc, #232]	; (80066b0 <__ieee754_pow+0xa48>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe02 	bl	80001d0 <__aeabi_dsub>
 80065cc:	ec41 0b10 	vmov	d0, r0, r1
 80065d0:	ee10 3a90 	vmov	r3, s1
 80065d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80065d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065dc:	da2b      	bge.n	8006636 <__ieee754_pow+0x9ce>
 80065de:	4650      	mov	r0, sl
 80065e0:	f000 f95e 	bl	80068a0 <scalbn>
 80065e4:	ec51 0b10 	vmov	r0, r1, d0
 80065e8:	ec53 2b18 	vmov	r2, r3, d8
 80065ec:	f7ff bbed 	b.w	8005dca <__ieee754_pow+0x162>
 80065f0:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <__ieee754_pow+0xa4c>)
 80065f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80065f6:	429e      	cmp	r6, r3
 80065f8:	f77f af0c 	ble.w	8006414 <__ieee754_pow+0x7ac>
 80065fc:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <__ieee754_pow+0xa50>)
 80065fe:	440b      	add	r3, r1
 8006600:	4303      	orrs	r3, r0
 8006602:	d009      	beq.n	8006618 <__ieee754_pow+0x9b0>
 8006604:	ec51 0b18 	vmov	r0, r1, d8
 8006608:	2200      	movs	r2, #0
 800660a:	2300      	movs	r3, #0
 800660c:	f7fa fa0a 	bl	8000a24 <__aeabi_dcmplt>
 8006610:	3800      	subs	r0, #0
 8006612:	bf18      	it	ne
 8006614:	2001      	movne	r0, #1
 8006616:	e447      	b.n	8005ea8 <__ieee754_pow+0x240>
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	f7f9 fdd8 	bl	80001d0 <__aeabi_dsub>
 8006620:	4642      	mov	r2, r8
 8006622:	464b      	mov	r3, r9
 8006624:	f7fa fa12 	bl	8000a4c <__aeabi_dcmpge>
 8006628:	2800      	cmp	r0, #0
 800662a:	f43f aef3 	beq.w	8006414 <__ieee754_pow+0x7ac>
 800662e:	e7e9      	b.n	8006604 <__ieee754_pow+0x99c>
 8006630:	f04f 0a00 	mov.w	sl, #0
 8006634:	e71a      	b.n	800646c <__ieee754_pow+0x804>
 8006636:	ec51 0b10 	vmov	r0, r1, d0
 800663a:	4619      	mov	r1, r3
 800663c:	e7d4      	b.n	80065e8 <__ieee754_pow+0x980>
 800663e:	491c      	ldr	r1, [pc, #112]	; (80066b0 <__ieee754_pow+0xa48>)
 8006640:	2000      	movs	r0, #0
 8006642:	f7ff bb30 	b.w	8005ca6 <__ieee754_pow+0x3e>
 8006646:	2000      	movs	r0, #0
 8006648:	2100      	movs	r1, #0
 800664a:	f7ff bb2c 	b.w	8005ca6 <__ieee754_pow+0x3e>
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7ff bb28 	b.w	8005ca6 <__ieee754_pow+0x3e>
 8006656:	9204      	str	r2, [sp, #16]
 8006658:	f7ff bb7a 	b.w	8005d50 <__ieee754_pow+0xe8>
 800665c:	2300      	movs	r3, #0
 800665e:	f7ff bb64 	b.w	8005d2a <__ieee754_pow+0xc2>
 8006662:	bf00      	nop
 8006664:	f3af 8000 	nop.w
 8006668:	00000000 	.word	0x00000000
 800666c:	3fe62e43 	.word	0x3fe62e43
 8006670:	fefa39ef 	.word	0xfefa39ef
 8006674:	3fe62e42 	.word	0x3fe62e42
 8006678:	0ca86c39 	.word	0x0ca86c39
 800667c:	be205c61 	.word	0xbe205c61
 8006680:	72bea4d0 	.word	0x72bea4d0
 8006684:	3e663769 	.word	0x3e663769
 8006688:	c5d26bf1 	.word	0xc5d26bf1
 800668c:	3ebbbd41 	.word	0x3ebbbd41
 8006690:	af25de2c 	.word	0xaf25de2c
 8006694:	3f11566a 	.word	0x3f11566a
 8006698:	16bebd93 	.word	0x16bebd93
 800669c:	3f66c16c 	.word	0x3f66c16c
 80066a0:	5555553e 	.word	0x5555553e
 80066a4:	3fc55555 	.word	0x3fc55555
 80066a8:	3fe00000 	.word	0x3fe00000
 80066ac:	000fffff 	.word	0x000fffff
 80066b0:	3ff00000 	.word	0x3ff00000
 80066b4:	4090cbff 	.word	0x4090cbff
 80066b8:	3f6f3400 	.word	0x3f6f3400
 80066bc:	652b82fe 	.word	0x652b82fe
 80066c0:	3c971547 	.word	0x3c971547

080066c4 <__ieee754_sqrt>:
 80066c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c8:	ec55 4b10 	vmov	r4, r5, d0
 80066cc:	4e55      	ldr	r6, [pc, #340]	; (8006824 <__ieee754_sqrt+0x160>)
 80066ce:	43ae      	bics	r6, r5
 80066d0:	ee10 0a10 	vmov	r0, s0
 80066d4:	ee10 3a10 	vmov	r3, s0
 80066d8:	462a      	mov	r2, r5
 80066da:	4629      	mov	r1, r5
 80066dc:	d110      	bne.n	8006700 <__ieee754_sqrt+0x3c>
 80066de:	ee10 2a10 	vmov	r2, s0
 80066e2:	462b      	mov	r3, r5
 80066e4:	f7f9 ff2c 	bl	8000540 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 fd70 	bl	80001d4 <__adddf3>
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	2d00      	cmp	r5, #0
 8006702:	dc10      	bgt.n	8006726 <__ieee754_sqrt+0x62>
 8006704:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006708:	4330      	orrs	r0, r6
 800670a:	d0f5      	beq.n	80066f8 <__ieee754_sqrt+0x34>
 800670c:	b15d      	cbz	r5, 8006726 <__ieee754_sqrt+0x62>
 800670e:	ee10 2a10 	vmov	r2, s0
 8006712:	462b      	mov	r3, r5
 8006714:	ee10 0a10 	vmov	r0, s0
 8006718:	f7f9 fd5a 	bl	80001d0 <__aeabi_dsub>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	f7fa f838 	bl	8000794 <__aeabi_ddiv>
 8006724:	e7e6      	b.n	80066f4 <__ieee754_sqrt+0x30>
 8006726:	1512      	asrs	r2, r2, #20
 8006728:	d074      	beq.n	8006814 <__ieee754_sqrt+0x150>
 800672a:	07d4      	lsls	r4, r2, #31
 800672c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006730:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006738:	bf5e      	ittt	pl
 800673a:	0fda      	lsrpl	r2, r3, #31
 800673c:	005b      	lslpl	r3, r3, #1
 800673e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006742:	2400      	movs	r4, #0
 8006744:	0fda      	lsrs	r2, r3, #31
 8006746:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800674a:	107f      	asrs	r7, r7, #1
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	2516      	movs	r5, #22
 8006750:	4620      	mov	r0, r4
 8006752:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006756:	1886      	adds	r6, r0, r2
 8006758:	428e      	cmp	r6, r1
 800675a:	bfde      	ittt	le
 800675c:	1b89      	suble	r1, r1, r6
 800675e:	18b0      	addle	r0, r6, r2
 8006760:	18a4      	addle	r4, r4, r2
 8006762:	0049      	lsls	r1, r1, #1
 8006764:	3d01      	subs	r5, #1
 8006766:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800676a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800676e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006772:	d1f0      	bne.n	8006756 <__ieee754_sqrt+0x92>
 8006774:	462a      	mov	r2, r5
 8006776:	f04f 0e20 	mov.w	lr, #32
 800677a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800677e:	4281      	cmp	r1, r0
 8006780:	eb06 0c05 	add.w	ip, r6, r5
 8006784:	dc02      	bgt.n	800678c <__ieee754_sqrt+0xc8>
 8006786:	d113      	bne.n	80067b0 <__ieee754_sqrt+0xec>
 8006788:	459c      	cmp	ip, r3
 800678a:	d811      	bhi.n	80067b0 <__ieee754_sqrt+0xec>
 800678c:	f1bc 0f00 	cmp.w	ip, #0
 8006790:	eb0c 0506 	add.w	r5, ip, r6
 8006794:	da43      	bge.n	800681e <__ieee754_sqrt+0x15a>
 8006796:	2d00      	cmp	r5, #0
 8006798:	db41      	blt.n	800681e <__ieee754_sqrt+0x15a>
 800679a:	f100 0801 	add.w	r8, r0, #1
 800679e:	1a09      	subs	r1, r1, r0
 80067a0:	459c      	cmp	ip, r3
 80067a2:	bf88      	it	hi
 80067a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80067a8:	eba3 030c 	sub.w	r3, r3, ip
 80067ac:	4432      	add	r2, r6
 80067ae:	4640      	mov	r0, r8
 80067b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80067b4:	f1be 0e01 	subs.w	lr, lr, #1
 80067b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80067bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067c4:	d1db      	bne.n	800677e <__ieee754_sqrt+0xba>
 80067c6:	430b      	orrs	r3, r1
 80067c8:	d006      	beq.n	80067d8 <__ieee754_sqrt+0x114>
 80067ca:	1c50      	adds	r0, r2, #1
 80067cc:	bf13      	iteet	ne
 80067ce:	3201      	addne	r2, #1
 80067d0:	3401      	addeq	r4, #1
 80067d2:	4672      	moveq	r2, lr
 80067d4:	f022 0201 	bicne.w	r2, r2, #1
 80067d8:	1063      	asrs	r3, r4, #1
 80067da:	0852      	lsrs	r2, r2, #1
 80067dc:	07e1      	lsls	r1, r4, #31
 80067de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80067e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80067e6:	bf48      	it	mi
 80067e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80067ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80067f0:	4614      	mov	r4, r2
 80067f2:	e781      	b.n	80066f8 <__ieee754_sqrt+0x34>
 80067f4:	0ad9      	lsrs	r1, r3, #11
 80067f6:	3815      	subs	r0, #21
 80067f8:	055b      	lsls	r3, r3, #21
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d0fa      	beq.n	80067f4 <__ieee754_sqrt+0x130>
 80067fe:	02cd      	lsls	r5, r1, #11
 8006800:	d50a      	bpl.n	8006818 <__ieee754_sqrt+0x154>
 8006802:	f1c2 0420 	rsb	r4, r2, #32
 8006806:	fa23 f404 	lsr.w	r4, r3, r4
 800680a:	1e55      	subs	r5, r2, #1
 800680c:	4093      	lsls	r3, r2
 800680e:	4321      	orrs	r1, r4
 8006810:	1b42      	subs	r2, r0, r5
 8006812:	e78a      	b.n	800672a <__ieee754_sqrt+0x66>
 8006814:	4610      	mov	r0, r2
 8006816:	e7f0      	b.n	80067fa <__ieee754_sqrt+0x136>
 8006818:	0049      	lsls	r1, r1, #1
 800681a:	3201      	adds	r2, #1
 800681c:	e7ef      	b.n	80067fe <__ieee754_sqrt+0x13a>
 800681e:	4680      	mov	r8, r0
 8006820:	e7bd      	b.n	800679e <__ieee754_sqrt+0xda>
 8006822:	bf00      	nop
 8006824:	7ff00000 	.word	0x7ff00000

08006828 <with_errno>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	460d      	mov	r5, r1
 800682e:	4616      	mov	r6, r2
 8006830:	f000 f8bc 	bl	80069ac <__errno>
 8006834:	4629      	mov	r1, r5
 8006836:	6006      	str	r6, [r0, #0]
 8006838:	4620      	mov	r0, r4
 800683a:	bd70      	pop	{r4, r5, r6, pc}

0800683c <xflow>:
 800683c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800683e:	4614      	mov	r4, r2
 8006840:	461d      	mov	r5, r3
 8006842:	b108      	cbz	r0, 8006848 <xflow+0xc>
 8006844:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006848:	e9cd 2300 	strd	r2, r3, [sp]
 800684c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006850:	4620      	mov	r0, r4
 8006852:	4629      	mov	r1, r5
 8006854:	f7f9 fe74 	bl	8000540 <__aeabi_dmul>
 8006858:	2222      	movs	r2, #34	; 0x22
 800685a:	b003      	add	sp, #12
 800685c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006860:	f7ff bfe2 	b.w	8006828 <with_errno>

08006864 <__math_uflow>:
 8006864:	b508      	push	{r3, lr}
 8006866:	2200      	movs	r2, #0
 8006868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800686c:	f7ff ffe6 	bl	800683c <xflow>
 8006870:	ec41 0b10 	vmov	d0, r0, r1
 8006874:	bd08      	pop	{r3, pc}

08006876 <__math_oflow>:
 8006876:	b508      	push	{r3, lr}
 8006878:	2200      	movs	r2, #0
 800687a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800687e:	f7ff ffdd 	bl	800683c <xflow>
 8006882:	ec41 0b10 	vmov	d0, r0, r1
 8006886:	bd08      	pop	{r3, pc}

08006888 <finite>:
 8006888:	b082      	sub	sp, #8
 800688a:	ed8d 0b00 	vstr	d0, [sp]
 800688e:	9801      	ldr	r0, [sp, #4]
 8006890:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006894:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006898:	0fc0      	lsrs	r0, r0, #31
 800689a:	b002      	add	sp, #8
 800689c:	4770      	bx	lr
	...

080068a0 <scalbn>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	ec55 4b10 	vmov	r4, r5, d0
 80068a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80068aa:	4606      	mov	r6, r0
 80068ac:	462b      	mov	r3, r5
 80068ae:	b99a      	cbnz	r2, 80068d8 <scalbn+0x38>
 80068b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068b4:	4323      	orrs	r3, r4
 80068b6:	d036      	beq.n	8006926 <scalbn+0x86>
 80068b8:	4b39      	ldr	r3, [pc, #228]	; (80069a0 <scalbn+0x100>)
 80068ba:	4629      	mov	r1, r5
 80068bc:	ee10 0a10 	vmov	r0, s0
 80068c0:	2200      	movs	r2, #0
 80068c2:	f7f9 fe3d 	bl	8000540 <__aeabi_dmul>
 80068c6:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <scalbn+0x104>)
 80068c8:	429e      	cmp	r6, r3
 80068ca:	4604      	mov	r4, r0
 80068cc:	460d      	mov	r5, r1
 80068ce:	da10      	bge.n	80068f2 <scalbn+0x52>
 80068d0:	a32b      	add	r3, pc, #172	; (adr r3, 8006980 <scalbn+0xe0>)
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	e03a      	b.n	800694e <scalbn+0xae>
 80068d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80068dc:	428a      	cmp	r2, r1
 80068de:	d10c      	bne.n	80068fa <scalbn+0x5a>
 80068e0:	ee10 2a10 	vmov	r2, s0
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fc74 	bl	80001d4 <__adddf3>
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	e019      	b.n	8006926 <scalbn+0x86>
 80068f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068f6:	460b      	mov	r3, r1
 80068f8:	3a36      	subs	r2, #54	; 0x36
 80068fa:	4432      	add	r2, r6
 80068fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006900:	428a      	cmp	r2, r1
 8006902:	dd08      	ble.n	8006916 <scalbn+0x76>
 8006904:	2d00      	cmp	r5, #0
 8006906:	a120      	add	r1, pc, #128	; (adr r1, 8006988 <scalbn+0xe8>)
 8006908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800690c:	da1c      	bge.n	8006948 <scalbn+0xa8>
 800690e:	a120      	add	r1, pc, #128	; (adr r1, 8006990 <scalbn+0xf0>)
 8006910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006914:	e018      	b.n	8006948 <scalbn+0xa8>
 8006916:	2a00      	cmp	r2, #0
 8006918:	dd08      	ble.n	800692c <scalbn+0x8c>
 800691a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800691e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006926:	ec45 4b10 	vmov	d0, r4, r5
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006930:	da19      	bge.n	8006966 <scalbn+0xc6>
 8006932:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006936:	429e      	cmp	r6, r3
 8006938:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800693c:	dd0a      	ble.n	8006954 <scalbn+0xb4>
 800693e:	a112      	add	r1, pc, #72	; (adr r1, 8006988 <scalbn+0xe8>)
 8006940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e2      	bne.n	800690e <scalbn+0x6e>
 8006948:	a30f      	add	r3, pc, #60	; (adr r3, 8006988 <scalbn+0xe8>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 fdf7 	bl	8000540 <__aeabi_dmul>
 8006952:	e7cb      	b.n	80068ec <scalbn+0x4c>
 8006954:	a10a      	add	r1, pc, #40	; (adr r1, 8006980 <scalbn+0xe0>)
 8006956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0b8      	beq.n	80068d0 <scalbn+0x30>
 800695e:	a10e      	add	r1, pc, #56	; (adr r1, 8006998 <scalbn+0xf8>)
 8006960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006964:	e7b4      	b.n	80068d0 <scalbn+0x30>
 8006966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800696a:	3236      	adds	r2, #54	; 0x36
 800696c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006970:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006974:	4620      	mov	r0, r4
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <scalbn+0x108>)
 8006978:	2200      	movs	r2, #0
 800697a:	e7e8      	b.n	800694e <scalbn+0xae>
 800697c:	f3af 8000 	nop.w
 8006980:	c2f8f359 	.word	0xc2f8f359
 8006984:	01a56e1f 	.word	0x01a56e1f
 8006988:	8800759c 	.word	0x8800759c
 800698c:	7e37e43c 	.word	0x7e37e43c
 8006990:	8800759c 	.word	0x8800759c
 8006994:	fe37e43c 	.word	0xfe37e43c
 8006998:	c2f8f359 	.word	0xc2f8f359
 800699c:	81a56e1f 	.word	0x81a56e1f
 80069a0:	43500000 	.word	0x43500000
 80069a4:	ffff3cb0 	.word	0xffff3cb0
 80069a8:	3c900000 	.word	0x3c900000

080069ac <__errno>:
 80069ac:	4b01      	ldr	r3, [pc, #4]	; (80069b4 <__errno+0x8>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000020 	.word	0x20000020

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
