
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a0  080071a0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080071a0  080071a0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071a0  080071a0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080071a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000278c  20000040  080071e8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027cc  080071e8  000227cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e54b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bce  00000000  00000000  0002e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00031190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000321a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026654  00000000  00000000  00033090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010037  00000000  00000000  000596e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c869c  00000000  00000000  0006971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131db7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004190  00000000  00000000  00131e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006484 	.word	0x08006484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08006484 	.word	0x08006484

080001c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	609a      	str	r2, [r3, #8]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b087      	sub	sp, #28
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60f8      	str	r0, [r7, #12]
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3330      	adds	r3, #48	; 0x30
 80001fe:	461a      	mov	r2, r3
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	0a1b      	lsrs	r3, r3, #8
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	f003 030c 	and.w	r3, r3, #12
 800020a:	4413      	add	r3, r2
 800020c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	f003 031f 	and.w	r3, r3, #31
 8000218:	211f      	movs	r1, #31
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	43db      	mvns	r3, r3
 8000220:	401a      	ands	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	0e9b      	lsrs	r3, r3, #26
 8000226:	f003 011f 	and.w	r1, r3, #31
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	f003 031f 	and.w	r3, r3, #31
 8000230:	fa01 f303 	lsl.w	r3, r1, r3
 8000234:	431a      	orrs	r2, r3
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr

08000246 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000246:	b480      	push	{r7}
 8000248:	b087      	sub	sp, #28
 800024a:	af00      	add	r7, sp, #0
 800024c:	60f8      	str	r0, [r7, #12]
 800024e:	60b9      	str	r1, [r7, #8]
 8000250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3314      	adds	r3, #20
 8000256:	461a      	mov	r2, r3
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	0e5b      	lsrs	r3, r3, #25
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	4413      	add	r3, r2
 8000264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	0d1b      	lsrs	r3, r3, #20
 800026e:	f003 031f 	and.w	r3, r3, #31
 8000272:	2107      	movs	r1, #7
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	43db      	mvns	r3, r3
 800027a:	401a      	ands	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	0d1b      	lsrs	r3, r3, #20
 8000280:	f003 031f 	and.w	r3, r3, #31
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000290:	bf00      	nop
 8000292:	371c      	adds	r7, #28
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80002b4:	43db      	mvns	r3, r3
 80002b6:	401a      	ands	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0318 	and.w	r3, r3, #24
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80002c0:	40d9      	lsrs	r1, r3
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	400b      	ands	r3, r1
 80002c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80002ca:	431a      	orrs	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	0007ffff 	.word	0x0007ffff

080002e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80002f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800031c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <LL_RCC_SetADCClockSource+0x28>)
 800033a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800033e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000342:	4905      	ldr	r1, [pc, #20]	; (8000358 <LL_RCC_SetADCClockSource+0x28>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4313      	orrs	r3, r2
 8000348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000

0800035c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037a:	68fb      	ldr	r3, [r7, #12]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	431a      	orrs	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b094      	sub	sp, #80	; 0x50
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80003b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80003c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]
 80003d2:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 80003f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 80003f6:	f7ff ff9b 	bl	8000330 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 80003fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003fe:	f7ff ffad 	bl	800035c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000402:	2004      	movs	r0, #4
 8000404:	f7ff ffaa 	bl	800035c <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000408:	2304      	movs	r3, #4
 800040a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800040c:	2303      	movs	r3, #3
 800040e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	4831      	ldr	r0, [pc, #196]	; (80004e0 <MX_ADC1_Init+0x130>)
 800041a:	f005 f9dd 	bl	80057d8 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 800041e:	2104      	movs	r1, #4
 8000420:	482f      	ldr	r0, [pc, #188]	; (80004e0 <MX_ADC1_Init+0x130>)
 8000422:	f7ff ffb3 	bl	800038c <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000426:	2300      	movs	r3, #0
 8000428:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800042a:	2300      	movs	r3, #0
 800042c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000436:	4619      	mov	r1, r3
 8000438:	482a      	ldr	r0, [pc, #168]	; (80004e4 <MX_ADC1_Init+0x134>)
 800043a:	f004 fdeb 	bl	8005014 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800043e:	2300      	movs	r3, #0
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800044a:	2300      	movs	r3, #0
 800044c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800044e:	2300      	movs	r3, #0
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000452:	2300      	movs	r3, #0
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045a:	4619      	mov	r1, r3
 800045c:	4821      	ldr	r0, [pc, #132]	; (80004e4 <MX_ADC1_Init+0x134>)
 800045e:	f004 fdff 	bl	8005060 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	4619      	mov	r1, r3
 8000470:	481d      	ldr	r0, [pc, #116]	; (80004e8 <MX_ADC1_Init+0x138>)
 8000472:	f004 fd87 	bl	8004f84 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000476:	2100      	movs	r1, #0
 8000478:	481b      	ldr	r0, [pc, #108]	; (80004e8 <MX_ADC1_Init+0x138>)
 800047a:	f7ff fea5 	bl	80001c8 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800047e:	4819      	ldr	r0, [pc, #100]	; (80004e4 <MX_ADC1_Init+0x134>)
 8000480:	f7ff ff30 	bl	80002e4 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000484:	4817      	ldr	r0, [pc, #92]	; (80004e4 <MX_ADC1_Init+0x134>)
 8000486:	f7ff ff3f 	bl	8000308 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_ADC1_Init+0x13c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	099b      	lsrs	r3, r3, #6
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <MX_ADC1_Init+0x140>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	099a      	lsrs	r2, r3, #6
 8000498:	4613      	mov	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_ADC1_Init+0x144>)
 80004a4:	fba3 2302 	umull	r2, r3, r3, r2
 80004a8:	08db      	lsrs	r3, r3, #3
 80004aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80004ac:	e002      	b.n	80004b4 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 80004ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004b0:	3b01      	subs	r3, #1
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80004b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 80004ba:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <MX_ADC1_Init+0x148>)
 80004bc:	2106      	movs	r1, #6
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <MX_ADC1_Init+0x134>)
 80004c0:	f7ff fe95 	bl	80001ee <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80004c4:	2200      	movs	r2, #0
 80004c6:	490c      	ldr	r1, [pc, #48]	; (80004f8 <MX_ADC1_Init+0x148>)
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <MX_ADC1_Init+0x134>)
 80004ca:	f7ff febc 	bl	8000246 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80004ce:	227f      	movs	r2, #127	; 0x7f
 80004d0:	4909      	ldr	r1, [pc, #36]	; (80004f8 <MX_ADC1_Init+0x148>)
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_ADC1_Init+0x134>)
 80004d4:	f7ff fee2 	bl	800029c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3750      	adds	r7, #80	; 0x50
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	48000800 	.word	0x48000800
 80004e4:	50040000 	.word	0x50040000
 80004e8:	50040300 	.word	0x50040300
 80004ec:	20000004 	.word	0x20000004
 80004f0:	053e2d63 	.word	0x053e2d63
 80004f4:	cccccccd 	.word	0xcccccccd
 80004f8:	0c900008 	.word	0x0c900008

080004fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]
 800051e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 800053e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000542:	f7ff fef5 	bl	8000330 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000546:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800054a:	f7ff ff07 	bl	800035c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800054e:	2004      	movs	r0, #4
 8000550:	f7ff ff04 	bl	800035c <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000554:	2308      	movs	r3, #8
 8000556:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4830      	ldr	r0, [pc, #192]	; (8000628 <MX_ADC2_Init+0x12c>)
 8000566:	f005 f937 	bl	80057d8 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 800056a:	2108      	movs	r1, #8
 800056c:	482e      	ldr	r0, [pc, #184]	; (8000628 <MX_ADC2_Init+0x12c>)
 800056e:	f7ff ff0d 	bl	800038c <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000572:	2300      	movs	r3, #0
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000576:	2300      	movs	r3, #0
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800057e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000582:	4619      	mov	r1, r3
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <MX_ADC2_Init+0x130>)
 8000586:	f004 fd45 	bl	8005014 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800058a:	2300      	movs	r3, #0
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000596:	2300      	movs	r3, #0
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800059e:	2300      	movs	r3, #0
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	4619      	mov	r1, r3
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <MX_ADC2_Init+0x130>)
 80005aa:	f004 fd59 	bl	8005060 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4619      	mov	r1, r3
 80005b8:	481d      	ldr	r0, [pc, #116]	; (8000630 <MX_ADC2_Init+0x134>)
 80005ba:	f004 fce3 	bl	8004f84 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 80005be:	2100      	movs	r1, #0
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <MX_ADC2_Init+0x134>)
 80005c2:	f7ff fe01 	bl	80001c8 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <MX_ADC2_Init+0x130>)
 80005c8:	f7ff fe8c 	bl	80002e4 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <MX_ADC2_Init+0x130>)
 80005ce:	f7ff fe9b 	bl	8000308 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_ADC2_Init+0x138>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	099b      	lsrs	r3, r3, #6
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <MX_ADC2_Init+0x13c>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	099a      	lsrs	r2, r3, #6
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC2_Init+0x140>)
 80005ec:	fba3 2302 	umull	r2, r3, r3, r2
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80005f4:	e002      	b.n	80005fc <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 80005f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005f8:	3b01      	subs	r3, #1
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80005fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f9      	bne.n	80005f6 <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MX_ADC2_Init+0x144>)
 8000604:	2106      	movs	r1, #6
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <MX_ADC2_Init+0x130>)
 8000608:	f7ff fdf1 	bl	80001ee <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800060c:	2200      	movs	r2, #0
 800060e:	490c      	ldr	r1, [pc, #48]	; (8000640 <MX_ADC2_Init+0x144>)
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_ADC2_Init+0x130>)
 8000612:	f7ff fe18 	bl	8000246 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000616:	227f      	movs	r2, #127	; 0x7f
 8000618:	4909      	ldr	r1, [pc, #36]	; (8000640 <MX_ADC2_Init+0x144>)
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_ADC2_Init+0x130>)
 800061c:	f7ff fe3e 	bl	800029c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	48000800 	.word	0x48000800
 800062c:	50040100 	.word	0x50040100
 8000630:	50040300 	.word	0x50040300
 8000634:	20000004 	.word	0x20000004
 8000638:	053e2d63 	.word	0x053e2d63
 800063c:	cccccccd 	.word	0xcccccccd
 8000640:	10c00010 	.word	0x10c00010

08000644 <LL_AHB2_GRP1_EnableClock>:
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800064e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800065a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000674:	b480      	push	{r7}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <LL_SYSCFG_SetEXTISource+0x68>)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	3302      	adds	r3, #2
 8000686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	0c1b      	lsrs	r3, r3, #16
 800068e:	43db      	mvns	r3, r3
 8000690:	ea02 0103 	and.w	r1, r2, r3
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	0c1b      	lsrs	r3, r3, #16
 8000698:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80006ac:	2320      	movs	r3, #32
 80006ae:	e003      	b.n	80006b8 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	fa03 f202 	lsl.w	r2, r3, r2
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <LL_SYSCFG_SetEXTISource+0x68>)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	430a      	orrs	r2, r1
 80006c8:	3302      	adds	r3, #2
 80006ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006ce:	bf00      	nop
 80006d0:	371c      	adds	r7, #28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40010000 	.word	0x40010000

080006e0 <LL_GPIO_SetPinMode>:
{
 80006e0:	b480      	push	{r7}
 80006e2:	b08b      	sub	sp, #44	; 0x2c
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa93 f3a3 	rbit	r3, r3
 80006fa:	613b      	str	r3, [r7, #16]
  return result;
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000706:	2320      	movs	r3, #32
 8000708:	e003      	b.n	8000712 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	fab3 f383 	clz	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	2103      	movs	r1, #3
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43db      	mvns	r3, r3
 800071c:	401a      	ands	r2, r3
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	fa93 f3a3 	rbit	r3, r3
 8000728:	61fb      	str	r3, [r7, #28]
  return result;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000734:	2320      	movs	r3, #32
 8000736:	e003      	b.n	8000740 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	fab3 f383 	clz	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	431a      	orrs	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	372c      	adds	r7, #44	; 0x2c
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <LL_GPIO_SetPinPull>:
{
 800075a:	b480      	push	{r7}
 800075c:	b08b      	sub	sp, #44	; 0x2c
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	68da      	ldr	r2, [r3, #12]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	fa93 f3a3 	rbit	r3, r3
 8000774:	613b      	str	r3, [r7, #16]
  return result;
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000780:	2320      	movs	r3, #32
 8000782:	e003      	b.n	800078c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fab3 f383 	clz	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	2103      	movs	r1, #3
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
 8000794:	43db      	mvns	r3, r3
 8000796:	401a      	ands	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	fa93 f3a3 	rbit	r3, r3
 80007a2:	61fb      	str	r3, [r7, #28]
  return result;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80007ae:	2320      	movs	r3, #32
 80007b0:	e003      	b.n	80007ba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	fab3 f383 	clz	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	431a      	orrs	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	60da      	str	r2, [r3, #12]
}
 80007c8:	bf00      	nop
 80007ca:	372c      	adds	r7, #44	; 0x2c
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000812:	2004      	movs	r0, #4
 8000814:	f7ff ff16 	bl	8000644 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	f7ff ff13 	bl	8000644 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ff10 	bl	8000644 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff0d 	bl	8000644 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin);
 800082a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800082e:	483f      	ldr	r0, [pc, #252]	; (800092c <MX_GPIO_Init+0x13c>)
 8000830:	f7ff ffd0 	bl	80007d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENC_CSn_GPIO_Port, ENC_CSn_Pin);
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	483e      	ldr	r0, [pc, #248]	; (8000930 <MX_GPIO_Init+0x140>)
 8000838:	f7ff ffcc 	bl	80007d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f7ff ffc6 	bl	80007d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000848:	493a      	ldr	r1, [pc, #232]	; (8000934 <MX_GPIO_Init+0x144>)
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff ff12 	bl	8000674 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000866:	2302      	movs	r3, #2
 8000868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fd6f 	bl	8005354 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087c:	482c      	ldr	r0, [pc, #176]	; (8000930 <MX_GPIO_Init+0x140>)
 800087e:	f7ff ff6c 	bl	800075a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_GPIO_Init+0x140>)
 800088a:	f7ff ff29 	bl	80006e0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|ENC_CLK_Pin;
 800088e:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8000892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4820      	ldr	r0, [pc, #128]	; (800092c <MX_GPIO_Init+0x13c>)
 80008aa:	f004 ff95 	bl	80057d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_GPIO_Init+0x13c>)
 80008ca:	f004 ff85 	bl	80057d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CSn_Pin;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_CSn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0x140>)
 80008e8:	f004 ff76 	bl	80057d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_DO_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_DO_GPIO_Port, &GPIO_InitStruct);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_GPIO_Init+0x140>)
 80008fe:	f004 ff6b 	bl	80057d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000906:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000908:	2301      	movs	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f004 ff5a 	bl	80057d8 <LL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	48000400 	.word	0x48000400
 8000930:	48000800 	.word	0x48000800
 8000934:	00f00003 	.word	0x00f00003

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4907      	ldr	r1, [pc, #28]	; (800098c <__NVIC_EnableIRQ+0x38>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60da      	str	r2, [r3, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60da      	str	r2, [r3, #12]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	f023 0203 	bic.w	r2, r3, #3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	621a      	str	r2, [r3, #32]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60da      	str	r2, [r3, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	f023 0201 	bic.w	r2, r3, #1
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60da      	str	r2, [r3, #12]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <LL_RCC_SetLPTIMClockSource>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000b5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0c1b      	lsrs	r3, r3, #16
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	43db      	mvns	r3, r3
 8000b66:	401a      	ands	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	4904      	ldr	r1, [pc, #16]	; (8000b80 <LL_RCC_SetLPTIMClockSource+0x30>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8000bb8:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8000bbc:	f7ff ffc8 	bl	8000b50 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8000bc0:	2020      	movs	r0, #32
 8000bc2:	f7ff ffdf 	bl	8000b84 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bc6:	f7ff feb7 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff07 	bl	80009e4 <NVIC_EncodePriority>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2042      	movs	r0, #66	; 0x42
 8000bdc:	f7ff fed8 	bl	8000990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8000be0:	2042      	movs	r0, #66	; 0x42
 8000be2:	f7ff feb7 	bl	8000954 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000be6:	2100      	movs	r1, #0
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000bea:	f7ff ff9d 	bl	8000b28 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000bf2:	f7ff ff63 	bl	8000abc <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000bfa:	f7ff ff4c 	bl	8000a96 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000c02:	f7ff ff22 	bl	8000a4a <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000c06:	2100      	movs	r1, #0
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000c0a:	f7ff ff31 	bl	8000a70 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000c10:	f7ff ff7a 	bl	8000b08 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4802      	ldr	r0, [pc, #8]	; (8000c20 <MX_LPTIM2_Init+0x6c>)
 8000c18:	f7ff ff63 	bl	8000ae2 <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40009400 	.word	0x40009400

08000c24 <__NVIC_SetPriorityGrouping>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LL_LPTIM_Enable>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_LPTIM_StartCounter>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	f023 0206 	bic.w	r2, r3, #6
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	611a      	str	r2, [r3, #16]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_LPTIM_SetAutoReload>:
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	041b      	lsls	r3, r3, #16
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f043 0202 	orr.w	r2, r3, #2
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_RCC_LSE_Enable>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <LL_RCC_LSE_Enable+0x20>)
 8000d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <LL_RCC_LSE_Enable+0x20>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <LL_RCC_LSE_SetDriveCapability>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d52:	f023 0218 	bic.w	r2, r3, #24
 8000d56:	4905      	ldr	r1, [pc, #20]	; (8000d6c <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000

08000d70 <LL_RCC_LSE_IsReady>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <LL_RCC_LSE_IsReady+0x24>)
 8000d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d101      	bne.n	8000d86 <LL_RCC_LSE_IsReady+0x16>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <LL_RCC_LSE_IsReady+0x18>
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_RCC_MSI_Enable>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <LL_RCC_MSI_Enable+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <LL_RCC_MSI_Enable+0x1c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <LL_RCC_MSI_IsReady>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LL_RCC_MSI_IsReady+0x20>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d101      	bne.n	8000dcc <LL_RCC_MSI_IsReady+0x14>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <LL_RCC_MSI_IsReady+0x16>
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_MSI_EnablePLLMode>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_MSI_EnableRangeSelection>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <LL_RCC_MSI_SetRange>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <LL_RCC_MSI_SetRange+0x24>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e2c:	4904      	ldr	r1, [pc, #16]	; (8000e40 <LL_RCC_MSI_SetRange+0x24>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000

08000e44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	4904      	ldr	r1, [pc, #16]	; (8000e6c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_RCC_SetSysClkSource>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <LL_RCC_SetSysClkSource+0x24>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f023 0203 	bic.w	r2, r3, #3
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <LL_RCC_SetSysClkSource+0x24>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000

08000e98 <LL_RCC_GetSysClkSource>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LL_RCC_GetSysClkSource+0x18>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_SetAHBPrescaler>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec4:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_SetAPB1Prescaler>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000eec:	4904      	ldr	r1, [pc, #16]	; (8000f00 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000

08000f04 <LL_RCC_SetAPB2Prescaler>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f14:	4904      	ldr	r1, [pc, #16]	; (8000f28 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000

08000f2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <LL_RCC_PLL_Enable+0x1c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <LL_RCC_PLL_Enable+0x1c>)
 8000f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <LL_RCC_PLL_IsReady+0x24>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f5c:	d101      	bne.n	8000f62 <LL_RCC_PLL_IsReady+0x16>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <LL_RCC_PLL_IsReady+0x18>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	4311      	orrs	r1, r2
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	4904      	ldr	r1, [pc, #16]	; (8000fac <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	f9ff808c 	.word	0xf9ff808c

08000fb4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <LL_APB1_GRP1_EnableClock>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000

08001004 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <LL_APB2_GRP1_EnableClock+0x2c>)
 800100e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4313      	orrs	r3, r2
 8001016:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <LL_APB2_GRP1_EnableClock+0x2c>)
 800101a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000

08001034 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <LL_FLASH_SetLatency+0x24>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 0207 	bic.w	r2, r3, #7
 8001044:	4904      	ldr	r1, [pc, #16]	; (8001058 <LL_FLASH_SetLatency+0x24>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40022000 	.word	0x40022000

0800105c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <LL_FLASH_GetLatency+0x18>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0307 	and.w	r3, r3, #7
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_SYSTICK_EnableIT+0x1c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <LL_SYSTICK_EnableIT+0x1c>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40007000 	.word	0x40007000

080010c0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <LL_PWR_EnableBkUpAccess+0x1c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <LL_PWR_EnableBkUpAccess+0x1c>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40007000 	.word	0x40007000

080010e0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff7c 	bl	8001004 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800110c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001110:	f7ff ff60 	bl	8000fd4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f7ff fd85 	bl	8000c24 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f871 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f7ff fb67 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001122:	f000 fee1 	bl	8001ee8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001126:	f000 fc7d 	bl	8001a24 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 800112a:	f7ff fd43 	bl	8000bb4 <MX_LPTIM2_Init>
  MX_SPI2_Init();
 800112e:	f000 fccf 	bl	8001ad0 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001132:	f7ff f9e3 	bl	80004fc <MX_ADC2_Init>
  MX_ADC1_Init();
 8001136:	f7ff f93b 	bl	80003b0 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t enc;
	enc.CSn_GPIOx	= ENC_CSn_GPIO_Port;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <main+0xdc>)
 800113c:	603b      	str	r3, [r7, #0]
	enc.CSn_Pin		= ENC_CSn_Pin;
 800113e:	2340      	movs	r3, #64	; 0x40
 8001140:	81bb      	strh	r3, [r7, #12]
	enc.CLK_GPIOx	= ENC_CLK_GPIO_Port;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <main+0xe0>)
 8001144:	607b      	str	r3, [r7, #4]
	enc.CLK_Pin		= ENC_CLK_Pin;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	81fb      	strh	r3, [r7, #14]
	enc.DO_GPIOx	= ENC_DO_GPIO_Port;
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <main+0xdc>)
 800114c:	60bb      	str	r3, [r7, #8]
	enc.DO_Pin		= ENC_DO_Pin;
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	823b      	strh	r3, [r7, #16]
/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	// Enable Systick interrupt
	LL_SYSTICK_EnableIT();
 8001152:	f7ff ff91 	bl	8001078 <LL_SYSTICK_EnableIT>

	// Start LPTIM2 interrupt
	LL_LPTIM_Enable(LPTIM2);
 8001156:	4823      	ldr	r0, [pc, #140]	; (80011e4 <main+0xe4>)
 8001158:	f7ff fd9c 	bl	8000c94 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 800115c:	4821      	ldr	r0, [pc, #132]	; (80011e4 <main+0xe4>)
 800115e:	f7ff fdcf 	bl	8000d00 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload( LPTIM2, LPTIM2_PERIOD );
 8001162:	213f      	movs	r1, #63	; 0x3f
 8001164:	481f      	ldr	r0, [pc, #124]	; (80011e4 <main+0xe4>)
 8001166:	f7ff fdb8 	bl	8000cda <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter( LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS );
 800116a:	2104      	movs	r1, #4
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <main+0xe4>)
 800116e:	f7ff fda1 	bl	8000cb4 <LL_LPTIM_StartCounter>

	// Enable peripherals
	LL_SPI_Enable(SPI1);
 8001172:	481d      	ldr	r0, [pc, #116]	; (80011e8 <main+0xe8>)
 8001174:	f7ff ffb4 	bl	80010e0 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <main+0xec>)
 800117a:	f7ff ffb1 	bl	80010e0 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 800117e:	481c      	ldr	r0, [pc, #112]	; (80011f0 <main+0xf0>)
 8001180:	f7ff fd74 	bl	8000c6c <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <main+0xf4>)
 8001186:	f7ff fd71 	bl	8000c6c <LL_ADC_Enable>

	// Initialize devices
	CAN_configure();
 800118a:	f001 fb23 	bl	80027d4 <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <main+0xf8>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f84d 	bl	8002232 <EPOS4_SetCSTMode>
	AS5145B_Init(&enc);
 8001198:	463b      	mov	r3, r7
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ff52 	bl	8002044 <AS5145B_Init>
	systick_app_timer_module_init();
 80011a0:	f000 fe26 	bl	8001df0 <systick_app_timer_module_init>
	mpu9255_init(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f003 fe53 	bl	8004e50 <mpu9255_init>
	readTimer_event_handler();
 80011aa:	f003 fd6b 	bl	8004c84 <readTimer_event_handler>

	// Remove spikes from beginning
	for ( uint16_t i = 0; i < 1000; i++ );
 80011ae:	2300      	movs	r3, #0
 80011b0:	82fb      	strh	r3, [r7, #22]
 80011b2:	e002      	b.n	80011ba <main+0xba>
 80011b4:	8afb      	ldrh	r3, [r7, #22]
 80011b6:	3301      	adds	r3, #1
 80011b8:	82fb      	strh	r3, [r7, #22]
 80011ba:	8afb      	ldrh	r3, [r7, #22]
 80011bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c0:	d3f8      	bcc.n	80011b4 <main+0xb4>

/*******************************************************************************
* TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ReadOnly);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 f8d0 	bl	8001368 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while (1)
  {
	  if (isProsthesisControlRequired)
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <main+0xfc>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0fb      	beq.n	80011c8 <main+0xc8>
	  {
		  RunProsthesisControl();
 80011d0:	f000 f8b6 	bl	8001340 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <main+0xfc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
	  if (isProsthesisControlRequired)
 80011da:	e7f5      	b.n	80011c8 <main+0xc8>
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000400 	.word	0x48000400
 80011e4:	40009400 	.word	0x40009400
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40003800 	.word	0x40003800
 80011f0:	50040000 	.word	0x50040000
 80011f4:	50040100 	.word	0x50040100
 80011f8:	20000000 	.word	0x20000000
 80011fc:	2000005c 	.word	0x2000005c

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001204:	2004      	movs	r0, #4
 8001206:	f7ff ff15 	bl	8001034 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800120a:	bf00      	nop
 800120c:	f7ff ff26 	bl	800105c <LL_FLASH_GetLatency>
 8001210:	4603      	mov	r3, r0
 8001212:	2b04      	cmp	r3, #4
 8001214:	d1fa      	bne.n	800120c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001216:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121a:	f7ff ff3d 	bl	8001098 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 800121e:	f7ff fdbb 	bl	8000d98 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001222:	bf00      	nop
 8001224:	f7ff fdc8 	bl	8000db8 <LL_RCC_MSI_IsReady>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d1fa      	bne.n	8001224 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800122e:	f7ff fde5 	bl	8000dfc <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001232:	20b0      	movs	r0, #176	; 0xb0
 8001234:	f7ff fdf2 	bl	8000e1c <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fe03 	bl	8000e44 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 800123e:	f7ff ff3f 	bl	80010c0 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fd7e 	bl	8000d44 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001248:	f7ff fd6a 	bl	8000d20 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 800124c:	bf00      	nop
 800124e:	f7ff fd8f 	bl	8000d70 <LL_RCC_LSE_IsReady>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d1fa      	bne.n	800124e <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001258:	f7ff fdc0 	bl	8000ddc <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 800125c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001260:	2228      	movs	r2, #40	; 0x28
 8001262:	2150      	movs	r1, #80	; 0x50
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fe85 	bl	8000f74 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800126a:	f7ff fea3 	bl	8000fb4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800126e:	f7ff fe5d 	bl	8000f2c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001272:	bf00      	nop
 8001274:	f7ff fe6a 	bl	8000f4c <LL_RCC_PLL_IsReady>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d1fa      	bne.n	8001274 <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800127e:	2003      	movs	r0, #3
 8001280:	f7ff fdf6 	bl	8000e70 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001284:	bf00      	nop
 8001286:	f7ff fe07 	bl	8000e98 <LL_RCC_GetSysClkSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b0c      	cmp	r3, #12
 800128e:	d1fa      	bne.n	8001286 <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe0f 	bl	8000eb4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001296:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800129a:	f7ff fe1f 	bl	8000edc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800129e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012a2:	f7ff fe2f 	bl	8000f04 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <SystemClock_Config+0xb8>)
 80012a8:	f005 f85c 	bl	8006364 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <SystemClock_Config+0xb8>)
 80012ae:	f005 f88f 	bl	80063d0 <LL_SetSystemCoreClock>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	04c4b400 	.word	0x04c4b400

080012bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	b29b      	uxth	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b04      	cmp	r3, #4
 8001310:	d101      	bne.n	8001316 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <RunProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void RunProsthesisControl (void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	GetInputs();
 8001344:	f000 f82a 	bl	800139c <GetInputs>

	// If test program is required, run test program
	// Otherwise continue prosthesis control
	if (isTestProgramRequired)
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <RunProsthesisControl+0x24>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <RunProsthesisControl+0x16>
	{
		RunTestProgram();
 8001350:	f000 fa4c 	bl	80017ec <RunTestProgram>
	else
	{
		RunStateMachine();
		SetOutputs();
	}
}
 8001354:	e003      	b.n	800135e <RunProsthesisControl+0x1e>
		RunStateMachine();
 8001356:	f000 f9c7 	bl	80016e8 <RunStateMachine>
		SetOutputs();
 800135a:	f000 f9e1 	bl	8001720 <SetOutputs>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000006d 	.word	0x2000006d

08001368 <RequireTestProgram>:

void RequireTestProgram ( enum TestPrograms_e option )
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <RequireTestProgram+0x2c>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	7013      	strb	r3, [r2, #0]

	if ( testProgram != None)
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <RequireTestProgram+0x2c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <RequireTestProgram+0x30>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000005d 	.word	0x2000005d
 8001398:	2000006d 	.word	0x2000006d

0800139c <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
	float tau = 1 / ( 2 * 3.1416f * 10 );			// Time constant
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <GetInputs+0x130>)
 80013a4:	60fb      	str	r3, [r7, #12]
	float dt = 1 / 512.0f;							// Sample time
 80013a6:	f04f 536c 	mov.w	r3, #989855744	; 0x3b000000
 80013aa:	60bb      	str	r3, [r7, #8]
	float encBias_deg = 1325.0f * 360.0f/4096.0f;	// Bias found using RunTestProgram below
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <GetInputs+0x134>)
 80013ae:	607b      	str	r3, [r7, #4]

	CM_angle_deg[0]	= AS5145B_ReadPosition_Deg() - encBias_deg;
 80013b0:	f000 fefc 	bl	80021ac <AS5145B_ReadPosition_Deg>
 80013b4:	eeb0 7a40 	vmov.f32	s14, s0
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <GetInputs+0x138>)
 80013c2:	edc3 7a00 	vstr	s15, [r3]
	CM_loadCell_bot[0] = ReadLoadCell(ADC2);
 80013c6:	4844      	ldr	r0, [pc, #272]	; (80014d8 <GetInputs+0x13c>)
 80013c8:	f000 faa4 	bl	8001914 <ReadLoadCell>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <GetInputs+0x140>)
 80013d2:	801a      	strh	r2, [r3, #0]
	CM_loadCell_top[0] = ReadLoadCell(ADC1);
 80013d4:	4842      	ldr	r0, [pc, #264]	; (80014e0 <GetInputs+0x144>)
 80013d6:	f000 fa9d 	bl	8001914 <ReadLoadCell>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <GetInputs+0x148>)
 80013e0:	801a      	strh	r2, [r3, #0]

	// No derivative of angle (angular speed) on first execution
	// No filtering for load cells on first or second execution
	if (isFirst)
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <GetInputs+0x14c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d026      	beq.n	8001438 <GetInputs+0x9c>
	{
		CM_speed_dps = 0;
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <GetInputs+0x150>)
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

		CM_angle_deg[1] = CM_angle_deg[0];
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <GetInputs+0x138>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a37      	ldr	r2, [pc, #220]	; (80014d4 <GetInputs+0x138>)
 80013f8:	6053      	str	r3, [r2, #4]
		CM_loadCell_bot[2] = CM_loadCell_bot[0];
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <GetInputs+0x140>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <GetInputs+0x140>)
 8001400:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top[2] = CM_loadCell_top[0];
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <GetInputs+0x148>)
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <GetInputs+0x148>)
 8001408:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[0] = CM_loadCell_bot[0];
 800140a:	4b34      	ldr	r3, [pc, #208]	; (80014dc <GetInputs+0x140>)
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <GetInputs+0x154>)
 8001410:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] = CM_loadCell_top[0];
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <GetInputs+0x148>)
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <GetInputs+0x158>)
 8001418:	801a      	strh	r2, [r3, #0]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot_filtered[0];
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <GetInputs+0x154>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <GetInputs+0x154>)
 8001420:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top_filtered[0];
 8001422:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <GetInputs+0x158>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <GetInputs+0x158>)
 8001428:	809a      	strh	r2, [r3, #4]

		isFirst = 0;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <GetInputs+0x14c>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <GetInputs+0x15c>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e13d      	b.n	80016b4 <GetInputs+0x318>
	}
	else if (isSecond)
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <GetInputs+0x15c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d05d      	beq.n	80014fc <GetInputs+0x160>
	{
		// Practical differentiator (fc = 10 Hz, bilinear transformation used)
		CM_speed_dps = ( 2*( CM_angle_deg[0] - CM_angle_deg[1] ) + ( 2*tau - dt )*CM_speed_dps ) / ( dt + 2*tau );
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <GetInputs+0x138>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <GetInputs+0x138>)
 8001448:	edd3 7a01 	vldr	s15, [r3, #4]
 800144c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001450:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001454:	edd7 7a03 	vldr	s15, [r7, #12]
 8001458:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800145c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001460:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <GetInputs+0x150>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001472:	edd7 7a03 	vldr	s15, [r7, #12]
 8001476:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800147a:	edd7 7a02 	vldr	s15, [r7, #8]
 800147e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <GetInputs+0x150>)
 8001488:	edc3 7a00 	vstr	s15, [r3]

		CM_angle_deg[1] = CM_angle_deg[0];
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <GetInputs+0x138>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <GetInputs+0x138>)
 8001492:	6053      	str	r3, [r2, #4]
		CM_loadCell_bot[1] = CM_loadCell_bot[0];
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <GetInputs+0x140>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <GetInputs+0x140>)
 800149a:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top[1] = CM_loadCell_top[0];
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <GetInputs+0x148>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <GetInputs+0x148>)
 80014a2:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[0] = CM_loadCell_bot[0];
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <GetInputs+0x140>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <GetInputs+0x154>)
 80014aa:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] = CM_loadCell_top[0];
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <GetInputs+0x148>)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <GetInputs+0x158>)
 80014b2:	801a      	strh	r2, [r3, #0]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot_filtered[0];
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <GetInputs+0x154>)
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <GetInputs+0x154>)
 80014ba:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top_filtered[0];
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <GetInputs+0x158>)
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <GetInputs+0x158>)
 80014c2:	805a      	strh	r2, [r3, #2]

		isSecond = 0;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <GetInputs+0x15c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e0f3      	b.n	80016b4 <GetInputs+0x318>
 80014cc:	3c826122 	.word	0x3c826122
 80014d0:	42e8e900 	.word	0x42e8e900
 80014d4:	20000070 	.word	0x20000070
 80014d8:	50040100 	.word	0x50040100
 80014dc:	20000084 	.word	0x20000084
 80014e0:	50040000 	.word	0x50040000
 80014e4:	2000008c 	.word	0x2000008c
 80014e8:	20000002 	.word	0x20000002
 80014ec:	2000007c 	.word	0x2000007c
 80014f0:	2000009c 	.word	0x2000009c
 80014f4:	20000094 	.word	0x20000094
 80014f8:	2000006c 	.word	0x2000006c
	}
	else
	{
		// Practical differentiator (fc = 10 Hz, bilinear transformation used)
		CM_speed_dps = ( 2*( CM_angle_deg[0] - CM_angle_deg[1] ) + ( 2*tau - dt )*CM_speed_dps ) / ( dt + 2*tau );
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <GetInputs+0x324>)
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <GetInputs+0x324>)
 8001504:	edd3 7a01 	vldr	s15, [r3, #4]
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001518:	edd7 7a02 	vldr	s15, [r7, #8]
 800151c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001520:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <GetInputs+0x328>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001536:	edd7 7a02 	vldr	s15, [r7, #8]
 800153a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <GetInputs+0x328>)
 8001544:	edc3 7a00 	vstr	s15, [r3]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_loadCell_bot_filtered[0] =   1.6556f * CM_loadCell_bot_filtered[1] - 0.7068f * CM_loadCell_bot_filtered[2]
 8001548:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <GetInputs+0x32c>)
 800154a:	885b      	ldrh	r3, [r3, #2]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80016cc <GetInputs+0x330>
 8001558:	ee27 7a87 	vmul.f32	s14, s15, s14
 800155c:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <GetInputs+0x32c>)
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	eddf 6a59 	vldr	s13, [pc, #356]	; 80016d0 <GetInputs+0x334>
 800156c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001570:	ee37 7a67 	vsub.f32	s14, s14, s15
									  + 0.0128f * CM_loadCell_bot[0] + 0.0256f * CM_loadCell_bot[1] + 0.0128f * CM_loadCell_bot[2];
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <GetInputs+0x338>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	eddf 6a55 	vldr	s13, [pc, #340]	; 80016d8 <GetInputs+0x33c>
 8001584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <GetInputs+0x338>)
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001598:	eddf 6a50 	vldr	s13, [pc, #320]	; 80016dc <GetInputs+0x340>
 800159c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <GetInputs+0x338>)
 80015a6:	889b      	ldrh	r3, [r3, #4]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	eddf 6a49 	vldr	s13, [pc, #292]	; 80016d8 <GetInputs+0x33c>
 80015b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_loadCell_bot_filtered[0] =   1.6556f * CM_loadCell_bot_filtered[1] - 0.7068f * CM_loadCell_bot_filtered[2]
 80015bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <GetInputs+0x32c>)
 80015c8:	801a      	strh	r2, [r3, #0]
		CM_loadCell_top_filtered[0] =   1.6556f * CM_loadCell_top_filtered[1] - 0.7068f * CM_loadCell_top_filtered[2]
 80015ca:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <GetInputs+0x344>)
 80015cc:	885b      	ldrh	r3, [r3, #2]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80016cc <GetInputs+0x330>
 80015da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <GetInputs+0x344>)
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	eddf 6a39 	vldr	s13, [pc, #228]	; 80016d0 <GetInputs+0x334>
 80015ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015f2:	ee37 7a67 	vsub.f32	s14, s14, s15
									  + 0.0128f * CM_loadCell_top[0] + 0.0256f * CM_loadCell_top[1] + 0.0128f * CM_loadCell_top[2];
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <GetInputs+0x348>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	eddf 6a35 	vldr	s13, [pc, #212]	; 80016d8 <GetInputs+0x33c>
 8001606:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800160a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <GetInputs+0x348>)
 8001610:	885b      	ldrh	r3, [r3, #2]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	eddf 6a30 	vldr	s13, [pc, #192]	; 80016dc <GetInputs+0x340>
 800161e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <GetInputs+0x348>)
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	eddf 6a29 	vldr	s13, [pc, #164]	; 80016d8 <GetInputs+0x33c>
 8001636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_loadCell_top_filtered[0] =   1.6556f * CM_loadCell_top_filtered[1] - 0.7068f * CM_loadCell_top_filtered[2]
 800163e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001642:	ee17 3a90 	vmov	r3, s15
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <GetInputs+0x344>)
 800164a:	801a      	strh	r2, [r3, #0]

		CM_angle_deg[1] = CM_angle_deg[0];
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <GetInputs+0x324>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <GetInputs+0x324>)
 8001652:	6053      	str	r3, [r2, #4]
		CM_loadCell_bot[2] = CM_loadCell_bot[1];
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <GetInputs+0x338>)
 8001656:	885a      	ldrh	r2, [r3, #2]
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <GetInputs+0x338>)
 800165a:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top[2] = CM_loadCell_top[1];
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <GetInputs+0x348>)
 800165e:	885a      	ldrh	r2, [r3, #2]
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <GetInputs+0x348>)
 8001662:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot[1] = CM_loadCell_bot[0];
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <GetInputs+0x338>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <GetInputs+0x338>)
 800166a:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top[1] = CM_loadCell_top[0];
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <GetInputs+0x348>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <GetInputs+0x348>)
 8001672:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot[1];
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <GetInputs+0x338>)
 8001676:	885a      	ldrh	r2, [r3, #2]
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <GetInputs+0x32c>)
 800167a:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top[1];
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <GetInputs+0x348>)
 800167e:	885a      	ldrh	r2, [r3, #2]
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <GetInputs+0x344>)
 8001682:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[2] = CM_loadCell_bot_filtered[1];
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <GetInputs+0x32c>)
 8001686:	885a      	ldrh	r2, [r3, #2]
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <GetInputs+0x32c>)
 800168a:	809a      	strh	r2, [r3, #4]
		CM_loadCell_top_filtered[2] = CM_loadCell_top_filtered[1];
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <GetInputs+0x344>)
 800168e:	885a      	ldrh	r2, [r3, #2]
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <GetInputs+0x344>)
 8001692:	809a      	strh	r2, [r3, #4]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot[0];
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <GetInputs+0x338>)
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <GetInputs+0x32c>)
 800169a:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top[0];
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <GetInputs+0x348>)
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <GetInputs+0x344>)
 80016a2:	805a      	strh	r2, [r3, #2]
		CM_loadCell_bot_filtered[1] = CM_loadCell_bot_filtered[0];
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <GetInputs+0x32c>)
 80016a6:	881a      	ldrh	r2, [r3, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <GetInputs+0x32c>)
 80016aa:	805a      	strh	r2, [r3, #2]
		CM_loadCell_top_filtered[1] = CM_loadCell_top_filtered[0];
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <GetInputs+0x344>)
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <GetInputs+0x344>)
 80016b2:	805a      	strh	r2, [r3, #2]
	}

	mpu9255_process();
 80016b4:	f003 fb74 	bl	8004da0 <mpu9255_process>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000070 	.word	0x20000070
 80016c4:	2000007c 	.word	0x2000007c
 80016c8:	2000009c 	.word	0x2000009c
 80016cc:	3fd3eab3 	.word	0x3fd3eab3
 80016d0:	3f34f0d8 	.word	0x3f34f0d8
 80016d4:	20000084 	.word	0x20000084
 80016d8:	3c51b717 	.word	0x3c51b717
 80016dc:	3cd1b717 	.word	0x3cd1b717
 80016e0:	20000094 	.word	0x20000094
 80016e4:	2000008c 	.word	0x2000008c

080016e8 <RunStateMachine>:

static void RunStateMachine (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	switch (0)
	{
	case 0:
		Kp = 2.5;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <RunStateMachine+0x28>)
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <RunStateMachine+0x2c>)
 80016f0:	601a      	str	r2, [r3, #0]
		Kd = 0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <RunStateMachine+0x30>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
		equilibriumPoint_deg = 0;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <RunStateMachine+0x34>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
		break;
 8001702:	bf00      	nop
	}
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000060 	.word	0x20000060
 8001714:	40200000 	.word	0x40200000
 8001718:	20000064 	.word	0x20000064
 800171c:	20000068 	.word	0x20000068

08001720 <SetOutputs>:

static void SetOutputs (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <RunImpedanceControl>:

static void RunImpedanceControl (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
	float gearRatio = 40;
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <RunImpedanceControl+0x94>)
 8001738:	617b      	str	r3, [r7, #20]
	float torqueConst_nmpa = 0.095f;	// is this number accurate??
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <RunImpedanceControl+0x98>)
 800173c:	613b      	str	r3, [r7, #16]
	float nomCurrent_amp = 8;			// is this number accurate??
 800173e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001742:	60fb      	str	r3, [r7, #12]

	float errorPos_deg = equilibriumPoint_deg - CM_angle_deg[0];
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <RunImpedanceControl+0x9c>)
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <RunImpedanceControl+0xa0>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	edc7 7a02 	vstr	s15, [r7, #8]
	CM_jointTorque_nm = Kp*errorPos_deg - Kd*CM_speed_dps;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <RunImpedanceControl+0xa4>)
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <RunImpedanceControl+0xa8>)
 8001768:	edd3 6a00 	vldr	s13, [r3]
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <RunImpedanceControl+0xac>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <RunImpedanceControl+0xb0>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
	int32_t motTorque = CM_jointTorque_nm / ( torqueConst_nmpa * gearRatio * nomCurrent_amp ) * 1000.0f;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <RunImpedanceControl+0xb0>)
 8001782:	edd3 6a00 	vldr	s13, [r3]
 8001786:	ed97 7a04 	vldr	s14, [r7, #16]
 800178a:	edd7 7a05 	vldr	s15, [r7, #20]
 800178e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001792:	edd7 7a03 	vldr	s15, [r7, #12]
 8001796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80017e4 <RunImpedanceControl+0xb4>
 80017a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017aa:	ee17 3a90 	vmov	r3, s15
 80017ae:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque( CAN_ID, motTorque );
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <RunImpedanceControl+0xb8>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fd9e 	bl	80022f8 <EPOS4_SetTorque>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	42200000 	.word	0x42200000
 80017c8:	3dc28f5c 	.word	0x3dc28f5c
 80017cc:	20000068 	.word	0x20000068
 80017d0:	20000070 	.word	0x20000070
 80017d4:	20000060 	.word	0x20000060
 80017d8:	20000064 	.word	0x20000064
 80017dc:	2000007c 	.word	0x2000007c
 80017e0:	20000078 	.word	0x20000078
 80017e4:	447a0000 	.word	0x447a0000
 80017e8:	20000000 	.word	0x20000000

080017ec <RunTestProgram>:

static void RunTestProgram (void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
	switch (testProgram)
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <RunTestProgram+0x100>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d873      	bhi.n	80018e2 <RunTestProgram+0xf6>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <RunTestProgram+0x14>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	080018e1 	.word	0x080018e1
 8001804:	080018e1 	.word	0x080018e1
 8001808:	08001815 	.word	0x08001815
 800180c:	08001827 	.word	0x08001827
 8001810:	08001863 	.word	0x08001863
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 150;
 8001814:	2396      	movs	r3, #150	; 0x96
 8001816:	60fb      	str	r3, [r7, #12]
		EPOS4_SetTorque( CAN_ID, torque );
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <RunTestProgram+0x104>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fd6a 	bl	80022f8 <EPOS4_SetTorque>
		break;
 8001824:	e05d      	b.n	80018e2 <RunTestProgram+0xf6>
	}
	case AverageMagEnc:
	{
		uint16_t i;
		uint32_t sum = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]

		for ( i = 0; i < 1000; i++ )
 800182a:	2300      	movs	r3, #0
 800182c:	83fb      	strh	r3, [r7, #30]
 800182e:	e00c      	b.n	800184a <RunTestProgram+0x5e>
		{
			struct AS5145B_Data_s data  = AS5145B_ReadData();
 8001830:	f000 fc28 	bl	8002084 <AS5145B_ReadData>
 8001834:	4603      	mov	r3, r0
 8001836:	60bb      	str	r3, [r7, #8]
			sum                        += data.pos;
 8001838:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800183c:	461a      	mov	r2, r3
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
		for ( i = 0; i < 1000; i++ )
 8001844:	8bfb      	ldrh	r3, [r7, #30]
 8001846:	3301      	adds	r3, #1
 8001848:	83fb      	strh	r3, [r7, #30]
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001850:	d3ee      	bcc.n	8001830 <RunTestProgram+0x44>
		}

		CM_average_MagEnc = sum / i;
 8001852:	8bfb      	ldrh	r3, [r7, #30]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <RunTestProgram+0x108>)
 800185e:	801a      	strh	r2, [r3, #0]
		(void) CM_average_MagEnc;

		while (1);	// Halt program
 8001860:	e7fe      	b.n	8001860 <RunTestProgram+0x74>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <RunTestProgram+0x10c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d037      	beq.n	80018da <RunTestProgram+0xee>
		{
			uint16_t i;

			Kp = 2.5;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <RunTestProgram+0x110>)
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <RunTestProgram+0x114>)
 800186e:	601a      	str	r2, [r3, #0]
			Kd = 0;
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <RunTestProgram+0x118>)
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			uint32_t sum = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]

			for ( i = 0; i < 1000; i++ )
 800187c:	2300      	movs	r3, #0
 800187e:	82fb      	strh	r3, [r7, #22]
 8001880:	e00c      	b.n	800189c <RunTestProgram+0xb0>
			{
				struct AS5145B_Data_s data = AS5145B_ReadData();
 8001882:	f000 fbff 	bl	8002084 <AS5145B_ReadData>
 8001886:	4603      	mov	r3, r0
 8001888:	607b      	str	r3, [r7, #4]
				sum += data.pos;
 800188a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
			for ( i = 0; i < 1000; i++ )
 8001896:	8afb      	ldrh	r3, [r7, #22]
 8001898:	3301      	adds	r3, #1
 800189a:	82fb      	strh	r3, [r7, #22]
 800189c:	8afb      	ldrh	r3, [r7, #22]
 800189e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a2:	d3ee      	bcc.n	8001882 <RunTestProgram+0x96>
			}

			equilibriumPoint_deg = (float) sum/i * 360/4096;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ae:	8afb      	ldrh	r3, [r7, #22]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018bc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001908 <RunTestProgram+0x11c>
 80018c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018c4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800190c <RunTestProgram+0x120>
 80018c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <RunTestProgram+0x124>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]

			isFirst = 0;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <RunTestProgram+0x10c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
		else
		{
			RunImpedanceControl();
		}

		break;
 80018d8:	e003      	b.n	80018e2 <RunTestProgram+0xf6>
			RunImpedanceControl();
 80018da:	f7ff ff29 	bl	8001730 <RunImpedanceControl>
		break;
 80018de:	e000      	b.n	80018e2 <RunTestProgram+0xf6>
		break;
 80018e0:	bf00      	nop
	}
	}
}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000005d 	.word	0x2000005d
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000080 	.word	0x20000080
 80018f8:	20000002 	.word	0x20000002
 80018fc:	20000060 	.word	0x20000060
 8001900:	40200000 	.word	0x40200000
 8001904:	20000064 	.word	0x20000064
 8001908:	43b40000 	.word	0x43b40000
 800190c:	45800000 	.word	0x45800000
 8001910:	20000068 	.word	0x20000068

08001914 <ReadLoadCell>:

// move to driver??
static uint16_t ReadLoadCell ( ADC_TypeDef *ADCx )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fccd 	bl	80012bc <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );				// change to EOC??
 8001922:	bf00      	nop
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fcea 	bl	80012fe <LL_ADC_IsActiveFlag_EOC>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f9      	beq.n	8001924 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// change to EOC?? remove this??
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fcf7 	bl	8001324 <LL_ADC_ClearFlag_EOC>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADCx);	// change resolution??
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fcd4 	bl	80012e4 <LL_ADC_REG_ReadConversionData12>
 800193c:	4603      	mov	r3, r0
 800193e:	81fb      	strh	r3, [r7, #14]
	return val;
 8001940:	89fb      	ldrh	r3, [r7, #14]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <LL_AHB2_GRP1_EnableClock>:
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000

0800197c <LL_APB1_GRP1_EnableClock>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001992:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000

080019ac <LL_APB2_GRP1_EnableClock>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f023 0210 	bic.w	r2, r3, #16
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	605a      	str	r2, [r3, #4]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 0208 	bic.w	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	605a      	str	r2, [r3, #4]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fd1e 	bl	8006474 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001a48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a4c:	f7ff ffae 	bl	80019ac <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ff7b 	bl	800194c <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001a56:	23e0      	movs	r3, #224	; 0xe0
 8001a58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f003 feaf 	bl	80057d8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a7e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a82:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a84:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a88:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_SPI1_Init+0xa8>)
 8001ab0:	f004 fafa 	bl	80060a8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_SPI1_Init+0xa8>)
 8001ab8:	f7ff ff90 	bl	80019dc <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_SPI1_Init+0xa8>)
 8001abe:	f7ff ffa0 	bl	8001a02 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3740      	adds	r7, #64	; 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40013000 	.word	0x40013000

08001ad0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b090      	sub	sp, #64	; 0x40
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	2228      	movs	r2, #40	; 0x28
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fcc8 	bl	8006474 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001af4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af8:	f7ff ff40 	bl	800197c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff ff25 	bl	800194c <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 8001b02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <MX_SPI2_Init+0xa8>)
 8001b22:	f003 fe59 	bl	80057d8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b2a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b2e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b34:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b36:	2302      	movs	r3, #2
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b44:	2308      	movs	r3, #8
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001b50:	2307      	movs	r3, #7
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <MX_SPI2_Init+0xac>)
 8001b5c:	f004 faa4 	bl	80060a8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <MX_SPI2_Init+0xac>)
 8001b64:	f7ff ff3a 	bl	80019dc <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_SPI2_Init+0xac>)
 8001b6a:	f7ff ff4a 	bl	8001a02 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3740      	adds	r7, #64	; 0x40
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	40003800 	.word	0x40003800

08001b80 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d101      	bne.n	8001bb8 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <BusFault_Handler+0x4>

08001bde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler
******************************************************************************/

	systick_app_timer_tickAndProcess();
 8001c12:	f000 f829 	bl	8001c68 <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <LPTIM2_IRQHandler+0x20>)
 8001c22:	f7ff ffbd 	bl	8001ba0 <LL_LPTIM_IsActiveFlag_ARRM>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <LPTIM2_IRQHandler+0x24>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <LPTIM2_IRQHandler+0x20>)
 8001c34:	f7ff ffa4 	bl	8001b80 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40009400 	.word	0x40009400
 8001c40:	2000005c 	.word	0x2000005c

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e050      	b.n	8001d16 <systick_app_timer_tickAndProcess+0xae>
			// quick null check, for sanity
			if (appTimer.channel[i].timer != 0) {
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d046      	beq.n	8001d10 <systick_app_timer_tickAndProcess+0xa8>
				if (appTimer.channel[i].active) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001c86:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d040      	beq.n	8001d10 <systick_app_timer_tickAndProcess+0xa8>
					appTimer.channel[i].timer->value++;
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	3201      	adds	r2, #1
 8001c9c:	605a      	str	r2, [r3, #4]
					// if the timer alarm has been set above 0, then there is something to process
					if (appTimer.channel[i].timer->alarm > 0) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d030      	beq.n	8001d10 <systick_app_timer_tickAndProcess+0xa8>
						// if value meets or exceeds alarm value, process the timer
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	491a      	ldr	r1, [pc, #104]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d322      	bcc.n	8001d10 <systick_app_timer_tickAndProcess+0xa8>
							// if timer has a callback, call it and then reset the value
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <systick_app_timer_tickAndProcess+0x8e>
								appTimer.channel[i].timer->timerAlarmCallback();
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	7a1b      	ldrb	r3, [r3, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d104      	bne.n	8001d10 <systick_app_timer_tickAndProcess+0xa8>
								appTimer.channel[i].active = false;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <systick_app_timer_tickAndProcess+0xc0>)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	3301      	adds	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d9ab      	bls.n	8001c74 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200000a4 	.word	0x200000a4

08001d2c <systick_app_timer_channel_start>:
	}

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d901      	bls.n	8001d40 <systick_app_timer_channel_start+0x14>
		return 2; // channel number out of bounds
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e015      	b.n	8001d6c <systick_app_timer_channel_start+0x40>
	}

	if (appTimer.channel[channel].timer) {
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <systick_app_timer_channel_start+0x4c>)
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <systick_app_timer_channel_start+0x3e>
		appTimer.channel[channel].timer->value = 0; // reset when starting
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <systick_app_timer_channel_start+0x4c>)
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
		appTimer.channel[channel].active = true;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <systick_app_timer_channel_start+0x4c>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		return 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <systick_app_timer_channel_start+0x40>
	}

	return 1; // channel not found
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	200000a4 	.word	0x200000a4

08001d7c <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001d86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	d901      	bls.n	8001d92 <systick_app_timer_channel_create+0x16>
		return 2; // timer module is full
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e026      	b.n	8001de0 <systick_app_timer_channel_create+0x64>
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e017      	b.n	8001dc8 <systick_app_timer_channel_create+0x4c>
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <systick_app_timer_channel_create+0x46>
			appTimer.channel[i].timer = timer;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
			appTimer.channel[i].timer->channel = i;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	701a      	strb	r2, [r3, #0]
			break;
 8001dc0:	e005      	b.n	8001dce <systick_app_timer_channel_create+0x52>
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	d9e4      	bls.n	8001d98 <systick_app_timer_channel_create+0x1c>
		}
	}

	appTimer.count++;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <systick_app_timer_channel_create+0x70>)
 8001dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	200000a4 	.word	0x200000a4

08001df0 <systick_app_timer_module_init>:

void systick_app_timer_module_init() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0

	memset(&appTimer, 0, sizeof(appTimer));
 8001df4:	2254      	movs	r2, #84	; 0x54
 8001df6:	2100      	movs	r1, #0
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <systick_app_timer_module_init+0x14>)
 8001dfa:	f004 fb3b 	bl	8006474 <memset>

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000a4 	.word	0x200000a4

08001e08 <LL_RCC_SetUSARTClockSource>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <LL_RCC_SetUSARTClockSource+0x30>)
 8001e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4905      	ldr	r1, [pc, #20]	; (8001e38 <LL_RCC_SetUSARTClockSource+0x30>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <LL_AHB2_GRP1_EnableClock>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000

08001e6c <LL_APB1_GRP1_EnableClock>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000

08001e9c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001f12:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001f16:	f7ff ff77 	bl	8001e08 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001f1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f1e:	f7ff ffa5 	bl	8001e6c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff ff8a 	bl	8001e3c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f003 fc46 	bl	80057d8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001f4c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f50:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <MX_USART2_UART_Init+0xa4>)
 8001f72:	f004 f961 	bl	8006238 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART2_UART_Init+0xa4>)
 8001f78:	f7ff ffa0 	bl	8001ebc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_USART2_UART_Init+0xa4>)
 8001f7e:	f7ff ff8d 	bl	8001e9c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	3738      	adds	r7, #56	; 0x38
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004400 	.word	0x40004400

08001f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f94:	f7ff fe56 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <LoopForever+0xe>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <LoopForever+0x16>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f004 fa17 	bl	80063f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc2:	f7ff f89d 	bl	8001100 <main>

08001fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc6:	e7fe      	b.n	8001fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001fd4:	080071a8 	.word	0x080071a8
  ldr r2, =_sbss
 8001fd8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001fdc:	200027cc 	.word	0x200027cc

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>

08001fe2 <LL_GPIO_IsInputPinSet>:
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d101      	bne.n	8001ffe <LL_GPIO_IsInputPinSet+0x1c>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_GPIO_IsInputPinSet+0x1e>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_GPIO_SetOutputPin>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	619a      	str	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_GPIO_ResetOutputPin>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <AS5145B_Init>:
 * INITIALIZATION FUNCTIONS
 ******************************************************************************/

// Initialize device
void AS5145B_Init ( AS5145B_Init_t *AS5145B_Init )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	// Copy memory of device initialization handle to device handle (provides ownership of the device handle to this driver)
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 800204c:	2214      	movs	r2, #20
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <AS5145B_Init+0x3c>)
 8002052:	f004 fa01 	bl	8006458 <memcpy>

	// Initialize pins
	LL_GPIO_SetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );		// Chip select pin initially high (Figure 13 in DS)
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <AS5145B_Init+0x3c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <AS5145B_Init+0x3c>)
 800205c:	8992      	ldrh	r2, [r2, #12]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ffd3 	bl	800200c <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );		// Clock pin initially high (Figure 13 in DS)
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <AS5145B_Init+0x3c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <AS5145B_Init+0x3c>)
 800206c:	89d2      	ldrh	r2, [r2, #14]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ffcb 	bl	800200c <LL_GPIO_SetOutputPin>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000f8 	.word	0x200000f8

08002084 <AS5145B_ReadData>:
 ******************************************************************************/

// Read data (first 12 bits = position, remaining 6 bits = status, MSB first, Figure 13 in DS)
// @param posBias Amount of bias to be removed from angular position data in ADC
struct AS5145B_Data_s AS5145B_ReadData (void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
	// Declare variables
	struct AS5145B_Data_s data;		// Data structure

	// Declare initialized variables
	data.pos    = 0;	// Angular position
 800208a:	2300      	movs	r3, #0
 800208c:	80bb      	strh	r3, [r7, #4]
	data.status = 0;	// Status of device
 800208e:	2300      	movs	r3, #0
 8002090:	71bb      	strb	r3, [r7, #6]

	// Enable chip select pin
	LL_GPIO_ResetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );	// Chip select pin is active low
 8002092:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <AS5145B_ReadData+0x124>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a44      	ldr	r2, [pc, #272]	; (80021a8 <AS5145B_ReadData+0x124>)
 8002098:	8992      	ldrh	r2, [r2, #12]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ffc3 	bl	8002028 <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 80020a2:	f000 f8a9 	bl	80021f8 <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for ( int i = 12-1; i >= 0; i-- )
 80020a6:	230b      	movs	r3, #11
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e02d      	b.n	8002108 <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );						// Set clock low
 80020ac:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020b2:	89d2      	ldrh	r2, [r2, #14]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffb6 	bl	8002028 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80020bc:	f000 f89c 	bl	80021f8 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );							// Set clock high
 80020c0:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020c6:	89d2      	ldrh	r2, [r2, #14]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff9e 	bl	800200c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80020d0:	f000 f892 	bl	80021f8 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet( AS5145B.DO_GPIOx, AS5145B.DO_Pin ) & 0x01;	// Read data bit
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a33      	ldr	r2, [pc, #204]	; (80021a8 <AS5145B_ReadData+0x124>)
 80020da:	8a12      	ldrh	r2, [r2, #16]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff7f 	bl	8001fe2 <LL_GPIO_IsInputPinSet>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	73bb      	strb	r3, [r7, #14]
		data.pos     |= (temp) << i;														// Assign and shift bit
 80020ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020f2:	7bb9      	ldrb	r1, [r7, #14]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21b      	sxth	r3, r3
 8002100:	80bb      	strh	r3, [r7, #4]
	for ( int i = 12-1; i >= 0; i-- )
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3b01      	subs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	dace      	bge.n	80020ac <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for ( int i = 6-1; i >= 0; i-- )
 800210e:	2305      	movs	r3, #5
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e02e      	b.n	8002172 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );						// Set clock low
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <AS5145B_ReadData+0x124>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <AS5145B_ReadData+0x124>)
 800211a:	89d2      	ldrh	r2, [r2, #14]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff82 	bl	8002028 <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8002124:	f000 f868 	bl	80021f8 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin( AS5145B.CLK_GPIOx, AS5145B.CLK_Pin );							// Set clock high
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <AS5145B_ReadData+0x124>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <AS5145B_ReadData+0x124>)
 800212e:	89d2      	ldrh	r2, [r2, #14]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff6a 	bl	800200c <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8002138:	f000 f85e 	bl	80021f8 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet( AS5145B.DO_GPIOx, AS5145B.DO_Pin ) & 0x01;	// Read data bit
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <AS5145B_ReadData+0x124>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <AS5145B_ReadData+0x124>)
 8002142:	8a12      	ldrh	r2, [r2, #16]
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff4b 	bl	8001fe2 <LL_GPIO_IsInputPinSet>
 800214c:	4603      	mov	r3, r0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;														// Assign and shift bit
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	b25a      	sxtb	r2, r3
 800215a:	7bf9      	ldrb	r1, [r7, #15]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b25b      	sxtb	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	71bb      	strb	r3, [r7, #6]
	for ( int i = 6-1; i >= 0; i-- )
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	3b01      	subs	r3, #1
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	dacd      	bge.n	8002114 <AS5145B_ReadData+0x90>
	}

	// Disable Chip select pin
	LL_GPIO_SetOutputPin( AS5145B.CSn_GPIOx, AS5145B.CSn_Pin );		// Chip select pin is inactive high
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <AS5145B_ReadData+0x124>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <AS5145B_ReadData+0x124>)
 800217e:	8992      	ldrh	r2, [r2, #12]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff42 	bl	800200c <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 8002188:	f000 f836 	bl	80021f8 <AS5145B_Delay_500ns>

	// Return
	return data;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	2300      	movs	r3, #0
 8002192:	893a      	ldrh	r2, [r7, #8]
 8002194:	f362 030f 	bfi	r3, r2, #0, #16
 8002198:	897a      	ldrh	r2, [r7, #10]
 800219a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200000f8 	.word	0x200000f8

080021ac <AS5145B_ReadPosition_Deg>:

// Read angular position in degrees
// @param posBias	Amount of bias to be removed from angular position data in ADC
float AS5145B_ReadPosition_Deg (void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
	// Declare variables
	struct AS5145B_Data_s data;		// Data structure

	// Read data and separate angular position
	data          = AS5145B_ReadData();		// Read data
 80021b2:	f7ff ff67 	bl	8002084 <AS5145B_ReadData>
 80021b6:	4603      	mov	r3, r0
 80021b8:	607b      	str	r3, [r7, #4]
	int16_t temp = data.pos;						// Separate angular position
 80021ba:	88bb      	ldrh	r3, [r7, #4]
 80021bc:	81fb      	strh	r3, [r7, #14]

	// Convert angular position from ADC to degrees
	float pos = (float) temp*AS5145B_ADC2DEG;
 80021be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80021f0 <AS5145B_ReadPosition_Deg+0x44>
 80021ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80021f4 <AS5145B_ReadPosition_Deg+0x48>
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	edc7 7a02 	vstr	s15, [r7, #8]

	// Return
	return pos;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	ee07 3a90 	vmov	s15, r3
}
 80021e4:	eeb0 0a67 	vmov.f32	s0, s15
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	43b40000 	.word	0x43b40000
 80021f4:	45800000 	.word	0x45800000

080021f8 <AS5145B_Delay_500ns>:
 * OTHER FUNCTIONS
 ******************************************************************************/

// Delay of approximately 500 nanoseconds for 80 MHz SYSCLK
void AS5145B_Delay_500ns (void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
	for ( uint8_t i = 0; i < 2; i++ )
 80021fe:	2300      	movs	r3, #0
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	e00c      	b.n	800221e <AS5145B_Delay_500ns+0x26>
	{
		for( uint8_t j = 0; j < 3; j++ )
 8002204:	2300      	movs	r3, #0
 8002206:	71bb      	strb	r3, [r7, #6]
 8002208:	e003      	b.n	8002212 <AS5145B_Delay_500ns+0x1a>
		 __NOP();
 800220a:	bf00      	nop
		for( uint8_t j = 0; j < 3; j++ )
 800220c:	79bb      	ldrb	r3, [r7, #6]
 800220e:	3301      	adds	r3, #1
 8002210:	71bb      	strb	r3, [r7, #6]
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d9f8      	bls.n	800220a <AS5145B_Delay_500ns+0x12>
	for ( uint8_t i = 0; i < 2; i++ )
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3301      	adds	r3, #1
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d9ef      	bls.n	8002204 <AS5145B_Delay_500ns+0xc>
	}
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	80fb      	strh	r3, [r7, #6]
	// Declare variables
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 800223c:	f107 0008 	add.w	r0, r7, #8
 8002240:	2306      	movs	r3, #6
 8002242:	2200      	movs	r2, #0
 8002244:	f246 0140 	movw	r1, #24640	; 0x6040
 8002248:	f000 f872 	bl	8002330 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 800224c:	f107 0208 	add.w	r2, r7, #8
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2108      	movs	r1, #8
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fa76 	bl	8002746 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800225a:	200a      	movs	r0, #10
 800225c:	f004 f890 	bl	8006380 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8002260:	f107 0008 	add.w	r0, r7, #8
 8002264:	230f      	movs	r3, #15
 8002266:	2200      	movs	r2, #0
 8002268:	f246 0140 	movw	r1, #24640	; 0x6040
 800226c:	f000 f860 	bl	8002330 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8002270:	f107 0208 	add.w	r2, r7, #8
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2108      	movs	r1, #8
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa64 	bl	8002746 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 800227e:	200a      	movs	r0, #10
 8002280:	f004 f87e 	bl	8006380 <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 8002284:	f107 0008 	add.w	r0, r7, #8
 8002288:	230a      	movs	r3, #10
 800228a:	2200      	movs	r2, #0
 800228c:	f246 0160 	movw	r1, #24672	; 0x6060
 8002290:	f000 f84e 	bl	8002330 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8002294:	f107 0208 	add.w	r2, r7, #8
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	2108      	movs	r1, #8
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fa52 	bl	8002746 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80022a2:	200a      	movs	r0, #10
 80022a4:	f004 f86c 	bl	8006380 <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80022a8:	f107 0008 	add.w	r0, r7, #8
 80022ac:	2306      	movs	r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	f246 0140 	movw	r1, #24640	; 0x6040
 80022b4:	f000 f83c 	bl	8002330 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80022b8:	f107 0208 	add.w	r2, r7, #8
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	2108      	movs	r1, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fa40 	bl	8002746 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80022c6:	200a      	movs	r0, #10
 80022c8:	f004 f85a 	bl	8006380 <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 80022cc:	f107 0008 	add.w	r0, r7, #8
 80022d0:	230f      	movs	r3, #15
 80022d2:	2200      	movs	r2, #0
 80022d4:	f246 0140 	movw	r1, #24640	; 0x6040
 80022d8:	f000 f82a 	bl	8002330 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80022dc:	f107 0208 	add.w	r2, r7, #8
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	2108      	movs	r1, #8
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fa2e 	bl	8002746 <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80022ea:	200a      	movs	r0, #10
 80022ec:	f004 f848 	bl	8006380 <LL_mDelay>
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// @param torque	100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f107 0008 	add.w	r0, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	f246 0171 	movw	r1, #24689	; 0x6071
 8002310:	f000 f80e 	bl	8002330 <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 8002314:	f107 0208 	add.w	r2, r7, #8
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	2108      	movs	r1, #8
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fa12 	bl	8002746 <CAN_transmit>
    EPOS4_usDelay(50);					// Can we do better??
 8002322:	2032      	movs	r0, #50	; 0x32
 8002324:	f000 f83d 	bl	80023a2 <EPOS4_usDelay>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <EPOS4_DataFramer>:
 * OTHER FUNCTIONS
 ******************************************************************************/

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_DataFramer( uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value )
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	4613      	mov	r3, r2
 8002340:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2222      	movs	r2, #34	; 0x22
 8002346:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	897a      	ldrh	r2, [r7, #10]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 8002352:	897b      	ldrh	r3, [r7, #10]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3302      	adds	r3, #2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3303      	adds	r3, #3
 8002364:	7a7a      	ldrb	r2, [r7, #9]
 8002366:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3304      	adds	r3, #4
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0a1a      	lsrs	r2, r3, #8
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3305      	adds	r3, #5
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0c1a      	lsrs	r2, r3, #16
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3306      	adds	r3, #6
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0e1a      	lsrs	r2, r3, #24
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3307      	adds	r3, #7
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <EPOS4_usDelay>:

// Can we lose this??
void EPOS4_usDelay( uint32_t us )
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	e00c      	b.n	80023ca <EPOS4_usDelay+0x28>
    {
    	for(i=0;i<11;i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e003      	b.n	80023be <EPOS4_usDelay+0x1c>
         __NOP();
 80023b6:	bf00      	nop
    	for(i=0;i<11;i++)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d9f8      	bls.n	80023b6 <EPOS4_usDelay+0x14>
    for(k=0;k<us;k++)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	3301      	adds	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3ee      	bcc.n	80023b0 <EPOS4_usDelay+0xe>
    }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	330c      	adds	r3, #12
 80023f0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_GPIO_SetOutputPin>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	619a      	str	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_GPIO_ResetOutputPin>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 8002440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <clearChipSelect+0x14>)
 8002446:	f7ff ffdd 	bl	8002404 <LL_GPIO_SetOutputPin>
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	48000400 	.word	0x48000400

08002454 <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 8002458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <setChipSelect+0x14>)
 800245e:	f7ff ffdf 	bl	8002420 <LL_GPIO_ResetOutputPin>
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	48000400 	.word	0x48000400

0800246c <mcp25625_reset>:

//
void mcp25625_reset()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 8002472:	f7ff ffef 	bl	8002454 <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 8002476:	21c0      	movs	r1, #192	; 0xc0
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <mcp25625_reset+0x44>)
 800247a:	f7ff ffb1 	bl	80023e0 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 800247e:	bf00      	nop
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <mcp25625_reset+0x44>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 800248c:	f7ff ffd6 	bl	800243c <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002490:	e002      	b.n	8002498 <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <mcp25625_reset+0x44>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <mcp25625_reset+0x44>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f6      	bne.n	8002492 <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40003800 	.word	0x40003800

080024b4 <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 80024c4:	f7ff ffc6 	bl	8002454 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 80024c8:	2102      	movs	r1, #2
 80024ca:	4816      	ldr	r0, [pc, #88]	; (8002524 <mcp25625_writeRegister+0x70>)
 80024cc:	f7ff ff88 	bl	80023e0 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <mcp25625_writeRegister+0x70>)
 80024d6:	f7ff ff83 	bl	80023e0 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	4619      	mov	r1, r3
 80024de:	4811      	ldr	r0, [pc, #68]	; (8002524 <mcp25625_writeRegister+0x70>)
 80024e0:	f7ff ff7e 	bl	80023e0 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80024e4:	bf00      	nop
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <mcp25625_writeRegister+0x70>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80024f2:	bf00      	nop
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <mcp25625_writeRegister+0x70>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 8002500:	f7ff ff9c 	bl	800243c <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8002504:	e002      	b.n	800250c <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <mcp25625_writeRegister+0x70>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <mcp25625_writeRegister+0x70>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f6      	bne.n	8002506 <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40003800 	.word	0x40003800

08002528 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 8002532:	f7ff ff8f 	bl	8002454 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 8002536:	2103      	movs	r1, #3
 8002538:	4814      	ldr	r0, [pc, #80]	; (800258c <mcp25625_readRegister+0x64>)
 800253a:	f7ff ff51 	bl	80023e0 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4619      	mov	r1, r3
 8002542:	4812      	ldr	r0, [pc, #72]	; (800258c <mcp25625_readRegister+0x64>)
 8002544:	f7ff ff4c 	bl	80023e0 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 8002548:	2100      	movs	r1, #0
 800254a:	4810      	ldr	r0, [pc, #64]	; (800258c <mcp25625_readRegister+0x64>)
 800254c:	f7ff ff48 	bl	80023e0 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8002550:	bf00      	nop
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <mcp25625_readRegister+0x64>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 800255e:	bf00      	nop
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <mcp25625_readRegister+0x64>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <mcp25625_readRegister+0x64>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <mcp25625_readRegister+0x64>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <mcp25625_readRegister+0x64>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();
 800257e:	f7ff ff5d 	bl	800243c <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 8002582:	7bbb      	ldrb	r3, [r7, #14]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40003800 	.word	0x40003800

08002590 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	603a      	str	r2, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	460b      	mov	r3, r1
 800259e:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 80025a0:	f7ff ff58 	bl	8002454 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	4619      	mov	r1, r3
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <mcp25625_loadTXB+0x90>)
 80025aa:	f7ff ff19 	bl	80023e0 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e011      	b.n	80025d8 <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 80025b4:	bf00      	nop
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <mcp25625_loadTXB+0x90>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f9      	beq.n	80025b6 <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <mcp25625_loadTXB+0x90>)
 80025ce:	f7ff ff07 	bl	80023e0 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	3301      	adds	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3e9      	bcc.n	80025b4 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 80025e0:	bf00      	nop
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <mcp25625_loadTXB+0x90>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f9      	bne.n	80025e2 <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 80025ee:	bf00      	nop
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <mcp25625_loadTXB+0x90>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 80025fc:	f7ff ff1e 	bl	800243c <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8002600:	e002      	b.n	8002608 <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <mcp25625_loadTXB+0x90>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <mcp25625_loadTXB+0x90>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f6      	bne.n	8002602 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40003800 	.word	0x40003800

08002624 <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8002628:	2030      	movs	r0, #48	; 0x30
 800262a:	f7ff ff7d 	bl	8002528 <mcp25625_readRegister>
 800262e:	4603      	mov	r3, r0
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}

08002634 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 8002638:	2040      	movs	r0, #64	; 0x40
 800263a:	f7ff ff75 	bl	8002528 <mcp25625_readRegister>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}

08002644 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 8002648:	2050      	movs	r0, #80	; 0x50
 800264a:	f7ff ff6d 	bl	8002528 <mcp25625_readRegister>
 800264e:	4603      	mov	r3, r0
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}

08002654 <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	210d      	movs	r1, #13
 8002660:	2044      	movs	r0, #68	; 0x44
 8002662:	f7ff ff95 	bl	8002590 <mcp25625_loadTXB>
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	210d      	movs	r1, #13
 800267a:	2042      	movs	r0, #66	; 0x42
 800267c:	f7ff ff88 	bl	8002590 <mcp25625_loadTXB>
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	210d      	movs	r1, #13
 8002694:	2040      	movs	r0, #64	; 0x40
 8002696:	f7ff ff7b 	bl	8002590 <mcp25625_loadTXB>
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 80026a6:	210b      	movs	r1, #11
 80026a8:	2050      	movs	r0, #80	; 0x50
 80026aa:	f7ff ff03 	bl	80024b4 <mcp25625_writeRegister>
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 80026b6:	210b      	movs	r1, #11
 80026b8:	2040      	movs	r0, #64	; 0x40
 80026ba:	f7ff fefb 	bl	80024b4 <mcp25625_writeRegister>
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 80026c6:	210b      	movs	r1, #11
 80026c8:	2030      	movs	r0, #48	; 0x30
 80026ca:	f7ff fef3 	bl	80024b4 <mcp25625_writeRegister>
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 80026da:	f7ff ffb3 	bl	8002644 <getTXB2CTRL>
 80026de:	4603      	mov	r3, r0
 80026e0:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ffaf 	bl	8002654 <loadTXB2>
		setTXREQ2();
 80026f6:	f7ff ffd4 	bl	80026a2 <setTXREQ2>
		return; // once txbuffer is loaded, return
 80026fa:	e021      	b.n	8002740 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 80026fc:	f7ff ff9a 	bl	8002634 <getTXB1CTRL>
 8002700:	4603      	mov	r3, r0
 8002702:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ffab 	bl	800266e <loadTXB1>
		setTXREQ1();
 8002718:	f7ff ffcb 	bl	80026b2 <setTXREQ1>
		return; //once tx buffer is loaded, return
 800271c:	e010      	b.n	8002740 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 800271e:	f7ff ff81 	bl	8002624 <getTXB0CTRL>
 8002722:	4603      	mov	r3, r0
 8002724:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ffa7 	bl	8002688 <loadTXB0>
		setTXREQ0();
 800273a:	f7ff ffc2 	bl	80026c2 <setTXREQ0>
		return; // once tx buffer is loaded, return
 800273e:	bf00      	nop
	}
}
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	603a      	str	r2, [r7, #0]
 8002750:	80fb      	strh	r3, [r7, #6]
 8002752:	460b      	mov	r3, r1
 8002754:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	220d      	movs	r2, #13
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fe88 	bl	8006474 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	08db      	lsrs	r3, r3, #3
 8002768:	b29b      	uxth	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	015b      	lsls	r3, r3, #5
 8002772:	b2db      	uxtb	r3, r3
 8002774:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
 800277e:	e00b      	b.n	8002798 <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	441a      	add	r2, r3
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	3318      	adds	r3, #24
 800278c:	443b      	add	r3, r7
 800278e:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	3301      	adds	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
 8002798:	7dfa      	ldrb	r2, [r7, #23]
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3ef      	bcc.n	8002780 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff94 	bl	80026d2 <mcp25625_sendCAN>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <mcp25625_init>:

void mcp25625_init (void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 80027b8:	f240 2276 	movw	r2, #630	; 0x276
 80027bc:	2100      	movs	r1, #0
 80027be:	4804      	ldr	r0, [pc, #16]	; (80027d0 <mcp25625_init+0x1c>)
 80027c0:	f003 fe58 	bl	8006474 <memset>
	clearChipSelect();
 80027c4:	f7ff fe3a 	bl	800243c <clearChipSelect>
	mcp25625_reset();
 80027c8:	f7ff fe50 	bl	800246c <mcp25625_reset>
}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000010c 	.word	0x2000010c

080027d4 <CAN_configure>:

void CAN_configure()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 80027da:	23c0      	movs	r3, #192	; 0xc0
 80027dc:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 80027de:	2389      	movs	r3, #137	; 0x89
 80027e0:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 80027e2:	2304      	movs	r3, #4
 80027e4:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 80027e6:	2308      	movs	r3, #8
 80027e8:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 80027ea:	f7ff ffe3 	bl	80027b4 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	4619      	mov	r1, r3
 80027f2:	202a      	movs	r0, #42	; 0x2a
 80027f4:	f7ff fe5e 	bl	80024b4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 80027f8:	7a3b      	ldrb	r3, [r7, #8]
 80027fa:	4619      	mov	r1, r3
 80027fc:	2029      	movs	r0, #41	; 0x29
 80027fe:	f7ff fe59 	bl	80024b4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 8002802:	793b      	ldrb	r3, [r7, #4]
 8002804:	4619      	mov	r1, r3
 8002806:	2028      	movs	r0, #40	; 0x28
 8002808:	f7ff fe54 	bl	80024b4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 800280c:	783b      	ldrb	r3, [r7, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	200f      	movs	r0, #15
 8002812:	f7ff fe4f 	bl	80024b4 <mcp25625_writeRegister>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <set_int_enable+0xb0>)
 800282c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01c      	beq.n	800286e <set_int_enable+0x4e>
        if (enable)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800283a:	2302      	movs	r3, #2
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e001      	b.n	8002844 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <set_int_enable+0xb0>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	7818      	ldrb	r0, [r3, #0]
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <set_int_enable+0xb0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	7c59      	ldrb	r1, [r3, #17]
 8002850:	f107 030f 	add.w	r3, r7, #15
 8002854:	2201      	movs	r2, #1
 8002856:	f002 f93f 	bl	8004ad8 <mpu9255_write>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <set_int_enable+0x46>
            return -1;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
 8002864:	e030      	b.n	80028c8 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <set_int_enable+0xb0>)
 800286a:	745a      	strb	r2, [r3, #17]
 800286c:	e02b      	b.n	80028c6 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <set_int_enable+0xb0>)
 8002870:	7a9b      	ldrb	r3, [r3, #10]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <set_int_enable+0x5c>
            return -1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e025      	b.n	80028c8 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <set_int_enable+0x6e>
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <set_int_enable+0xb0>)
 8002884:	7c5b      	ldrb	r3, [r3, #17]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <set_int_enable+0x6e>
            return 0;
 800288a:	2300      	movs	r3, #0
 800288c:	e01c      	b.n	80028c8 <set_int_enable+0xa8>
        if (enable)
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e001      	b.n	800289e <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <set_int_enable+0xb0>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	7818      	ldrb	r0, [r3, #0]
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <set_int_enable+0xb0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	7c59      	ldrb	r1, [r3, #17]
 80028aa:	f107 030f 	add.w	r3, r7, #15
 80028ae:	2201      	movs	r2, #1
 80028b0:	f002 f912 	bl	8004ad8 <mpu9255_write>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <set_int_enable+0xa0>
            return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e003      	b.n	80028c8 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <set_int_enable+0xb0>)
 80028c4:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000008 	.word	0x20000008

080028d4 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80028e0:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <mpu_init+0x180>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	7818      	ldrb	r0, [r3, #0]
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <mpu_init+0x180>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	7d59      	ldrb	r1, [r3, #21]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	2201      	movs	r2, #1
 80028f2:	f002 f8f1 	bl	8004ad8 <mpu9255_write>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <mpu_init+0x2e>
        return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e0a3      	b.n	8002a4a <mpu_init+0x176>
    delay_ms(100);
 8002902:	2064      	movs	r0, #100	; 0x64
 8002904:	f002 f97e 	bl	8004c04 <mpu9255_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8002908:	2300      	movs	r3, #0
 800290a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800290c:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <mpu_init+0x180>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	7818      	ldrb	r0, [r3, #0]
 8002912:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <mpu_init+0x180>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	7d59      	ldrb	r1, [r3, #21]
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	2201      	movs	r2, #1
 800291e:	f002 f8db 	bl	8004ad8 <mpu9255_write>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <mpu_init+0x5a>
        return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	e08d      	b.n	8002a4a <mpu_init+0x176>

   st.chip_cfg.accel_half = 0;
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <mpu_init+0x180>)
 8002930:	2200      	movs	r2, #0
 8002932:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8002934:	2348      	movs	r3, #72	; 0x48
 8002936:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <mpu_init+0x180>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	7818      	ldrb	r0, [r3, #0]
 800293e:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <mpu_init+0x180>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	7a19      	ldrb	r1, [r3, #8]
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	2201      	movs	r2, #1
 800294a:	f002 f8c5 	bl	8004ad8 <mpu9255_write>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <mpu_init+0x86>
        return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	e077      	b.n	8002a4a <mpu_init+0x176>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800295a:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <mpu_init+0x180>)
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8002960:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <mpu_init+0x180>)
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <mpu_init+0x180>)
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <mpu_init+0x180>)
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <mpu_init+0x180>)
 8002974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002978:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <mpu_init+0x180>)
 800297c:	22ff      	movs	r2, #255	; 0xff
 800297e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8002980:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <mpu_init+0x180>)
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <mpu_init+0x180>)
 8002988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <mpu_init+0x180>)
 8002990:	2201      	movs	r2, #1
 8002992:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <mpu_init+0x180>)
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <mpu_init+0x180>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 80029a4:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <mpu_init+0x180>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <mpu_init+0x180>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80029b0:	220c      	movs	r2, #12
 80029b2:	2100      	movs	r1, #0
 80029b4:	4828      	ldr	r0, [pc, #160]	; (8002a58 <mpu_init+0x184>)
 80029b6:	f003 fd5d 	bl	8006474 <memset>
    st.chip_cfg.dmp_on = 0;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <mpu_init+0x180>)
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <mpu_init+0x180>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <mpu_init+0x180>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 80029d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029d4:	f000 f9e4 	bl	8002da0 <mpu_set_gyro_fsr>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <mpu_init+0x110>
        return -1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	e032      	b.n	8002a4a <mpu_init+0x176>
    if (mpu_set_accel_fsr(8))
 80029e4:	2008      	movs	r0, #8
 80029e6:	f000 fa69 	bl	8002ebc <mpu_set_accel_fsr>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <mpu_init+0x122>
        return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	e029      	b.n	8002a4a <mpu_init+0x176>
    if (mpu_set_lpf(188))
 80029f6:	20bc      	movs	r0, #188	; 0xbc
 80029f8:	f000 fac8 	bl	8002f8c <mpu_set_lpf>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <mpu_init+0x134>
        return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e020      	b.n	8002a4a <mpu_init+0x176>
    if (mpu_set_sample_rate(100))
 8002a08:	2064      	movs	r0, #100	; 0x64
 8002a0a:	f000 fb0d 	bl	8003028 <mpu_set_sample_rate>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <mpu_init+0x146>
        return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	e017      	b.n	8002a4a <mpu_init+0x176>
    if (mpu_configure_fifo(0))
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 fbb2 	bl	8003184 <mpu_configure_fifo>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <mpu_init+0x158>
        return -1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e00e      	b.n	8002a4a <mpu_init+0x176>
    if (int_param)
        reg_int_cb(int_param);
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8002a2c:	f000 ffd8 	bl	80039e0 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8002a30:	200a      	movs	r0, #10
 8002a32:	f000 fb67 	bl	8003104 <mpu_set_compass_sample_rate>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <mpu_init+0x16e>
        return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	e003      	b.n	8002a4a <mpu_init+0x176>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 fbf0 	bl	8003228 <mpu_set_sensors>
    return 0;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000008 	.word	0x20000008
 8002a58:	2000001e 	.word	0x2000001e

08002a5c <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b28      	cmp	r3, #40	; 0x28
 8002a6a:	d902      	bls.n	8002a72 <mpu_lp_accel_mode+0x16>
        return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	e08c      	b.n	8002b8c <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11c      	bne.n	8002ab2 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f000 fdf7 	bl	800366c <mpu_set_int_latched>
        tmp[0] = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8002a82:	2307      	movs	r3, #7
 8002a84:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	7818      	ldrb	r0, [r3, #0]
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	7d59      	ldrb	r1, [r3, #21]
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	2202      	movs	r2, #2
 8002a98:	f002 f81e 	bl	8004ad8 <mpu9255_write>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <mpu_lp_accel_mode+0x4c>
            return -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e071      	b.n	8002b8c <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	751a      	strb	r2, [r3, #20]
        return 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e06c      	b.n	8002b8c <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f000 fdda 	bl	800366c <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	733b      	strb	r3, [r7, #12]
 8002ac2:	e032      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d102      	bne.n	8002ad0 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8002aca:	2303      	movs	r3, #3
 8002acc:	733b      	strb	r3, [r7, #12]
 8002ace:	e02c      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d802      	bhi.n	8002adc <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	733b      	strb	r3, [r7, #12]
 8002ada:	e026      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	2b0a      	cmp	r3, #10
 8002ae0:	d802      	bhi.n	8002ae8 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	733b      	strb	r3, [r7, #12]
 8002ae6:	e020      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	2b14      	cmp	r3, #20
 8002aec:	d802      	bhi.n	8002af4 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8002aee:	2306      	movs	r3, #6
 8002af0:	733b      	strb	r3, [r7, #12]
 8002af2:	e01a      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	2b28      	cmp	r3, #40	; 0x28
 8002af8:	d802      	bhi.n	8002b00 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8002afa:	2307      	movs	r3, #7
 8002afc:	733b      	strb	r3, [r7, #12]
 8002afe:	e014      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	2b50      	cmp	r3, #80	; 0x50
 8002b04:	d802      	bhi.n	8002b0c <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 8002b06:	2308      	movs	r3, #8
 8002b08:	733b      	strb	r3, [r7, #12]
 8002b0a:	e00e      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b10:	d802      	bhi.n	8002b18 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8002b12:	2309      	movs	r3, #9
 8002b14:	733b      	strb	r3, [r7, #12]
 8002b16:	e008      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b1e:	d802      	bhi.n	8002b26 <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8002b20:	230a      	movs	r3, #10
 8002b22:	733b      	strb	r3, [r7, #12]
 8002b24:	e001      	b.n	8002b2a <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 8002b26:	230b      	movs	r3, #11
 8002b28:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	7818      	ldrb	r0, [r3, #0]
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	7a59      	ldrb	r1, [r3, #9]
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f001 ffcc 	bl	8004ad8 <mpu9255_write>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <mpu_lp_accel_mode+0xf0>
        return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	e01f      	b.n	8002b8c <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	7818      	ldrb	r0, [r3, #0]
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	7d59      	ldrb	r1, [r3, #21]
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	2201      	movs	r2, #1
 8002b62:	f001 ffb9 	bl	8004ad8 <mpu9255_write>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <mpu_lp_accel_mode+0x116>
        return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	e00c      	b.n	8002b8c <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b74:	2208      	movs	r2, #8
 8002b76:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <mpu_lp_accel_mode+0x138>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f000 fafd 	bl	8003184 <mpu_configure_fifo>

    return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000008 	.word	0x20000008

08002b98 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002b9e:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002ba0:	7a9b      	ldrb	r3, [r3, #10]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <mpu_reset_fifo+0x14>
        return -1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	e0f1      	b.n	8002d90 <mpu_reset_fifo+0x1f8>

    data = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002bb0:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	7818      	ldrb	r0, [r3, #0]
 8002bb6:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	7c59      	ldrb	r1, [r3, #17]
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f001 ff8a 	bl	8004ad8 <mpu9255_write>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <mpu_reset_fifo+0x38>
        return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e0df      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002bd0:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	7818      	ldrb	r0, [r3, #0]
 8002bd6:	4b70      	ldr	r3, [pc, #448]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	7959      	ldrb	r1, [r3, #5]
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	2201      	movs	r2, #1
 8002be0:	f001 ff7a 	bl	8004ad8 <mpu9255_write>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <mpu_reset_fifo+0x58>
        return -1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e0cf      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002bf0:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	7818      	ldrb	r0, [r3, #0]
 8002bf6:	4b68      	ldr	r3, [pc, #416]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	7919      	ldrb	r1, [r3, #4]
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f001 ff6a 	bl	8004ad8 <mpu9255_write>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <mpu_reset_fifo+0x78>
        return -1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	e0bf      	b.n	8002d90 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d05c      	beq.n	8002cd4 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	7818      	ldrb	r0, [r3, #0]
 8002c24:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	7919      	ldrb	r1, [r3, #4]
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f001 ff53 	bl	8004ad8 <mpu9255_write>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <mpu_reset_fifo+0xa6>
            return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	e0a8      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002c3e:	2032      	movs	r0, #50	; 0x32
 8002c40:	f001 ffe0 	bl	8004c04 <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c4a:	7a9b      	ldrb	r3, [r3, #10]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f043 0320 	orr.w	r3, r3, #32
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	7818      	ldrb	r0, [r3, #0]
 8002c64:	4b4c      	ldr	r3, [pc, #304]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	7919      	ldrb	r1, [r3, #4]
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f001 ff33 	bl	8004ad8 <mpu9255_write>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <mpu_reset_fifo+0xe6>
            return -1;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	e088      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8002c7e:	4b46      	ldr	r3, [pc, #280]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c80:	7c5b      	ldrb	r3, [r3, #17]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8002c86:	2302      	movs	r3, #2
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e001      	b.n	8002c90 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	7818      	ldrb	r0, [r3, #0]
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	7c59      	ldrb	r1, [r3, #17]
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f001 ff1a 	bl	8004ad8 <mpu9255_write>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <mpu_reset_fifo+0x118>
            return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e06f      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        data = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8002cb4:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	7818      	ldrb	r0, [r3, #0]
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	7959      	ldrb	r1, [r3, #5]
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f001 ff08 	bl	8004ad8 <mpu9255_write>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d05f      	beq.n	8002d8e <mpu_reset_fifo+0x1f6>
            return -1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e05d      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	7818      	ldrb	r0, [r3, #0]
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	7919      	ldrb	r1, [r3, #4]
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f001 fef6 	bl	8004ad8 <mpu9255_write>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <mpu_reset_fifo+0x160>
            return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e04b      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002cfa:	7c9b      	ldrb	r3, [r3, #18]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <mpu_reset_fifo+0x174>
 8002d00:	4b25      	ldr	r3, [pc, #148]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d02:	7a9b      	ldrb	r3, [r3, #10]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8002d0c:	2340      	movs	r3, #64	; 0x40
 8002d0e:	71fb      	strb	r3, [r7, #7]
 8002d10:	e001      	b.n	8002d16 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8002d12:	2360      	movs	r3, #96	; 0x60
 8002d14:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	7818      	ldrb	r0, [r3, #0]
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	7919      	ldrb	r1, [r3, #4]
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	2201      	movs	r2, #1
 8002d26:	f001 fed7 	bl	8004ad8 <mpu9255_write>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <mpu_reset_fifo+0x19e>
            return -1;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	e02c      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8002d36:	2032      	movs	r0, #50	; 0x32
 8002d38:	f001 ff64 	bl	8004c04 <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d3e:	7c5b      	ldrb	r3, [r3, #17]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8002d44:	2301      	movs	r3, #1
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	e001      	b.n	8002d4e <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	7818      	ldrb	r0, [r3, #0]
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	7c59      	ldrb	r1, [r3, #17]
 8002d5a:	1dfb      	adds	r3, r7, #7
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f001 febb 	bl	8004ad8 <mpu9255_write>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <mpu_reset_fifo+0x1d6>
            return -1;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e010      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	7818      	ldrb	r0, [r3, #0]
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <mpu_reset_fifo+0x200>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	7959      	ldrb	r1, [r3, #5]
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <mpu_reset_fifo+0x204>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f001 feab 	bl	8004ad8 <mpu9255_write>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <mpu_reset_fifo+0x1f6>
            return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8c:	e000      	b.n	8002d90 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	20000018 	.word	0x20000018

08002da0 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <mpu_set_gyro_fsr+0xa4>)
 8002dac:	7a9b      	ldrb	r3, [r3, #10]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <mpu_set_gyro_fsr+0x18>
        return -1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	e041      	b.n	8002e3c <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dbe:	d017      	beq.n	8002df0 <mpu_set_gyro_fsr+0x50>
 8002dc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dc4:	dc17      	bgt.n	8002df6 <mpu_set_gyro_fsr+0x56>
 8002dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dca:	d00e      	beq.n	8002dea <mpu_set_gyro_fsr+0x4a>
 8002dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd0:	dc11      	bgt.n	8002df6 <mpu_set_gyro_fsr+0x56>
 8002dd2:	2bfa      	cmp	r3, #250	; 0xfa
 8002dd4:	d003      	beq.n	8002dde <mpu_set_gyro_fsr+0x3e>
 8002dd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dda:	d003      	beq.n	8002de4 <mpu_set_gyro_fsr+0x44>
 8002ddc:	e00b      	b.n	8002df6 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
        break;
 8002de2:	e00b      	b.n	8002dfc <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8002de4:	2308      	movs	r3, #8
 8002de6:	73fb      	strb	r3, [r7, #15]
        break;
 8002de8:	e008      	b.n	8002dfc <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8002dea:	2310      	movs	r3, #16
 8002dec:	73fb      	strb	r3, [r7, #15]
        break;
 8002dee:	e005      	b.n	8002dfc <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8002df0:	2318      	movs	r3, #24
 8002df2:	73fb      	strb	r3, [r7, #15]
        break;
 8002df4:	e002      	b.n	8002dfc <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	e01f      	b.n	8002e3c <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <mpu_set_gyro_fsr+0xa4>)
 8002dfe:	7a1a      	ldrb	r2, [r3, #8]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	08db      	lsrs	r3, r3, #3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d101      	bne.n	8002e0e <mpu_set_gyro_fsr+0x6e>
        return 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e016      	b.n	8002e3c <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <mpu_set_gyro_fsr+0xa4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	7818      	ldrb	r0, [r3, #0]
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <mpu_set_gyro_fsr+0xa4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	7999      	ldrb	r1, [r3, #6]
 8002e1a:	f107 030f 	add.w	r3, r7, #15
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f001 fe5a 	bl	8004ad8 <mpu9255_write>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <mpu_set_gyro_fsr+0x90>
        return -1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e005      	b.n	8002e3c <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <mpu_set_gyro_fsr+0xa4>)
 8002e38:	721a      	strb	r2, [r3, #8]
    return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000008 	.word	0x20000008

08002e48 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <mpu_get_accel_fsr+0x70>)
 8002e52:	7a5b      	ldrb	r3, [r3, #9]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d81b      	bhi.n	8002e90 <mpu_get_accel_fsr+0x48>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <mpu_get_accel_fsr+0x18>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e79 	.word	0x08002e79
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e89 	.word	0x08002e89
    case INV_FSR_2G:
        fsr[0] = 2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	701a      	strb	r2, [r3, #0]
        break;
 8002e76:	e00e      	b.n	8002e96 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	701a      	strb	r2, [r3, #0]
        break;
 8002e7e:	e00a      	b.n	8002e96 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2208      	movs	r2, #8
 8002e84:	701a      	strb	r2, [r3, #0]
        break;
 8002e86:	e006      	b.n	8002e96 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	701a      	strb	r2, [r3, #0]
        break;
 8002e8e:	e002      	b.n	8002e96 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e00a      	b.n	8002eac <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <mpu_get_accel_fsr+0x70>)
 8002e98:	7cdb      	ldrb	r3, [r3, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	701a      	strb	r2, [r3, #0]
    return 0;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20000008 	.word	0x20000008

08002ebc <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <mpu_set_accel_fsr+0xcc>)
 8002ec8:	7a9b      	ldrb	r3, [r3, #10]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <mpu_set_accel_fsr+0x18>
        return -1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e054      	b.n	8002f7e <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	3b02      	subs	r3, #2
 8002ed8:	2b0e      	cmp	r3, #14
 8002eda:	d82d      	bhi.n	8002f38 <mpu_set_accel_fsr+0x7c>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <mpu_set_accel_fsr+0x28>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f39 	.word	0x08002f39
 8002eec:	08002f27 	.word	0x08002f27
 8002ef0:	08002f39 	.word	0x08002f39
 8002ef4:	08002f39 	.word	0x08002f39
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f2d 	.word	0x08002f2d
 8002f00:	08002f39 	.word	0x08002f39
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f39 	.word	0x08002f39
 8002f1c:	08002f33 	.word	0x08002f33
    case 2:
        data = INV_FSR_2G << 3;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
        break;
 8002f24:	e00b      	b.n	8002f3e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8002f26:	2308      	movs	r3, #8
 8002f28:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2a:	e008      	b.n	8002f3e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f30:	e005      	b.n	8002f3e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8002f32:	2318      	movs	r3, #24
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e002      	b.n	8002f3e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e01f      	b.n	8002f7e <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <mpu_set_accel_fsr+0xcc>)
 8002f40:	7a5a      	ldrb	r2, [r3, #9]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d101      	bne.n	8002f50 <mpu_set_accel_fsr+0x94>
        return 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e016      	b.n	8002f7e <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <mpu_set_accel_fsr+0xcc>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	7818      	ldrb	r0, [r3, #0]
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <mpu_set_accel_fsr+0xcc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	79d9      	ldrb	r1, [r3, #7]
 8002f5c:	f107 030f 	add.w	r3, r7, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	f001 fdb9 	bl	8004ad8 <mpu9255_write>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <mpu_set_accel_fsr+0xb6>
        return -1;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f70:	e005      	b.n	8002f7e <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <mpu_set_accel_fsr+0xcc>)
 8002f7a:	725a      	strb	r2, [r3, #9]
    return 0;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000008 	.word	0x20000008

08002f8c <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8002f96:	4b23      	ldr	r3, [pc, #140]	; (8003024 <mpu_set_lpf+0x98>)
 8002f98:	7a9b      	ldrb	r3, [r3, #10]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <mpu_set_lpf+0x18>
        return -1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e03b      	b.n	800301c <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2bbb      	cmp	r3, #187	; 0xbb
 8002fa8:	d902      	bls.n	8002fb0 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e019      	b.n	8002fe4 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b61      	cmp	r3, #97	; 0x61
 8002fb4:	d902      	bls.n	8002fbc <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e013      	b.n	8002fe4 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b29      	cmp	r3, #41	; 0x29
 8002fc0:	d902      	bls.n	8002fc8 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e00d      	b.n	8002fe4 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b13      	cmp	r3, #19
 8002fcc:	d902      	bls.n	8002fd4 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e007      	b.n	8002fe4 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b09      	cmp	r3, #9
 8002fd8:	d902      	bls.n	8002fe0 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8002fda:	2305      	movs	r3, #5
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e001      	b.n	8002fe4 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8002fe0:	2306      	movs	r3, #6
 8002fe2:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <mpu_set_lpf+0x98>)
 8002fe6:	7ada      	ldrb	r2, [r3, #11]
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d101      	bne.n	8002ff2 <mpu_set_lpf+0x66>
        return 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e014      	b.n	800301c <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <mpu_set_lpf+0x98>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	7818      	ldrb	r0, [r3, #0]
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <mpu_set_lpf+0x98>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	7899      	ldrb	r1, [r3, #2]
 8002ffe:	f107 030f 	add.w	r3, r7, #15
 8003002:	2201      	movs	r2, #1
 8003004:	f001 fd68 	bl	8004ad8 <mpu9255_write>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <mpu_set_lpf+0x88>
        return -1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e003      	b.n	800301c <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <mpu_set_lpf+0x98>)
 8003018:	72da      	strb	r2, [r3, #11]
    return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000008 	.word	0x20000008

08003028 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <mpu_set_sample_rate+0xd8>)
 8003034:	7a9b      	ldrb	r3, [r3, #10]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <mpu_set_sample_rate+0x18>
        return -1;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	e05b      	b.n	80030f8 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <mpu_set_sample_rate+0xd8>)
 8003042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <mpu_set_sample_rate+0x28>
        return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e053      	b.n	80030f8 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <mpu_set_sample_rate+0xd8>)
 8003052:	7d1b      	ldrb	r3, [r3, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <mpu_set_sample_rate+0x48>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b28      	cmp	r3, #40	; 0x28
 8003062:	d805      	bhi.n	8003070 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fcf8 	bl	8002a5c <mpu_lp_accel_mode>
                return 0;
 800306c:	2300      	movs	r3, #0
 800306e:	e043      	b.n	80030f8 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8003070:	2000      	movs	r0, #0
 8003072:	f7ff fcf3 	bl	8002a5c <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d802      	bhi.n	8003082 <mpu_set_sample_rate+0x5a>
            rate = 4;
 800307c:	2304      	movs	r3, #4
 800307e:	80fb      	strh	r3, [r7, #6]
 8003080:	e006      	b.n	8003090 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003088:	d902      	bls.n	8003090 <mpu_set_sample_rate+0x68>
            rate = 1000;
 800308a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308e:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003096:	fb92 f3f3 	sdiv	r3, r2, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <mpu_set_sample_rate+0xd8>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	7818      	ldrb	r0, [r3, #0]
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <mpu_set_sample_rate+0xd8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	7859      	ldrb	r1, [r3, #1]
 80030ae:	f107 030f 	add.w	r3, r7, #15
 80030b2:	2201      	movs	r2, #1
 80030b4:	f001 fd10 	bl	8004ad8 <mpu9255_write>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <mpu_set_sample_rate+0x9c>
            return -1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	e019      	b.n	80030f8 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <mpu_set_sample_rate+0xd8>)
 80030d4:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <mpu_set_sample_rate+0xd8>)
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	bf28      	it	cs
 80030de:	2364      	movcs	r3, #100	; 0x64
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f80e 	bl	8003104 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <mpu_set_sample_rate+0xd8>)
 80030ea:	89db      	ldrh	r3, [r3, #14]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff4b 	bl	8002f8c <mpu_set_lpf>
        return 0;
 80030f6:	2300      	movs	r3, #0
    }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000008 	.word	0x20000008

08003104 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <mpu_set_compass_sample_rate+0x20>
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 8003116:	89db      	ldrh	r3, [r3, #14]
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	429a      	cmp	r2, r3
 800311c:	d802      	bhi.n	8003124 <mpu_set_compass_sample_rate+0x20>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d902      	bls.n	800312a <mpu_set_compass_sample_rate+0x26>
        return -1;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	e026      	b.n	8003178 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 800312c:	89da      	ldrh	r2, [r3, #14]
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	b29b      	uxth	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	7818      	ldrb	r0, [r3, #0]
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 800314c:	f107 030f 	add.w	r3, r7, #15
 8003150:	2201      	movs	r2, #1
 8003152:	f001 fcc1 	bl	8004ad8 <mpu9255_write>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <mpu_set_compass_sample_rate+0x5e>
        return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e00a      	b.n	8003178 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 8003164:	89db      	ldrh	r3, [r3, #14]
 8003166:	461a      	mov	r2, r3
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	3301      	adds	r3, #1
 800316c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b03      	ldr	r3, [pc, #12]	; (8003180 <mpu_set_compass_sample_rate+0x7c>)
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 8003176:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000008 	.word	0x20000008

08003184 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <mpu_configure_fifo+0xa0>)
 800319c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <mpu_configure_fifo+0x24>
        return 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e038      	b.n	800321a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80031a8:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031aa:	7a9b      	ldrb	r3, [r3, #10]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <mpu_configure_fifo+0x32>
            return -1;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	e031      	b.n	800321a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031b8:	7c1b      	ldrb	r3, [r3, #16]
 80031ba:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031be:	7a9a      	ldrb	r2, [r3, #10]
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031c8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031cc:	7c1b      	ldrb	r3, [r3, #16]
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d003      	beq.n	80031dc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e001      	b.n	80031e0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <mpu_configure_fifo+0x6a>
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <mpu_configure_fifo+0xa0>)
 80031e8:	7d1b      	ldrb	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f7ff fb16 	bl	8002820 <set_int_enable>
 80031f4:	e002      	b.n	80031fc <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7ff fb12 	bl	8002820 <set_int_enable>
        if (sensors) {
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8003202:	f7ff fcc9 	bl	8002b98 <mpu_reset_fifo>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800320c:	4a05      	ldr	r2, [pc, #20]	; (8003224 <mpu_configure_fifo+0xa0>)
 800320e:	7afb      	ldrb	r3, [r7, #11]
 8003210:	7413      	strb	r3, [r2, #16]
                return -1;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e000      	b.n	800321a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8003218:	68fb      	ldr	r3, [r7, #12]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000008 	.word	0x20000008

08003228 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e007      	b.n	8003252 <mpu_set_sensors+0x2a>
    else if (sensors)
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <mpu_set_sensors+0x26>
        data = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e001      	b.n	8003252 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	7818      	ldrb	r0, [r3, #0]
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <mpu_set_sensors+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	7d59      	ldrb	r1, [r3, #21]
 800325e:	f107 030f 	add.w	r3, r7, #15
 8003262:	2201      	movs	r2, #1
 8003264:	f001 fc38 	bl	8004ad8 <mpu9255_write>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 800326e:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003270:	2200      	movs	r2, #0
 8003272:	729a      	strb	r2, [r3, #10]
        return -1;
 8003274:	f04f 33ff 	mov.w	r3, #4294967295
 8003278:	e0ae      	b.n	80033d8 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003284:	731a      	strb	r2, [r3, #12]

    data = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	7818      	ldrb	r0, [r3, #0]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	7d99      	ldrb	r1, [r3, #22]
 80032e6:	f107 030f 	add.w	r3, r7, #15
 80032ea:	2201      	movs	r2, #1
 80032ec:	f001 fbf4 	bl	8004ad8 <mpu9255_write>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80032f6:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	729a      	strb	r2, [r3, #10]
        return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003300:	e06a      	b.n	80033d8 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <mpu_set_sensors+0xec>
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b08      	cmp	r3, #8
 800330c:	d002      	beq.n	8003314 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800330e:	2000      	movs	r0, #0
 8003310:	f000 f9ac 	bl	800366c <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	7818      	ldrb	r0, [r3, #0]
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <mpu_set_sensors+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	7919      	ldrb	r1, [r3, #4]
 8003320:	f107 030e 	add.w	r3, r7, #14
 8003324:	2201      	movs	r2, #1
 8003326:	f001 fc23 	bl	8004b70 <mpu9255_read>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <mpu_set_sensors+0x10e>
        return -1;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e050      	b.n	80033d8 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8003340:	2311      	movs	r3, #17
 8003342:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	f043 0320 	orr.w	r3, r3, #32
 800334a:	b2db      	uxtb	r3, r3
 800334c:	73bb      	strb	r3, [r7, #14]
 800334e:	e006      	b.n	800335e <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8003350:	2310      	movs	r3, #16
 8003352:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	f023 0320 	bic.w	r3, r3, #32
 800335a:	b2db      	uxtb	r3, r3
 800335c:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800336e:	b2db      	uxtb	r3, r3
 8003370:	73bb      	strb	r3, [r7, #14]
 8003372:	e004      	b.n	800337e <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800337a:	b2db      	uxtb	r3, r3
 800337c:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	7818      	ldrb	r0, [r3, #0]
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <mpu_set_sensors+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800338c:	f107 030f 	add.w	r3, r7, #15
 8003390:	2201      	movs	r2, #1
 8003392:	f001 fba1 	bl	8004ad8 <mpu9255_write>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <mpu_set_sensors+0x17a>
        return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
 80033a0:	e01a      	b.n	80033d8 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	7818      	ldrb	r0, [r3, #0]
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	7919      	ldrb	r1, [r3, #4]
 80033ae:	f107 030e 	add.w	r3, r7, #14
 80033b2:	2201      	movs	r2, #1
 80033b4:	f001 fb90 	bl	8004ad8 <mpu9255_write>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <mpu_set_sensors+0x19c>
        return -1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	e009      	b.n	80033d8 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80033c4:	4a06      	ldr	r2, [pc, #24]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <mpu_set_sensors+0x1b8>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80033d0:	2032      	movs	r0, #50	; 0x32
 80033d2:	f001 fc17 	bl	8004c04 <mpu9255_delay_ms>
    return 0;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000008 	.word	0x20000008

080033e4 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 80033f2:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <mpu_read_fifo_stream+0x1e>
        return -1;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e068      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8003402:	4b36      	ldr	r3, [pc, #216]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 8003404:	7a9b      	ldrb	r3, [r3, #10]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <mpu_read_fifo_stream+0x2c>
        return -1;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e061      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	7818      	ldrb	r0, [r3, #0]
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	7b19      	ldrb	r1, [r3, #12]
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2202      	movs	r2, #2
 8003422:	f001 fba5 	bl	8004b70 <mpu9255_read>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <mpu_read_fifo_stream+0x4e>
        return -1;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e050      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8003432:	7d3b      	ldrb	r3, [r7, #20]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	b21a      	sxth	r2, r3
 8003438:	7d7b      	ldrb	r3, [r7, #21]
 800343a:	b21b      	sxth	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b21b      	sxth	r3, r3
 8003440:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8003442:	8afa      	ldrh	r2, [r7, #22]
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	429a      	cmp	r2, r3
 8003448:	d205      	bcs.n	8003456 <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
        return -1;
 8003450:	f04f 33ff 	mov.w	r3, #4294967295
 8003454:	e03e      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8003456:	4b21      	ldr	r3, [pc, #132]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	885b      	ldrh	r3, [r3, #2]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	8afa      	ldrh	r2, [r7, #22]
 8003462:	429a      	cmp	r2, r3
 8003464:	d91a      	bls.n	800349c <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	7818      	ldrb	r0, [r3, #0]
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	7cd9      	ldrb	r1, [r3, #19]
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	2201      	movs	r2, #1
 8003478:	f001 fb7a 	bl	8004b70 <mpu9255_read>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <mpu_read_fifo_stream+0xa4>
            return -1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e025      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8003488:	7d3b      	ldrb	r3, [r7, #20]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8003492:	f7ff fb81 	bl	8002b98 <mpu_reset_fifo>
            return -2;
 8003496:	f06f 0301 	mvn.w	r3, #1
 800349a:	e01b      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	7818      	ldrb	r0, [r3, #0]
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <mpu_read_fifo_stream+0xf8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	7b59      	ldrb	r1, [r3, #13]
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f001 fb5f 	bl	8004b70 <mpu9255_read>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <mpu_read_fifo_stream+0xda>
        return -1;
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
 80034bc:	e00a      	b.n	80034d4 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 80034be:	8afa      	ldrh	r2, [r7, #22]
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	701a      	strb	r2, [r3, #0]
    return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000008 	.word	0x20000008

080034e0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80034ea:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <mpu_set_bypass+0x188>)
 80034ec:	7c9b      	ldrb	r3, [r3, #18]
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d101      	bne.n	80034f8 <mpu_set_bypass+0x18>
        return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e0b2      	b.n	800365e <mpu_set_bypass+0x17e>

    if (bypass_on) {
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d050      	beq.n	80035a0 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80034fe:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <mpu_set_bypass+0x188>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	7818      	ldrb	r0, [r3, #0]
 8003504:	4b58      	ldr	r3, [pc, #352]	; (8003668 <mpu_set_bypass+0x188>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	7919      	ldrb	r1, [r3, #4]
 800350a:	f107 030f 	add.w	r3, r7, #15
 800350e:	2201      	movs	r2, #1
 8003510:	f001 fb2e 	bl	8004b70 <mpu9255_read>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <mpu_set_bypass+0x40>
            return -1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	e09e      	b.n	800365e <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	b2db      	uxtb	r3, r3
 8003528:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800352a:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <mpu_set_bypass+0x188>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	7818      	ldrb	r0, [r3, #0]
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <mpu_set_bypass+0x188>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	7919      	ldrb	r1, [r3, #4]
 8003536:	f107 030f 	add.w	r3, r7, #15
 800353a:	2201      	movs	r2, #1
 800353c:	f001 facc 	bl	8004ad8 <mpu9255_write>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <mpu_set_bypass+0x6c>
            return -1;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e088      	b.n	800365e <mpu_set_bypass+0x17e>
        delay_ms(3);
 800354c:	2003      	movs	r0, #3
 800354e:	f001 fb59 	bl	8004c04 <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 8003552:	2302      	movs	r3, #2
 8003554:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <mpu_set_bypass+0x188>)
 8003558:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003566:	b2db      	uxtb	r3, r3
 8003568:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <mpu_set_bypass+0x188>)
 800356c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800357a:	b2db      	uxtb	r3, r3
 800357c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <mpu_set_bypass+0x188>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	7818      	ldrb	r0, [r3, #0]
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <mpu_set_bypass+0x188>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	7dd9      	ldrb	r1, [r3, #23]
 800358a:	f107 030f 	add.w	r3, r7, #15
 800358e:	2201      	movs	r2, #1
 8003590:	f001 faa2 	bl	8004ad8 <mpu9255_write>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d05d      	beq.n	8003656 <mpu_set_bypass+0x176>
            return -1;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	e05e      	b.n	800365e <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <mpu_set_bypass+0x188>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	7818      	ldrb	r0, [r3, #0]
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <mpu_set_bypass+0x188>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	7919      	ldrb	r1, [r3, #4]
 80035ac:	f107 030f 	add.w	r3, r7, #15
 80035b0:	2201      	movs	r2, #1
 80035b2:	f001 fadd 	bl	8004b70 <mpu9255_read>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <mpu_set_bypass+0xe2>
            return -1;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	e04d      	b.n	800365e <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <mpu_set_bypass+0x188>)
 80035c4:	7a9b      	ldrb	r3, [r3, #10]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	f043 0320 	orr.w	r3, r3, #32
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e004      	b.n	80035e4 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	f023 0320 	bic.w	r3, r3, #32
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <mpu_set_bypass+0x188>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	7818      	ldrb	r0, [r3, #0]
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <mpu_set_bypass+0x188>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	7919      	ldrb	r1, [r3, #4]
 80035f0:	f107 030f 	add.w	r3, r7, #15
 80035f4:	2201      	movs	r2, #1
 80035f6:	f001 fa6f 	bl	8004ad8 <mpu9255_write>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <mpu_set_bypass+0x126>
            return -1;
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
 8003604:	e02b      	b.n	800365e <mpu_set_bypass+0x17e>
        delay_ms(3);
 8003606:	2003      	movs	r0, #3
 8003608:	f001 fafc 	bl	8004c04 <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <mpu_set_bypass+0x188>)
 800360e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e001      	b.n	8003620 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <mpu_set_bypass+0x188>)
 8003622:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003630:	b2db      	uxtb	r3, r3
 8003632:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <mpu_set_bypass+0x188>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	7818      	ldrb	r0, [r3, #0]
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <mpu_set_bypass+0x188>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	7dd9      	ldrb	r1, [r3, #23]
 8003640:	f107 030f 	add.w	r3, r7, #15
 8003644:	2201      	movs	r2, #1
 8003646:	f001 fa47 	bl	8004ad8 <mpu9255_write>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <mpu_set_bypass+0x176>
            return -1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
 8003654:	e003      	b.n	800365e <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <mpu_set_bypass+0x188>)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	7493      	strb	r3, [r2, #18]
    return 0;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000008 	.word	0x20000008

0800366c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <mpu_set_int_latched+0x84>)
 8003678:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800367c:	79fa      	ldrb	r2, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d101      	bne.n	8003686 <mpu_set_int_latched+0x1a>
        return 0;
 8003682:	2300      	movs	r3, #0
 8003684:	e030      	b.n	80036e8 <mpu_set_int_latched+0x7c>

    if (enable)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800368c:	2330      	movs	r3, #48	; 0x30
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	e001      	b.n	8003696 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <mpu_set_int_latched+0x84>)
 8003698:	7c9b      	ldrb	r3, [r3, #18]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <mpu_set_int_latched+0x84>)
 80036aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <mpu_set_int_latched+0x84>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	7818      	ldrb	r0, [r3, #0]
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <mpu_set_int_latched+0x84>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	7dd9      	ldrb	r1, [r3, #23]
 80036c8:	f107 030f 	add.w	r3, r7, #15
 80036cc:	2201      	movs	r2, #1
 80036ce:	f001 fa03 	bl	8004ad8 <mpu9255_write>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <mpu_set_int_latched+0x72>
        return -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	e004      	b.n	80036e8 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <mpu_set_int_latched+0x84>)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000008 	.word	0x20000008

080036f4 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	603a      	str	r2, [r7, #0]
 80036fe:	80fb      	strh	r3, [r7, #6]
 8003700:	460b      	mov	r3, r1
 8003702:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <mpu_write_mem+0x1c>
        return -1;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	e03d      	b.n	800378c <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <mpu_write_mem+0xa0>)
 8003712:	7a9b      	ldrb	r3, [r3, #10]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <mpu_write_mem+0x2a>
        return -1;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	e036      	b.n	800378c <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	b29b      	uxth	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800372e:	7b7b      	ldrb	r3, [r7, #13]
 8003730:	461a      	mov	r2, r3
 8003732:	88bb      	ldrh	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <mpu_write_mem+0xa0>)
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	8952      	ldrh	r2, [r2, #10]
 800373c:	4293      	cmp	r3, r2
 800373e:	dd02      	ble.n	8003746 <mpu_write_mem+0x52>
        return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	e022      	b.n	800378c <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <mpu_write_mem+0xa0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	7818      	ldrb	r0, [r3, #0]
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <mpu_write_mem+0xa0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	7ed9      	ldrb	r1, [r3, #27]
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2202      	movs	r2, #2
 8003758:	f001 f9be 	bl	8004ad8 <mpu9255_write>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <mpu_write_mem+0x74>
        return -1;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	e011      	b.n	800378c <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <mpu_write_mem+0xa0>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	7818      	ldrb	r0, [r3, #0]
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <mpu_write_mem+0xa0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	7e19      	ldrb	r1, [r3, #24]
 8003774:	88bb      	ldrh	r3, [r7, #4]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f001 f9ad 	bl	8004ad8 <mpu9255_write>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <mpu_write_mem+0x96>
        return -1;
 8003784:	f04f 33ff 	mov.w	r3, #4294967295
 8003788:	e000      	b.n	800378c <mpu_write_mem+0x98>
    return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000008 	.word	0x20000008

08003798 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	603a      	str	r2, [r7, #0]
 80037a2:	80fb      	strh	r3, [r7, #6]
 80037a4:	460b      	mov	r3, r1
 80037a6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <mpu_read_mem+0x1c>
        return -1;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	e03d      	b.n	8003830 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 80037b4:	4b20      	ldr	r3, [pc, #128]	; (8003838 <mpu_read_mem+0xa0>)
 80037b6:	7a9b      	ldrb	r3, [r3, #10]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <mpu_read_mem+0x2a>
        return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	e036      	b.n	8003830 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80037d2:	7b7b      	ldrb	r3, [r7, #13]
 80037d4:	461a      	mov	r2, r3
 80037d6:	88bb      	ldrh	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <mpu_read_mem+0xa0>)
 80037dc:	6852      	ldr	r2, [r2, #4]
 80037de:	8952      	ldrh	r2, [r2, #10]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	dd02      	ble.n	80037ea <mpu_read_mem+0x52>
        return -1;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	e022      	b.n	8003830 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <mpu_read_mem+0xa0>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	7818      	ldrb	r0, [r3, #0]
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <mpu_read_mem+0xa0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	7ed9      	ldrb	r1, [r3, #27]
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	2202      	movs	r2, #2
 80037fc:	f001 f96c 	bl	8004ad8 <mpu9255_write>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <mpu_read_mem+0x74>
        return -1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e011      	b.n	8003830 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <mpu_read_mem+0xa0>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	7818      	ldrb	r0, [r3, #0]
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <mpu_read_mem+0xa0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	7e19      	ldrb	r1, [r3, #24]
 8003818:	88bb      	ldrh	r3, [r7, #4]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f001 f9a7 	bl	8004b70 <mpu9255_read>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <mpu_read_mem+0x96>
        return -1;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e000      	b.n	8003830 <mpu_read_mem+0x98>
    return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000008 	.word	0x20000008

0800383c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	4611      	mov	r1, r2
 8003846:	461a      	mov	r2, r3
 8003848:	4603      	mov	r3, r0
 800384a:	81fb      	strh	r3, [r7, #14]
 800384c:	460b      	mov	r3, r1
 800384e:	81bb      	strh	r3, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <mpu_load_firmware+0xf8>)
 8003856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	e062      	b.n	800392a <mpu_load_firmware+0xee>

    if (!firmware)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <mpu_load_firmware+0x34>
        return -1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e05c      	b.n	800392a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8003870:	2300      	movs	r3, #0
 8003872:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003874:	e034      	b.n	80038e0 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003876:	89fa      	ldrh	r2, [r7, #14]
 8003878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b10      	cmp	r3, #16
 800387e:	bfa8      	it	ge
 8003880:	2310      	movge	r3, #16
 8003882:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	441a      	add	r2, r3
 800388a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800388c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff30 	bl	80036f4 <mpu_write_mem>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <mpu_load_firmware+0x64>
            return -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e044      	b.n	800392a <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 80038a0:	f107 0214 	add.w	r2, r7, #20
 80038a4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80038a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff75 	bl	8003798 <mpu_read_mem>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <mpu_load_firmware+0x7e>
            return -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	e037      	b.n	800392a <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 80038ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	4413      	add	r3, r2
 80038c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038c2:	f107 0114 	add.w	r1, r7, #20
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 fdb6 	bl	8006438 <memcmp>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <mpu_load_firmware+0x9c>
            return -2;
 80038d2:	f06f 0301 	mvn.w	r3, #1
 80038d6:	e028      	b.n	800392a <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80038d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038dc:	4413      	add	r3, r2
 80038de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d3c6      	bcc.n	8003876 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80038e8:	89bb      	ldrh	r3, [r7, #12]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80038f2:	89bb      	ldrh	r3, [r7, #12]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <mpu_load_firmware+0xf8>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	7818      	ldrb	r0, [r3, #0]
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <mpu_load_firmware+0xf8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	7f59      	ldrb	r1, [r3, #29]
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	2202      	movs	r2, #2
 800390a:	f001 f8e5 	bl	8004ad8 <mpu9255_write>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <mpu_load_firmware+0xde>
        return -1;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	e007      	b.n	800392a <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <mpu_load_firmware+0xf8>)
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <mpu_load_firmware+0xf8>)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000008 	.word	0x20000008

08003938 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <mpu_set_dmp_state+0xa4>)
 8003944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003948:	79fa      	ldrb	r2, [r7, #7]
 800394a:	429a      	cmp	r2, r3
 800394c:	d101      	bne.n	8003952 <mpu_set_dmp_state+0x1a>
        return 0;
 800394e:	2300      	movs	r3, #0
 8003950:	e040      	b.n	80039d4 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d027      	beq.n	80039a8 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8003958:	4b20      	ldr	r3, [pc, #128]	; (80039dc <mpu_set_dmp_state+0xa4>)
 800395a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <mpu_set_dmp_state+0x30>
            return -1;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	e035      	b.n	80039d4 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003968:	2000      	movs	r0, #0
 800396a:	f7fe ff59 	bl	8002820 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff fdb6 	bl	80034e0 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <mpu_set_dmp_state+0xa4>)
 8003976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fb55 	bl	8003028 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <mpu_set_dmp_state+0xa4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	7818      	ldrb	r0, [r3, #0]
 8003988:	f107 030f 	add.w	r3, r7, #15
 800398c:	2201      	movs	r2, #1
 800398e:	2123      	movs	r1, #35	; 0x23
 8003990:	f001 f8a2 	bl	8004ad8 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <mpu_set_dmp_state+0xa4>)
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800399c:	2001      	movs	r0, #1
 800399e:	f7fe ff3f 	bl	8002820 <set_int_enable>
        mpu_reset_fifo();
 80039a2:	f7ff f8f9 	bl	8002b98 <mpu_reset_fifo>
 80039a6:	e014      	b.n	80039d2 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7fe ff39 	bl	8002820 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <mpu_set_dmp_state+0xa4>)
 80039b0:	7c1b      	ldrb	r3, [r3, #16]
 80039b2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <mpu_set_dmp_state+0xa4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	7818      	ldrb	r0, [r3, #0]
 80039ba:	f107 030f 	add.w	r3, r7, #15
 80039be:	2201      	movs	r2, #1
 80039c0:	2123      	movs	r1, #35	; 0x23
 80039c2:	f001 f889 	bl	8004ad8 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <mpu_set_dmp_state+0xa4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 80039ce:	f7ff f8e3 	bl	8002b98 <mpu_reset_fifo>
    }
    return 0;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000008 	.word	0x20000008

080039e0 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7ff fd7a 	bl	80034e0 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80039ec:	230c      	movs	r3, #12
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e00f      	b.n	8003a12 <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	7bf8      	ldrb	r0, [r7, #15]
 80039f6:	2201      	movs	r2, #1
 80039f8:	2100      	movs	r1, #0
 80039fa:	f001 f8b9 	bl	8004b70 <mpu9255_read>
 80039fe:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <setup_compass+0x2c>
 8003a06:	793b      	ldrb	r3, [r7, #4]
 8003a08:	2b48      	cmp	r3, #72	; 0x48
 8003a0a:	d006      	beq.n	8003a1a <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	d9ec      	bls.n	80039f2 <setup_compass+0x12>
 8003a18:	e000      	b.n	8003a1c <setup_compass+0x3c>
            break;
 8003a1a:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d902      	bls.n	8003a28 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        //log_e("Compass not found.\n");
        return -1;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	e112      	b.n	8003c4e <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8003a28:	4a8b      	ldr	r2, [pc, #556]	; (8003c58 <setup_compass+0x278>)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8003a30:	2310      	movs	r3, #16
 8003a32:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <setup_compass+0x278>)
 8003a36:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	210a      	movs	r1, #10
 8003a40:	f001 f84a 	bl	8004ad8 <mpu9255_write>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <setup_compass+0x70>
        return -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e0fe      	b.n	8003c4e <setup_compass+0x26e>
    delay_ms(1);
 8003a50:	2001      	movs	r0, #1
 8003a52:	f001 f8d7 	bl	8004c04 <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8003a56:	231f      	movs	r3, #31
 8003a58:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <setup_compass+0x278>)
 8003a5c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	2201      	movs	r2, #1
 8003a64:	210a      	movs	r1, #10
 8003a66:	f001 f837 	bl	8004ad8 <mpu9255_write>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <setup_compass+0x96>
        return -1;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295
 8003a74:	e0eb      	b.n	8003c4e <setup_compass+0x26e>
    delay_ms(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f001 f8c4 	bl	8004c04 <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8003a7c:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <setup_compass+0x278>)
 8003a7e:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	2203      	movs	r2, #3
 8003a86:	2110      	movs	r1, #16
 8003a88:	f001 f872 	bl	8004b70 <mpu9255_read>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <setup_compass+0xb8>
        return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e0da      	b.n	8003c4e <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8003a98:	793b      	ldrb	r3, [r7, #4]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3380      	adds	r3, #128	; 0x80
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	b21a      	sxth	r2, r3
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <setup_compass+0x278>)
 8003aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8003aa6:	797b      	ldrb	r3, [r7, #5]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3380      	adds	r3, #128	; 0x80
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	4b69      	ldr	r3, [pc, #420]	; (8003c58 <setup_compass+0x278>)
 8003ab2:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3380      	adds	r3, #128	; 0x80
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	b21a      	sxth	r2, r3
 8003abe:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <setup_compass+0x278>)
 8003ac0:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003ac6:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <setup_compass+0x278>)
 8003ac8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	2201      	movs	r2, #1
 8003ad0:	210a      	movs	r1, #10
 8003ad2:	f001 f801 	bl	8004ad8 <mpu9255_write>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <setup_compass+0x102>
        return -1;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e0b5      	b.n	8003c4e <setup_compass+0x26e>
    delay_ms(1);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f001 f88e 	bl	8004c04 <mpu9255_delay_ms>

    mpu_set_bypass(0);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff fcf9 	bl	80034e0 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <setup_compass+0x278>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	7818      	ldrb	r0, [r3, #0]
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <setup_compass+0x278>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	7e99      	ldrb	r1, [r3, #26]
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	2201      	movs	r2, #1
 8003b02:	f000 ffe9 	bl	8004ad8 <mpu9255_write>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <setup_compass+0x132>
        return -1;
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	e09d      	b.n	8003c4e <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003b12:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <setup_compass+0x278>)
 8003b14:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003b20:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <setup_compass+0x278>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	7818      	ldrb	r0, [r3, #0]
 8003b26:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <setup_compass+0x278>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	7f99      	ldrb	r1, [r3, #30]
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f000 ffd2 	bl	8004ad8 <mpu9255_write>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <setup_compass+0x160>
        return -1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3e:	e086      	b.n	8003c4e <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8003b40:	2302      	movs	r3, #2
 8003b42:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <setup_compass+0x278>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	7818      	ldrb	r0, [r3, #0]
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <setup_compass+0x278>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	7fd9      	ldrb	r1, [r3, #31]
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2201      	movs	r2, #1
 8003b54:	f000 ffc0 	bl	8004ad8 <mpu9255_write>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <setup_compass+0x184>
        return -1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e074      	b.n	8003c4e <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8003b64:	2388      	movs	r3, #136	; 0x88
 8003b66:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <setup_compass+0x278>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	7818      	ldrb	r0, [r3, #0]
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <setup_compass+0x278>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f000 ffad 	bl	8004ad8 <mpu9255_write>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <setup_compass+0x1aa>
        return -1;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e061      	b.n	8003c4e <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <setup_compass+0x278>)
 8003b8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003b90:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <setup_compass+0x278>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	7818      	ldrb	r0, [r3, #0]
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <setup_compass+0x278>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f000 ff98 	bl	8004ad8 <mpu9255_write>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <setup_compass+0x1d4>
        return -1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	e04c      	b.n	8003c4e <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <setup_compass+0x278>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	7818      	ldrb	r0, [r3, #0]
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <setup_compass+0x278>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f000 ff85 	bl	8004ad8 <mpu9255_write>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <setup_compass+0x1fa>
        return -1;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd8:	e039      	b.n	8003c4e <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8003bda:	2381      	movs	r3, #129	; 0x81
 8003bdc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <setup_compass+0x278>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	7818      	ldrb	r0, [r3, #0]
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <setup_compass+0x278>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f000 ff72 	bl	8004ad8 <mpu9255_write>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <setup_compass+0x220>
        return -1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e026      	b.n	8003c4e <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8003c00:	2311      	movs	r3, #17
 8003c02:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <setup_compass+0x278>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	7818      	ldrb	r0, [r3, #0]
 8003c0a:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <setup_compass+0x278>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	2201      	movs	r2, #1
 8003c16:	f000 ff5f 	bl	8004ad8 <mpu9255_write>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <setup_compass+0x246>
        return -1;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	e013      	b.n	8003c4e <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8003c26:	2303      	movs	r3, #3
 8003c28:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <setup_compass+0x278>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	7818      	ldrb	r0, [r3, #0]
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <setup_compass+0x278>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f000 ff4c 	bl	8004ad8 <mpu9255_write>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <setup_compass+0x26c>
        return -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	e000      	b.n	8003c4e <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000008 	.word	0x20000008

08003c5c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8003c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c64:	23c8      	movs	r3, #200	; 0xc8
 8003c66:	4904      	ldr	r1, [pc, #16]	; (8003c78 <dmp_load_motion_driver_firmware+0x1c>)
 8003c68:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8003c6c:	f7ff fde6 	bl	800383c <mpu_load_firmware>
 8003c70:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	080065a8 	.word	0x080065a8

08003c7c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003c86:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <dmp_set_orientation+0x1c4>)
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	8019      	strh	r1, [r3, #0]
 8003c92:	3302      	adds	r3, #2
 8003c94:	0c12      	lsrs	r2, r2, #16
 8003c96:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003c98:	4a6a      	ldr	r2, [pc, #424]	; (8003e44 <dmp_set_orientation+0x1c8>)
 8003c9a:	f107 0310 	add.w	r3, r7, #16
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	8019      	strh	r1, [r3, #0]
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	0c12      	lsrs	r2, r2, #16
 8003ca8:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003caa:	4a67      	ldr	r2, [pc, #412]	; (8003e48 <dmp_set_orientation+0x1cc>)
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	8019      	strh	r1, [r3, #0]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	0c12      	lsrs	r2, r2, #16
 8003cba:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003cbc:	4a63      	ldr	r2, [pc, #396]	; (8003e4c <dmp_set_orientation+0x1d0>)
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	8019      	strh	r1, [r3, #0]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	0c12      	lsrs	r2, r2, #16
 8003ccc:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	3320      	adds	r3, #32
 8003cd6:	443b      	add	r3, r7
 8003cd8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003cdc:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	3320      	adds	r3, #32
 8003cea:	443b      	add	r3, r7
 8003cec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003cf0:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	3320      	adds	r3, #32
 8003cfe:	443b      	add	r3, r7
 8003d00:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003d04:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	3320      	adds	r3, #32
 8003d0e:	443b      	add	r3, r7
 8003d10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003d14:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	3320      	adds	r3, #32
 8003d22:	443b      	add	r3, r7
 8003d24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003d28:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	3320      	adds	r3, #32
 8003d36:	443b      	add	r3, r7
 8003d38:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003d3c:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8003d3e:	f107 031c 	add.w	r3, r7, #28
 8003d42:	461a      	mov	r2, r3
 8003d44:	2103      	movs	r1, #3
 8003d46:	f240 4026 	movw	r0, #1062	; 0x426
 8003d4a:	f7ff fcd3 	bl	80036f4 <mpu_write_mem>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <dmp_set_orientation+0xde>
        return -1;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	e06e      	b.n	8003e38 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003d5a:	f107 0318 	add.w	r3, r7, #24
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2103      	movs	r1, #3
 8003d62:	f240 402a 	movw	r0, #1066	; 0x42a
 8003d66:	f7ff fcc5 	bl	80036f4 <mpu_write_mem>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <dmp_set_orientation+0xfa>
        return -1;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	e060      	b.n	8003e38 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	4611      	mov	r1, r2
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	3302      	adds	r3, #2
 8003d86:	0c12      	lsrs	r2, r2, #16
 8003d88:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003d8a:	f107 0318 	add.w	r3, r7, #24
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	4611      	mov	r1, r2
 8003d96:	8019      	strh	r1, [r3, #0]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	0c12      	lsrs	r2, r2, #16
 8003d9c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003da8:	7f3b      	ldrb	r3, [r7, #28]
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8003db2:	7e3b      	ldrb	r3, [r7, #24]
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003dc6:	7f7b      	ldrb	r3, [r7, #29]
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8003dd0:	7e7b      	ldrb	r3, [r7, #25]
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003de4:	7fbb      	ldrb	r3, [r7, #30]
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8003dee:	7ebb      	ldrb	r3, [r7, #26]
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2103      	movs	r1, #3
 8003e00:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8003e04:	f7ff fc76 	bl	80036f4 <mpu_write_mem>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <dmp_set_orientation+0x198>
        return -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e011      	b.n	8003e38 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8003e14:	f107 0318 	add.w	r3, r7, #24
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	f240 4031 	movw	r0, #1073	; 0x431
 8003e20:	f7ff fc68 	bl	80036f4 <mpu_write_mem>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <dmp_set_orientation+0x1b4>
        return -1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e003      	b.n	8003e38 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <dmp_set_orientation+0x1d4>)
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	8113      	strh	r3, [r2, #8]
    return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	0800649c 	.word	0x0800649c
 8003e44:	080064a0 	.word	0x080064a0
 8003e48:	080064a4 	.word	0x080064a4
 8003e4c:	080064a8 	.word	0x080064a8
 8003e50:	20000384 	.word	0x20000384

08003e54 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <dmp_set_fifo_rate+0x88>)
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2bc8      	cmp	r3, #200	; 0xc8
 8003e6e:	d902      	bls.n	8003e76 <dmp_set_fifo_rate+0x22>
        return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	e02e      	b.n	8003ed4 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	22c8      	movs	r2, #200	; 0xc8
 8003e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003e84:	8bfb      	ldrh	r3, [r7, #30]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003e8e:	8bfb      	ldrh	r3, [r7, #30]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	f240 2016 	movw	r0, #534	; 0x216
 8003ea0:	f7ff fc28 	bl	80036f4 <mpu_write_mem>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e011      	b.n	8003ed4 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	210c      	movs	r1, #12
 8003eb8:	f640 20c1 	movw	r0, #2753	; 0xac1
 8003ebc:	f7ff fc1a 	bl	80036f4 <mpu_write_mem>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <dmp_set_fifo_rate+0x78>
        return -1;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e003      	b.n	8003ed4 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <dmp_set_fifo_rate+0x8c>)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	8193      	strh	r3, [r2, #12]
    return 0;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	080064ac 	.word	0x080064ac
 8003ee0:	20000384 	.word	0x20000384

08003ee4 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	460a      	mov	r2, r1
 8003eee:	71fb      	strb	r3, [r7, #7]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <dmp_set_tap_thresh+0x22>
 8003efe:	88bb      	ldrh	r3, [r7, #4]
 8003f00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f04:	d902      	bls.n	8003f0c <dmp_set_tap_thresh+0x28>
        return -1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e10b      	b.n	8004124 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003f0c:	88bb      	ldrh	r3, [r7, #4]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f16:	eddf 6a85 	vldr	s13, [pc, #532]	; 800412c <dmp_set_tap_thresh+0x248>
 8003f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f1e:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003f22:	f107 030b 	add.w	r3, r7, #11
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe ff8e 	bl	8002e48 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003f2c:	7afb      	ldrb	r3, [r7, #11]
 8003f2e:	3b02      	subs	r3, #2
 8003f30:	2b0e      	cmp	r3, #14
 8003f32:	d87d      	bhi.n	8004030 <dmp_set_tap_thresh+0x14c>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <dmp_set_tap_thresh+0x58>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f79 	.word	0x08003f79
 8003f40:	08004031 	.word	0x08004031
 8003f44:	08003fa7 	.word	0x08003fa7
 8003f48:	08004031 	.word	0x08004031
 8003f4c:	08004031 	.word	0x08004031
 8003f50:	08004031 	.word	0x08004031
 8003f54:	08003fd5 	.word	0x08003fd5
 8003f58:	08004031 	.word	0x08004031
 8003f5c:	08004031 	.word	0x08004031
 8003f60:	08004031 	.word	0x08004031
 8003f64:	08004031 	.word	0x08004031
 8003f68:	08004031 	.word	0x08004031
 8003f6c:	08004031 	.word	0x08004031
 8003f70:	08004031 	.word	0x08004031
 8003f74:	08004003 	.word	0x08004003
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f7c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004130 <dmp_set_tap_thresh+0x24c>
 8003f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f88:	ee17 3a90 	vmov	r3, s15
 8003f8c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f92:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004134 <dmp_set_tap_thresh+0x250>
 8003f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9e:	ee17 3a90 	vmov	r3, s15
 8003fa2:	82bb      	strh	r3, [r7, #20]
        break;
 8003fa4:	e047      	b.n	8004036 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003faa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004138 <dmp_set_tap_thresh+0x254>
 8003fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb6:	ee17 3a90 	vmov	r3, s15
 8003fba:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800413c <dmp_set_tap_thresh+0x258>
 8003fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	82bb      	strh	r3, [r7, #20]
        break;
 8003fd2:	e030      	b.n	8004036 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fd8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004140 <dmp_set_tap_thresh+0x25c>
 8003fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 3a90 	vmov	r3, s15
 8003fe8:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fee:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004144 <dmp_set_tap_thresh+0x260>
 8003ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffa:	ee17 3a90 	vmov	r3, s15
 8003ffe:	82bb      	strh	r3, [r7, #20]
        break;
 8004000:	e019      	b.n	8004036 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004002:	edd7 7a04 	vldr	s15, [r7, #16]
 8004006:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004148 <dmp_set_tap_thresh+0x264>
 800400a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800400e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004012:	ee17 3a90 	vmov	r3, s15
 8004016:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004018:	edd7 7a04 	vldr	s15, [r7, #16]
 800401c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800414c <dmp_set_tap_thresh+0x268>
 8004020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004028:	ee17 3a90 	vmov	r3, s15
 800402c:	82bb      	strh	r3, [r7, #20]
        break;
 800402e:	e002      	b.n	8004036 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e076      	b.n	8004124 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8004036:	8afb      	ldrh	r3, [r7, #22]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	b29b      	uxth	r3, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8004046:	8abb      	ldrh	r3, [r7, #20]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b29b      	uxth	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004050:	8abb      	ldrh	r3, [r7, #20]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01c      	beq.n	800409a <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	461a      	mov	r2, r3
 8004066:	2102      	movs	r1, #2
 8004068:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800406c:	f7ff fb42 	bl	80036f4 <mpu_write_mem>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <dmp_set_tap_thresh+0x198>
            return -1;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e053      	b.n	8004124 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	3302      	adds	r3, #2
 8004082:	461a      	mov	r2, r3
 8004084:	2102      	movs	r1, #2
 8004086:	f44f 7092 	mov.w	r0, #292	; 0x124
 800408a:	f7ff fb33 	bl	80036f4 <mpu_write_mem>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <dmp_set_tap_thresh+0x1b6>
            return -1;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	e044      	b.n	8004124 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	461a      	mov	r2, r3
 80040aa:	2102      	movs	r1, #2
 80040ac:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 80040b0:	f7ff fb20 	bl	80036f4 <mpu_write_mem>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <dmp_set_tap_thresh+0x1dc>
            return -1;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	e031      	b.n	8004124 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80040c0:	f107 030c 	add.w	r3, r7, #12
 80040c4:	3302      	adds	r3, #2
 80040c6:	461a      	mov	r2, r3
 80040c8:	2102      	movs	r1, #2
 80040ca:	f44f 7094 	mov.w	r0, #296	; 0x128
 80040ce:	f7ff fb11 	bl	80036f4 <mpu_write_mem>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <dmp_set_tap_thresh+0x1fa>
            return -1;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	e022      	b.n	8004124 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01c      	beq.n	8004122 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	461a      	mov	r2, r3
 80040ee:	2102      	movs	r1, #2
 80040f0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80040f4:	f7ff fafe 	bl	80036f4 <mpu_write_mem>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <dmp_set_tap_thresh+0x220>
            return -1;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	e00f      	b.n	8004124 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	3302      	adds	r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	2102      	movs	r1, #2
 800410e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004112:	f7ff faef 	bl	80036f4 <mpu_write_mem>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <dmp_set_tap_thresh+0x23e>
            return -1;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e000      	b.n	8004124 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	43480000 	.word	0x43480000
 8004130:	46800000 	.word	0x46800000
 8004134:	46400000 	.word	0x46400000
 8004138:	46000000 	.word	0x46000000
 800413c:	45c00000 	.word	0x45c00000
 8004140:	45800000 	.word	0x45800000
 8004144:	45400000 	.word	0x45400000
 8004148:	45000000 	.word	0x45000000
 800414c:	44c00000 	.word	0x44c00000

08004150 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800416e:	b2db      	uxtb	r3, r3
 8004170:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	f043 030c 	orr.w	r3, r3, #12
 8004182:	b2db      	uxtb	r3, r3
 8004184:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	f043 0303 	orr.w	r3, r3, #3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800419a:	f107 030f 	add.w	r3, r7, #15
 800419e:	461a      	mov	r2, r3
 80041a0:	2101      	movs	r1, #1
 80041a2:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80041a6:	f7ff faa5 	bl	80036f4 <mpu_write_mem>
 80041aa:	4603      	mov	r3, r0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <dmp_set_tap_count+0x16>
        min_taps = 1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	71fb      	strb	r3, [r7, #7]
 80041c8:	e004      	b.n	80041d4 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d901      	bls.n	80041d4 <dmp_set_tap_count+0x20>
        min_taps = 4;
 80041d0:	2304      	movs	r3, #4
 80041d2:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80041dc:	f107 030f 	add.w	r3, r7, #15
 80041e0:	461a      	mov	r2, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	f240 104f 	movw	r0, #335	; 0x14f
 80041e8:	f7ff fa84 	bl	80036f4 <mpu_write_mem>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <dmp_set_tap_time+0x40>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800420e:	89fb      	ldrh	r3, [r7, #14]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	b29b      	uxth	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	461a      	mov	r2, r3
 8004224:	2102      	movs	r1, #2
 8004226:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800422a:	f7ff fa63 	bl	80036f4 <mpu_write_mem>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	cccccccd 	.word	0xcccccccd

0800423c <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <dmp_set_tap_time_multi+0x40>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	b29b      	uxth	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800425c:	89fb      	ldrh	r3, [r7, #14]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	461a      	mov	r2, r3
 8004268:	2102      	movs	r1, #2
 800426a:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800426e:	f7ff fa41 	bl	80036f4 <mpu_write_mem>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	cccccccd 	.word	0xcccccccd

08004280 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <dmp_set_shake_reject_thresh+0x5c>)
 8004290:	fb82 1203 	smull	r1, r2, r2, r3
 8004294:	1192      	asrs	r2, r2, #6
 8004296:	17db      	asrs	r3, r3, #31
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	161b      	asrs	r3, r3, #24
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	141b      	asrs	r3, r3, #16
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	121b      	asrs	r3, r3, #8
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80042c0:	f107 0308 	add.w	r3, r7, #8
 80042c4:	461a      	mov	r2, r3
 80042c6:	2104      	movs	r1, #4
 80042c8:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 80042cc:	f7ff fa12 	bl	80036f4 <mpu_write_mem>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	10624dd3 	.word	0x10624dd3

080042e0 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <dmp_set_shake_reject_time+0x40>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	461a      	mov	r2, r3
 800430c:	2102      	movs	r1, #2
 800430e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8004312:	f7ff f9ef 	bl	80036f4 <mpu_write_mem>
 8004316:	4603      	mov	r3, r0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	cccccccd 	.word	0xcccccccd

08004324 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <dmp_set_shake_reject_timeout+0x40>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	b29b      	uxth	r3, r3
 8004340:	b2db      	uxtb	r3, r3
 8004342:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800434a:	f107 030c 	add.w	r3, r7, #12
 800434e:	461a      	mov	r2, r3
 8004350:	2102      	movs	r1, #2
 8004352:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004356:	f7ff f9cd 	bl	80036f4 <mpu_write_mem>
 800435a:	4603      	mov	r3, r0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	cccccccd 	.word	0xcccccccd

08004368 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8004372:	2302      	movs	r3, #2
 8004374:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8004376:	23ca      	movs	r3, #202	; 0xca
 8004378:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800437a:	23e3      	movs	r3, #227	; 0xe3
 800437c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800437e:	2309      	movs	r3, #9
 8004380:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	461a      	mov	r2, r3
 8004388:	2104      	movs	r1, #4
 800438a:	2068      	movs	r0, #104	; 0x68
 800438c:	f7ff f9b2 	bl	80036f4 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8004390:	23a3      	movs	r3, #163	; 0xa3
 8004392:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800439e:	23c0      	movs	r3, #192	; 0xc0
 80043a0:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80043a2:	23c8      	movs	r3, #200	; 0xc8
 80043a4:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80043a6:	23c2      	movs	r3, #194	; 0xc2
 80043a8:	73fb      	strb	r3, [r7, #15]
 80043aa:	e005      	b.n	80043b8 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80043ac:	23a3      	movs	r3, #163	; 0xa3
 80043ae:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80043b0:	23a3      	movs	r3, #163	; 0xa3
 80043b2:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80043b4:	23a3      	movs	r3, #163	; 0xa3
 80043b6:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d006      	beq.n	80043d0 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80043c2:	23c4      	movs	r3, #196	; 0xc4
 80043c4:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80043c6:	23cc      	movs	r3, #204	; 0xcc
 80043c8:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80043ca:	23c6      	movs	r3, #198	; 0xc6
 80043cc:	74bb      	strb	r3, [r7, #18]
 80043ce:	e005      	b.n	80043dc <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80043d0:	23a3      	movs	r3, #163	; 0xa3
 80043d2:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80043d4:	23a3      	movs	r3, #163	; 0xa3
 80043d6:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80043d8:	23a3      	movs	r3, #163	; 0xa3
 80043da:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80043dc:	23a3      	movs	r3, #163	; 0xa3
 80043de:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80043e0:	23a3      	movs	r3, #163	; 0xa3
 80043e2:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80043e4:	23a3      	movs	r3, #163	; 0xa3
 80043e6:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80043e8:	f107 030c 	add.w	r3, r7, #12
 80043ec:	461a      	mov	r2, r3
 80043ee:	210a      	movs	r1, #10
 80043f0:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80043f4:	f7ff f97e 	bl	80036f4 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8004402:	2320      	movs	r3, #32
 8004404:	733b      	strb	r3, [r7, #12]
 8004406:	e001      	b.n	800440c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8004408:	23d8      	movs	r3, #216	; 0xd8
 800440a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800440c:	f107 030c 	add.w	r3, r7, #12
 8004410:	461a      	mov	r2, r3
 8004412:	2101      	movs	r1, #1
 8004414:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004418:	f7ff f96c 	bl	80036f4 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8004426:	2001      	movs	r0, #1
 8004428:	f000 f8c6 	bl	80045b8 <dmp_enable_gyro_cal>
 800442c:	e002      	b.n	8004434 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800442e:	2000      	movs	r0, #0
 8004430:	f000 f8c2 	bl	80045b8 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01d      	beq.n	800447a <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8004448:	23b2      	movs	r3, #178	; 0xb2
 800444a:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800444c:	238b      	movs	r3, #139	; 0x8b
 800444e:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004450:	23b6      	movs	r3, #182	; 0xb6
 8004452:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004454:	239b      	movs	r3, #155	; 0x9b
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e007      	b.n	800446a <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800445a:	23b0      	movs	r3, #176	; 0xb0
 800445c:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004462:	23b4      	movs	r3, #180	; 0xb4
 8004464:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8004466:	2390      	movs	r3, #144	; 0x90
 8004468:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800446a:	f107 030c 	add.w	r3, r7, #12
 800446e:	461a      	mov	r2, r3
 8004470:	2104      	movs	r1, #4
 8004472:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8004476:	f7ff f93d 	bl	80036f4 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d025      	beq.n	80044d0 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004484:	23f8      	movs	r3, #248	; 0xf8
 8004486:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004488:	f107 030c 	add.w	r3, r7, #12
 800448c:	461a      	mov	r2, r3
 800448e:	2101      	movs	r1, #1
 8004490:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004494:	f7ff f92e 	bl	80036f4 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004498:	21fa      	movs	r1, #250	; 0xfa
 800449a:	2007      	movs	r0, #7
 800449c:	f7ff fd22 	bl	8003ee4 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80044a0:	2007      	movs	r0, #7
 80044a2:	f7ff fe55 	bl	8004150 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7ff fe84 	bl	80041b4 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80044ac:	2064      	movs	r0, #100	; 0x64
 80044ae:	f7ff fea3 	bl	80041f8 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80044b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044b6:	f7ff fec1 	bl	800423c <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80044ba:	21c8      	movs	r1, #200	; 0xc8
 80044bc:	483c      	ldr	r0, [pc, #240]	; (80045b0 <dmp_enable_feature+0x248>)
 80044be:	f7ff fedf 	bl	8004280 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80044c2:	2028      	movs	r0, #40	; 0x28
 80044c4:	f7ff ff0c 	bl	80042e0 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80044c8:	200a      	movs	r0, #10
 80044ca:	f7ff ff2b 	bl	8004324 <dmp_set_shake_reject_timeout>
 80044ce:	e009      	b.n	80044e4 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80044d0:	23d8      	movs	r3, #216	; 0xd8
 80044d2:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	461a      	mov	r2, r3
 80044da:	2101      	movs	r1, #1
 80044dc:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80044e0:	f7ff f908 	bl	80036f4 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80044ee:	23d9      	movs	r3, #217	; 0xd9
 80044f0:	733b      	strb	r3, [r7, #12]
 80044f2:	e001      	b.n	80044f8 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80044f4:	23d8      	movs	r3, #216	; 0xd8
 80044f6:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	461a      	mov	r2, r3
 80044fe:	2101      	movs	r1, #1
 8004500:	f240 703d 	movw	r0, #1853	; 0x73d
 8004504:	f7ff f8f6 	bl	80036f4 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004512:	2001      	movs	r0, #1
 8004514:	f000 f880 	bl	8004618 <dmp_enable_lp_quat>
 8004518:	e002      	b.n	8004520 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800451a:	2000      	movs	r0, #0
 800451c:	f000 f87c 	bl	8004618 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800452a:	2001      	movs	r0, #1
 800452c:	f000 f89b 	bl	8004666 <dmp_enable_6x_lp_quat>
 8004530:	e002      	b.n	8004538 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004532:	2000      	movs	r0, #0
 8004534:	f000 f897 	bl	8004666 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	f043 0308 	orr.w	r3, r3, #8
 800453e:	b29a      	uxth	r2, r3
 8004540:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <dmp_enable_feature+0x24c>)
 8004542:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004544:	f7fe fb28 	bl	8002b98 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <dmp_enable_feature+0x24c>)
 800454a:	2200      	movs	r2, #0
 800454c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8004558:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <dmp_enable_feature+0x24c>)
 800455a:	7b9b      	ldrb	r3, [r3, #14]
 800455c:	3306      	adds	r3, #6
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <dmp_enable_feature+0x24c>)
 8004562:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <dmp_enable_feature+0x24c>)
 8004570:	7b9b      	ldrb	r3, [r3, #14]
 8004572:	3306      	adds	r3, #6
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <dmp_enable_feature+0x24c>)
 8004578:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	f003 0314 	and.w	r3, r3, #20
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <dmp_enable_feature+0x24c>)
 8004586:	7b9b      	ldrb	r3, [r3, #14]
 8004588:	3310      	adds	r3, #16
 800458a:	b2da      	uxtb	r2, r3
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <dmp_enable_feature+0x24c>)
 800458e:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <dmp_enable_feature+0x24c>)
 800459c:	7b9b      	ldrb	r3, [r3, #14]
 800459e:	3304      	adds	r3, #4
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <dmp_enable_feature+0x24c>)
 80045a4:	739a      	strb	r2, [r3, #14]

    return 0;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	02cae309 	.word	0x02cae309
 80045b4:	20000384 	.word	0x20000384

080045b8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <dmp_enable_gyro_cal+0x58>)
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80045d0:	c303      	stmia	r3!, {r0, r1}
 80045d2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	461a      	mov	r2, r3
 80045da:	2109      	movs	r1, #9
 80045dc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80045e0:	f7ff f888 	bl	80036f4 <mpu_write_mem>
 80045e4:	4603      	mov	r3, r0
 80045e6:	e00e      	b.n	8004606 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <dmp_enable_gyro_cal+0x5c>)
 80045ea:	f107 0308 	add.w	r3, r7, #8
 80045ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80045f0:	c303      	stmia	r3!, {r0, r1}
 80045f2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80045f4:	f107 0308 	add.w	r3, r7, #8
 80045f8:	461a      	mov	r2, r3
 80045fa:	2109      	movs	r1, #9
 80045fc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004600:	f7ff f878 	bl	80036f4 <mpu_write_mem>
 8004604:	4603      	mov	r3, r0
    }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	080064b8 	.word	0x080064b8
 8004614:	080064c4 	.word	0x080064c4

08004618 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8004628:	23c0      	movs	r3, #192	; 0xc0
 800462a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800462c:	23c2      	movs	r3, #194	; 0xc2
 800462e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004630:	23c4      	movs	r3, #196	; 0xc4
 8004632:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004634:	23c6      	movs	r3, #198	; 0xc6
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e006      	b.n	8004648 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	2204      	movs	r2, #4
 8004640:	218b      	movs	r1, #139	; 0x8b
 8004642:	4618      	mov	r0, r3
 8004644:	f001 ff16 	bl	8006474 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	461a      	mov	r2, r3
 800464e:	2104      	movs	r1, #4
 8004650:	f640 2098 	movw	r0, #2712	; 0xa98
 8004654:	f7ff f84e 	bl	80036f4 <mpu_write_mem>

    return mpu_reset_fifo();
 8004658:	f7fe fa9e 	bl	8002b98 <mpu_reset_fifo>
 800465c:	4603      	mov	r3, r0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8004676:	2320      	movs	r3, #32
 8004678:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800467a:	2328      	movs	r3, #40	; 0x28
 800467c:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800467e:	2330      	movs	r3, #48	; 0x30
 8004680:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004682:	2338      	movs	r3, #56	; 0x38
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	e006      	b.n	8004696 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	2204      	movs	r2, #4
 800468e:	21a3      	movs	r1, #163	; 0xa3
 8004690:	4618      	mov	r0, r3
 8004692:	f001 feef 	bl	8006474 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	461a      	mov	r2, r3
 800469c:	2104      	movs	r1, #4
 800469e:	f640 209e 	movw	r0, #2718	; 0xa9e
 80046a2:	f7ff f827 	bl	80036f4 <mpu_write_mem>

    return mpu_reset_fifo();
 80046a6:	f7fe fa77 	bl	8002b98 <mpu_reset_fifo>
 80046aa:	4603      	mov	r3, r0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3303      	adds	r3, #3
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046c6:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3303      	adds	r3, #3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3301      	adds	r3, #1
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80046e2:	7bbb      	ldrb	r3, [r7, #14]
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80046e8:	7bbb      	ldrb	r3, [r7, #14]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <decode_gesture+0x84>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <decode_gesture+0x84>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	7b39      	ldrb	r1, [r7, #12]
 8004702:	7b7a      	ldrb	r2, [r7, #13]
 8004704:	4610      	mov	r0, r2
 8004706:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3301      	adds	r3, #1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <decode_gesture+0x84>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <decode_gesture+0x84>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	7bfa      	ldrb	r2, [r7, #15]
 8004724:	0992      	lsrs	r2, r2, #6
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
    }

    return 0;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000384 	.word	0x20000384

0800473c <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b092      	sub	sp, #72	; 0x48
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8004750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004752:	2200      	movs	r2, #0
 8004754:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8004756:	4bae      	ldr	r3, [pc, #696]	; (8004a10 <dmp_read_fifo+0x2d4>)
 8004758:	7b9b      	ldrb	r3, [r3, #14]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f107 0120 	add.w	r1, r7, #32
 8004760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fe3e 	bl	80033e4 <mpu_read_fifo_stream>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <dmp_read_fifo+0x38>
        return -1;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	e148      	b.n	8004a06 <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004774:	4ba6      	ldr	r3, [pc, #664]	; (8004a10 <dmp_read_fifo+0x2d4>)
 8004776:	895b      	ldrh	r3, [r3, #10]
 8004778:	f003 0314 	and.w	r3, r3, #20
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 808a 	beq.w	8004896 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004786:	061a      	lsls	r2, r3, #24
 8004788:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004790:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004794:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004796:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004798:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800479c:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047a6:	061a      	lsls	r2, r3, #24
 80047a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80047b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047b4:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047b6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047bc:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80047c2:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80047c4:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80047c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047ca:	061a      	lsls	r2, r3, #24
 80047cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80047d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80047d8:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80047da:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80047dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047e0:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80047e6:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80047e8:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80047ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047ee:	061a      	lsls	r2, r3, #24
 80047f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80047f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047fc:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80047fe:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8004800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004804:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800480a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800480c:	601a      	str	r2, [r3, #0]
        ii += 16;
 800480e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004812:	3310      	adds	r3, #16
 8004814:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	141b      	asrs	r3, r3, #16
 800481e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	141b      	asrs	r3, r3, #16
 8004828:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3308      	adds	r3, #8
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	141b      	asrs	r3, r3, #16
 8004832:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	330c      	adds	r3, #12
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	141b      	asrs	r3, r3, #16
 800483c:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	fb03 f202 	mul.w	r2, r3, r2
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004858:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004862:	4413      	add	r3, r2
 8004864:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8004866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004868:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800486c:	db03      	blt.n	8004876 <dmp_read_fifo+0x13a>
 800486e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004870:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8004874:	dd07      	ble.n	8004886 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8004876:	f7fe f98f 	bl	8002b98 <mpu_reset_fifo>
            sensors[0] = 0;
 800487a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487c:	2200      	movs	r2, #0
 800487e:	801a      	strh	r2, [r3, #0]
            return -1;
 8004880:	f04f 33ff 	mov.w	r3, #4294967295
 8004884:	e0bf      	b.n	8004a06 <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	b21a      	sxth	r2, r3
 8004892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004894:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004896:	4b5e      	ldr	r3, [pc, #376]	; (8004a10 <dmp_read_fifo+0x2d4>)
 8004898:	895b      	ldrh	r3, [r3, #10]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04c      	beq.n	800493c <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80048a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048a6:	3348      	adds	r3, #72	; 0x48
 80048a8:	443b      	add	r3, r7
 80048aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048b6:	3301      	adds	r3, #1
 80048b8:	3348      	adds	r3, #72	; 0x48
 80048ba:	443b      	add	r3, r7
 80048bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048c0:	b21b      	sxth	r3, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	b21a      	sxth	r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80048ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048ce:	3302      	adds	r3, #2
 80048d0:	3348      	adds	r3, #72	; 0x48
 80048d2:	443b      	add	r3, r7
 80048d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b219      	sxth	r1, r3
 80048dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048e0:	3303      	adds	r3, #3
 80048e2:	3348      	adds	r3, #72	; 0x48
 80048e4:	443b      	add	r3, r7
 80048e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048ea:	b21a      	sxth	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3302      	adds	r3, #2
 80048f0:	430a      	orrs	r2, r1
 80048f2:	b212      	sxth	r2, r2
 80048f4:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80048f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048fa:	3304      	adds	r3, #4
 80048fc:	3348      	adds	r3, #72	; 0x48
 80048fe:	443b      	add	r3, r7
 8004900:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	b219      	sxth	r1, r3
 8004908:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800490c:	3305      	adds	r3, #5
 800490e:	3348      	adds	r3, #72	; 0x48
 8004910:	443b      	add	r3, r7
 8004912:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004916:	b21a      	sxth	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3304      	adds	r3, #4
 800491c:	430a      	orrs	r2, r1
 800491e:	b212      	sxth	r2, r2
 8004920:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004922:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004926:	3306      	adds	r3, #6
 8004928:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800492c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004932:	f043 0308 	orr.w	r3, r3, #8
 8004936:	b21a      	sxth	r2, r3
 8004938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493a:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800493c:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <dmp_read_fifo+0x2d4>)
 800493e:	895b      	ldrh	r3, [r3, #10]
 8004940:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04c      	beq.n	80049e2 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800494c:	3348      	adds	r3, #72	; 0x48
 800494e:	443b      	add	r3, r7
 8004950:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	b21a      	sxth	r2, r3
 8004958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800495c:	3301      	adds	r3, #1
 800495e:	3348      	adds	r3, #72	; 0x48
 8004960:	443b      	add	r3, r7
 8004962:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004966:	b21b      	sxth	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b21a      	sxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004970:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004974:	3302      	adds	r3, #2
 8004976:	3348      	adds	r3, #72	; 0x48
 8004978:	443b      	add	r3, r7
 800497a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	b219      	sxth	r1, r3
 8004982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004986:	3303      	adds	r3, #3
 8004988:	3348      	adds	r3, #72	; 0x48
 800498a:	443b      	add	r3, r7
 800498c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004990:	b21a      	sxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3302      	adds	r3, #2
 8004996:	430a      	orrs	r2, r1
 8004998:	b212      	sxth	r2, r2
 800499a:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800499c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049a0:	3304      	adds	r3, #4
 80049a2:	3348      	adds	r3, #72	; 0x48
 80049a4:	443b      	add	r3, r7
 80049a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	b219      	sxth	r1, r3
 80049ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049b2:	3305      	adds	r3, #5
 80049b4:	3348      	adds	r3, #72	; 0x48
 80049b6:	443b      	add	r3, r7
 80049b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049bc:	b21a      	sxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3304      	adds	r3, #4
 80049c2:	430a      	orrs	r2, r1
 80049c4:	b212      	sxth	r2, r2
 80049c6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80049c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049cc:	3306      	adds	r3, #6
 80049ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80049d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80049dc:	b21a      	sxth	r2, r3
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <dmp_read_fifo+0x2d4>)
 80049e4:	895b      	ldrh	r3, [r3, #10]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 80049ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049f2:	f107 0220 	add.w	r2, r7, #32
 80049f6:	4413      	add	r3, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fe5b 	bl	80046b4 <decode_gesture>

    get_ms(timestamp);
 80049fe:	6838      	ldr	r0, [r7, #0]
 8004a00:	f000 f916 	bl	8004c30 <mpu9255_get_ms>
    return 0;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3748      	adds	r7, #72	; 0x48
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000384 	.word	0x20000384

08004a14 <dmp_register_tap_cb>:
 *  \n TAP_Z_DOWN
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    dmp.tap_cb = func;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <dmp_register_tap_cb+0x1c>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6013      	str	r3, [r2, #0]
    return 0;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000384 	.word	0x20000384

08004a34 <dmp_register_android_orient_cb>:
 *  @brief      Register a function to be executed on a android orientation event.
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    dmp.android_orient_cb = func;
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <dmp_register_android_orient_cb+0x1c>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6053      	str	r3, [r2, #4]
    return 0;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	20000384 	.word	0x20000384

08004a54 <LL_SPI_TransmitData8>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	330c      	adds	r3, #12
 8004a64:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	701a      	strb	r2, [r3, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_GPIO_SetOutputPin>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	619a      	str	r2, [r3, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <LL_GPIO_ResetOutputPin>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <clearChipSelect>:
static uint8_t writeIndex = 0;
#else
dmp_data_t dmpData;
#endif
// CS is active low. This disables the chip
__STATIC_INLINE void clearChipSelect() {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8004ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004abc:	f7ff ffdc 	bl	8004a78 <LL_GPIO_SetOutputPin>
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <setChipSelect>:

// CS is active low. This enables the chip.
__STATIC_INLINE void setChipSelect() {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8004ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad0:	f7ff ffe0 	bl	8004a94 <LL_GPIO_ResetOutputPin>
}
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <mpu9255_write>:

int mpu9255_write(unsigned char slave_addr, unsigned char reg_addr,
     unsigned char length, unsigned char const *data) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	71fb      	strb	r3, [r7, #7]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	71bb      	strb	r3, [r7, #6]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	717b      	strb	r3, [r7, #5]

	(void)slave_addr; // NOT NEEDED, I2C variable. Suppress unused variable warning

	setChipSelect();
 8004aec:	f7ff ffea 	bl	8004ac4 <setChipSelect>

	// 4 byte fifo. Respect that and write when free
	LL_SPI_TransmitData8(SPI1, reg_addr);
 8004af0:	79bb      	ldrb	r3, [r7, #6]
 8004af2:	4619      	mov	r1, r3
 8004af4:	481d      	ldr	r0, [pc, #116]	; (8004b6c <mpu9255_write+0x94>)
 8004af6:	f7ff ffad 	bl	8004a54 <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e011      	b.n	8004b24 <mpu9255_write+0x4c>
		while (!(SPI1->SR & SPI_SR_TXE)) {
 8004b00:	bf00      	nop
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <mpu9255_write+0x94>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f9      	beq.n	8004b02 <mpu9255_write+0x2a>
		};
		LL_SPI_TransmitData8(SPI1, data[i]);
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4814      	ldr	r0, [pc, #80]	; (8004b6c <mpu9255_write+0x94>)
 8004b1a:	f7ff ff9b 	bl	8004a54 <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	3301      	adds	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	797b      	ldrb	r3, [r7, #5]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3e9      	bcc.n	8004b00 <mpu9255_write+0x28>
	}

	// wait for completion
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 8004b2c:	bf00      	nop
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <mpu9255_write+0x94>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f9      	bne.n	8004b2e <mpu9255_write+0x56>
	}; 	//transmit fifo empty?
	while ((SPI1->SR & SPI_SR_BSY)) {
 8004b3a:	bf00      	nop
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <mpu9255_write+0x94>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f9      	bne.n	8004b3c <mpu9255_write+0x64>
	}; 	// no longer busy
	clearChipSelect();
 8004b48:	f7ff ffb2 	bl	8004ab0 <clearChipSelect>

	// clear receive fifo. Overrun data will be lost, but we are only sending.
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8004b4c:	e002      	b.n	8004b54 <mpu9255_write+0x7c>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <mpu9255_write+0x94>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	73bb      	strb	r3, [r7, #14]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <mpu9255_write+0x94>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f6      	bne.n	8004b4e <mpu9255_write+0x76>
		(void) dummy;						// suppress unused variable warning
	};
	return 0;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40013000 	.word	0x40013000

08004b70 <mpu9255_read>:
 * Read assumes that calling function is providing a data location big enough
 * to handle the size of length. Be aware that this can overrun the calling
 * memory location if not sized appropriately!
 */
int mpu9255_read(unsigned char slave_addr, unsigned char reg_addr,
      unsigned char length, unsigned char *data) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	71fb      	strb	r3, [r7, #7]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	71bb      	strb	r3, [r7, #6]
 8004b80:	4613      	mov	r3, r2
 8004b82:	717b      	strb	r3, [r7, #5]

	(void) slave_addr; // not used, suppress unused variable warning.

	setChipSelect();
 8004b84:	f7ff ff9e 	bl	8004ac4 <setChipSelect>

	// 4 byte fifo not used. Reads need to be captured.
	LL_SPI_TransmitData8(SPI1, (reg_addr | 0x80)); // MSb set signals read.
 8004b88:	79bb      	ldrb	r3, [r7, #6]
 8004b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	4619      	mov	r1, r3
 8004b92:	481b      	ldr	r0, [pc, #108]	; (8004c00 <mpu9255_read+0x90>)
 8004b94:	f7ff ff5e 	bl	8004a54 <LL_SPI_TransmitData8>
	while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 8004b98:	bf00      	nop
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <mpu9255_read+0x90>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f9      	beq.n	8004b9a <mpu9255_read+0x2a>
	uint8_t dummy = SPI1->DR; 				// first byte is from cmd transfer. Ignore
 8004ba6:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <mpu9255_read+0x90>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	73bb      	strb	r3, [r7, #14]
	(void)dummy; // suppress unused variable warning

	// read the data sequentially
	for (uint8_t i = 0; i < length; i++) {
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]
 8004bb0:	e014      	b.n	8004bdc <mpu9255_read+0x6c>
		LL_SPI_TransmitData8(SPI1, 0xFF);	// send clocking byte, not used.
 8004bb2:	21ff      	movs	r1, #255	; 0xff
 8004bb4:	4812      	ldr	r0, [pc, #72]	; (8004c00 <mpu9255_read+0x90>)
 8004bb6:	f7ff ff4d 	bl	8004a54 <LL_SPI_TransmitData8>
		while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 8004bba:	bf00      	nop
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <mpu9255_read+0x90>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f9      	beq.n	8004bbc <mpu9255_read+0x4c>
		data[i] = SPI1->DR;
 8004bc8:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <mpu9255_read+0x90>)
 8004bca:	68d9      	ldr	r1, [r3, #12]
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	b2ca      	uxtb	r2, r1
 8004bd4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	797b      	ldrb	r3, [r7, #5]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3e6      	bcc.n	8004bb2 <mpu9255_read+0x42>
	}

	while ((SPI1->SR & SPI_SR_BSY)) {
 8004be4:	bf00      	nop
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <mpu9255_read+0x90>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f9      	bne.n	8004be6 <mpu9255_read+0x76>
		}; 	// no longer busy
	clearChipSelect();
 8004bf2:	f7ff ff5d 	bl	8004ab0 <clearChipSelect>

	return 0;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40013000 	.word	0x40013000

08004c04 <mpu9255_delay_ms>:

void mpu9255_delay_ms(unsigned long num_ms) {
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	ms_delay = num_ms;
 8004c0c:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <mpu9255_delay_ms+0x28>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
	while (ms_delay > 0) {
 8004c12:	bf00      	nop
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <mpu9255_delay_ms+0x28>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1fb      	bne.n	8004c14 <mpu9255_delay_ms+0x10>
		// do nothing while we wait.
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	200003c0 	.word	0x200003c0

08004c30 <mpu9255_get_ms>:

void mpu9255_get_ms(unsigned long *count) {
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	*count = g_ul_ms_ticks;
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <mpu9255_get_ms+0x1c>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	200003bc 	.word	0x200003bc

08004c50 <delaytimer_event_handler>:

void delaytimer_event_handler() {
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <delaytimer_event_handler+0x2c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <delaytimer_event_handler+0x2c>)
 8004c5c:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <delaytimer_event_handler+0x30>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <delaytimer_event_handler+0x20>
		ms_delay--;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <delaytimer_event_handler+0x30>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <delaytimer_event_handler+0x30>)
 8004c6e:	6013      	str	r3, [r2, #0]
	}
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	200003bc 	.word	0x200003bc
 8004c80:	200003c0 	.word	0x200003c0

08004c84 <readTimer_event_handler>:

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
	updateRequired = true;
 8004c88:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <readTimer_event_handler+0x14>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	200003c4 	.word	0x200003c4

08004c9c <android_orient_cb>:

void android_orient_cb(unsigned char orientation) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71fb      	strb	r3, [r7, #7]
	// do nothing, not used.
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <tap_cb>:
void tap_cb(unsigned char direction, unsigned char count) {
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	460a      	mov	r2, r1
 8004cbc:	71fb      	strb	r3, [r7, #7]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	71bb      	strb	r3, [r7, #6]
	// do nothing, not used.
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	dd02      	ble.n	8004ce6 <inv_row_2_scale+0x18>
        b = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	81fb      	strh	r3, [r7, #14]
 8004ce4:	e02d      	b.n	8004d42 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	da02      	bge.n	8004cf6 <inv_row_2_scale+0x28>
        b = 4;
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	81fb      	strh	r3, [r7, #14]
 8004cf4:	e025      	b.n	8004d42 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dd02      	ble.n	8004d08 <inv_row_2_scale+0x3a>
        b = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	81fb      	strh	r3, [r7, #14]
 8004d06:	e01c      	b.n	8004d42 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da02      	bge.n	8004d1a <inv_row_2_scale+0x4c>
        b = 5;
 8004d14:	2305      	movs	r3, #5
 8004d16:	81fb      	strh	r3, [r7, #14]
 8004d18:	e013      	b.n	8004d42 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	dd02      	ble.n	8004d2c <inv_row_2_scale+0x5e>
        b = 2;
 8004d26:	2302      	movs	r3, #2
 8004d28:	81fb      	strh	r3, [r7, #14]
 8004d2a:	e00a      	b.n	8004d42 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	f993 3000 	ldrsb.w	r3, [r3]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	da02      	bge.n	8004d3e <inv_row_2_scale+0x70>
        b = 6;
 8004d38:	2306      	movs	r3, #6
 8004d3a:	81fb      	strh	r3, [r7, #14]
 8004d3c:	e001      	b.n	8004d42 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004d3e:	2307      	movs	r3, #7
 8004d40:	81fb      	strh	r3, [r7, #14]
    return b;
 8004d42:	89fb      	ldrh	r3, [r7, #14]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ffb8 	bl	8004cce <inv_row_2_scale>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3303      	adds	r3, #3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ffb1 	bl	8004cce <inv_row_2_scale>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3306      	adds	r3, #6
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ffa4 	bl	8004cce <inv_row_2_scale>
 8004d86:	4603      	mov	r3, r0
 8004d88:	019b      	lsls	r3, r3, #6
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b21b      	sxth	r3, r3
 8004d94:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8004d96:	89fb      	ldrh	r3, [r7, #14]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <mpu9255_process>:
#else
	return &dmpData;
#endif
}

void mpu9255_process() {
 8004da0:	b5b0      	push	{r4, r5, r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af02      	add	r7, sp, #8
	if (updateRequired) {
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <mpu9255_process+0xa4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d045      	beq.n	8004e3a <mpu9255_process+0x9a>

		unsigned char more;


#if DEBUG_DMP
		dmp_read_fifo(dmpData[writeIndex].gyro.array, dmpData[writeIndex].acceleration.array, dmpData[writeIndex].quaternarion.array, &dmpData[writeIndex].timestamp, &dmpData[writeIndex].sensors, &more);
 8004dae:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <mpu9255_process+0xa8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <mpu9255_process+0xac>)
 8004dbe:	4413      	add	r3, r2
 8004dc0:	1d98      	adds	r0, r3, #6
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <mpu9255_process+0xa8>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <mpu9255_process+0xac>)
 8004dd2:	1899      	adds	r1, r3, r2
 8004dd4:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <mpu9255_process+0xa8>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4613      	mov	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	3308      	adds	r3, #8
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <mpu9255_process+0xac>)
 8004de6:	4413      	add	r3, r2
 8004de8:	1d1c      	adds	r4, r3, #4
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <mpu9255_process+0xa8>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3318      	adds	r3, #24
 8004dfa:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <mpu9255_process+0xac>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	1d1d      	adds	r5, r3, #4
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <mpu9255_process+0xa8>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	3320      	adds	r3, #32
 8004e10:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <mpu9255_process+0xac>)
 8004e12:	4413      	add	r3, r2
 8004e14:	1dfa      	adds	r2, r7, #7
 8004e16:	9201      	str	r2, [sp, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	f7ff fc8d 	bl	800473c <dmp_read_fifo>

		writeIndex++;
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <mpu9255_process+0xa8>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <mpu9255_process+0xa8>)
 8004e2c:	701a      	strb	r2, [r3, #0]
#else
		dmp_read_fifo(dmpData.gyro.array, dmpData.acceleration.array, dmpData.quaternarion.array, &dmpData.timestamp, &dmpData.sensors, &more);

#endif
		if (!more) {
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <mpu9255_process+0x9a>
			updateRequired = false;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <mpu9255_process+0xa4>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
		}


	}
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bdb0      	pop	{r4, r5, r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200003c4 	.word	0x200003c4
 8004e48:	200027c8 	.word	0x200027c8
 8004e4c:	200003c8 	.word	0x200003c8

08004e50 <mpu9255_init>:

void mpu9255_init(uint32_t readPeriod) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
//	spi1_init(); ??
	clearChipSelect();
 8004e58:	f7ff fe2a 	bl	8004ab0 <clearChipSelect>
	uint8_t whoami;
	mpu9255_read(0, 0x75, 1, &whoami);
 8004e5c:	f107 031f 	add.w	r3, r7, #31
 8004e60:	2201      	movs	r2, #1
 8004e62:	2175      	movs	r1, #117	; 0x75
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7ff fe83 	bl	8004b70 <mpu9255_read>
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <mpu9255_init+0xc8>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	721a      	strb	r2, [r3, #8]
	delayTimer.alarm = 1; // 1ms
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <mpu9255_init+0xc8>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	60da      	str	r2, [r3, #12]
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 8004e76:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <mpu9255_init+0xc8>)
 8004e78:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <mpu9255_init+0xcc>)
 8004e7a:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&delayTimer);
 8004e7c:	4826      	ldr	r0, [pc, #152]	; (8004f18 <mpu9255_init+0xc8>)
 8004e7e:	f7fc ff7d 	bl	8001d7c <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 8004e82:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <mpu9255_init+0xc8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc ff50 	bl	8001d2c <systick_app_timer_channel_start>

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <mpu9255_init+0xd0>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	721a      	strb	r2, [r3, #8]
	readTimer.alarm = readPeriod; // 1ms
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <mpu9255_init+0xd0>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60d3      	str	r3, [r2, #12]
	readTimer.timerAlarmCallback = readTimer_event_handler;
 8004e98:	4b21      	ldr	r3, [pc, #132]	; (8004f20 <mpu9255_init+0xd0>)
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <mpu9255_init+0xd4>)
 8004e9c:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&readTimer);
 8004e9e:	4820      	ldr	r0, [pc, #128]	; (8004f20 <mpu9255_init+0xd0>)
 8004ea0:	f7fc ff6c 	bl	8001d7c <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// reset internal data
	memset(&dmpData, 0, sizeof(dmpData));
 8004ea4:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	481f      	ldr	r0, [pc, #124]	; (8004f28 <mpu9255_init+0xd8>)
 8004eac:	f001 fae2 	bl	8006474 <memset>

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 8004eb0:	f107 0318 	add.w	r3, r7, #24
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fd fd0d 	bl	80028d4 <mpu_init>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8004eba:	2078      	movs	r0, #120	; 0x78
 8004ebc:	f7fe f9b4 	bl	8003228 <mpu_set_sensors>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 8004ec0:	f7fe fecc 	bl	8003c5c <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {1, 0, 0,
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <mpu9255_init+0xdc>)
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ecc:	c303      	stmia	r3!, {r0, r1}
 8004ece:	701a      	strb	r2, [r3, #0]
							0, 0, -1,
							0, 1, 0};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff3b 	bl	8004d50 <inv_orientation_matrix_to_scalar>
 8004eda:	4603      	mov	r3, r0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fecd 	bl	8003c7c <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 8004ee2:	4813      	ldr	r0, [pc, #76]	; (8004f30 <mpu9255_init+0xe0>)
 8004ee4:	f7ff fd96 	bl	8004a14 <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 8004ee8:	4812      	ldr	r0, [pc, #72]	; (8004f34 <mpu9255_init+0xe4>)
 8004eea:	f7ff fda3 	bl	8004a34 <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
 8004eee:	20d0      	movs	r0, #208	; 0xd0
 8004ef0:	f7ff fa3a 	bl	8004368 <dmp_enable_feature>

	dmp_set_fifo_rate(100);
 8004ef4:	2064      	movs	r0, #100	; 0x64
 8004ef6:	f7fe ffad 	bl	8003e54 <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8004efa:	2001      	movs	r0, #1
 8004efc:	f7fe fd1c 	bl	8003938 <mpu_set_dmp_state>
	mpu_reset_fifo();
 8004f00:	f7fd fe4a 	bl	8002b98 <mpu_reset_fifo>
	systick_app_timer_channel_start(readTimer.channel);
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <mpu9255_init+0xd0>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fc ff0f 	bl	8001d2c <systick_app_timer_channel_start>
}
 8004f0e:	bf00      	nop
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000394 	.word	0x20000394
 8004f1c:	08004c51 	.word	0x08004c51
 8004f20:	200003a8 	.word	0x200003a8
 8004f24:	08004c85 	.word	0x08004c85
 8004f28:	200003c8 	.word	0x200003c8
 8004f2c:	080064e8 	.word	0x080064e8
 8004f30:	08004cb3 	.word	0x08004cb3
 8004f34:	08004c9d 	.word	0x08004c9d

08004f38 <LL_ADC_REG_SetSequencerLength>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_ADC_IsEnabled>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <LL_ADC_IsEnabled+0x18>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <LL_ADC_IsEnabled+0x1a>
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004f92:	481c      	ldr	r0, [pc, #112]	; (8005004 <LL_ADC_CommonInit+0x80>)
 8004f94:	f7ff ffe3 	bl	8004f5e <LL_ADC_IsEnabled>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	481b      	ldr	r0, [pc, #108]	; (8005008 <LL_ADC_CommonInit+0x84>)
 8004f9c:	f7ff ffdf 	bl	8004f5e <LL_ADC_IsEnabled>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	431c      	orrs	r4, r3
 8004fa4:	4819      	ldr	r0, [pc, #100]	; (800500c <LL_ADC_CommonInit+0x88>)
 8004fa6:	f7ff ffda 	bl	8004f5e <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4323      	orrs	r3, r4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d120      	bne.n	8004ff4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <LL_ADC_CommonInit+0x8c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	6852      	ldr	r2, [r2, #4]
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	6892      	ldr	r2, [r2, #8]
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	68d2      	ldr	r2, [r2, #12]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	e00b      	b.n	8004ff8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <LL_ADC_CommonInit+0x8c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	e001      	b.n	8004ff8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}
 8005002:	bf00      	nop
 8005004:	50040000 	.word	0x50040000
 8005008:	50040100 	.word	0x50040100
 800500c:	50040200 	.word	0x50040200
 8005010:	ffc030e0 	.word	0xffc030e0

08005014 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff ff9b 	bl	8004f5e <LL_ADC_IsEnabled>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d111      	bne.n	8005052 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	6811      	ldr	r1, [r2, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	6852      	ldr	r2, [r2, #4]
 8005042:	4311      	orrs	r1, r2
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6892      	ldr	r2, [r2, #8]
 8005048:	430a      	orrs	r2, r1
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	e001      	b.n	8005056 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff ff75 	bl	8004f5e <LL_ADC_IsEnabled>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d132      	bne.n	80050e0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d015      	beq.n	80050ae <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <LL_ADC_REG_Init+0x90>)
 8005088:	4013      	ands	r3, r2
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	6811      	ldr	r1, [r2, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	6892      	ldr	r2, [r2, #8]
 8005092:	4311      	orrs	r1, r2
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	4311      	orrs	r1, r2
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	6912      	ldr	r2, [r2, #16]
 800509e:	4311      	orrs	r1, r2
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	6952      	ldr	r2, [r2, #20]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e011      	b.n	80050d2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <LL_ADC_REG_Init+0x90>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	6811      	ldr	r1, [r2, #0]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	4311      	orrs	r1, r2
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	6912      	ldr	r2, [r2, #16]
 80050c4:	4311      	orrs	r1, r2
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	6952      	ldr	r2, [r2, #20]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff2d 	bl	8004f38 <LL_ADC_REG_SetSequencerLength>
 80050de:	e001      	b.n	80050e4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	fff0c03c 	.word	0xfff0c03c

080050f4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <LL_EXTI_EnableIT_0_31+0x20>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4904      	ldr	r1, [pc, #16]	; (8005114 <LL_EXTI_EnableIT_0_31+0x20>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40010400 	.word	0x40010400

08005118 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <LL_EXTI_EnableIT_32_63+0x20>)
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <LL_EXTI_EnableIT_32_63+0x20>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4313      	orrs	r3, r2
 800512a:	620b      	str	r3, [r1, #32]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010400 	.word	0x40010400

0800513c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <LL_EXTI_DisableIT_0_31+0x24>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	43db      	mvns	r3, r3
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <LL_EXTI_DisableIT_0_31+0x24>)
 800514e:	4013      	ands	r3, r2
 8005150:	600b      	str	r3, [r1, #0]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010400 	.word	0x40010400

08005164 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <LL_EXTI_DisableIT_32_63+0x24>)
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	43db      	mvns	r3, r3
 8005174:	4904      	ldr	r1, [pc, #16]	; (8005188 <LL_EXTI_DisableIT_32_63+0x24>)
 8005176:	4013      	ands	r3, r2
 8005178:	620b      	str	r3, [r1, #32]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010400 	.word	0x40010400

0800518c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4904      	ldr	r1, [pc, #16]	; (80051ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]

}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010400 	.word	0x40010400

080051b0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80051ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051bc:	4904      	ldr	r1, [pc, #16]	; (80051d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	40010400 	.word	0x40010400

080051d4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	43db      	mvns	r3, r3
 80051e4:	4904      	ldr	r1, [pc, #16]	; (80051f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010400 	.word	0x40010400

080051fc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	43db      	mvns	r3, r3
 800520c:	4904      	ldr	r1, [pc, #16]	; (8005220 <LL_EXTI_DisableEvent_32_63+0x24>)
 800520e:	4013      	ands	r3, r2
 8005210:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010400 	.word	0x40010400

08005224 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4904      	ldr	r1, [pc, #16]	; (8005244 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]

}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40010400 	.word	0x40010400

08005248 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4313      	orrs	r3, r2
 800525a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40010400 	.word	0x40010400

0800526c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	43db      	mvns	r3, r3
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800527e:	4013      	ands	r3, r2
 8005280:	608b      	str	r3, [r1, #8]

}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010400 	.word	0x40010400

08005294 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800529e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	4904      	ldr	r1, [pc, #16]	; (80052b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010400 	.word	0x40010400

080052bc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4904      	ldr	r1, [pc, #16]	; (80052dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010400 	.word	0x40010400

080052e0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4904      	ldr	r1, [pc, #16]	; (8005300 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40010400 	.word	0x40010400

08005304 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	43db      	mvns	r3, r3
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005316:	4013      	ands	r3, r2
 8005318:	60cb      	str	r3, [r1, #12]
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010400 	.word	0x40010400

0800532c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	43db      	mvns	r3, r3
 800533c:	4904      	ldr	r1, [pc, #16]	; (8005350 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800533e:	4013      	ands	r3, r2
 8005340:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010400 	.word	0x40010400

08005354 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7a1b      	ldrb	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80d1 	beq.w	800550c <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d063      	beq.n	800543a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7a5b      	ldrb	r3, [r3, #9]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d01c      	beq.n	80053b4 <LL_EXTI_Init+0x60>
 800537a:	2b02      	cmp	r3, #2
 800537c:	dc25      	bgt.n	80053ca <LL_EXTI_Init+0x76>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <LL_EXTI_Init+0x34>
 8005382:	2b01      	cmp	r3, #1
 8005384:	d00b      	beq.n	800539e <LL_EXTI_Init+0x4a>
 8005386:	e020      	b.n	80053ca <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff21 	bl	80051d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff feac 	bl	80050f4 <LL_EXTI_EnableIT_0_31>
          break;
 800539c:	e018      	b.n	80053d0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff feca 	bl	800513c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff feed 	bl	800518c <LL_EXTI_EnableEvent_0_31>
          break;
 80053b2:	e00d      	b.n	80053d0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fe9b 	bl	80050f4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fee2 	bl	800518c <LL_EXTI_EnableEvent_0_31>
          break;
 80053c8:	e002      	b.n	80053d0 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80053ca:	2301      	movs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
          break;
 80053ce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7a9b      	ldrb	r3, [r3, #10]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d030      	beq.n	800543a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7a9b      	ldrb	r3, [r3, #10]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d01c      	beq.n	800541a <LL_EXTI_Init+0xc6>
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	dc25      	bgt.n	8005430 <LL_EXTI_Init+0xdc>
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d002      	beq.n	80053ee <LL_EXTI_Init+0x9a>
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d00b      	beq.n	8005404 <LL_EXTI_Init+0xb0>
 80053ec:	e020      	b.n	8005430 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ff86 	bl	8005304 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff11 	bl	8005224 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005402:	e01b      	b.n	800543c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff2f 	bl	800526c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff52 	bl	80052bc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005418:	e010      	b.n	800543c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff00 	bl	8005224 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff47 	bl	80052bc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800542e:	e005      	b.n	800543c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	60fb      	str	r3, [r7, #12]
            break;
 8005438:	e000      	b.n	800543c <LL_EXTI_Init+0xe8>
        }
      }
 800543a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d078      	beq.n	8005536 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7a5b      	ldrb	r3, [r3, #9]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d01c      	beq.n	8005486 <LL_EXTI_Init+0x132>
 800544c:	2b02      	cmp	r3, #2
 800544e:	dc25      	bgt.n	800549c <LL_EXTI_Init+0x148>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <LL_EXTI_Init+0x106>
 8005454:	2b01      	cmp	r3, #1
 8005456:	d00b      	beq.n	8005470 <LL_EXTI_Init+0x11c>
 8005458:	e020      	b.n	800549c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fecc 	bl	80051fc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fe55 	bl	8005118 <LL_EXTI_EnableIT_32_63>
          break;
 800546e:	e01a      	b.n	80054a6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff fe75 	bl	8005164 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fe96 	bl	80051b0 <LL_EXTI_EnableEvent_32_63>
          break;
 8005484:	e00f      	b.n	80054a6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fe44 	bl	8005118 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fe8b 	bl	80051b0 <LL_EXTI_EnableEvent_32_63>
          break;
 800549a:	e004      	b.n	80054a6 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	60fb      	str	r3, [r7, #12]
          break;
 80054a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7a9b      	ldrb	r3, [r3, #10]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d043      	beq.n	8005536 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7a9b      	ldrb	r3, [r3, #10]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d01c      	beq.n	80054f0 <LL_EXTI_Init+0x19c>
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	dc25      	bgt.n	8005506 <LL_EXTI_Init+0x1b2>
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d002      	beq.n	80054c4 <LL_EXTI_Init+0x170>
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d00b      	beq.n	80054da <LL_EXTI_Init+0x186>
 80054c2:	e020      	b.n	8005506 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff2f 	bl	800532c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff feb8 	bl	8005248 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80054d8:	e02e      	b.n	8005538 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fed8 	bl	8005294 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fef9 	bl	80052e0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80054ee:	e023      	b.n	8005538 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fea7 	bl	8005248 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff feee 	bl	80052e0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005504:	e018      	b.n	8005538 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
            break;
 800550a:	e015      	b.n	8005538 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fe13 	bl	800513c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fe5a 	bl	80051d4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe1d 	bl	8005164 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fe64 	bl	80051fc <LL_EXTI_DisableEvent_32_63>
 8005534:	e000      	b.n	8005538 <LL_EXTI_Init+0x1e4>
      }
 8005536:	bf00      	nop
  }

  return status;
 8005538:	68fb      	ldr	r3, [r7, #12]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <LL_GPIO_SetPinMode>:
{
 8005542:	b480      	push	{r7}
 8005544:	b08b      	sub	sp, #44	; 0x2c
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa93 f3a3 	rbit	r3, r3
 800555c:	613b      	str	r3, [r7, #16]
  return result;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005568:	2320      	movs	r3, #32
 800556a:	e003      	b.n	8005574 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2103      	movs	r1, #3
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	61fb      	str	r3, [r7, #28]
  return result;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005596:	2320      	movs	r3, #32
 8005598:	e003      	b.n	80055a2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	fab3 f383 	clz	r3, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	372c      	adds	r7, #44	; 0x2c
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <LL_GPIO_SetPinOutputType>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	43db      	mvns	r3, r3
 80055d0:	401a      	ands	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	431a      	orrs	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_GPIO_SetPinSpeed>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b08b      	sub	sp, #44	; 0x2c
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	613b      	str	r3, [r7, #16]
  return result;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005612:	2320      	movs	r3, #32
 8005614:	e003      	b.n	800561e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2103      	movs	r1, #3
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	61fb      	str	r3, [r7, #28]
  return result;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005640:	2320      	movs	r3, #32
 8005642:	e003      	b.n	800564c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
}
 800565a:	bf00      	nop
 800565c:	372c      	adds	r7, #44	; 0x2c
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <LL_GPIO_SetPinPull>:
{
 8005666:	b480      	push	{r7}
 8005668:	b08b      	sub	sp, #44	; 0x2c
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	fa93 f3a3 	rbit	r3, r3
 8005680:	613b      	str	r3, [r7, #16]
  return result;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800568c:	2320      	movs	r3, #32
 800568e:	e003      	b.n	8005698 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2103      	movs	r1, #3
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	fa93 f3a3 	rbit	r3, r3
 80056ae:	61fb      	str	r3, [r7, #28]
  return result;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80056ba:	2320      	movs	r3, #32
 80056bc:	e003      	b.n	80056c6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	fab3 f383 	clz	r3, r3
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	60da      	str	r2, [r3, #12]
}
 80056d4:	bf00      	nop
 80056d6:	372c      	adds	r7, #44	; 0x2c
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <LL_GPIO_SetAFPin_0_7>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	b08b      	sub	sp, #44	; 0x2c
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fa93 f3a3 	rbit	r3, r3
 80056fa:	613b      	str	r3, [r7, #16]
  return result;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005706:	2320      	movs	r3, #32
 8005708:	e003      	b.n	8005712 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	210f      	movs	r1, #15
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	401a      	ands	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	61fb      	str	r3, [r7, #28]
  return result;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e003      	b.n	8005740 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	372c      	adds	r7, #44	; 0x2c
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_GPIO_SetAFPin_8_15>:
{
 800575a:	b480      	push	{r7}
 800575c:	b08b      	sub	sp, #44	; 0x2c
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	0a1b      	lsrs	r3, r3, #8
 800576e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fa93 f3a3 	rbit	r3, r3
 8005776:	613b      	str	r3, [r7, #16]
  return result;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005782:	2320      	movs	r3, #32
 8005784:	e003      	b.n	800578e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	fab3 f383 	clz	r3, r3
 800578c:	b2db      	uxtb	r3, r3
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	210f      	movs	r1, #15
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	401a      	ands	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	61fb      	str	r3, [r7, #28]
  return result;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80057b2:	2320      	movs	r3, #32
 80057b4:	e003      	b.n	80057be <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	fab3 f383 	clz	r3, r3
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80057cc:	bf00      	nop
 80057ce:	372c      	adds	r7, #44	; 0x2c
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	60fb      	str	r3, [r7, #12]
  return result;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <LL_GPIO_Init+0x26>
    return 32U;
 80057fa:	2320      	movs	r3, #32
 80057fc:	e003      	b.n	8005806 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005808:	e048      	b.n	800589c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	2101      	movs	r1, #1
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d03a      	beq.n	8005896 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d003      	beq.n	8005830 <LL_GPIO_Init+0x58>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d10e      	bne.n	800584e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	461a      	mov	r2, r3
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fed7 	bl	80055ec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	461a      	mov	r2, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff feb7 	bl	80055bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	461a      	mov	r2, r3
 8005854:	69b9      	ldr	r1, [r7, #24]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff05 	bl	8005666 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d111      	bne.n	8005888 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d807      	bhi.n	800587a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	461a      	mov	r2, r3
 8005870:	69b9      	ldr	r1, [r7, #24]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff34 	bl	80056e0 <LL_GPIO_SetAFPin_0_7>
 8005878:	e006      	b.n	8005888 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	461a      	mov	r2, r3
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff ff69 	bl	800575a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	461a      	mov	r2, r3
 800588e:	69b9      	ldr	r1, [r7, #24]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fe56 	bl	8005542 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3301      	adds	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1af      	bne.n	800580a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <LL_RCC_HSI_IsReady>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <LL_RCC_HSI_IsReady+0x24>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c4:	d101      	bne.n	80058ca <LL_RCC_HSI_IsReady+0x16>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <LL_RCC_HSI_IsReady+0x18>
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <LL_RCC_LSE_IsReady>:
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <LL_RCC_LSE_IsReady+0x24>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d101      	bne.n	80058f2 <LL_RCC_LSE_IsReady+0x16>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <LL_RCC_LSE_IsReady+0x18>
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000

08005904 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d101      	bne.n	8005918 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40021000 	.word	0x40021000

08005928 <LL_RCC_MSI_GetRange>:
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <LL_RCC_MSI_GetRange+0x18>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000

08005944 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40021000 	.word	0x40021000

08005960 <LL_RCC_GetSysClkSource>:
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <LL_RCC_GetSysClkSource+0x18>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
}
 800596c:	4618      	mov	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000

0800597c <LL_RCC_GetAHBPrescaler>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <LL_RCC_GetAHBPrescaler+0x18>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000

08005998 <LL_RCC_GetAPB1Prescaler>:
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000

080059b4 <LL_RCC_GetAPB2Prescaler>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000

080059d0 <LL_RCC_GetUSARTClockSource>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <LL_RCC_GetUSARTClockSource+0x24>)
 80059da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	401a      	ands	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	4313      	orrs	r3, r2
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40021000 	.word	0x40021000

080059f8 <LL_RCC_GetUARTClockSource>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <LL_RCC_GetUARTClockSource+0x24>)
 8005a02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	401a      	ands	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	4313      	orrs	r3, r2
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40021000 	.word	0x40021000

08005a20 <LL_RCC_PLL_GetMainSource>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <LL_RCC_PLL_GetMainSource+0x18>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0303 	and.w	r3, r3, #3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000

08005a3c <LL_RCC_PLL_GetN>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <LL_RCC_PLL_GetN+0x18>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40021000 	.word	0x40021000

08005a58 <LL_RCC_PLL_GetR>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <LL_RCC_PLL_GetR+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000

08005a74 <LL_RCC_PLL_GetDivider>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <LL_RCC_PLL_GetDivider+0x18>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40021000 	.word	0x40021000

08005a90 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d137      	bne.n	8005b12 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff94 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	f200 80b3 	bhi.w	8005c1a <LL_RCC_GetUSARTClockFreq+0x18a>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <LL_RCC_GetUSARTClockFreq+0x2c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005afb 	.word	0x08005afb
 8005ac0:	08005acd 	.word	0x08005acd
 8005ac4:	08005ad5 	.word	0x08005ad5
 8005ac8:	08005ae7 	.word	0x08005ae7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005acc:	f000 f95c 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005ad0:	60f8      	str	r0, [r7, #12]
        break;
 8005ad2:	e0b5      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005ad4:	f7ff feee 	bl	80058b4 <LL_RCC_HSI_IsReady>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 809f 	beq.w	8005c1e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005ae2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ae4:	e09b      	b.n	8005c1e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005ae6:	f7ff fef9 	bl	80058dc <LL_RCC_LSE_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8098 	beq.w	8005c22 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8005af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005af8:	e093      	b.n	8005c22 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005afa:	f000 f945 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 f9d1 	bl	8005ea8 <RCC_GetHCLKClockFreq>
 8005b06:	4603      	mov	r3, r0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f9f7 	bl	8005efc <RCC_GetPCLK2ClockFreq>
 8005b0e:	60f8      	str	r0, [r7, #12]
        break;
 8005b10:	e096      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d146      	bne.n	8005ba6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff59 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	d87e      	bhi.n	8005c26 <LL_RCC_GetUSARTClockFreq+0x196>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b8f 	.word	0x08005b8f
 8005b34:	08005c27 	.word	0x08005c27
 8005b38:	08005c27 	.word	0x08005c27
 8005b3c:	08005c27 	.word	0x08005c27
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005c27 	.word	0x08005c27
 8005b48:	08005c27 	.word	0x08005c27
 8005b4c:	08005c27 	.word	0x08005c27
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005c27 	.word	0x08005c27
 8005b58:	08005c27 	.word	0x08005c27
 8005b5c:	08005c27 	.word	0x08005c27
 8005b60:	08005b7d 	.word	0x08005b7d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005b64:	f000 f910 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005b68:	60f8      	str	r0, [r7, #12]
        break;
 8005b6a:	e069      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005b6c:	f7ff fea2 	bl	80058b4 <LL_RCC_HSI_IsReady>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d059      	beq.n	8005c2a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8005b76:	4b35      	ldr	r3, [pc, #212]	; (8005c4c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005b78:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b7a:	e056      	b.n	8005c2a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005b7c:	f7ff feae 	bl	80058dc <LL_RCC_LSE_IsReady>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d053      	beq.n	8005c2e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b8c:	e04f      	b.n	8005c2e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005b8e:	f000 f8fb 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f987 	bl	8005ea8 <RCC_GetHCLKClockFreq>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f999 	bl	8005ed4 <RCC_GetPCLK1ClockFreq>
 8005ba2:	60f8      	str	r0, [r7, #12]
        break;
 8005ba4:	e04c      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b30      	cmp	r3, #48	; 0x30
 8005baa:	d142      	bne.n	8005c32 <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff0f 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005bb8:	d01a      	beq.n	8005bf0 <LL_RCC_GetUSARTClockFreq+0x160>
 8005bba:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005bbe:	d83a      	bhi.n	8005c36 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00c      	beq.n	8005be0 <LL_RCC_GetUSARTClockFreq+0x150>
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d834      	bhi.n	8005c36 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd0:	d017      	beq.n	8005c02 <LL_RCC_GetUSARTClockFreq+0x172>
 8005bd2:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d12e      	bne.n	8005c36 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005bd8:	f000 f8d6 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005bdc:	60f8      	str	r0, [r7, #12]
          break;
 8005bde:	e02f      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8005be0:	f7ff fe68 	bl	80058b4 <LL_RCC_HSI_IsReady>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d027      	beq.n	8005c3a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005bec:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005bee:	e024      	b.n	8005c3a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8005bf0:	f7ff fe74 	bl	80058dc <LL_RCC_LSE_IsReady>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d021      	beq.n	8005c3e <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfe:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005c00:	e01d      	b.n	8005c3e <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005c02:	f000 f8c1 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005c06:	4603      	mov	r3, r0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f94d 	bl	8005ea8 <RCC_GetHCLKClockFreq>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 f95f 	bl	8005ed4 <RCC_GetPCLK1ClockFreq>
 8005c16:	60f8      	str	r0, [r7, #12]
          break;
 8005c18:	e012      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e010      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e00e      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c22:	bf00      	nop
 8005c24:	e00c      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c26:	bf00      	nop
 8005c28:	e00a      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e008      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e006      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8005c32:	bf00      	nop
 8005c34:	e004      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8005c3e:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	00300020 	.word	0x00300020
 8005c54:	00300010 	.word	0x00300010

08005c58 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2bc0      	cmp	r3, #192	; 0xc0
 8005c68:	d136      	bne.n	8005cd8 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fec4 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c76:	d01a      	beq.n	8005cae <LL_RCC_GetUARTClockFreq+0x56>
 8005c78:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8005c7c:	d82e      	bhi.n	8005cdc <LL_RCC_GetUARTClockFreq+0x84>
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00c      	beq.n	8005c9e <LL_RCC_GetUARTClockFreq+0x46>
 8005c84:	4a3b      	ldr	r2, [pc, #236]	; (8005d74 <LL_RCC_GetUARTClockFreq+0x11c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d828      	bhi.n	8005cdc <LL_RCC_GetUARTClockFreq+0x84>
 8005c8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c8e:	d017      	beq.n	8005cc0 <LL_RCC_GetUARTClockFreq+0x68>
 8005c90:	4a39      	ldr	r2, [pc, #228]	; (8005d78 <LL_RCC_GetUARTClockFreq+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d122      	bne.n	8005cdc <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005c96:	f000 f877 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005c9a:	60f8      	str	r0, [r7, #12]
        break;
 8005c9c:	e023      	b.n	8005ce6 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005c9e:	f7ff fe09 	bl	80058b4 <LL_RCC_HSI_IsReady>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8005ca8:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <LL_RCC_GetUARTClockFreq+0x124>)
 8005caa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cac:	e018      	b.n	8005ce0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005cae:	f7ff fe15 	bl	80058dc <LL_RCC_LSE_IsReady>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8005cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cbe:	e011      	b.n	8005ce4 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005cc0:	f000 f862 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f8ee 	bl	8005ea8 <RCC_GetHCLKClockFreq>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f900 	bl	8005ed4 <RCC_GetPCLK1ClockFreq>
 8005cd4:	60f8      	str	r0, [r7, #12]
        break;
 8005cd6:	e006      	b.n	8005ce6 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8005cd8:	bf00      	nop
 8005cda:	e004      	b.n	8005ce6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005cdc:	bf00      	nop
 8005cde:	e002      	b.n	8005ce6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e000      	b.n	8005ce6 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8005ce4:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cec:	d136      	bne.n	8005d5c <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fe82 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005cfa:	d01a      	beq.n	8005d32 <LL_RCC_GetUARTClockFreq+0xda>
 8005cfc:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8005d00:	d82e      	bhi.n	8005d60 <LL_RCC_GetUARTClockFreq+0x108>
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <LL_RCC_GetUARTClockFreq+0x128>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00c      	beq.n	8005d22 <LL_RCC_GetUARTClockFreq+0xca>
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <LL_RCC_GetUARTClockFreq+0x128>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d828      	bhi.n	8005d60 <LL_RCC_GetUARTClockFreq+0x108>
 8005d0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d12:	d017      	beq.n	8005d44 <LL_RCC_GetUARTClockFreq+0xec>
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <LL_RCC_GetUARTClockFreq+0x12c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d122      	bne.n	8005d60 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005d1a:	f000 f835 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005d1e:	60f8      	str	r0, [r7, #12]
        break;
 8005d20:	e023      	b.n	8005d6a <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8005d22:	f7ff fdc7 	bl	80058b4 <LL_RCC_HSI_IsReady>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <LL_RCC_GetUARTClockFreq+0x124>)
 8005d2e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d30:	e018      	b.n	8005d64 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8005d32:	f7ff fdd3 	bl	80058dc <LL_RCC_LSE_IsReady>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8005d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d40:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d42:	e011      	b.n	8005d68 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005d44:	f000 f820 	bl	8005d88 <RCC_GetSystemClockFreq>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f8ac 	bl	8005ea8 <RCC_GetHCLKClockFreq>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f8be 	bl	8005ed4 <RCC_GetPCLK1ClockFreq>
 8005d58:	60f8      	str	r0, [r7, #12]
        break;
 8005d5a:	e006      	b.n	8005d6a <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8005d5c:	bf00      	nop
 8005d5e:	e004      	b.n	8005d6a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d60:	bf00      	nop
 8005d62:	e002      	b.n	8005d6a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d64:	bf00      	nop
 8005d66:	e000      	b.n	8005d6a <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8005d68:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	00c00080 	.word	0x00c00080
 8005d78:	00c00040 	.word	0x00c00040
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	03000200 	.word	0x03000200
 8005d84:	03000100 	.word	0x03000100

08005d88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005d8e:	f7ff fde7 	bl	8005960 <LL_RCC_GetSysClkSource>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	d851      	bhi.n	8005e3c <RCC_GetSystemClockFreq+0xb4>
 8005d98:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <RCC_GetSystemClockFreq+0x18>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005e3d 	.word	0x08005e3d
 8005da8:	08005e3d 	.word	0x08005e3d
 8005dac:	08005e3d 	.word	0x08005e3d
 8005db0:	08005e29 	.word	0x08005e29
 8005db4:	08005e3d 	.word	0x08005e3d
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005e3d 	.word	0x08005e3d
 8005dc0:	08005e2f 	.word	0x08005e2f
 8005dc4:	08005e3d 	.word	0x08005e3d
 8005dc8:	08005e3d 	.word	0x08005e3d
 8005dcc:	08005e3d 	.word	0x08005e3d
 8005dd0:	08005e35 	.word	0x08005e35
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005dd4:	f7ff fd96 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d111      	bne.n	8005e02 <RCC_GetSystemClockFreq+0x7a>
 8005dde:	f7ff fd91 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <RCC_GetSystemClockFreq+0x6a>
 8005de8:	f7ff fd9e 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005dec:	4603      	mov	r3, r0
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	e003      	b.n	8005dfa <RCC_GetSystemClockFreq+0x72>
 8005df2:	f7ff fda7 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005df6:	4603      	mov	r3, r0
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <RCC_GetSystemClockFreq+0x114>)
 8005dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e00:	e010      	b.n	8005e24 <RCC_GetSystemClockFreq+0x9c>
 8005e02:	f7ff fd7f 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <RCC_GetSystemClockFreq+0x8e>
 8005e0c:	f7ff fd8c 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005e10:	4603      	mov	r3, r0
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	e003      	b.n	8005e1e <RCC_GetSystemClockFreq+0x96>
 8005e16:	f7ff fd95 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <RCC_GetSystemClockFreq+0x114>)
 8005e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e24:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005e26:	e033      	b.n	8005e90 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <RCC_GetSystemClockFreq+0x118>)
 8005e2a:	607b      	str	r3, [r7, #4]
      break;
 8005e2c:	e030      	b.n	8005e90 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <RCC_GetSystemClockFreq+0x11c>)
 8005e30:	607b      	str	r3, [r7, #4]
      break;
 8005e32:	e02d      	b.n	8005e90 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005e34:	f000 f876 	bl	8005f24 <RCC_PLL_GetFreqDomain_SYS>
 8005e38:	6078      	str	r0, [r7, #4]
      break;
 8005e3a:	e029      	b.n	8005e90 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e3c:	f7ff fd62 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d111      	bne.n	8005e6a <RCC_GetSystemClockFreq+0xe2>
 8005e46:	f7ff fd5d 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <RCC_GetSystemClockFreq+0xd2>
 8005e50:	f7ff fd6a 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005e54:	4603      	mov	r3, r0
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	e003      	b.n	8005e62 <RCC_GetSystemClockFreq+0xda>
 8005e5a:	f7ff fd73 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	0a1b      	lsrs	r3, r3, #8
 8005e62:	4a0e      	ldr	r2, [pc, #56]	; (8005e9c <RCC_GetSystemClockFreq+0x114>)
 8005e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e68:	e010      	b.n	8005e8c <RCC_GetSystemClockFreq+0x104>
 8005e6a:	f7ff fd4b 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <RCC_GetSystemClockFreq+0xf6>
 8005e74:	f7ff fd58 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	e003      	b.n	8005e86 <RCC_GetSystemClockFreq+0xfe>
 8005e7e:	f7ff fd61 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e82:	4603      	mov	r3, r0
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <RCC_GetSystemClockFreq+0x114>)
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005e8e:	bf00      	nop
  }

  return frequency;
 8005e90:	687b      	ldr	r3, [r7, #4]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	0800650c 	.word	0x0800650c
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005eb0:	f7ff fd64 	bl	800597c <LL_RCC_GetAHBPrescaler>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	4a04      	ldr	r2, [pc, #16]	; (8005ed0 <RCC_GetHCLKClockFreq+0x28>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	40d3      	lsrs	r3, r2
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	080064f4 	.word	0x080064f4

08005ed4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005edc:	f7ff fd5c 	bl	8005998 <LL_RCC_GetAPB1Prescaler>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <RCC_GetPCLK1ClockFreq+0x24>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	40d3      	lsrs	r3, r2
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	08006504 	.word	0x08006504

08005efc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005f04:	f7ff fd56 	bl	80059b4 <LL_RCC_GetAPB2Prescaler>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	0adb      	lsrs	r3, r3, #11
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <RCC_GetPCLK2ClockFreq+0x24>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	40d3      	lsrs	r3, r2
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08006504 	.word	0x08006504

08005f24 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f2a:	f7ff fd79 	bl	8005a20 <LL_RCC_PLL_GetMainSource>
 8005f2e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d036      	beq.n	8005fa4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d836      	bhi.n	8005faa <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d003      	beq.n	8005f4a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d02a      	beq.n	8005f9e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8005f48:	e02f      	b.n	8005faa <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005f4a:	f7ff fcdb 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d111      	bne.n	8005f78 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005f54:	f7ff fcd6 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8005f5e:	f7ff fce3 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005f62:	4603      	mov	r3, r0
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	e003      	b.n	8005f70 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8005f68:	f7ff fcec 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	4a2f      	ldr	r2, [pc, #188]	; (8006030 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f76:	e010      	b.n	8005f9a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8005f78:	f7ff fcc4 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8005f82:	f7ff fcd1 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005f86:	4603      	mov	r3, r0
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	e003      	b.n	8005f94 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8005f8c:	f7ff fcda 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f90:	4603      	mov	r3, r0
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	4a26      	ldr	r2, [pc, #152]	; (8006030 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005f9c:	e02f      	b.n	8005ffe <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8005fa0:	607b      	str	r3, [r7, #4]
      break;
 8005fa2:	e02c      	b.n	8005ffe <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8005fa6:	607b      	str	r3, [r7, #4]
      break;
 8005fa8:	e029      	b.n	8005ffe <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005faa:	f7ff fcab 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d111      	bne.n	8005fd8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8005fb4:	f7ff fca6 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8005fbe:	f7ff fcb3 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	e003      	b.n	8005fd0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8005fc8:	f7ff fcbc 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	4a17      	ldr	r2, [pc, #92]	; (8006030 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd6:	e010      	b.n	8005ffa <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8005fd8:	f7ff fc94 	bl	8005904 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8005fe2:	f7ff fca1 	bl	8005928 <LL_RCC_MSI_GetRange>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	e003      	b.n	8005ff4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8005fec:	f7ff fcaa 	bl	8005944 <LL_RCC_MSI_GetRangeAfterStandby>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	4a0e      	ldr	r2, [pc, #56]	; (8006030 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005ffc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ffe:	f7ff fd39 	bl	8005a74 <LL_RCC_PLL_GetDivider>
 8006002:	4603      	mov	r3, r0
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	3301      	adds	r3, #1
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	fbb2 f4f3 	udiv	r4, r2, r3
 800600e:	f7ff fd15 	bl	8005a3c <LL_RCC_PLL_GetN>
 8006012:	4603      	mov	r3, r0
 8006014:	fb03 f404 	mul.w	r4, r3, r4
 8006018:	f7ff fd1e 	bl	8005a58 <LL_RCC_PLL_GetR>
 800601c:	4603      	mov	r3, r0
 800601e:	0e5b      	lsrs	r3, r3, #25
 8006020:	3301      	adds	r3, #1
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bd90      	pop	{r4, r7, pc}
 8006030:	0800650c 	.word	0x0800650c
 8006034:	00f42400 	.word	0x00f42400
 8006038:	007a1200 	.word	0x007a1200

0800603c <LL_SPI_IsEnabled>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d101      	bne.n	8006054 <LL_SPI_IsEnabled+0x18>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <LL_SPI_IsEnabled+0x1a>
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <LL_SPI_SetRxFIFOThreshold>:
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <LL_SPI_SetCRCPolynomial>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	611a      	str	r2, [r3, #16]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ffc0 	bl	800603c <LL_SPI_IsEnabled>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d145      	bne.n	800614e <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	6811      	ldr	r1, [r2, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6852      	ldr	r2, [r2, #4]
 80060d6:	4311      	orrs	r1, r2
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	68d2      	ldr	r2, [r2, #12]
 80060dc:	4311      	orrs	r1, r2
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	6912      	ldr	r2, [r2, #16]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	6952      	ldr	r2, [r2, #20]
 80060e8:	4311      	orrs	r1, r2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6992      	ldr	r2, [r2, #24]
 80060ee:	4311      	orrs	r1, r2
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	69d2      	ldr	r2, [r2, #28]
 80060f4:	4311      	orrs	r1, r2
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	6a12      	ldr	r2, [r2, #32]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800610a:	f023 0304 	bic.w	r3, r3, #4
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	6891      	ldr	r1, [r2, #8]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	6952      	ldr	r2, [r2, #20]
 8006116:	0c12      	lsrs	r2, r2, #16
 8006118:	430a      	orrs	r2, r1
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006128:	d204      	bcs.n	8006134 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800612a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff ff97 	bl	8006062 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613c:	d105      	bne.n	800614a <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff9f 	bl	8006088 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <LL_USART_IsEnabled>:
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <LL_USART_IsEnabled+0x18>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <LL_USART_IsEnabled+0x1a>
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_USART_SetStopBitsLength>:
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	605a      	str	r2, [r3, #4]
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <LL_USART_SetHWFlowCtrl>:
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <LL_USART_SetBaudRate>:
{
 80061ca:	b480      	push	{r7}
 80061cc:	b087      	sub	sp, #28
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d11a      	bne.n	8006216 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	005a      	lsls	r2, r3, #1
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	441a      	add	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80061fa:	4013      	ands	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	60da      	str	r2, [r3, #12]
}
 8006214:	e00a      	b.n	800622c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	085a      	lsrs	r2, r3, #1
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	441a      	add	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	60da      	str	r2, [r3, #12]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ff84 	bl	8006158 <LL_USART_IsEnabled>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d15b      	bne.n	800630e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <LL_USART_Init+0xe0>)
 800625c:	4013      	ands	r3, r2
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	6851      	ldr	r1, [r2, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	68d2      	ldr	r2, [r2, #12]
 8006266:	4311      	orrs	r1, r2
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	6912      	ldr	r2, [r2, #16]
 800626c:	4311      	orrs	r1, r2
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6992      	ldr	r2, [r2, #24]
 8006272:	430a      	orrs	r2, r1
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ff7c 	bl	800617e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff ff89 	bl	80061a4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <LL_USART_Init+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d104      	bne.n	80062a4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800629a:	2003      	movs	r0, #3
 800629c:	f7ff fbf8 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 80062a0:	60b8      	str	r0, [r7, #8]
 80062a2:	e023      	b.n	80062ec <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <LL_USART_Init+0xe8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d104      	bne.n	80062b6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80062ac:	200c      	movs	r0, #12
 80062ae:	f7ff fbef 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 80062b2:	60b8      	str	r0, [r7, #8]
 80062b4:	e01a      	b.n	80062ec <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <LL_USART_Init+0xec>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d104      	bne.n	80062c8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80062be:	2030      	movs	r0, #48	; 0x30
 80062c0:	f7ff fbe6 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 80062c4:	60b8      	str	r0, [r7, #8]
 80062c6:	e011      	b.n	80062ec <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <LL_USART_Init+0xf0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d104      	bne.n	80062da <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80062d0:	20c0      	movs	r0, #192	; 0xc0
 80062d2:	f7ff fcc1 	bl	8005c58 <LL_RCC_GetUARTClockFreq>
 80062d6:	60b8      	str	r0, [r7, #8]
 80062d8:	e008      	b.n	80062ec <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <LL_USART_Init+0xf4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d104      	bne.n	80062ec <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80062e2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80062e6:	f7ff fcb7 	bl	8005c58 <LL_RCC_GetUARTClockFreq>
 80062ea:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00d      	beq.n	800630e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ff5e 	bl	80061ca <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	efff69f3 	.word	0xefff69f3
 800631c:	40013800 	.word	0x40013800
 8006320:	40004400 	.word	0x40004400
 8006324:	40004800 	.word	0x40004800
 8006328:	40004c00 	.word	0x40004c00
 800632c:	40005000 	.word	0x40005000

08006330 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	4a07      	ldr	r2, [pc, #28]	; (8006360 <LL_InitTick+0x30>)
 8006344:	3b01      	subs	r3, #1
 8006346:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <LL_InitTick+0x30>)
 800634a:	2200      	movs	r2, #0
 800634c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <LL_InitTick+0x30>)
 8006350:	2205      	movs	r2, #5
 8006352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	e000e010 	.word	0xe000e010

08006364 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800636c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff ffdd 	bl	8006330 <LL_InitTick>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006388:	4b10      	ldr	r3, [pc, #64]	; (80063cc <LL_mDelay+0x4c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006392:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d00c      	beq.n	80063b6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80063a2:	e008      	b.n	80063b6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <LL_mDelay+0x4c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f3      	bne.n	80063a4 <LL_mDelay+0x24>
    }
  }
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000e010 	.word	0xe000e010

080063d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80063d8:	4a04      	ldr	r2, [pc, #16]	; (80063ec <LL_SetSystemCoreClock+0x1c>)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6013      	str	r3, [r2, #0]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000004 	.word	0x20000004

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4d0d      	ldr	r5, [pc, #52]	; (8006428 <__libc_init_array+0x38>)
 80063f4:	4c0d      	ldr	r4, [pc, #52]	; (800642c <__libc_init_array+0x3c>)
 80063f6:	1b64      	subs	r4, r4, r5
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	2600      	movs	r6, #0
 80063fc:	42a6      	cmp	r6, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	4d0b      	ldr	r5, [pc, #44]	; (8006430 <__libc_init_array+0x40>)
 8006402:	4c0c      	ldr	r4, [pc, #48]	; (8006434 <__libc_init_array+0x44>)
 8006404:	f000 f83e 	bl	8006484 <_init>
 8006408:	1b64      	subs	r4, r4, r5
 800640a:	10a4      	asrs	r4, r4, #2
 800640c:	2600      	movs	r6, #0
 800640e:	42a6      	cmp	r6, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	f855 3b04 	ldr.w	r3, [r5], #4
 8006418:	4798      	blx	r3
 800641a:	3601      	adds	r6, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006422:	4798      	blx	r3
 8006424:	3601      	adds	r6, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	080071a0 	.word	0x080071a0
 800642c:	080071a0 	.word	0x080071a0
 8006430:	080071a0 	.word	0x080071a0
 8006434:	080071a4 	.word	0x080071a4

08006438 <memcmp>:
 8006438:	b510      	push	{r4, lr}
 800643a:	3901      	subs	r1, #1
 800643c:	4402      	add	r2, r0
 800643e:	4290      	cmp	r0, r2
 8006440:	d101      	bne.n	8006446 <memcmp+0xe>
 8006442:	2000      	movs	r0, #0
 8006444:	e005      	b.n	8006452 <memcmp+0x1a>
 8006446:	7803      	ldrb	r3, [r0, #0]
 8006448:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800644c:	42a3      	cmp	r3, r4
 800644e:	d001      	beq.n	8006454 <memcmp+0x1c>
 8006450:	1b18      	subs	r0, r3, r4
 8006452:	bd10      	pop	{r4, pc}
 8006454:	3001      	adds	r0, #1
 8006456:	e7f2      	b.n	800643e <memcmp+0x6>

08006458 <memcpy>:
 8006458:	440a      	add	r2, r1
 800645a:	4291      	cmp	r1, r2
 800645c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006460:	d100      	bne.n	8006464 <memcpy+0xc>
 8006462:	4770      	bx	lr
 8006464:	b510      	push	{r4, lr}
 8006466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800646e:	4291      	cmp	r1, r2
 8006470:	d1f9      	bne.n	8006466 <memcpy+0xe>
 8006472:	bd10      	pop	{r4, pc}

08006474 <memset>:
 8006474:	4402      	add	r2, r0
 8006476:	4603      	mov	r3, r0
 8006478:	4293      	cmp	r3, r2
 800647a:	d100      	bne.n	800647e <memset+0xa>
 800647c:	4770      	bx	lr
 800647e:	f803 1b01 	strb.w	r1, [r3], #1
 8006482:	e7f9      	b.n	8006478 <memset+0x4>

08006484 <_init>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr

08006490 <_fini>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr
