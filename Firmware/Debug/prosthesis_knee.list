
prosthesis_knee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  08008558  08008558  00018558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d0  080092d0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080092d0  080092d0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092d0  080092d0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080092d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028a0  200000b0  08009388  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002950  08009388  00022950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb80  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c90  00000000  00000000  0002ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000318f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00032960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002659c  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104bb  00000000  00000000  00059e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c88f8  00000000  00000000  0006a2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132bef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  00132c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008540 	.word	0x08008540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08008540 	.word	0x08008540

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3330      	adds	r3, #48	; 0x30
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	4413      	add	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	211f      	movs	r1, #31
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	0e9b      	lsrs	r3, r3, #26
 8000afe:	f003 011f 	and.w	r1, r3, #31
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b12:	bf00      	nop
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b087      	sub	sp, #28
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	0e5b      	lsrs	r3, r3, #25
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	4413      	add	r3, r2
 8000b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	0d1b      	lsrs	r3, r3, #20
 8000b46:	f003 031f 	and.w	r3, r3, #31
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	401a      	ands	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	0d1b      	lsrs	r3, r3, #20
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	431a      	orrs	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0318 	and.w	r3, r3, #24
 8000b96:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b98:	40d9      	lsrs	r1, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	0007ffff 	.word	0x0007ffff

08000bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6093      	str	r3, [r2, #8]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <LL_RCC_SetADCClockSource+0x28>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000cca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000cce:	f7ff ff9b 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cd6:	f7ff ffad 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cda:	2004      	movs	r0, #4
 8000cdc:	f7ff ffaa 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC2   ------> ADC1_IN3
  */
  GPIO_InitStruct.Pin = LC_TOP_IN_Pin;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_TOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4831      	ldr	r0, [pc, #196]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cf2:	f005 fcdf 	bl	80066b4 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_TOP_IN_GPIO_Port, LC_TOP_IN_Pin);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <MX_ADC1_Init+0x130>)
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482a      	ldr	r0, [pc, #168]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d12:	f005 f8ed 	bl	8005ef0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4821      	ldr	r0, [pc, #132]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d36:	f005 f901 	bl	8005f3c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	4619      	mov	r1, r3
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d4a:	f005 f889 	bl	8005e60 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_ADC1_Init+0x138>)
 8000d52:	f7ff fea5 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d58:	f7ff ff30 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000d5c:	4817      	ldr	r0, [pc, #92]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d5e:	f7ff ff3f 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC1_Init+0x13c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	099b      	lsrs	r3, r3, #6
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0x140>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	099a      	lsrs	r2, r3, #6
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0x144>)
 8000d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d84:	e002      	b.n	8000d8c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f9      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000d94:	2106      	movs	r1, #6
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000d98:	f7ff fe95 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000da2:	f7ff febc 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8000da6:	227f      	movs	r2, #127	; 0x7f
 8000da8:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <MX_ADC1_Init+0x148>)
 8000daa:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_ADC1_Init+0x134>)
 8000dac:	f7ff fee2 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	50040300 	.word	0x50040300
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	053e2d63 	.word	0x053e2d63
 8000dcc:	cccccccd 	.word	0xcccccccd
 8000dd0:	0c900008 	.word	0x0c900008

08000dd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000e16:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000e1a:	f7ff fef5 	bl	8000c08 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000e1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e22:	f7ff ff07 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f7ff ff04 	bl	8000c34 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC3   ------> ADC2_IN4
  */
  GPIO_InitStruct.Pin = LC_BOT_IN_Pin;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LC_BOT_IN_GPIO_Port, &GPIO_InitStruct);
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4830      	ldr	r0, [pc, #192]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e3e:	f005 fc39 	bl	80066b4 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(LC_BOT_IN_GPIO_Port, LC_BOT_IN_Pin);
 8000e42:	2108      	movs	r1, #8
 8000e44:	482e      	ldr	r0, [pc, #184]	; (8000f00 <MX_ADC2_Init+0x12c>)
 8000e46:	f7ff ff0d 	bl	8000c64 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4829      	ldr	r0, [pc, #164]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e5e:	f005 f847 	bl	8005ef0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000e82:	f005 f85b 	bl	8005f3c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481d      	ldr	r0, [pc, #116]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e92:	f004 ffe5 	bl	8005e60 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000e96:	2100      	movs	r1, #0
 8000e98:	481b      	ldr	r0, [pc, #108]	; (8000f08 <MX_ADC2_Init+0x134>)
 8000e9a:	f7ff fe01 	bl	8000aa0 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000e9e:	4819      	ldr	r0, [pc, #100]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea0:	f7ff fe8c 	bl	8000bbc <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ea6:	f7ff fe9b 	bl	8000be0 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ADC2_Init+0x138>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	099b      	lsrs	r3, r3, #6
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <MX_ADC2_Init+0x13c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	099a      	lsrs	r2, r3, #6
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_ADC2_Init+0x140>)
 8000ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ecc:	e002      	b.n	8000ed4 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000edc:	2106      	movs	r1, #6
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ee0:	f7ff fdf1 	bl	8000ac6 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	490c      	ldr	r1, [pc, #48]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff fe18 	bl	8000b1e <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8000eee:	227f      	movs	r2, #127	; 0x7f
 8000ef0:	4909      	ldr	r1, [pc, #36]	; (8000f18 <MX_ADC2_Init+0x144>)
 8000ef2:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_ADC2_Init+0x130>)
 8000ef4:	f7ff fe3e 	bl	8000b74 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3750      	adds	r7, #80	; 0x50
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	48000800 	.word	0x48000800
 8000f04:	50040100 	.word	0x50040100
 8000f08:	50040300 	.word	0x50040300
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	053e2d63 	.word	0x053e2d63
 8000f14:	cccccccd 	.word	0xcccccccd
 8000f18:	10c00010 	.word	0x10c00010

08000f1c <LL_AHB2_GRP1_EnableClock>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	43db      	mvns	r3, r3
 8000f68:	ea02 0103 	and.w	r1, r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000f84:	2320      	movs	r3, #32
 8000f86:	e003      	b.n	8000f90 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	fa03 f202 	lsl.w	r2, r3, r2
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010000 	.word	0x40010000

08000fb8 <LL_GPIO_SetPinMode>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	613b      	str	r3, [r7, #16]
  return result;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2103      	movs	r1, #3
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	61fb      	str	r3, [r7, #28]
  return result;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800100c:	2320      	movs	r3, #32
 800100e:	e003      	b.n	8001018 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_GPIO_SetPinPull>:
{
 8001032:	b480      	push	{r7}
 8001034:	b08b      	sub	sp, #44	; 0x2c
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	613b      	str	r3, [r7, #16]
  return result;
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001058:	2320      	movs	r3, #32
 800105a:	e003      	b.n	8001064 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	61fb      	str	r3, [r7, #28]
  return result;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001086:	2320      	movs	r3, #32
 8001088:	e003      	b.n	8001092 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	431a      	orrs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	372c      	adds	r7, #44	; 0x2c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff ff16 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	f7ff ff13 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff10 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff ff0d 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OSCOPE_Pin|SPI2_CS_Pin|ENC_CLK_Pin);
 8001102:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8001106:	483f      	ldr	r0, [pc, #252]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001108:	f7ff ffd0 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENC_CSn_GPIO_Port, ENC_CSn_Pin);
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <MX_GPIO_Init+0x140>)
 8001110:	f7ff ffcc 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff ffc6 	bl	80010ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001120:	493a      	ldr	r1, [pc, #232]	; (800120c <MX_GPIO_Init+0x144>)
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff ff12 	bl	8000f4c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800113e:	2302      	movs	r3, #2
 8001140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4618      	mov	r0, r3
 800114a:	f005 f871 	bl	8006230 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	482c      	ldr	r0, [pc, #176]	; (8001208 <MX_GPIO_Init+0x140>)
 8001156:	f7ff ff6c 	bl	8001032 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <MX_GPIO_Init+0x140>)
 8001162:	f7ff ff29 	bl	8000fb8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin|ENC_CLK_Pin;
 8001166:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4820      	ldr	r0, [pc, #128]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001182:	f005 fa97 	bl	80066b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118c:	2301      	movs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_GPIO_Init+0x13c>)
 80011a2:	f005 fa87 	bl	80066b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_CSn_Pin;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011aa:	2301      	movs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_CSn_GPIO_Port, &GPIO_InitStruct);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011c0:	f005 fa78 	bl	80066b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENC_DO_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENC_DO_GPIO_Port, &GPIO_InitStruct);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0x140>)
 80011d6:	f005 fa6d 	bl	80066b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e0:	2301      	movs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f005 fa5c 	bl	80066b4 <LL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	00f00003 	.word	0x00f00003

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	60da      	str	r2, [r3, #12]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60da      	str	r2, [r3, #12]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f023 0203 	bic.w	r2, r3, #3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 0201 	bic.w	r2, r3, #1
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60da      	str	r2, [r3, #12]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <LL_RCC_SetLPTIMClockSource>:
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	4904      	ldr	r1, [pc, #16]	; (8001458 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001446:	4313      	orrs	r3, r2
 8001448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000

0800145c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);
 8001490:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 8001494:	f7ff ffc8 	bl	8001428 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001498:	2020      	movs	r0, #32
 800149a:	f7ff ffdf 	bl	800145c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800149e:	f7ff feb7 	bl	8001210 <__NVIC_GetPriorityGrouping>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff07 	bl	80012bc <NVIC_EncodePriority>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	2042      	movs	r0, #66	; 0x42
 80014b4:	f7ff fed8 	bl	8001268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80014b8:	2042      	movs	r0, #66	; 0x42
 80014ba:	f7ff feb7 	bl	800122c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80014be:	2100      	movs	r1, #0
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014c2:	f7ff ff9d 	bl	8001400 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014c6:	2100      	movs	r1, #0
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014ca:	f7ff ff63 	bl	8001394 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014ce:	2100      	movs	r1, #0
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014d2:	f7ff ff4c 	bl	800136e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014d6:	2100      	movs	r1, #0
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014da:	f7ff ff22 	bl	8001322 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014de:	2100      	movs	r1, #0
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014e2:	f7ff ff31 	bl	8001348 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014e8:	f7ff ff7a 	bl	80013e0 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80014ec:	2100      	movs	r1, #0
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <MX_LPTIM2_Init+0x6c>)
 80014f0:	f7ff ff63 	bl	80013ba <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40009400 	.word	0x40009400

080014fc <__NVIC_SetPriorityGrouping>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_LPTIM_Enable>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_LPTIM_StartCounter>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f023 0206 	bic.w	r2, r3, #6
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_LPTIM_SetAutoReload>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	041b      	lsls	r3, r3, #16
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f043 0202 	orr.w	r2, r3, #2
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_RCC_LSE_Enable>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <LL_RCC_LSE_Enable+0x20>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <LL_RCC_LSE_Enable+0x20>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_LSE_SetDriveCapability>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	f023 0218 	bic.w	r2, r3, #24
 800162e:	4905      	ldr	r1, [pc, #20]	; (8001644 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_LSE_IsReady>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <LL_RCC_LSE_IsReady+0x24>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b02      	cmp	r3, #2
 8001658:	d101      	bne.n	800165e <LL_RCC_LSE_IsReady+0x16>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_LSE_IsReady+0x18>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_MSI_Enable>:
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <LL_RCC_MSI_Enable+0x1c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <LL_RCC_MSI_Enable+0x1c>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_MSI_IsReady>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <LL_RCC_MSI_IsReady+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d101      	bne.n	80016a4 <LL_RCC_MSI_IsReady+0x14>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_RCC_MSI_IsReady+0x16>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_MSI_EnablePLLMode>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_MSI_EnableRangeSelection>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_RCC_MSI_SetRange>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LL_RCC_MSI_SetRange+0x24>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	4904      	ldr	r1, [pc, #16]	; (8001718 <LL_RCC_MSI_SetRange+0x24>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <LL_RCC_MSI_SetCalibTrimming>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <LL_RCC_SetSysClkSource>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <LL_RCC_SetSysClkSource+0x24>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 0203 	bic.w	r2, r3, #3
 8001758:	4904      	ldr	r1, [pc, #16]	; (800176c <LL_RCC_SetSysClkSource+0x24>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000

08001770 <LL_RCC_GetSysClkSource>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <LL_RCC_GetSysClkSource+0x18>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <LL_RCC_SetAHBPrescaler>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <LL_RCC_SetAHBPrescaler+0x24>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000

080017b4 <LL_RCC_SetAPB1Prescaler>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_SetAPB2Prescaler>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <LL_RCC_PLL_Enable+0x1c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <LL_RCC_PLL_Enable+0x1c>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <LL_RCC_PLL_IsReady+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001834:	d101      	bne.n	800183a <LL_RCC_PLL_IsReady+0x16>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_RCC_PLL_IsReady+0x18>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001860:	4013      	ands	r3, r2
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	0212      	lsls	r2, r2, #8
 800186c:	4311      	orrs	r1, r2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	4904      	ldr	r1, [pc, #16]	; (8001884 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	f9ff808c 	.word	0xf9ff808c

0800188c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <LL_APB1_GRP1_EnableClock>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4013      	ands	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000

0800190c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <LL_FLASH_SetLatency+0x24>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 0207 	bic.w	r2, r3, #7
 800191c:	4904      	ldr	r1, [pc, #16]	; (8001930 <LL_FLASH_SetLatency+0x24>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40022000 	.word	0x40022000

08001934 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <LL_FLASH_GetLatency+0x18>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000

08001950 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <LL_SYSTICK_EnableIT+0x1c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <LL_SYSTICK_EnableIT+0x1c>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e010 	.word	0xe000e010

08001970 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40007000 	.word	0x40007000

08001998 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40007000 	.word	0x40007000

080019b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff ff7c 	bl	80018dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019e8:	f7ff ff60 	bl	80018ac <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff fd85 	bl	80014fc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f2:	f000 f871 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f6:	f7ff fb67 	bl	80010c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019fa:	f001 fc6f 	bl	80032dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019fe:	f001 fa0b 	bl	8002e18 <MX_SPI1_Init>
  MX_LPTIM2_Init();
 8001a02:	f7ff fd43 	bl	800148c <MX_LPTIM2_Init>
  MX_SPI2_Init();
 8001a06:	f001 fa5d 	bl	8002ec4 <MX_SPI2_Init>
  MX_ADC2_Init();
 8001a0a:	f7ff f9e3 	bl	8000dd4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001a0e:	f7ff f93b 	bl	8000c88 <MX_ADC1_Init>
/*******************************************************************************
* USER DEFINITIONS
*******************************************************************************/

	AS5145B_Init_t MagEnc;
	MagEnc.DO_GPIOx = ENC_DO_GPIO_Port;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <main+0xdc>)
 8001a14:	603b      	str	r3, [r7, #0]
	MagEnc.CLK_GPIOx = ENC_CLK_GPIO_Port;
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <main+0xe0>)
 8001a18:	607b      	str	r3, [r7, #4]
	MagEnc.CSn_GPIOx = ENC_CSn_GPIO_Port;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <main+0xdc>)
 8001a1c:	60bb      	str	r3, [r7, #8]
	MagEnc.DO_Pin = ENC_DO_Pin;
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	81bb      	strh	r3, [r7, #12]
	MagEnc.CLK_Pin = ENC_CLK_Pin;
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	81fb      	strh	r3, [r7, #14]
	MagEnc.CSn_Pin = ENC_CSn_Pin;
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	823b      	strh	r3, [r7, #16]
/*******************************************************************************
* USER INITIALIZATIONS
*******************************************************************************/

	// Enable Systick interrupt
	LL_SYSTICK_EnableIT();
 8001a2a:	f7ff ff91 	bl	8001950 <LL_SYSTICK_EnableIT>

	// Start LPTIM2 interrupt
	LL_LPTIM_Enable(LPTIM2);
 8001a2e:	4823      	ldr	r0, [pc, #140]	; (8001abc <main+0xe4>)
 8001a30:	f7ff fd9c 	bl	800156c <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8001a34:	4821      	ldr	r0, [pc, #132]	; (8001abc <main+0xe4>)
 8001a36:	f7ff fdcf 	bl	80015d8 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001a3a:	213f      	movs	r1, #63	; 0x3f
 8001a3c:	481f      	ldr	r0, [pc, #124]	; (8001abc <main+0xe4>)
 8001a3e:	f7ff fdb8 	bl	80015b2 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8001a42:	2104      	movs	r1, #4
 8001a44:	481d      	ldr	r0, [pc, #116]	; (8001abc <main+0xe4>)
 8001a46:	f7ff fda1 	bl	800158c <LL_LPTIM_StartCounter>

	// Enable peripherals
	LL_SPI_Enable(SPI1);
 8001a4a:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <main+0xe8>)
 8001a4c:	f7ff ffb4 	bl	80019b8 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8001a50:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <main+0xec>)
 8001a52:	f7ff ffb1 	bl	80019b8 <LL_SPI_Enable>
	LL_ADC_Enable(ADC1);
 8001a56:	481c      	ldr	r0, [pc, #112]	; (8001ac8 <main+0xf0>)
 8001a58:	f7ff fd74 	bl	8001544 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001a5c:	481b      	ldr	r0, [pc, #108]	; (8001acc <main+0xf4>)
 8001a5e:	f7ff fd71 	bl	8001544 <LL_ADC_Enable>

	// Initialize devices
	CAN_configure();
 8001a62:	f002 f8bb 	bl	8003bdc <CAN_configure>
	EPOS4_SetCSTMode(CAN_ID);
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0xf8>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fde5 	bl	800363a <EPOS4_SetCSTMode>
	AS5145B_Init(&MagEnc);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fce0 	bl	8003438 <AS5145B_Init>
	systick_app_timer_module_init();
 8001a78:	f001 fbb4 	bl	80031e4 <systick_app_timer_module_init>
	mpu9255_init(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f004 f955 	bl	8005d2c <mpu9255_init>
	readTimer_event_handler();
 8001a82:	f004 f8c5 	bl	8005c10 <readTimer_event_handler>

	// Remove spikes from beginning
	for ( uint16_t i = 0; i < 1000; i++ );
 8001a86:	2300      	movs	r3, #0
 8001a88:	82fb      	strh	r3, [r7, #22]
 8001a8a:	e002      	b.n	8001a92 <main+0xba>
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	82fb      	strh	r3, [r7, #22]
 8001a92:	8afb      	ldrh	r3, [r7, #22]
 8001a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a98:	d3f8      	bcc.n	8001a8c <main+0xb4>

/*******************************************************************************
* USER TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ReadOnly);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 f924 	bl	8001ce8 <RequireTestProgram>
* USER MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if (isProsthesisControlRequired)
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <main+0xfc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0fb      	beq.n	8001aa0 <main+0xc8>
	  {
		  RunProsthesisControl();
 8001aa8:	f000 f8f2 	bl	8001c90 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <main+0xfc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	  if (isProsthesisControlRequired)
 8001ab2:	e7f5      	b.n	8001aa0 <main+0xc8>
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	40009400 	.word	0x40009400
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40003800 	.word	0x40003800
 8001ac8:	50040000 	.word	0x50040000
 8001acc:	50040100 	.word	0x50040100
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	200000cc 	.word	0x200000cc

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001adc:	2004      	movs	r0, #4
 8001ade:	f7ff ff15 	bl	800190c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ff26 	bl	8001934 <LL_FLASH_GetLatency>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d1fa      	bne.n	8001ae4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001aee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af2:	f7ff ff3d 	bl	8001970 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001af6:	f7ff fdbb 	bl	8001670 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001afa:	bf00      	nop
 8001afc:	f7ff fdc8 	bl	8001690 <LL_RCC_MSI_IsReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d1fa      	bne.n	8001afc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001b06:	f7ff fde5 	bl	80016d4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_11);
 8001b0a:	20b0      	movs	r0, #176	; 0xb0
 8001b0c:	f7ff fdf2 	bl	80016f4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fe03 	bl	800171c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8001b16:	f7ff ff3f 	bl	8001998 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff fd7e 	bl	800161c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001b20:	f7ff fd6a 	bl	80015f8 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001b24:	bf00      	nop
 8001b26:	f7ff fd8f 	bl	8001648 <LL_RCC_LSE_IsReady>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d1fa      	bne.n	8001b26 <SystemClock_Config+0x4e>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001b30:	f7ff fdc0 	bl	80016b4 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_6, 40, LL_RCC_PLLR_DIV_4);
 8001b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b38:	2228      	movs	r2, #40	; 0x28
 8001b3a:	2150      	movs	r1, #80	; 0x50
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff fe85 	bl	800184c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b42:	f7ff fea3 	bl	800188c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b46:	f7ff fe5d 	bl	8001804 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff fe6a 	bl	8001824 <LL_RCC_PLL_IsReady>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d1fa      	bne.n	8001b4c <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f7ff fdf6 	bl	8001748 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff fe07 	bl	8001770 <LL_RCC_GetSysClkSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d1fa      	bne.n	8001b5e <SystemClock_Config+0x86>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fe0f 	bl	800178c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001b6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b72:	f7ff fe1f 	bl	80017b4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b7a:	f7ff fe2f 	bl	80017dc <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(80000000);
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <SystemClock_Config+0xb8>)
 8001b80:	f005 fb5e 	bl	8007240 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <SystemClock_Config+0xb8>)
 8001b86:	f005 fb91 	bl	80072ac <LL_SetSystemCoreClock>
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	04c4b400 	.word	0x04c4b400

08001b94 <LL_GPIO_SetOutputPin>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	619a      	str	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_GPIO_ResetOutputPin>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	b29b      	uxth	r3, r3
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	330c      	adds	r3, #12
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <RunProsthesisControl>:
	CM_SwingCtrl.kd = 0.05f;				// 0.05 used to get zero overshoot and 0.5 sec settling time, Vanderbilt = 0 N*m/(deg/s)
	CM_SwingCtrl.kp = 0.45f;				// 0.45 on the bench "feels" right, Vanderbilt = 0.65 N*m/deg
}

void RunProsthesisControl(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	GetInputs();
 8001c94:	f000 f842 	bl	8001d1c <GetInputs>
	ProcessInputs();
 8001c98:	f000 f8a0 	bl	8001ddc <ProcessInputs>

	// If test program is required, run test program
	// Otherwise continue prosthesis control
	if(isTestProgramRequired)
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <RunProsthesisControl+0x4c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <RunProsthesisControl+0x1a>
	{
		RunTestProgram();
 8001ca4:	f000 fe6e 	bl	8002984 <RunTestProgram>
 8001ca8:	e003      	b.n	8001cb2 <RunProsthesisControl+0x22>
	}
	else
	{
		RunStateMachine();
 8001caa:	f000 fdd9 	bl	8002860 <RunStateMachine>
		RunImpedanceControl();
 8001cae:	f000 fe0f 	bl	80028d0 <RunImpedanceControl>
	}

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <RunProsthesisControl+0x50>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <RunProsthesisControl+0x38>
	{
		isFirst = 0;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <RunProsthesisControl+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <RunProsthesisControl+0x54>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
	{
		isSecond = 0;
	}
}
 8001cc6:	e006      	b.n	8001cd6 <RunProsthesisControl+0x46>
	else if(isSecond)
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <RunProsthesisControl+0x54>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <RunProsthesisControl+0x46>
		isSecond = 0;
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <RunProsthesisControl+0x54>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000121 	.word	0x20000121
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	20000120 	.word	0x20000120

08001ce8 <RequireTestProgram>:

void RequireTestProgram(enum TestPrograms_e option)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <RequireTestProgram+0x2c>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	7013      	strb	r3, [r2, #0]

	if(testProgram != None)
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <RequireTestProgram+0x2c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <RequireTestProgram+0x30>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200000cd 	.word	0x200000cd
 8001d18:	20000121 	.word	0x20000121

08001d1c <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
	CM_jointAngle_deg[0] = AS5145B_ReadPosition_Deg() - encBias_deg;
 8001d22:	f001 fc4b 	bl	80035bc <AS5145B_ReadPosition_Deg>
 8001d26:	eeb0 7a40 	vmov.f32	s14, s0
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <GetInputs+0x70>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <GetInputs+0x74>)
 8001d36:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->bot[0] = ReadLoadCell(ADC2);
 8001d3a:	4816      	ldr	r0, [pc, #88]	; (8001d94 <GetInputs+0x78>)
 8001d3c:	f000 f832 	bl	8001da4 <ReadLoadCell>
 8001d40:	4603      	mov	r3, r0
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <GetInputs+0x7c>)
 8001d4c:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell->top[0] = ReadLoadCell(ADC1);
 8001d50:	4812      	ldr	r0, [pc, #72]	; (8001d9c <GetInputs+0x80>)
 8001d52:	f000 f827 	bl	8001da4 <ReadLoadCell>
 8001d56:	4603      	mov	r3, r0
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <GetInputs+0x7c>)
 8001d62:	edc3 7a03 	vstr	s15, [r3, #12]
	IMU_Data = IMU_read();
 8001d66:	4c0e      	ldr	r4, [pc, #56]	; (8001da0 <GetInputs+0x84>)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fe94 	bl	8002a98 <IMU_read>
 8001d70:	4625      	mov	r5, r4
 8001d72:	463c      	mov	r4, r7
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001d84:	bf00      	nop
 8001d86:	3730      	adds	r7, #48	; 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000130 	.word	0x20000130
 8001d94:	50040100 	.word	0x50040100
 8001d98:	20000198 	.word	0x20000198
 8001d9c:	50040000 	.word	0x50040000
 8001da0:	200000e0 	.word	0x200000e0

08001da4 <ReadLoadCell>:

// Should be moved to ADC driver??
static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff0d 	bl	8001bcc <LL_ADC_REG_StartConversion>
	while ( !LL_ADC_IsActiveFlag_EOC(ADCx) );
 8001db2:	bf00      	nop
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff2a 	bl	8001c0e <LL_ADC_IsActiveFlag_EOC>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f9      	beq.n	8001db4 <ReadLoadCell+0x10>
	LL_ADC_ClearFlag_EOC(ADCx);								// remove this??
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff37 	bl	8001c34 <LL_ADC_ClearFlag_EOC>
	uint16_t val = LL_ADC_REG_ReadConversionData12(ADCx);	// Change resolution??
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff14 	bl	8001bf4 <LL_ADC_REG_ReadConversionData12>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	81fb      	strh	r3, [r7, #14]
	return val;
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <ProcessInputs>:

static void ProcessInputs(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	float tau = 1 / (2 * 3.1416f * 10);		// Time constant for practical differentiator (fc = 10 Hz)
 8001de2:	4b90      	ldr	r3, [pc, #576]	; (8002024 <ProcessInputs+0x248>)
 8001de4:	607b      	str	r3, [r7, #4]

	// Derivative of angle and filtering of load cells
	// No derivative of angle (angular speed) on first execution
	// No filtering of load cells on first or second execution
	if(isFirst)
 8001de6:	4b90      	ldr	r3, [pc, #576]	; (8002028 <ProcessInputs+0x24c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <ProcessInputs+0x54>
	{
		CM_jointSpeed_dps = 0.0f;
 8001dee:	4b8f      	ldr	r3, [pc, #572]	; (800202c <ProcessInputs+0x250>)
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001df6:	4b8e      	ldr	r3, [pc, #568]	; (8002030 <ProcessInputs+0x254>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a8d      	ldr	r2, [pc, #564]	; (8002030 <ProcessInputs+0x254>)
 8001dfc:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[0];
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <ProcessInputs+0x258>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8c      	ldr	r2, [pc, #560]	; (8002034 <ProcessInputs+0x258>)
 8001e04:	6093      	str	r3, [r2, #8]
		CM_LoadCell->top[2] = CM_LoadCell->top[0];
 8001e06:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <ProcessInputs+0x258>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a8a      	ldr	r2, [pc, #552]	; (8002034 <ProcessInputs+0x258>)
 8001e0c:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <ProcessInputs+0x258>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a89      	ldr	r2, [pc, #548]	; (8002038 <ProcessInputs+0x25c>)
 8001e14:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001e16:	4b87      	ldr	r3, [pc, #540]	; (8002034 <ProcessInputs+0x258>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	4a87      	ldr	r2, [pc, #540]	; (8002038 <ProcessInputs+0x25c>)
 8001e1c:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[0];
 8001e1e:	4b86      	ldr	r3, [pc, #536]	; (8002038 <ProcessInputs+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a85      	ldr	r2, [pc, #532]	; (8002038 <ProcessInputs+0x25c>)
 8001e24:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[0];
 8001e26:	4b84      	ldr	r3, [pc, #528]	; (8002038 <ProcessInputs+0x25c>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a83      	ldr	r2, [pc, #524]	; (8002038 <ProcessInputs+0x25c>)
 8001e2c:	6153      	str	r3, [r2, #20]
 8001e2e:	e0f0      	b.n	8002012 <ProcessInputs+0x236>
	}
	else if(isSecond)
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <ProcessInputs+0x260>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d044      	beq.n	8001ec2 <ProcessInputs+0xe6>
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001e38:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <ProcessInputs+0x254>)
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <ProcessInputs+0x254>)
 8001e40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e50:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <ProcessInputs+0x264>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <ProcessInputs+0x250>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e68:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e74:	4b72      	ldr	r3, [pc, #456]	; (8002040 <ProcessInputs+0x264>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <ProcessInputs+0x250>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <ProcessInputs+0x254>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a68      	ldr	r2, [pc, #416]	; (8002030 <ProcessInputs+0x254>)
 8001e8e:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <ProcessInputs+0x258>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a67      	ldr	r2, [pc, #412]	; (8002034 <ProcessInputs+0x258>)
 8001e96:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8001e98:	4b66      	ldr	r3, [pc, #408]	; (8002034 <ProcessInputs+0x258>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a65      	ldr	r2, [pc, #404]	; (8002034 <ProcessInputs+0x258>)
 8001e9e:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[0] = CM_LoadCell->bot[0];
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <ProcessInputs+0x258>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a64      	ldr	r2, [pc, #400]	; (8002038 <ProcessInputs+0x25c>)
 8001ea6:	6013      	str	r3, [r2, #0]
		CM_LoadCell_Filtered->top[0] = CM_LoadCell->top[0];
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <ProcessInputs+0x258>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a62      	ldr	r2, [pc, #392]	; (8002038 <ProcessInputs+0x25c>)
 8001eae:	60d3      	str	r3, [r2, #12]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <ProcessInputs+0x25c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a60      	ldr	r2, [pc, #384]	; (8002038 <ProcessInputs+0x25c>)
 8001eb6:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 8001eb8:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <ProcessInputs+0x25c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <ProcessInputs+0x25c>)
 8001ebe:	6113      	str	r3, [r2, #16]
 8001ec0:	e0a7      	b.n	8002012 <ProcessInputs+0x236>
	}
	else
	{
		// Practical differentiator (bilinear transformation used)
		CM_jointSpeed_dps = ( 2*( CM_jointAngle_deg[0] - CM_jointAngle_deg[1] ) + ( 2*tau - dt )*CM_jointSpeed_dps ) / ( dt + 2*tau );
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <ProcessInputs+0x254>)
 8001ec4:	ed93 7a00 	vldr	s14, [r3]
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <ProcessInputs+0x254>)
 8001eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eda:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ede:	4b58      	ldr	r3, [pc, #352]	; (8002040 <ProcessInputs+0x264>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <ProcessInputs+0x250>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef2:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001efe:	4b50      	ldr	r3, [pc, #320]	; (8002040 <ProcessInputs+0x264>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <ProcessInputs+0x250>)
 8001f0e:	edc3 7a00 	vstr	s15, [r3]

		// 2nd order low-pass Butterworth (fc = 20 Hz)
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001f12:	4b49      	ldr	r3, [pc, #292]	; (8002038 <ProcessInputs+0x25c>)
 8001f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f18:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002044 <ProcessInputs+0x268>
 8001f1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f20:	4b45      	ldr	r3, [pc, #276]	; (8002038 <ProcessInputs+0x25c>)
 8001f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002048 <ProcessInputs+0x26c>
 8001f2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
									  + 0.0128f * CM_LoadCell->bot[0] + 0.0256f * CM_LoadCell->bot[1] + 0.0128f * CM_LoadCell->bot[2];
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <ProcessInputs+0x258>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eddf 6a44 	vldr	s13, [pc, #272]	; 800204c <ProcessInputs+0x270>
 8001f3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <ProcessInputs+0x258>)
 8001f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f4a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002050 <ProcessInputs+0x274>
 8001f4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <ProcessInputs+0x258>)
 8001f58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800204c <ProcessInputs+0x270>
 8001f60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->bot[0] =   1.6556f * CM_LoadCell_Filtered->bot[1] - 0.7068f * CM_LoadCell_Filtered->bot[2]
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <ProcessInputs+0x25c>)
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <ProcessInputs+0x25c>)
 8001f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002044 <ProcessInputs+0x268>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <ProcessInputs+0x25c>)
 8001f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f82:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002048 <ProcessInputs+0x26c>
 8001f86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
									  + 0.0128f * CM_LoadCell->top[0] + 0.0256f * CM_LoadCell->top[1] + 0.0128f * CM_LoadCell->top[2];
 8001f8e:	4b29      	ldr	r3, [pc, #164]	; (8002034 <ProcessInputs+0x258>)
 8001f90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f94:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800204c <ProcessInputs+0x270>
 8001f98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <ProcessInputs+0x258>)
 8001fa2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fa6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002050 <ProcessInputs+0x274>
 8001faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <ProcessInputs+0x258>)
 8001fb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fb8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800204c <ProcessInputs+0x270>
 8001fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
		CM_LoadCell_Filtered->top[0] =   1.6556f * CM_LoadCell_Filtered->top[1] - 0.7068f * CM_LoadCell_Filtered->top[2]
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <ProcessInputs+0x25c>)
 8001fc6:	edc3 7a03 	vstr	s15, [r3, #12]

		CM_jointAngle_deg[1] = CM_jointAngle_deg[0];
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <ProcessInputs+0x254>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <ProcessInputs+0x254>)
 8001fd0:	6053      	str	r3, [r2, #4]
		CM_LoadCell->bot[2] = CM_LoadCell->bot[1];
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <ProcessInputs+0x258>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <ProcessInputs+0x258>)
 8001fd8:	6093      	str	r3, [r2, #8]
		CM_LoadCell->bot[1] = CM_LoadCell->bot[0];
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <ProcessInputs+0x258>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <ProcessInputs+0x258>)
 8001fe0:	6053      	str	r3, [r2, #4]
		CM_LoadCell->top[2] = CM_LoadCell->top[1];
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <ProcessInputs+0x258>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <ProcessInputs+0x258>)
 8001fe8:	6153      	str	r3, [r2, #20]
		CM_LoadCell->top[1] = CM_LoadCell->top[0];
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <ProcessInputs+0x258>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <ProcessInputs+0x258>)
 8001ff0:	6113      	str	r3, [r2, #16]
		CM_LoadCell_Filtered->bot[2] = CM_LoadCell_Filtered->bot[1];
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <ProcessInputs+0x25c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <ProcessInputs+0x25c>)
 8001ff8:	6093      	str	r3, [r2, #8]
		CM_LoadCell_Filtered->bot[1] = CM_LoadCell_Filtered->bot[0];
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <ProcessInputs+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <ProcessInputs+0x25c>)
 8002000:	6053      	str	r3, [r2, #4]
		CM_LoadCell_Filtered->top[2] = CM_LoadCell_Filtered->top[1];
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <ProcessInputs+0x25c>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <ProcessInputs+0x25c>)
 8002008:	6153      	str	r3, [r2, #20]
		CM_LoadCell_Filtered->top[1] = CM_LoadCell_Filtered->top[0];
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <ProcessInputs+0x25c>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <ProcessInputs+0x25c>)
 8002010:	6113      	str	r3, [r2, #16]
	}

	CalibrateIMU();
 8002012:	f000 f81f 	bl	8002054 <CalibrateIMU>
	ComputeLimbAngle();
 8002016:	f000 fb47 	bl	80026a8 <ComputeLimbAngle>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	3c826122 	.word	0x3c826122
 8002028:	2000000c 	.word	0x2000000c
 800202c:	20000138 	.word	0x20000138
 8002030:	20000130 	.word	0x20000130
 8002034:	20000198 	.word	0x20000198
 8002038:	200001e0 	.word	0x200001e0
 800203c:	20000120 	.word	0x20000120
 8002040:	20000004 	.word	0x20000004
 8002044:	3fd3eab3 	.word	0x3fd3eab3
 8002048:	3f34f0d8 	.word	0x3f34f0d8
 800204c:	3c51b717 	.word	0x3c51b717
 8002050:	3cd1b717 	.word	0x3cd1b717

08002054 <CalibrateIMU>:

static void CalibrateIMU(void)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b0a0      	sub	sp, #128	; 0x80
 800205a:	af00      	add	r7, sp, #0
	double axBias_g = 0.0;
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double ayBias_g = 0.0;
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double azBias_g = 0.0;
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double gxBias_dps = 0.0;
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double gyBias_dps = 0.0;
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double gzBias_dps = 0.0;
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double n = 1.0;				// Scaling factor (helps with normalization)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4bbf      	ldr	r3, [pc, #764]	; (80023a8 <CalibrateIMU+0x354>)
 80020aa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Sine and cosine of Euler angles (1 = z angle, 2 = x' angle, 3 = z'' angle)
	double c1 = cos(0);
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4bbd      	ldr	r3, [pc, #756]	; (80023a8 <CalibrateIMU+0x354>)
 80020b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double c2 = cos(0);
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	4bba      	ldr	r3, [pc, #744]	; (80023a8 <CalibrateIMU+0x354>)
 80020be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double c3 = cos(0);
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	4bb8      	ldr	r3, [pc, #736]	; (80023a8 <CalibrateIMU+0x354>)
 80020c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double s1 = sin(0);
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double s2 = sin(0);
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s3 = sin(0);
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Rotate IMU data and remove biases
	CM_IMU_Data.ax_g = n * ( IMU_Data.ax_g*(c1*c3 - c2*s1*s3) + IMU_Data.ay_g*(  -c3*s1 - c1*c2*s3) + IMU_Data.az_g*( s2*s3) ) - axBias_g;
 80020f0:	4bae      	ldr	r3, [pc, #696]	; (80023ac <CalibrateIMU+0x358>)
 80020f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020fe:	f7fe fa1f 	bl	8000540 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4692      	mov	sl, r2
 8002108:	469b      	mov	fp, r3
 800210a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800210e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002112:	f7fe fa15 	bl	8000540 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002122:	f7fe fa0d 	bl	8000540 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4650      	mov	r0, sl
 800212c:	4659      	mov	r1, fp
 800212e:	f7fe f84f 	bl	80001d0 <__aeabi_dsub>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4640      	mov	r0, r8
 8002138:	4649      	mov	r1, r9
 800213a:	f7fe fa01 	bl	8000540 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4692      	mov	sl, r2
 8002144:	469b      	mov	fp, r3
 8002146:	4b99      	ldr	r3, [pc, #612]	; (80023ac <CalibrateIMU+0x358>)
 8002148:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800214c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fe f9f0 	bl	8000540 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4614      	mov	r4, r2
 8002166:	461d      	mov	r5, r3
 8002168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800216c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002170:	f7fe f9e6 	bl	8000540 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	f7fe f9de 	bl	8000540 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe f820 	bl	80001d0 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4640      	mov	r0, r8
 8002196:	4649      	mov	r1, r9
 8002198:	f7fe f9d2 	bl	8000540 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4650      	mov	r0, sl
 80021a2:	4659      	mov	r1, fp
 80021a4:	f7fe f816 	bl	80001d4 <__adddf3>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <CalibrateIMU+0x358>)
 80021b2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80021b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021be:	f7fe f9bf 	bl	8000540 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f9b9 	bl	8000540 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4640      	mov	r0, r8
 80021d4:	4649      	mov	r1, r9
 80021d6:	f7fd fffd 	bl	80001d4 <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021e6:	f7fe f9ab 	bl	8000540 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80021f6:	f7fd ffeb 	bl	80001d0 <__aeabi_dsub>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	496c      	ldr	r1, [pc, #432]	; (80023b0 <CalibrateIMU+0x35c>)
 8002200:	e9c1 2300 	strd	r2, r3, [r1]
	CM_IMU_Data.ay_g = n * ( IMU_Data.ax_g*(c1*s3 + c2*c3*s1) + IMU_Data.ay_g*(c1*c2*c3 - s1*s3   ) + IMU_Data.az_g*(-c3*s2) ) - ayBias_g;
 8002204:	4b69      	ldr	r3, [pc, #420]	; (80023ac <CalibrateIMU+0x358>)
 8002206:	e9d3 4500 	ldrd	r4, r5, [r3]
 800220a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002212:	f7fe f995 	bl	8000540 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4690      	mov	r8, r2
 800221c:	4699      	mov	r9, r3
 800221e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002222:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002226:	f7fe f98b 	bl	8000540 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002236:	f7fe f983 	bl	8000540 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fd ffc7 	bl	80001d4 <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f7fe f977 	bl	8000540 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4692      	mov	sl, r2
 8002258:	469b      	mov	fp, r3
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <CalibrateIMU+0x358>)
 800225c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002264:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002268:	f7fe f96a 	bl	8000540 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002278:	f7fe f962 	bl	8000540 <__aeabi_dmul>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4690      	mov	r8, r2
 8002282:	4699      	mov	r9, r3
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800228c:	f7fe f958 	bl	8000540 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4640      	mov	r0, r8
 8002296:	4649      	mov	r1, r9
 8002298:	f7fd ff9a 	bl	80001d0 <__aeabi_dsub>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fe f94c 	bl	8000540 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4650      	mov	r0, sl
 80022ae:	4659      	mov	r1, fp
 80022b0:	f7fd ff90 	bl	80001d4 <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4690      	mov	r8, r2
 80022ba:	4699      	mov	r9, r3
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <CalibrateIMU+0x358>)
 80022be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d6:	f7fe f933 	bl	8000540 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f7fe f92d 	bl	8000540 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4640      	mov	r0, r8
 80022ec:	4649      	mov	r1, r9
 80022ee:	f7fd ff71 	bl	80001d4 <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022fe:	f7fe f91f 	bl	8000540 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800230e:	f7fd ff5f 	bl	80001d0 <__aeabi_dsub>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4926      	ldr	r1, [pc, #152]	; (80023b0 <CalibrateIMU+0x35c>)
 8002318:	e9c1 2302 	strd	r2, r3, [r1, #8]
	CM_IMU_Data.az_g = n * ( IMU_Data.ax_g*(        s1*s2   ) + IMU_Data.ay_g*(           c1*s2   ) + IMU_Data.az_g*( c2   ) ) - azBias_g;
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <CalibrateIMU+0x358>)
 800231e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800232a:	f7fe f909 	bl	8000540 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fe f903 	bl	8000540 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4690      	mov	r8, r2
 8002340:	4699      	mov	r9, r3
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <CalibrateIMU+0x358>)
 8002344:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002348:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002350:	f7fe f8f6 	bl	8000540 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fe f8f0 	bl	8000540 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4640      	mov	r0, r8
 8002366:	4649      	mov	r1, r9
 8002368:	f7fd ff34 	bl	80001d4 <__adddf3>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4614      	mov	r4, r2
 8002372:	461d      	mov	r5, r3
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <CalibrateIMU+0x358>)
 8002376:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800237a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800237e:	f7fe f8df 	bl	8000540 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fd ff23 	bl	80001d4 <__adddf3>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800239a:	f7fe f8d1 	bl	8000540 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	e005      	b.n	80023b4 <CalibrateIMU+0x360>
 80023a8:	3ff00000 	.word	0x3ff00000
 80023ac:	200000e0 	.word	0x200000e0
 80023b0:	20000168 	.word	0x20000168
 80023b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023b8:	f7fd ff0a 	bl	80001d0 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	49b6      	ldr	r1, [pc, #728]	; (800269c <CalibrateIMU+0x648>)
 80023c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CM_IMU_Data.gx_dps = n * ( IMU_Data.gx_dps*(c1*c3 - c2*s1*s3) + IMU_Data.gy_dps*(  -c3*s1 - c1*c2*s3) + IMU_Data.gz_dps*( s2*s3) ) - gxBias_dps;
 80023c6:	4bb6      	ldr	r3, [pc, #728]	; (80026a0 <CalibrateIMU+0x64c>)
 80023c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80023d4:	f7fe f8b4 	bl	8000540 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4690      	mov	r8, r2
 80023de:	4699      	mov	r9, r3
 80023e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023e8:	f7fe f8aa 	bl	8000540 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f8:	f7fe f8a2 	bl	8000540 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4640      	mov	r0, r8
 8002402:	4649      	mov	r1, r9
 8002404:	f7fd fee4 	bl	80001d0 <__aeabi_dsub>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fe f896 	bl	8000540 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4690      	mov	r8, r2
 800241a:	4699      	mov	r9, r3
 800241c:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <CalibrateIMU+0x64c>)
 800241e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002436:	f7fe f883 	bl	8000540 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4692      	mov	sl, r2
 8002440:	469b      	mov	fp, r3
 8002442:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002446:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800244a:	f7fe f879 	bl	8000540 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245a:	f7fe f871 	bl	8000540 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4650      	mov	r0, sl
 8002464:	4659      	mov	r1, fp
 8002466:	f7fd feb3 	bl	80001d0 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fe f865 	bl	8000540 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4640      	mov	r0, r8
 800247c:	4649      	mov	r1, r9
 800247e:	f7fd fea9 	bl	80001d4 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <CalibrateIMU+0x64c>)
 800248c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002494:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002498:	f7fe f852 	bl	8000540 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fe f84c 	bl	8000540 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4640      	mov	r0, r8
 80024ae:	4649      	mov	r1, r9
 80024b0:	f7fd fe90 	bl	80001d4 <__adddf3>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c0:	f7fe f83e 	bl	8000540 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80024d0:	f7fd fe7e 	bl	80001d0 <__aeabi_dsub>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4970      	ldr	r1, [pc, #448]	; (800269c <CalibrateIMU+0x648>)
 80024da:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CM_IMU_Data.gy_dps = n * ( IMU_Data.gx_dps*(c1*s3 + c2*c3*s1) + IMU_Data.gy_dps*(c1*c2*c3 - s1*s3   ) + IMU_Data.gz_dps*(-c3*s2) ) - gyBias_dps;
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <CalibrateIMU+0x64c>)
 80024e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80024e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024ec:	f7fe f828 	bl	8000540 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4690      	mov	r8, r2
 80024f6:	4699      	mov	r9, r3
 80024f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002500:	f7fe f81e 	bl	8000540 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002510:	f7fe f816 	bl	8000540 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4640      	mov	r0, r8
 800251a:	4649      	mov	r1, r9
 800251c:	f7fd fe5a 	bl	80001d4 <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4620      	mov	r0, r4
 8002526:	4629      	mov	r1, r5
 8002528:	f7fe f80a 	bl	8000540 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4690      	mov	r8, r2
 8002532:	4699      	mov	r9, r3
 8002534:	4b5a      	ldr	r3, [pc, #360]	; (80026a0 <CalibrateIMU+0x64c>)
 8002536:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800253a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800253e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002542:	f7fd fffd 	bl	8000540 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002552:	f7fd fff5 	bl	8000540 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4692      	mov	sl, r2
 800255c:	469b      	mov	fp, r3
 800255e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002562:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002566:	f7fd ffeb 	bl	8000540 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4650      	mov	r0, sl
 8002570:	4659      	mov	r1, fp
 8002572:	f7fd fe2d 	bl	80001d0 <__aeabi_dsub>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4620      	mov	r0, r4
 800257c:	4629      	mov	r1, r5
 800257e:	f7fd ffdf 	bl	8000540 <__aeabi_dmul>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4640      	mov	r0, r8
 8002588:	4649      	mov	r1, r9
 800258a:	f7fd fe23 	bl	80001d4 <__adddf3>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4690      	mov	r8, r2
 8002594:	4699      	mov	r9, r3
 8002596:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <CalibrateIMU+0x64c>)
 8002598:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b0:	f7fd ffc6 	bl	8000540 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd ffc0 	bl	8000540 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4640      	mov	r0, r8
 80025c6:	4649      	mov	r1, r9
 80025c8:	f7fd fe04 	bl	80001d4 <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025d8:	f7fd ffb2 	bl	8000540 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025e8:	f7fd fdf2 	bl	80001d0 <__aeabi_dsub>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	492a      	ldr	r1, [pc, #168]	; (800269c <CalibrateIMU+0x648>)
 80025f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	CM_IMU_Data.gz_dps = n * ( IMU_Data.gx_dps*(        s1*s2   ) + IMU_Data.gy_dps*(           c1*s2   ) + IMU_Data.gz_dps*( c2   ) ) - gzBias_dps;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <CalibrateIMU+0x64c>)
 80025f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80025fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002600:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002604:	f7fd ff9c 	bl	8000540 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd ff96 	bl	8000540 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4690      	mov	r8, r2
 800261a:	4699      	mov	r9, r3
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <CalibrateIMU+0x64c>)
 800261e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002626:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800262a:	f7fd ff89 	bl	8000540 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd ff83 	bl	8000540 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4640      	mov	r0, r8
 8002640:	4649      	mov	r1, r9
 8002642:	f7fd fdc7 	bl	80001d4 <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <CalibrateIMU+0x64c>)
 8002650:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002658:	f7fd ff72 	bl	8000540 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fd fdb6 	bl	80001d4 <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002674:	f7fd ff64 	bl	8000540 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002684:	f7fd fda4 	bl	80001d0 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4903      	ldr	r1, [pc, #12]	; (800269c <CalibrateIMU+0x648>)
 800268e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002692:	bf00      	nop
 8002694:	3780      	adds	r7, #128	; 0x80
 8002696:	46bd      	mov	sp, r7
 8002698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269c:	20000168 	.word	0x20000168
 80026a0:	200000e0 	.word	0x200000e0
 80026a4:	00000000 	.word	0x00000000

080026a8 <ComputeLimbAngle>:

static void ComputeLimbAngle(void)
{
 80026a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
	double accelAngle_deg = ( atan( CM_IMU_Data.ax_g / sqrt( pow( CM_IMU_Data.ay_g, 2 ) + pow(CM_IMU_Data.az_g, 2 ) ) ) ) * 180/3.1416;
 80026b0:	4b63      	ldr	r3, [pc, #396]	; (8002840 <ComputeLimbAngle+0x198>)
 80026b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026b6:	4b62      	ldr	r3, [pc, #392]	; (8002840 <ComputeLimbAngle+0x198>)
 80026b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80026bc:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002828 <ComputeLimbAngle+0x180>
 80026c0:	eeb0 0a47 	vmov.f32	s0, s14
 80026c4:	eef0 0a67 	vmov.f32	s1, s15
 80026c8:	f004 fff4 	bl	80076b4 <pow>
 80026cc:	ec59 8b10 	vmov	r8, r9, d0
 80026d0:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <ComputeLimbAngle+0x198>)
 80026d2:	ed93 7b04 	vldr	d7, [r3, #16]
 80026d6:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8002828 <ComputeLimbAngle+0x180>
 80026da:	eeb0 0a47 	vmov.f32	s0, s14
 80026de:	eef0 0a67 	vmov.f32	s1, s15
 80026e2:	f004 ffe7 	bl	80076b4 <pow>
 80026e6:	ec53 2b10 	vmov	r2, r3, d0
 80026ea:	4640      	mov	r0, r8
 80026ec:	4649      	mov	r1, r9
 80026ee:	f7fd fd71 	bl	80001d4 <__adddf3>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	ec43 2b17 	vmov	d7, r2, r3
 80026fa:	eeb0 0a47 	vmov.f32	s0, s14
 80026fe:	eef0 0a67 	vmov.f32	s1, s15
 8002702:	f005 f847 	bl	8007794 <sqrt>
 8002706:	ec53 2b10 	vmov	r2, r3, d0
 800270a:	4620      	mov	r0, r4
 800270c:	4629      	mov	r1, r5
 800270e:	f7fe f841 	bl	8000794 <__aeabi_ddiv>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	ec43 2b17 	vmov	d7, r2, r3
 800271a:	eeb0 0a47 	vmov.f32	s0, s14
 800271e:	eef0 0a67 	vmov.f32	s1, s15
 8002722:	f004 fe1d 	bl	8007360 <atan>
 8002726:	ec51 0b10 	vmov	r0, r1, d0
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b45      	ldr	r3, [pc, #276]	; (8002844 <ComputeLimbAngle+0x19c>)
 8002730:	f7fd ff06 	bl	8000540 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	a33c      	add	r3, pc, #240	; (adr r3, 8002830 <ComputeLimbAngle+0x188>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fe f827 	bl	8000794 <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Change in angle from gyro (trapezoidal used)
	dGyroAngle_deg = dt/2 * (CM_IMU_Data.gz_dps + dGyroAngle_deg);
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <ComputeLimbAngle+0x1a0>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002758:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800275c:	ee16 0a90 	vmov	r0, s13
 8002760:	f7fd fe96 	bl	8000490 <__aeabi_f2d>
 8002764:	4604      	mov	r4, r0
 8002766:	460d      	mov	r5, r1
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <ComputeLimbAngle+0x198>)
 800276a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <ComputeLimbAngle+0x1a4>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd fd2e 	bl	80001d4 <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd fede 	bl	8000540 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4930      	ldr	r1, [pc, #192]	; (800284c <ComputeLimbAngle+0x1a4>)
 800278a:	e9c1 2300 	strd	r2, r3, [r1]

	// Complementary filter (optimal alpha value found from trial and error experiment of MSE)
	double alpha = 0.002;
 800278e:	a32a      	add	r3, pc, #168	; (adr r3, 8002838 <ComputeLimbAngle+0x190>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	e9c7 2300 	strd	r2, r3, [r7]
	compFiltAngle_deg = accelAngle_deg*alpha + (1 - alpha) * (dGyroAngle_deg + compFiltAngle_deg);
 8002798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800279c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a0:	f7fd fece 	bl	8000540 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	4926      	ldr	r1, [pc, #152]	; (8002850 <ComputeLimbAngle+0x1a8>)
 80027b6:	f7fd fd0b 	bl	80001d0 <__aeabi_dsub>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4690      	mov	r8, r2
 80027c0:	4699      	mov	r9, r3
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <ComputeLimbAngle+0x1a4>)
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <ComputeLimbAngle+0x1ac>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd01 	bl	80001d4 <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4640      	mov	r0, r8
 80027d8:	4649      	mov	r1, r9
 80027da:	f7fd feb1 	bl	8000540 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd fcf5 	bl	80001d4 <__adddf3>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4919      	ldr	r1, [pc, #100]	; (8002854 <ComputeLimbAngle+0x1ac>)
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]

	CM_limbAngle_deg = compFiltAngle_deg - CM_jointAngle_deg[0];
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <ComputeLimbAngle+0x1ac>)
 80027f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <ComputeLimbAngle+0x1b0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe46 	bl	8000490 <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fce0 	bl	80001d0 <__aeabi_dsub>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4911      	ldr	r1, [pc, #68]	; (800285c <ComputeLimbAngle+0x1b4>)
 8002816:	e9c1 2300 	strd	r2, r3, [r1]
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002824:	f3af 8000 	nop.w
 8002828:	00000000 	.word	0x00000000
 800282c:	40000000 	.word	0x40000000
 8002830:	2e48e8a7 	.word	0x2e48e8a7
 8002834:	400921ff 	.word	0x400921ff
 8002838:	d2f1a9fc 	.word	0xd2f1a9fc
 800283c:	3f60624d 	.word	0x3f60624d
 8002840:	20000168 	.word	0x20000168
 8002844:	40668000 	.word	0x40668000
 8002848:	20000004 	.word	0x20000004
 800284c:	20000118 	.word	0x20000118
 8002850:	3ff00000 	.word	0x3ff00000
 8002854:	20000110 	.word	0x20000110
 8002858:	20000130 	.word	0x20000130
 800285c:	20000128 	.word	0x20000128

08002860 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
	enum StateMachine_e state;

	if(isFirst)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <RunStateMachine+0x60>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <RunStateMachine+0x12>
	{
		state = Stance;
 800286e:	2300      	movs	r3, #0
 8002870:	71fb      	strb	r3, [r7, #7]
	}

	switch(state)
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <RunStateMachine+0x1e>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d00d      	beq.n	8002898 <RunStateMachine+0x38>
		ProsCtrl.eqPoint_deg = CM_SwingCtrl.eqPoint_deg;
		ProsCtrl.kd = CM_SwingCtrl.kd;
		ProsCtrl.kp = CM_SwingCtrl.kp;
		break;
	}
}
 800287c:	e019      	b.n	80028b2 <RunStateMachine+0x52>
		ProsCtrl.eqPoint_deg = CM_StanceCtrl.eqPoint_deg;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <RunStateMachine+0x64>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <RunStateMachine+0x68>)
 8002884:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_StanceCtrl.kd;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <RunStateMachine+0x64>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <RunStateMachine+0x68>)
 800288c:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_StanceCtrl.kp;
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <RunStateMachine+0x64>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <RunStateMachine+0x68>)
 8002894:	6093      	str	r3, [r2, #8]
		break;
 8002896:	e00c      	b.n	80028b2 <RunStateMachine+0x52>
		ProsCtrl.eqPoint_deg = CM_SwingCtrl.eqPoint_deg;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <RunStateMachine+0x6c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <RunStateMachine+0x68>)
 800289e:	6013      	str	r3, [r2, #0]
		ProsCtrl.kd = CM_SwingCtrl.kd;
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RunStateMachine+0x6c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <RunStateMachine+0x68>)
 80028a6:	6053      	str	r3, [r2, #4]
		ProsCtrl.kp = CM_SwingCtrl.kp;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <RunStateMachine+0x6c>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <RunStateMachine+0x68>)
 80028ae:	6093      	str	r3, [r2, #8]
		break;
 80028b0:	bf00      	nop
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000000c 	.word	0x2000000c
 80028c4:	2000014c 	.word	0x2000014c
 80028c8:	200000d0 	.word	0x200000d0
 80028cc:	20000158 	.word	0x20000158

080028d0 <RunImpedanceControl>:

static void RunImpedanceControl(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
	float gearRatio = 40.0f;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <RunImpedanceControl+0x94>)
 80028d8:	617b      	str	r3, [r7, #20]
	float nomCurrent_amp = 8.0f;	// is this number accurate??
 80028da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80028de:	613b      	str	r3, [r7, #16]
	float torqueConst = 0.095f;		// Units in N*m/A, is this number accurate??
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <RunImpedanceControl+0x98>)
 80028e2:	60fb      	str	r3, [r7, #12]

	float errorPos_deg = ProsCtrl.eqPoint_deg - CM_jointAngle_deg[0];
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <RunImpedanceControl+0x9c>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <RunImpedanceControl+0xa0>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f4:	edc7 7a02 	vstr	s15, [r7, #8]
	CM_jointTorque_nm = ProsCtrl.kp*errorPos_deg - ProsCtrl.kd*CM_jointSpeed_dps;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <RunImpedanceControl+0x9c>)
 80028fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80028fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <RunImpedanceControl+0x9c>)
 8002908:	edd3 6a01 	vldr	s13, [r3, #4]
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <RunImpedanceControl+0xa4>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <RunImpedanceControl+0xa8>)
 800291c:	edc3 7a00 	vstr	s15, [r3]
	int32_t motorTorque = CM_jointTorque_nm / (torqueConst * gearRatio * nomCurrent_amp) * 1000;
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <RunImpedanceControl+0xa8>)
 8002922:	edd3 6a00 	vldr	s13, [r3]
 8002926:	ed97 7a03 	vldr	s14, [r7, #12]
 800292a:	edd7 7a05 	vldr	s15, [r7, #20]
 800292e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002932:	edd7 7a04 	vldr	s15, [r7, #16]
 8002936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800297c <RunImpedanceControl+0xac>
 8002942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294a:	ee17 3a90 	vmov	r3, s15
 800294e:	607b      	str	r3, [r7, #4]
	EPOS4_SetTorque(CAN_ID, motorTorque);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <RunImpedanceControl+0xb0>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fed2 	bl	8003700 <EPOS4_SetTorque>
}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	42200000 	.word	0x42200000
 8002968:	3dc28f5c 	.word	0x3dc28f5c
 800296c:	200000d0 	.word	0x200000d0
 8002970:	20000130 	.word	0x20000130
 8002974:	20000138 	.word	0x20000138
 8002978:	2000013c 	.word	0x2000013c
 800297c:	447a0000 	.word	0x447a0000
 8002980:	20000000 	.word	0x20000000

08002984 <RunTestProgram>:

static void RunTestProgram(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
	switch (testProgram)
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <RunTestProgram+0xf8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d870      	bhi.n	8002a74 <RunTestProgram+0xf0>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <RunTestProgram+0x14>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	08002a73 	.word	0x08002a73
 800299c:	08002a73 	.word	0x08002a73
 80029a0:	080029ad 	.word	0x080029ad
 80029a4:	080029bf 	.word	0x080029bf
 80029a8:	080029f7 	.word	0x080029f7
		break;
	case ReadOnly:
		break;
	case ConstantTorque:
	{
		int32_t torque = 150;
 80029ac:	2396      	movs	r3, #150	; 0x96
 80029ae:	607b      	str	r3, [r7, #4]
		EPOS4_SetTorque(CAN_ID, torque);
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <RunTestProgram+0xfc>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fea2 	bl	8003700 <EPOS4_SetTorque>
		break;
 80029bc:	e05a      	b.n	8002a74 <RunTestProgram+0xf0>
	}
	case MagneticEncoderBias:
	{
		uint16_t i;

		uint32_t sum = 0.0f;
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]

		for(i = 0; i < 1000; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	83fb      	strh	r3, [r7, #30]
 80029c6:	e00a      	b.n	80029de <RunTestProgram+0x5a>
		{
			uint16_t bias_raw = AS5145B_ReadPosition_Raw();
 80029c8:	f000 fdea 	bl	80035a0 <AS5145B_ReadPosition_Raw>
 80029cc:	4603      	mov	r3, r0
 80029ce:	817b      	strh	r3, [r7, #10]
			sum += bias_raw;
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < 1000; i++)
 80029d8:	8bfb      	ldrh	r3, [r7, #30]
 80029da:	3301      	adds	r3, #1
 80029dc:	83fb      	strh	r3, [r7, #30]
 80029de:	8bfb      	ldrh	r3, [r7, #30]
 80029e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e4:	d3f0      	bcc.n	80029c8 <RunTestProgram+0x44>
		}

		CM_magEncBias_raw = sum / i;
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <RunTestProgram+0x100>)
 80029f2:	801a      	strh	r2, [r3, #0]

		break;
 80029f4:	e03e      	b.n	8002a74 <RunTestProgram+0xf0>
	}
	case ImpedanceControl:
	{
		// First compute average of current position and use as equilibrium point
		// Then run impedance control
		if (isFirst)
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <RunTestProgram+0x104>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d032      	beq.n	8002a64 <RunTestProgram+0xe0>
		{
			uint16_t i;

			ProsCtrl.kd = CM_ImpCtrl.kd;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <RunTestProgram+0x108>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <RunTestProgram+0x10c>)
 8002a04:	6053      	str	r3, [r2, #4]
			ProsCtrl.kp = CM_ImpCtrl.kp;
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <RunTestProgram+0x108>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <RunTestProgram+0x10c>)
 8002a0c:	6093      	str	r3, [r2, #8]
			float sum = 0.0f;
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]

			for(i = 0; i < 1000; i++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	82fb      	strh	r3, [r7, #22]
 8002a18:	e00e      	b.n	8002a38 <RunTestProgram+0xb4>
			{
				float pos_deg = AS5145B_ReadPosition_Deg();
 8002a1a:	f000 fdcf 	bl	80035bc <AS5145B_ReadPosition_Deg>
 8002a1e:	ed87 0a03 	vstr	s0, [r7, #12]
				sum += pos_deg;
 8002a22:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2e:	edc7 7a04 	vstr	s15, [r7, #16]
			for(i = 0; i < 1000; i++)
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	3301      	adds	r3, #1
 8002a36:	82fb      	strh	r3, [r7, #22]
 8002a38:	8afb      	ldrh	r3, [r7, #22]
 8002a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3e:	d3ec      	bcc.n	8002a1a <RunTestProgram+0x96>
			}

			CM_ImpCtrl.eqPoint_deg = sum / i - encBias_deg;
 8002a40:	8afb      	ldrh	r3, [r7, #22]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <RunTestProgram+0x110>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <RunTestProgram+0x108>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
		{
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;
			RunImpedanceControl();
		}

		break;
 8002a62:	e007      	b.n	8002a74 <RunTestProgram+0xf0>
			ProsCtrl.eqPoint_deg = CM_ImpCtrl.eqPoint_deg;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <RunTestProgram+0x108>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <RunTestProgram+0x10c>)
 8002a6a:	6013      	str	r3, [r2, #0]
			RunImpedanceControl();
 8002a6c:	f7ff ff30 	bl	80028d0 <RunImpedanceControl>
		break;
 8002a70:	e000      	b.n	8002a74 <RunTestProgram+0xf0>
		break;
 8002a72:	bf00      	nop
	}
	}
}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200000cd 	.word	0x200000cd
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000228 	.word	0x20000228
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000140 	.word	0x20000140
 8002a90:	200000d0 	.word	0x200000d0
 8002a94:	20000008 	.word	0x20000008

08002a98 <IMU_read>:
/*******************************************************************************
* Should move to IMU driver??
*******************************************************************************/

struct IMU_Data_s IMU_read(void)
{
 8002a98:	b5b0      	push	{r4, r5, r7, lr}
 8002a9a:	b098      	sub	sp, #96	; 0x60
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	struct IMU_Data_s IMU;
	uint8_t response[21];
	WriteReg(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG);
 8002aa0:	218c      	movs	r1, #140	; 0x8c
 8002aa2:	2025      	movs	r0, #37	; 0x25
 8002aa4:	f000 f8aa 	bl	8002bfc <WriteReg>
	WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL);
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	2026      	movs	r0, #38	; 0x26
 8002aac:	f000 f8a6 	bl	8002bfc <WriteReg>
	WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87);
 8002ab0:	2187      	movs	r1, #135	; 0x87
 8002ab2:	2027      	movs	r0, #39	; 0x27
 8002ab4:	f000 f8a2 	bl	8002bfc <WriteReg>

	ReadRegs(MPUREG_ACCEL_XOUT_H, response, 21);
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	2215      	movs	r2, #21
 8002abe:	4619      	mov	r1, r3
 8002ac0:	203b      	movs	r0, #59	; 0x3b
 8002ac2:	f000 f8e5 	bl	8002c90 <ReadRegs>

	int16_t AX = ((int16_t) response[0] << 8) | response[1];
 8002ac6:	7a3b      	ldrb	r3, [r7, #8]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	7a7b      	ldrb	r3, [r7, #9]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	int16_t AY = ((int16_t) response[2] << 8) | response[3];
 8002ad6:	7abb      	ldrb	r3, [r7, #10]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	int16_t AZ = ((int16_t) response[4] << 8) | response[5];
 8002ae6:	7b3b      	ldrb	r3, [r7, #12]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	int16_t GX = ((int16_t) response[8] << 8) | response[9];
 8002af6:	7c3b      	ldrb	r3, [r7, #16]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	7c7b      	ldrb	r3, [r7, #17]
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	int16_t GY = ((int16_t) response[10] << 8) | response[11];
 8002b06:	7cbb      	ldrb	r3, [r7, #18]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t GZ = ((int16_t) response[12] << 8) | response[13];
 8002b16:	7d3b      	ldrb	r3, [r7, #20]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	7d7b      	ldrb	r3, [r7, #21]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	IMU.ax_g = AX / 4096.0;
 8002b26:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fc9e 	bl	800046c <__aeabi_i2d>
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <IMU_read+0x160>)
 8002b36:	f7fd fe2d 	bl	8000794 <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU.ay_g = AY / 4096.0;
 8002b42:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc90 	bl	800046c <__aeabi_i2d>
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <IMU_read+0x160>)
 8002b52:	f7fd fe1f 	bl	8000794 <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU.az_g = AZ / 4096.0;
 8002b5e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc82 	bl	800046c <__aeabi_i2d>
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <IMU_read+0x160>)
 8002b6e:	f7fd fe11 	bl	8000794 <__aeabi_ddiv>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	IMU.gx_dps = GX / 32.8;
 8002b7a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc74 	bl	800046c <__aeabi_i2d>
 8002b84:	a31a      	add	r3, pc, #104	; (adr r3, 8002bf0 <IMU_read+0x158>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fe03 	bl	8000794 <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	IMU.gy_dps = GY / 32.8;
 8002b96:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fc66 	bl	800046c <__aeabi_i2d>
 8002ba0:	a313      	add	r3, pc, #76	; (adr r3, 8002bf0 <IMU_read+0x158>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f7fd fdf5 	bl	8000794 <__aeabi_ddiv>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	IMU.gz_dps = GZ / 32.8;
 8002bb2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fc58 	bl	800046c <__aeabi_i2d>
 8002bbc:	a30c      	add	r3, pc, #48	; (adr r3, 8002bf0 <IMU_read+0x158>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fde7 	bl	8000794 <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	return IMU;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	f107 0420 	add.w	r4, r7, #32
 8002bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002be2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	3760      	adds	r7, #96	; 0x60
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bdb0      	pop	{r4, r5, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	66666666 	.word	0x66666666
 8002bf4:	40406666 	.word	0x40406666
 8002bf8:	40b00000 	.word	0x40b00000

08002bfc <WriteReg>:

unsigned int WriteReg(uint8_t adress, uint8_t data)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	460a      	mov	r2, r1
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71bb      	strb	r3, [r7, #6]
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f7fe ffcc 	bl	8001bb0 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002c18:	bf00      	nop
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <WriteReg+0x90>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f9      	beq.n	8002c1a <WriteReg+0x1e>
	LL_SPI_TransmitData8(SPI1, adress);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4818      	ldr	r0, [pc, #96]	; (8002c8c <WriteReg+0x90>)
 8002c2c:	f7ff f81d 	bl	8001c6a <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002c30:	bf00      	nop
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <WriteReg+0x90>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f9      	beq.n	8002c32 <WriteReg+0x36>
	LL_SPI_ReceiveData8(SPI1);
 8002c3e:	4813      	ldr	r0, [pc, #76]	; (8002c8c <WriteReg+0x90>)
 8002c40:	f7ff f805 	bl	8001c4e <LL_SPI_ReceiveData8>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002c44:	bf00      	nop
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <WriteReg+0x90>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f9      	beq.n	8002c46 <WriteReg+0x4a>
	LL_SPI_TransmitData8(SPI1, data);
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	4619      	mov	r1, r3
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <WriteReg+0x90>)
 8002c58:	f7ff f807 	bl	8001c6a <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002c5c:	bf00      	nop
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <WriteReg+0x90>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f9      	beq.n	8002c5e <WriteReg+0x62>
	temp_val = LL_SPI_ReceiveData8(SPI1);
 8002c6a:	4808      	ldr	r0, [pc, #32]	; (8002c8c <WriteReg+0x90>)
 8002c6c:	f7fe ffef 	bl	8001c4e <LL_SPI_ReceiveData8>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]

	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7c:	f7fe ff8a 	bl	8001b94 <LL_GPIO_SetOutputPin>
	return temp_val;
 8002c80:	68fb      	ldr	r3, [r7, #12]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40013000 	.word	0x40013000

08002c90 <ReadRegs>:

void ReadRegs(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	73fb      	strb	r3, [r7, #15]
	unsigned int i = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002caa:	f7fe ff81 	bl	8001bb0 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE));
 8002cae:	bf00      	nop
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <ReadRegs+0xac>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f9      	beq.n	8002cb0 <ReadRegs+0x20>
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80));
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	481d      	ldr	r0, [pc, #116]	; (8002d3c <ReadRegs+0xac>)
 8002cc8:	f7fe ffcf 	bl	8001c6a <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE));
 8002ccc:	bf00      	nop
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <ReadRegs+0xac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f9      	beq.n	8002cce <ReadRegs+0x3e>
	LL_SPI_ReceiveData8(SPI1);
 8002cda:	4818      	ldr	r0, [pc, #96]	; (8002d3c <ReadRegs+0xac>)
 8002cdc:	f7fe ffb7 	bl	8001c4e <LL_SPI_ReceiveData8>

	for (i = 0; i < Bytes; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e01c      	b.n	8002d20 <ReadRegs+0x90>
	{
		while (!(SPI1->SR & SPI_SR_TXE));
 8002ce6:	bf00      	nop
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <ReadRegs+0xac>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f9      	beq.n	8002ce8 <ReadRegs+0x58>
		LL_SPI_TransmitData8(SPI1, 0x00);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4811      	ldr	r0, [pc, #68]	; (8002d3c <ReadRegs+0xac>)
 8002cf8:	f7fe ffb7 	bl	8001c6a <LL_SPI_TransmitData8>
		while (!(SPI1->SR & SPI_SR_RXNE));
 8002cfc:	bf00      	nop
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <ReadRegs+0xac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f9      	beq.n	8002cfe <ReadRegs+0x6e>
		ReadBuf[i] = LL_SPI_ReceiveData8(SPI1);
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	18d4      	adds	r4, r2, r3
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <ReadRegs+0xac>)
 8002d12:	f7fe ff9c 	bl	8001c4e <LL_SPI_ReceiveData8>
 8002d16:	4603      	mov	r3, r0
 8002d18:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < Bytes; i++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3de      	bcc.n	8002ce6 <ReadRegs+0x56>
	}

	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8002d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d30:	f7fe ff30 	bl	8001b94 <LL_GPIO_SetOutputPin>
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	40013000 	.word	0x40013000

08002d40 <LL_AHB2_GRP1_EnableClock>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40021000 	.word	0x40021000

08002d70 <LL_APB1_GRP1_EnableClock>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000

08002da0 <LL_APB2_GRP1_EnableClock>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dac:	4907      	ldr	r1, [pc, #28]	; (8002dcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002db6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <LL_SPI_SetStandard>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0210 	bic.w	r2, r3, #16
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	605a      	str	r2, [r3, #4]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_SPI_DisableNSSPulseMgt>:
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f023 0208 	bic.w	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	605a      	str	r2, [r3, #4]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b090      	sub	sp, #64	; 0x40
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	2228      	movs	r2, #40	; 0x28
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 fa92 	bl	8007350 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002e3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e40:	f7ff ffae 	bl	8002da0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff ff7b 	bl	8002d40 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002e4a:	23e0      	movs	r3, #224	; 0xe0
 8002e4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	463b      	mov	r3, r7
 8002e64:	4619      	mov	r1, r3
 8002e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6a:	f003 fc23 	bl	80066b4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002e72:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e76:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002e78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e7c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002e90:	2300      	movs	r3, #0
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002e98:	2307      	movs	r3, #7
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <MX_SPI1_Init+0xa8>)
 8002ea4:	f004 f86e 	bl	8006f84 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_SPI1_Init+0xa8>)
 8002eac:	f7ff ff90 	bl	8002dd0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <MX_SPI1_Init+0xa8>)
 8002eb2:	f7ff ffa0 	bl	8002df6 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	3740      	adds	r7, #64	; 0x40
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40013000 	.word	0x40013000

08002ec4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b090      	sub	sp, #64	; 0x40
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002eca:	f107 0318 	add.w	r3, r7, #24
 8002ece:	2228      	movs	r2, #40	; 0x28
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fa3c 	bl	8007350 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002ee8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002eec:	f7ff ff40 	bl	8002d70 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f7ff ff25 	bl	8002d40 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = EPOS4_SCK_Pin|EPOS4_MISO_Pin|EPOS4_MOSI_Pin;
 8002ef6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002efa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002efc:	2302      	movs	r3, #2
 8002efe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	463b      	mov	r3, r7
 8002f12:	4619      	mov	r1, r3
 8002f14:	4815      	ldr	r0, [pc, #84]	; (8002f6c <MX_SPI2_Init+0xa8>)
 8002f16:	f003 fbcd 	bl	80066b4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002f1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002f22:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002f24:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f28:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002f44:	2307      	movs	r3, #7
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002f48:	f107 0318 	add.w	r3, r7, #24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4808      	ldr	r0, [pc, #32]	; (8002f70 <MX_SPI2_Init+0xac>)
 8002f50:	f004 f818 	bl	8006f84 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002f54:	2100      	movs	r1, #0
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <MX_SPI2_Init+0xac>)
 8002f58:	f7ff ff3a 	bl	8002dd0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_SPI2_Init+0xac>)
 8002f5e:	f7ff ff4a 	bl	8002df6 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	3740      	adds	r7, #64	; 0x40
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	40003800 	.word	0x40003800

08002f74 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f043 0202 	orr.w	r2, r3, #2
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	605a      	str	r2, [r3, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d101      	bne.n	8002fac <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <NMI_Handler+0x4>

08002fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <HardFault_Handler+0x4>

08002fc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <MemManage_Handler+0x4>

08002fcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <BusFault_Handler+0x4>

08002fd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <UsageFault_Handler+0x4>

08002fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	af00      	add	r7, sp, #0

/******************************************************************************
* USER SysTick_Handler
******************************************************************************/

	systick_app_timer_tickAndProcess();
 8003006:	f000 f829 	bl	800305c <systick_app_timer_tickAndProcess>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
/******************************************************************************
* USER LPTIM2_IRQHandler
******************************************************************************/

	// Wait for auto reload match to occur
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8003014:	4806      	ldr	r0, [pc, #24]	; (8003030 <LPTIM2_IRQHandler+0x20>)
 8003016:	f7ff ffbd 	bl	8002f94 <LL_LPTIM_IsActiveFlag_ARRM>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;	// Set flag for prosthesis control
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <LPTIM2_IRQHandler+0x24>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);	// Clear ARR interrupt flag
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <LPTIM2_IRQHandler+0x20>)
 8003028:	f7ff ffa4 	bl	8002f74 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40009400 	.word	0x40009400
 8003034:	200000cc 	.word	0x200000cc

08003038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <SystemInit+0x20>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <SystemInit+0x20>)
 8003044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	71fb      	strb	r3, [r7, #7]
 8003066:	e050      	b.n	800310a <systick_app_timer_tickAndProcess+0xae>
			// quick null check, for sanity
			if (appTimer.channel[i].timer != 0) {
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d046      	beq.n	8003104 <systick_app_timer_tickAndProcess+0xa8>
				if (appTimer.channel[i].active) {
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	4a28      	ldr	r2, [pc, #160]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 800307a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d040      	beq.n	8003104 <systick_app_timer_tickAndProcess+0xa8>
					appTimer.channel[i].timer->value++;
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	3201      	adds	r2, #1
 8003090:	605a      	str	r2, [r3, #4]
					// if the timer alarm has been set above 0, then there is something to process
					if (appTimer.channel[i].timer->alarm > 0) {
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	4a21      	ldr	r2, [pc, #132]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d030      	beq.n	8003104 <systick_app_timer_tickAndProcess+0xa8>
						// if value meets or exceeds alarm value, process the timer
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	491a      	ldr	r1, [pc, #104]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d322      	bcc.n	8003104 <systick_app_timer_tickAndProcess+0xa8>
							// if timer has a callback, call it and then reset the value
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4a16      	ldr	r2, [pc, #88]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <systick_app_timer_tickAndProcess+0x8e>
								appTimer.channel[i].timer->timerAlarmCallback();
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	605a      	str	r2, [r3, #4]
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	7a1b      	ldrb	r3, [r3, #8]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d104      	bne.n	8003104 <systick_app_timer_tickAndProcess+0xa8>
								appTimer.channel[i].active = false;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <systick_app_timer_tickAndProcess+0xc0>)
 80030fe:	2100      	movs	r1, #0
 8003100:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	3301      	adds	r3, #1
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d9ab      	bls.n	8003068 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000022c 	.word	0x2000022c

08003120 <systick_app_timer_channel_start>:
	}

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2b09      	cmp	r3, #9
 800312e:	d901      	bls.n	8003134 <systick_app_timer_channel_start+0x14>
		return 2; // channel number out of bounds
 8003130:	2302      	movs	r3, #2
 8003132:	e015      	b.n	8003160 <systick_app_timer_channel_start+0x40>
	}

	if (appTimer.channel[channel].timer) {
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <systick_app_timer_channel_start+0x4c>)
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <systick_app_timer_channel_start+0x3e>
		appTimer.channel[channel].timer->value = 0; // reset when starting
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <systick_app_timer_channel_start+0x4c>)
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
		appTimer.channel[channel].active = true;
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	4a06      	ldr	r2, [pc, #24]	; (800316c <systick_app_timer_channel_start+0x4c>)
 8003154:	2101      	movs	r1, #1
 8003156:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		return 0;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <systick_app_timer_channel_start+0x40>
	}

	return 1; // channel not found
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	2000022c 	.word	0x2000022c

08003170 <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 800317a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800317e:	2b09      	cmp	r3, #9
 8003180:	d901      	bls.n	8003186 <systick_app_timer_channel_create+0x16>
		return 2; // timer module is full
 8003182:	2302      	movs	r3, #2
 8003184:	e026      	b.n	80031d4 <systick_app_timer_channel_create+0x64>
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e017      	b.n	80031bc <systick_app_timer_channel_create+0x4c>
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <systick_app_timer_channel_create+0x46>
			appTimer.channel[i].timer = timer;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	605a      	str	r2, [r3, #4]
			appTimer.channel[i].timer->channel = i;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	701a      	strb	r2, [r3, #0]
			break;
 80031b4:	e005      	b.n	80031c2 <systick_app_timer_channel_create+0x52>
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3301      	adds	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b09      	cmp	r3, #9
 80031c0:	d9e4      	bls.n	800318c <systick_app_timer_channel_create+0x1c>
		}
	}

	appTimer.count++;
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 80031c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c8:	3301      	adds	r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <systick_app_timer_channel_create+0x70>)
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return 0;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	2000022c 	.word	0x2000022c

080031e4 <systick_app_timer_module_init>:

void systick_app_timer_module_init() {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0

	memset(&appTimer, 0, sizeof(appTimer));
 80031e8:	2254      	movs	r2, #84	; 0x54
 80031ea:	2100      	movs	r1, #0
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <systick_app_timer_module_init+0x14>)
 80031ee:	f004 f8af 	bl	8007350 <memset>

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000022c 	.word	0x2000022c

080031fc <LL_RCC_SetUSARTClockSource>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <LL_RCC_SetUSARTClockSource+0x30>)
 8003206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	b29b      	uxth	r3, r3
 8003216:	4905      	ldr	r1, [pc, #20]	; (800322c <LL_RCC_SetUSARTClockSource+0x30>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000

08003230 <LL_AHB2_GRP1_EnableClock>:
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800323a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800323c:	4907      	ldr	r1, [pc, #28]	; (800325c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4313      	orrs	r3, r2
 8003242:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000

08003260 <LL_APB1_GRP1_EnableClock>:
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <LL_APB1_GRP1_EnableClock+0x2c>)
 800326a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <LL_APB1_GRP1_EnableClock+0x2c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40021000 	.word	0x40021000

08003290 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80032e2:	f107 031c 	add.w	r3, r7, #28
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	615a      	str	r2, [r3, #20]
 80032f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8003306:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800330a:	f7ff ff77 	bl	80031fc <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800330e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003312:	f7ff ffa5 	bl	8003260 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff ff8a 	bl	8003230 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800331c:	230c      	movs	r3, #12
 800331e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003320:	2302      	movs	r3, #2
 8003322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003330:	2307      	movs	r3, #7
 8003332:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333c:	f003 f9ba 	bl	80066b4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003340:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003344:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003352:	230c      	movs	r3, #12
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003356:	2300      	movs	r3, #0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <MX_USART2_UART_Init+0xa4>)
 8003366:	f003 fed5 	bl	8007114 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_USART2_UART_Init+0xa4>)
 800336c:	f7ff ffa0 	bl	80032b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003370:	4803      	ldr	r0, [pc, #12]	; (8003380 <MX_USART2_UART_Init+0xa4>)
 8003372:	f7ff ff8d 	bl	8003290 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003376:	bf00      	nop
 8003378:	3738      	adds	r7, #56	; 0x38
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40004400 	.word	0x40004400

08003384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003388:	f7ff fe56 	bl	8003038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800338c:	480c      	ldr	r0, [pc, #48]	; (80033c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800338e:	490d      	ldr	r1, [pc, #52]	; (80033c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <LoopForever+0xe>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <LoopForever+0x16>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033b2:	f003 ff8b 	bl	80072cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033b6:	f7fe fb0f 	bl	80019d8 <main>

080033ba <LoopForever>:

LoopForever:
    b LoopForever
 80033ba:	e7fe      	b.n	80033ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80033c8:	080092d8 	.word	0x080092d8
  ldr r2, =_sbss
 80033cc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80033d0:	20002950 	.word	0x20002950

080033d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d4:	e7fe      	b.n	80033d4 <ADC1_2_IRQHandler>

080033d6 <LL_GPIO_IsInputPinSet>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4013      	ands	r3, r2
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d101      	bne.n	80033f2 <LL_GPIO_IsInputPinSet+0x1c>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_GPIO_IsInputPinSet+0x1e>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_GPIO_SetOutputPin>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	619a      	str	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_GPIO_ResetOutputPin>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <AS5145B_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void AS5145B_Init(AS5145B_Init_t *AS5145B_Init)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	memcpy( &AS5145B, AS5145B_Init, sizeof(AS5145B_Init_t) );
 8003440:	2214      	movs	r2, #20
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <AS5145B_Init+0x3c>)
 8003446:	f003 ff75 	bl	8007334 <memcpy>

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);		// Chip select pin initially high (Figure 13 in DS)
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <AS5145B_Init+0x3c>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <AS5145B_Init+0x3c>)
 8003450:	8a12      	ldrh	r2, [r2, #16]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ffd3 	bl	8003400 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);		// Clock pin initially high (Figure 13 in DS)
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <AS5145B_Init+0x3c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <AS5145B_Init+0x3c>)
 8003460:	89d2      	ldrh	r2, [r2, #14]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ffcb 	bl	8003400 <LL_GPIO_SetOutputPin>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000280 	.word	0x20000280

08003478 <AS5145B_ReadData>:

struct AS5145B_Data_s AS5145B_ReadData(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data;

	data.pos_raw = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	80bb      	strh	r3, [r7, #4]
	data.status = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	71bb      	strb	r3, [r7, #6]

	LL_GPIO_ResetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 8003486:	4b45      	ldr	r3, [pc, #276]	; (800359c <AS5145B_ReadData+0x124>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4a44      	ldr	r2, [pc, #272]	; (800359c <AS5145B_ReadData+0x124>)
 800348c:	8a12      	ldrh	r2, [r2, #16]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ffc3 	bl	800341c <LL_GPIO_ResetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CLK FE) (Figure 10 and Figure 13 in DS)
 8003496:	f000 f8b3 	bl	8003600 <AS5145B_Delay_500ns>

	// Read angular position in ADC from first 12 bits (MSB first)
	for(int i = 12-1; i >= 0; i--)
 800349a:	230b      	movs	r3, #11
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e02d      	b.n	80034fc <AS5145B_ReadData+0x84>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <AS5145B_ReadData+0x124>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a3d      	ldr	r2, [pc, #244]	; (800359c <AS5145B_ReadData+0x124>)
 80034a6:	89d2      	ldrh	r2, [r2, #14]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ffb6 	bl	800341c <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80034b0:	f000 f8a6 	bl	8003600 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <AS5145B_ReadData+0x124>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a38      	ldr	r2, [pc, #224]	; (800359c <AS5145B_ReadData+0x124>)
 80034ba:	89d2      	ldrh	r2, [r2, #14]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff9e 	bl	8003400 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 80034c4:	f000 f89c 	bl	8003600 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <AS5145B_ReadData+0x124>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a33      	ldr	r2, [pc, #204]	; (800359c <AS5145B_ReadData+0x124>)
 80034ce:	8992      	ldrh	r2, [r2, #12]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff7f 	bl	80033d6 <LL_GPIO_IsInputPinSet>
 80034d8:	4603      	mov	r3, r0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	73bb      	strb	r3, [r7, #14]
		data.pos_raw |= (temp) << i;
 80034e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80034e6:	7bb9      	ldrb	r1, [r7, #14]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	80bb      	strh	r3, [r7, #4]
	for(int i = 12-1; i >= 0; i--)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dace      	bge.n	80034a0 <AS5145B_ReadData+0x28>
	}

	// Read remaining 6 status bits (MSB first)
	for(int i = 6-1; i >= 0; i--)
 8003502:	2305      	movs	r3, #5
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e02e      	b.n	8003566 <AS5145B_ReadData+0xee>
	{
		LL_GPIO_ResetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <AS5145B_ReadData+0x124>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <AS5145B_ReadData+0x124>)
 800350e:	89d2      	ldrh	r2, [r2, #14]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff82 	bl	800341c <LL_GPIO_ResetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 8003518:	f000 f872 	bl	8003600 <AS5145B_Delay_500ns>
		LL_GPIO_SetOutputPin(AS5145B.CLK_GPIOx, AS5145B.CLK_Pin);
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <AS5145B_ReadData+0x124>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <AS5145B_ReadData+0x124>)
 8003522:	89d2      	ldrh	r2, [r2, #14]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff6a 	bl	8003400 <LL_GPIO_SetOutputPin>
		AS5145B_Delay_500ns();																// Delay of 500 ns minimum required for T_(CLK/2) (Figure 10 and Figure 13 in DS)
 800352c:	f000 f868 	bl	8003600 <AS5145B_Delay_500ns>
		uint8_t temp  = LL_GPIO_IsInputPinSet(AS5145B.DO_GPIOx, AS5145B.DO_Pin) & 0x01;
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <AS5145B_ReadData+0x124>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <AS5145B_ReadData+0x124>)
 8003536:	8992      	ldrh	r2, [r2, #12]
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff4b 	bl	80033d6 <LL_GPIO_IsInputPinSet>
 8003540:	4603      	mov	r3, r0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
		data.status  |= (temp) << i;
 800354a:	79bb      	ldrb	r3, [r7, #6]
 800354c:	b25a      	sxtb	r2, r3
 800354e:	7bf9      	ldrb	r1, [r7, #15]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	b25b      	sxtb	r3, r3
 8003558:	4313      	orrs	r3, r2
 800355a:	b25b      	sxtb	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	71bb      	strb	r3, [r7, #6]
	for(int i = 6-1; i >= 0; i--)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	3b01      	subs	r3, #1
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	dacd      	bge.n	8003508 <AS5145B_ReadData+0x90>
	}

	LL_GPIO_SetOutputPin(AS5145B.CSn_GPIOx, AS5145B.CSn_Pin);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <AS5145B_ReadData+0x124>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <AS5145B_ReadData+0x124>)
 8003572:	8a12      	ldrh	r2, [r2, #16]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff42 	bl	8003400 <LL_GPIO_SetOutputPin>
	AS5145B_Delay_500ns();											// Delay of 500 ns minimum required for t_(CSn) (Figure 10 and Figure 13 in DS)
 800357c:	f000 f840 	bl	8003600 <AS5145B_Delay_500ns>

	return data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	2300      	movs	r3, #0
 8003586:	893a      	ldrh	r2, [r7, #8]
 8003588:	f362 030f 	bfi	r3, r2, #0, #16
 800358c:	897a      	ldrh	r2, [r7, #10]
 800358e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000280 	.word	0x20000280

080035a0 <AS5145B_ReadPosition_Raw>:

uint16_t AS5145B_ReadPosition_Raw(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
	struct AS5145B_Data_s data = AS5145B_ReadData();
 80035a6:	f7ff ff67 	bl	8003478 <AS5145B_ReadData>
 80035aa:	4603      	mov	r3, r0
 80035ac:	607b      	str	r3, [r7, #4]
	return data.pos_raw;
 80035ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035b2:	b29b      	uxth	r3, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <AS5145B_ReadPosition_Deg>:

float AS5145B_ReadPosition_Deg(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
	uint16_t pos_raw = AS5145B_ReadPosition_Raw();
 80035c2:	f7ff ffed 	bl	80035a0 <AS5145B_ReadPosition_Raw>
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
	float pos_deg = (float) pos_raw * AS5145B_RAW2DEG;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80035f8 <AS5145B_ReadPosition_Deg+0x3c>
 80035d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80035fc <AS5145B_ReadPosition_Deg+0x40>
 80035e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035e4:	edc7 7a00 	vstr	s15, [r7]
	return pos_deg;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	ee07 3a90 	vmov	s15, r3
}
 80035ee:	eeb0 0a67 	vmov.f32	s0, s15
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	43b40000 	.word	0x43b40000
 80035fc:	45800000 	.word	0x45800000

08003600 <AS5145B_Delay_500ns>:
* PRIVATE FUNCTIONS
*******************************************************************************/

// See NOTES at the top of this file for more information
static void AS5145B_Delay_500ns(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 2; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	71fb      	strb	r3, [r7, #7]
 800360a:	e00c      	b.n	8003626 <AS5145B_Delay_500ns+0x26>
	{
		for(uint8_t j = 0; j < 3; j++)
 800360c:	2300      	movs	r3, #0
 800360e:	71bb      	strb	r3, [r7, #6]
 8003610:	e003      	b.n	800361a <AS5145B_Delay_500ns+0x1a>
			__NOP();
 8003612:	bf00      	nop
		for(uint8_t j = 0; j < 3; j++)
 8003614:	79bb      	ldrb	r3, [r7, #6]
 8003616:	3301      	adds	r3, #1
 8003618:	71bb      	strb	r3, [r7, #6]
 800361a:	79bb      	ldrb	r3, [r7, #6]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d9f8      	bls.n	8003612 <AS5145B_Delay_500ns+0x12>
	for(uint8_t i = 0; i < 2; i++)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	3301      	adds	r3, #1
 8003624:	71fb      	strb	r3, [r7, #7]
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d9ef      	bls.n	800360c <AS5145B_Delay_500ns+0xc>
	}
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <EPOS4_SetCSTMode>:
// NOTE: According to AN the below process should start at Set CST operation mode.
//       However, the device doesn't operate without first doing Shutdown and
//       then Switch on and enable device. Thus, those functions are added to the
//       beginning.
void EPOS4_SetCSTMode( uint16_t CAN_ID )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	80fb      	strh	r3, [r7, #6]
	// Declare variables
    uint8_t data[8];

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 8003644:	f107 0008 	add.w	r0, r7, #8
 8003648:	2306      	movs	r3, #6
 800364a:	2200      	movs	r2, #0
 800364c:	f246 0140 	movw	r1, #24640	; 0x6040
 8003650:	f000 f872 	bl	8003738 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003654:	f107 0208 	add.w	r2, r7, #8
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	2108      	movs	r1, #8
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fa76 	bl	8003b4e <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003662:	200a      	movs	r0, #10
 8003664:	f003 fdfa 	bl	800725c <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 8003668:	f107 0008 	add.w	r0, r7, #8
 800366c:	230f      	movs	r3, #15
 800366e:	2200      	movs	r2, #0
 8003670:	f246 0140 	movw	r1, #24640	; 0x6040
 8003674:	f000 f860 	bl	8003738 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 8003678:	f107 0208 	add.w	r2, r7, #8
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2108      	movs	r1, #8
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa64 	bl	8003b4e <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 8003686:	200a      	movs	r0, #10
 8003688:	f003 fde8 	bl	800725c <LL_mDelay>

    // Set CST operation mode
    EPOS4_DataFramer( data, 0x6060 , 0, 0x0A );
 800368c:	f107 0008 	add.w	r0, r7, #8
 8003690:	230a      	movs	r3, #10
 8003692:	2200      	movs	r2, #0
 8003694:	f246 0160 	movw	r1, #24672	; 0x6060
 8003698:	f000 f84e 	bl	8003738 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	2108      	movs	r1, #8
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fa52 	bl	8003b4e <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80036aa:	200a      	movs	r0, #10
 80036ac:	f003 fdd6 	bl	800725c <LL_mDelay>

    // Shutdown device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x06 );
 80036b0:	f107 0008 	add.w	r0, r7, #8
 80036b4:	2306      	movs	r3, #6
 80036b6:	2200      	movs	r2, #0
 80036b8:	f246 0140 	movw	r1, #24640	; 0x6040
 80036bc:	f000 f83c 	bl	8003738 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80036c0:	f107 0208 	add.w	r2, r7, #8
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2108      	movs	r1, #8
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fa40 	bl	8003b4e <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80036ce:	200a      	movs	r0, #10
 80036d0:	f003 fdc4 	bl	800725c <LL_mDelay>

    // Switch on and enable device
    EPOS4_DataFramer( data, 0x6040, 0x00, 0x0F );
 80036d4:	f107 0008 	add.w	r0, r7, #8
 80036d8:	230f      	movs	r3, #15
 80036da:	2200      	movs	r2, #0
 80036dc:	f246 0140 	movw	r1, #24640	; 0x6040
 80036e0:	f000 f82a 	bl	8003738 <EPOS4_DataFramer>
    CAN_transmit( CAN_ID, 8, data );
 80036e4:	f107 0208 	add.w	r2, r7, #8
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2108      	movs	r1, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa2e 	bl	8003b4e <CAN_transmit>
    LL_mDelay(10);									// Can we do better??
 80036f2:	200a      	movs	r0, #10
 80036f4:	f003 fdb2 	bl	800725c <LL_mDelay>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <EPOS4_SetTorque>:

// Set torque per thousand of motor rated torque (Table 7-71 of AN)
// Motor rated torque = nominal current * torque constant
// @param torque	100 = 10% of motor rated torque
void EPOS4_SetTorque( uint16_t CAN_ID, int32_t torque )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];

    EPOS4_DataFramer(data, 0x6071, 0x00, torque);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f107 0008 	add.w	r0, r7, #8
 8003712:	2200      	movs	r2, #0
 8003714:	f246 0171 	movw	r1, #24689	; 0x6071
 8003718:	f000 f80e 	bl	8003738 <EPOS4_DataFramer>

    CAN_transmit(CAN_ID, 8, data);
 800371c:	f107 0208 	add.w	r2, r7, #8
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2108      	movs	r1, #8
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fa12 	bl	8003b4e <CAN_transmit>
    EPOS4_usDelay(50);					// Can we do better??
 800372a:	2032      	movs	r0, #50	; 0x32
 800372c:	f000 f83d 	bl	80037aa <EPOS4_usDelay>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <EPOS4_DataFramer>:
 * OTHER FUNCTIONS
 ******************************************************************************/

// This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_DataFramer( uint8_t *data, uint16_t object, uint8_t subindex, uint32_t value )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	817b      	strh	r3, [r7, #10]
 8003746:	4613      	mov	r3, r2
 8003748:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; 					// [Byte 0] legend Table 5-43 page 5-55 of AN
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2222      	movs	r2, #34	; 0x22
 800374e:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); 			// Index LowByte
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3301      	adds	r3, #1
 8003754:	897a      	ldrh	r2, [r7, #10]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); 	// Index HighByte
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3302      	adds	r3, #2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; 				// subindex
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3303      	adds	r3, #3
 800376c:	7a7a      	ldrb	r2, [r7, #9]
 800376e:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); 			// SDO Byte 0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3304      	adds	r3, #4
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); 	// SDO Byte 1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0a1a      	lsrs	r2, r3, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3305      	adds	r3, #5
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); 	// SDO Byte 2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0c1a      	lsrs	r2, r3, #16
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3306      	adds	r3, #6
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24));	// SDO Byte 3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0e1a      	lsrs	r2, r3, #24
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3307      	adds	r3, #7
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <EPOS4_usDelay>:

// Can we lose this??
void EPOS4_usDelay( uint32_t us )
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	e00c      	b.n	80037d2 <EPOS4_usDelay+0x28>
    {
    	for(i=0;i<11;i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e003      	b.n	80037c6 <EPOS4_usDelay+0x1c>
         __NOP();
 80037be:	bf00      	nop
    	for(i=0;i<11;i++)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b0a      	cmp	r3, #10
 80037ca:	d9f8      	bls.n	80037be <EPOS4_usDelay+0x14>
    for(k=0;k<us;k++)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d3ee      	bcc.n	80037b8 <EPOS4_usDelay+0xe>
    }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_SPI_TransmitData8>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	330c      	adds	r3, #12
 80037f8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_GPIO_SetOutputPin>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	619a      	str	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_GPIO_ResetOutputPin>:
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <clearChipSelect>:
#include "mcp25625.h"

static mcp25625_t can_tranceiver;

// Disable CS pin (active low)
__STATIC_INLINE void clearChipSelect() {
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin); }
 8003848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <clearChipSelect+0x14>)
 800384e:	f7ff ffdd 	bl	800380c <LL_GPIO_SetOutputPin>
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	48000400 	.word	0x48000400

0800385c <setChipSelect>:

// Enable CS pin (active low)
__STATIC_INLINE void setChipSelect() {
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);}
 8003860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <setChipSelect+0x14>)
 8003866:	f7ff ffdf 	bl	8003828 <LL_GPIO_ResetOutputPin>
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	48000400 	.word	0x48000400

08003874 <mcp25625_reset>:

//
void mcp25625_reset()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
	// Transmit reset command
	setChipSelect();							// Enable CS pin
 800387a:	f7ff ffef 	bl	800385c <setChipSelect>
	LL_SPI_TransmitData8( SPI2, CMD_RESET );	// Send reset command
 800387e:	21c0      	movs	r1, #192	; 0xc0
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <mcp25625_reset+0x44>)
 8003882:	f7ff ffb1 	bl	80037e8 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_BSY) );			// Wait for status register to not be busy
 8003886:	bf00      	nop
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <mcp25625_reset+0x44>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f9      	bne.n	8003888 <mcp25625_reset+0x14>
	clearChipSelect();							// Disable CS pin
 8003894:	f7ff ffd6 	bl	8003844 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003898:	e002      	b.n	80038a0 <mcp25625_reset+0x2c>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <mcp25625_reset+0x44>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	71fb      	strb	r3, [r7, #7]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <mcp25625_reset+0x44>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f6      	bne.n	800389a <mcp25625_reset+0x26>
		(void)dummy;						// Suppress unused variable warning
	}
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40003800 	.word	0x40003800

080038bc <mcp25625_writeRegister>:

/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister ( uint8_t reg, uint8_t value )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	460a      	mov	r2, r1
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71bb      	strb	r3, [r7, #6]
	// Transmit value to register
	setChipSelect();						// Enable CS
 80038cc:	f7ff ffc6 	bl	800385c <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);	// Send write command
 80038d0:	2102      	movs	r1, #2
 80038d2:	4816      	ldr	r0, [pc, #88]	; (800392c <mcp25625_writeRegister+0x70>)
 80038d4:	f7ff ff88 	bl	80037e8 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to write to
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4619      	mov	r1, r3
 80038dc:	4813      	ldr	r0, [pc, #76]	; (800392c <mcp25625_writeRegister+0x70>)
 80038de:	f7ff ff83 	bl	80037e8 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);		// Transmit value to register
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	4619      	mov	r1, r3
 80038e6:	4811      	ldr	r0, [pc, #68]	; (800392c <mcp25625_writeRegister+0x70>)
 80038e8:	f7ff ff7e 	bl	80037e8 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 80038ec:	bf00      	nop
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <mcp25625_writeRegister+0x70>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f9      	bne.n	80038ee <mcp25625_writeRegister+0x32>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 80038fa:	bf00      	nop
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <mcp25625_writeRegister+0x70>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <mcp25625_writeRegister+0x40>
	clearChipSelect();						// Disable CS
 8003908:	f7ff ff9c 	bl	8003844 <clearChipSelect>

	// Clear Rx FIFO
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 800390c:	e002      	b.n	8003914 <mcp25625_writeRegister+0x58>
	{
		uint8_t dummy = SPI2->DR;			// Clear Rx FIFO from the receives
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <mcp25625_writeRegister+0x70>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	73fb      	strb	r3, [r7, #15]
	while ( (SPI2->SR & SPI_SR_FRLVL) )		// Check status register for data in Rx
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <mcp25625_writeRegister+0x70>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f6      	bne.n	800390e <mcp25625_writeRegister+0x52>
		(void)dummy;						// Suppress unused variable warning
	}
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40003800 	.word	0x40003800

08003930 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister (uint8_t reg)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
	// Read register
	setChipSelect();						// Enable CS
 800393a:	f7ff ff8f 	bl	800385c <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_READ);	// Send read command
 800393e:	2103      	movs	r1, #3
 8003940:	4814      	ldr	r0, [pc, #80]	; (8003994 <mcp25625_readRegister+0x64>)
 8003942:	f7ff ff51 	bl	80037e8 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);		// Send register to read from
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4619      	mov	r1, r3
 800394a:	4812      	ldr	r0, [pc, #72]	; (8003994 <mcp25625_readRegister+0x64>)
 800394c:	f7ff ff4c 	bl	80037e8 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00);		// ??
 8003950:	2100      	movs	r1, #0
 8003952:	4810      	ldr	r0, [pc, #64]	; (8003994 <mcp25625_readRegister+0x64>)
 8003954:	f7ff ff48 	bl	80037e8 <LL_SPI_TransmitData8>
	while ( (SPI2->SR & SPI_SR_FTLVL) );	// Wait for Tx FIFO to be empty
 8003958:	bf00      	nop
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <mcp25625_readRegister+0x64>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f9      	bne.n	800395a <mcp25625_readRegister+0x2a>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// Wait for Tx FIFO to not be busy
 8003966:	bf00      	nop
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <mcp25625_readRegister+0x64>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f9      	bne.n	8003968 <mcp25625_readRegister+0x38>
	uint8_t dummy  = SPI2->DR; 				// First byte is from CMD transfer
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <mcp25625_readRegister+0x64>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	73fb      	strb	r3, [r7, #15]
	dummy          = SPI2->DR;				// Second byte is from address
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <mcp25625_readRegister+0x64>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	73fb      	strb	r3, [r7, #15]
	uint8_t result = SPI2->DR;				// Actual result value
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <mcp25625_readRegister+0x64>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	73bb      	strb	r3, [r7, #14]
	clearChipSelect();
 8003986:	f7ff ff5d 	bl	8003844 <clearChipSelect>
	(void)dummy;							// Suppress unused variable warning

	// Return
	return result;
 800398a:	7bbb      	ldrb	r3, [r7, #14]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40003800 	.word	0x40003800

08003998 <mcp25625_loadTXB>:

void mcp25625_loadTXB ( uint8_t reg, uint8_t length, uint8_t * data )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	603a      	str	r2, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
 80039a4:	460b      	mov	r3, r1
 80039a6:	71bb      	strb	r3, [r7, #6]
	setChipSelect();
 80039a8:	f7ff ff58 	bl	800385c <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4619      	mov	r1, r3
 80039b0:	481d      	ldr	r0, [pc, #116]	; (8003a28 <mcp25625_loadTXB+0x90>)
 80039b2:	f7ff ff19 	bl	80037e8 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e011      	b.n	80039e0 <mcp25625_loadTXB+0x48>
	{
		while ( !(SPI2->SR & SPI_SR_TXE) );
 80039bc:	bf00      	nop
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <mcp25625_loadTXB+0x90>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f9      	beq.n	80039be <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4814      	ldr	r0, [pc, #80]	; (8003a28 <mcp25625_loadTXB+0x90>)
 80039d6:	f7ff ff07 	bl	80037e8 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++ )
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	3301      	adds	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	79bb      	ldrb	r3, [r7, #6]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3e9      	bcc.n	80039bc <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ( (SPI2->SR & SPI_SR_FTLVL) ); 	// transmit fifo empty?
 80039e8:	bf00      	nop
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <mcp25625_loadTXB+0x90>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f9      	bne.n	80039ea <mcp25625_loadTXB+0x52>
	while ( (SPI2->SR & SPI_SR_BSY) ); 		// no longer busy
 80039f6:	bf00      	nop
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <mcp25625_loadTXB+0x90>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8003a04:	f7ff ff1e 	bl	8003844 <clearChipSelect>

	// clear receive fifo
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8003a08:	e002      	b.n	8003a10 <mcp25625_loadTXB+0x78>
	{
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <mcp25625_loadTXB+0x90>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	73bb      	strb	r3, [r7, #14]
	while ( (SPI2->SR & SPI_SR_FRLVL) )
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <mcp25625_loadTXB+0x90>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f6      	bne.n	8003a0a <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40003800 	.word	0x40003800

08003a2c <getTXB0CTRL>:
	return (canintf_t)mcp25625_readRegister(CANINTF); }

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL); }
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	f7ff ff7d 	bl	8003930 <mcp25625_readRegister>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL); }
 8003a40:	2040      	movs	r0, #64	; 0x40
 8003a42:	f7ff ff75 	bl	8003930 <mcp25625_readRegister>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL); }
 8003a50:	2050      	movs	r0, #80	; 0x50
 8003a52:	f7ff ff6d 	bl	8003930 <mcp25625_readRegister>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <loadTXB2>:
	return (rxb_ctrl_t)mcp25625_readRegister(RXB0CTRL); }

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2 (uint8_t * data) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data); }
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	210d      	movs	r1, #13
 8003a68:	2044      	movs	r0, #68	; 0x44
 8003a6a:	f7ff ff95 	bl	8003998 <mcp25625_loadTXB>
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1 (uint8_t * data) {
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data); }
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	210d      	movs	r1, #13
 8003a82:	2042      	movs	r0, #66	; 0x42
 8003a84:	f7ff ff88 	bl	8003998 <mcp25625_loadTXB>
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0 (uint8_t * data) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data); }
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	210d      	movs	r1, #13
 8003a9c:	2040      	movs	r0, #64	; 0x40
 8003a9e:	f7ff ff7b 	bl	8003998 <mcp25625_loadTXB>
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ); }
 8003aae:	210b      	movs	r1, #11
 8003ab0:	2050      	movs	r0, #80	; 0x50
 8003ab2:	f7ff ff03 	bl	80038bc <mcp25625_writeRegister>
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8003aba:	b580      	push	{r7, lr}
 8003abc:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ); }
 8003abe:	210b      	movs	r1, #11
 8003ac0:	2040      	movs	r0, #64	; 0x40
 8003ac2:	f7ff fefb 	bl	80038bc <mcp25625_writeRegister>
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8003aca:	b580      	push	{r7, lr}
 8003acc:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ); }
 8003ace:	210b      	movs	r1, #11
 8003ad0:	2030      	movs	r0, #48	; 0x30
 8003ad2:	f7ff fef3 	bl	80038bc <mcp25625_writeRegister>
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <mcp25625_sendCAN>:
/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN (txbuff_t * buffer)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8003ae2:	f7ff ffb3 	bl	8003a4c <getTXB2CTRL>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ)
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <mcp25625_sendCAN+0x2a>
	{
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ffaf 	bl	8003a5c <loadTXB2>
		setTXREQ2();
 8003afe:	f7ff ffd4 	bl	8003aaa <setTXREQ2>
		return; // once txbuffer is loaded, return
 8003b02:	e021      	b.n	8003b48 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8003b04:	f7ff ff9a 	bl	8003a3c <getTXB1CTRL>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ)
 8003b0c:	7b3b      	ldrb	r3, [r7, #12]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <mcp25625_sendCAN+0x4c>
	{
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ffab 	bl	8003a76 <loadTXB1>
		setTXREQ1();
 8003b20:	f7ff ffcb 	bl	8003aba <setTXREQ1>
		return; //once tx buffer is loaded, return
 8003b24:	e010      	b.n	8003b48 <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8003b26:	f7ff ff81 	bl	8003a2c <getTXB0CTRL>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ)
 8003b2e:	7b3b      	ldrb	r3, [r7, #12]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <mcp25625_sendCAN+0x6e>
	{
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ffa7 	bl	8003a90 <loadTXB0>
		setTXREQ0();
 8003b42:	f7ff ffc2 	bl	8003aca <setTXREQ0>
		return; // once tx buffer is loaded, return
 8003b46:	bf00      	nop
	}
}
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <CAN_transmit>:
/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit ( uint16_t CAN_ID, uint8_t length, uint8_t * message )
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	4603      	mov	r3, r0
 8003b56:	603a      	str	r2, [r7, #0]
 8003b58:	80fb      	strh	r3, [r7, #6]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	220d      	movs	r2, #13
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fbf2 	bl	8007350 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	015b      	lsls	r3, r3, #5
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8003b7e:	797b      	ldrb	r3, [r7, #5]
 8003b80:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	75fb      	strb	r3, [r7, #23]
 8003b86:	e00b      	b.n	8003ba0 <CAN_transmit+0x52>
	{
		t.txb.data[i] = message[i];
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	441a      	add	r2, r3
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	3318      	adds	r3, #24
 8003b94:	443b      	add	r3, r7
 8003b96:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
 8003ba0:	7dfa      	ldrb	r2, [r7, #23]
 8003ba2:	797b      	ldrb	r3, [r7, #5]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d3ef      	bcc.n	8003b88 <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff94 	bl	8003ada <mcp25625_sendCAN>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <mcp25625_init>:

void mcp25625_init (void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8003bc0:	f240 2276 	movw	r2, #630	; 0x276
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <mcp25625_init+0x1c>)
 8003bc8:	f003 fbc2 	bl	8007350 <memset>
	clearChipSelect();
 8003bcc:	f7ff fe3a 	bl	8003844 <clearChipSelect>
	mcp25625_reset();
 8003bd0:	f7ff fe50 	bl	8003874 <mcp25625_reset>
}
 8003bd4:	bf00      	nop
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000294 	.word	0x20000294

08003bdc <CAN_configure>:

void CAN_configure()
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value      = 0xC0;
 8003be2:	23c0      	movs	r3, #192	; 0xc0
 8003be4:	733b      	strb	r3, [r7, #12]
	c2.value      = 0x89;
 8003be6:	2389      	movs	r3, #137	; 0x89
 8003be8:	723b      	strb	r3, [r7, #8]
	c3.value      = 0x04;
 8003bea:	2304      	movs	r3, #4
 8003bec:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8003bee:	2308      	movs	r3, #8
 8003bf0:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8003bf2:	f7ff ffe3 	bl	8003bbc <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);				// Configuration 1 register
 8003bf6:	7b3b      	ldrb	r3, [r7, #12]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	202a      	movs	r0, #42	; 0x2a
 8003bfc:	f7ff fe5e 	bl	80038bc <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);				// Configuration 2 register
 8003c00:	7a3b      	ldrb	r3, [r7, #8]
 8003c02:	4619      	mov	r1, r3
 8003c04:	2029      	movs	r0, #41	; 0x29
 8003c06:	f7ff fe59 	bl	80038bc <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);				// Configuration 3 register
 8003c0a:	793b      	ldrb	r3, [r7, #4]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	2028      	movs	r0, #40	; 0x28
 8003c10:	f7ff fe54 	bl	80038bc <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);		// CAN control register
 8003c14:	783b      	ldrb	r3, [r7, #0]
 8003c16:	4619      	mov	r1, r3
 8003c18:	200f      	movs	r0, #15
 8003c1a:	f7ff fe4f 	bl	80038bc <mcp25625_writeRegister>
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <set_int_enable+0xb0>)
 8003c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01c      	beq.n	8003c76 <set_int_enable+0x4e>
        if (enable)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8003c42:	2302      	movs	r3, #2
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e001      	b.n	8003c4c <set_int_enable+0x24>
        else
            tmp = 0x00;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <set_int_enable+0xb0>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	7818      	ldrb	r0, [r3, #0]
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <set_int_enable+0xb0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	7c59      	ldrb	r1, [r3, #17]
 8003c58:	f107 030f 	add.w	r3, r7, #15
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f001 ff11 	bl	8005a84 <mpu9255_write>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <set_int_enable+0x46>
            return -1;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	e030      	b.n	8003cd0 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <set_int_enable+0xb0>)
 8003c72:	745a      	strb	r2, [r3, #17]
 8003c74:	e02b      	b.n	8003cce <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <set_int_enable+0xb0>)
 8003c78:	7a9b      	ldrb	r3, [r3, #10]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <set_int_enable+0x5c>
            return -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e025      	b.n	8003cd0 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <set_int_enable+0x6e>
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <set_int_enable+0xb0>)
 8003c8c:	7c5b      	ldrb	r3, [r3, #17]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <set_int_enable+0x6e>
            return 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e01c      	b.n	8003cd0 <set_int_enable+0xa8>
        if (enable)
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e001      	b.n	8003ca6 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <set_int_enable+0xb0>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	7818      	ldrb	r0, [r3, #0]
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <set_int_enable+0xb0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	7c59      	ldrb	r1, [r3, #17]
 8003cb2:	f107 030f 	add.w	r3, r7, #15
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f001 fee4 	bl	8005a84 <mpu9255_write>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <set_int_enable+0xa0>
            return -1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e003      	b.n	8003cd0 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <set_int_enable+0xb0>)
 8003ccc:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000014 	.word	0x20000014

08003cdc <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003ce8:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <mpu_init+0x180>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	7818      	ldrb	r0, [r3, #0]
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <mpu_init+0x180>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	7d59      	ldrb	r1, [r3, #21]
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f001 fec3 	bl	8005a84 <mpu9255_write>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <mpu_init+0x2e>
        return -1;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e0a3      	b.n	8003e52 <mpu_init+0x176>
    delay_ms(100);
 8003d0a:	2064      	movs	r0, #100	; 0x64
 8003d0c:	f001 ff50 	bl	8005bb0 <mpu9255_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8003d10:	2300      	movs	r3, #0
 8003d12:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003d14:	4b51      	ldr	r3, [pc, #324]	; (8003e5c <mpu_init+0x180>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	7818      	ldrb	r0, [r3, #0]
 8003d1a:	4b50      	ldr	r3, [pc, #320]	; (8003e5c <mpu_init+0x180>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	7d59      	ldrb	r1, [r3, #21]
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	2201      	movs	r2, #1
 8003d26:	f001 fead 	bl	8005a84 <mpu9255_write>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <mpu_init+0x5a>
        return -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	e08d      	b.n	8003e52 <mpu_init+0x176>

   st.chip_cfg.accel_half = 0;
 8003d36:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <mpu_init+0x180>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8003d3c:	2348      	movs	r3, #72	; 0x48
 8003d3e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <mpu_init+0x180>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	7818      	ldrb	r0, [r3, #0]
 8003d46:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <mpu_init+0x180>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	7a19      	ldrb	r1, [r3, #8]
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	2201      	movs	r2, #1
 8003d52:	f001 fe97 	bl	8005a84 <mpu9255_write>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <mpu_init+0x86>
        return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d60:	e077      	b.n	8003e52 <mpu_init+0x176>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8003d62:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <mpu_init+0x180>)
 8003d64:	22ff      	movs	r2, #255	; 0xff
 8003d66:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8003d68:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <mpu_init+0x180>)
 8003d6a:	22ff      	movs	r2, #255	; 0xff
 8003d6c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	; (8003e5c <mpu_init+0x180>)
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003d74:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <mpu_init+0x180>)
 8003d76:	22ff      	movs	r2, #255	; 0xff
 8003d78:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <mpu_init+0x180>)
 8003d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d80:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <mpu_init+0x180>)
 8003d84:	22ff      	movs	r2, #255	; 0xff
 8003d86:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <mpu_init+0x180>)
 8003d8a:	22ff      	movs	r2, #255	; 0xff
 8003d8c:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8003d8e:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <mpu_init+0x180>)
 8003d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <mpu_init+0x180>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <mpu_init+0x180>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8003da4:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <mpu_init+0x180>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <mpu_init+0x180>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <mpu_init+0x180>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8003db8:	220c      	movs	r2, #12
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4828      	ldr	r0, [pc, #160]	; (8003e60 <mpu_init+0x184>)
 8003dbe:	f003 fac7 	bl	8007350 <memset>
    st.chip_cfg.dmp_on = 0;
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <mpu_init+0x180>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <mpu_init+0x180>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <mpu_init+0x180>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8003dd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ddc:	f000 f9e4 	bl	80041a8 <mpu_set_gyro_fsr>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <mpu_init+0x110>
        return -1;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e032      	b.n	8003e52 <mpu_init+0x176>
    if (mpu_set_accel_fsr(8))
 8003dec:	2008      	movs	r0, #8
 8003dee:	f000 fa69 	bl	80042c4 <mpu_set_accel_fsr>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <mpu_init+0x122>
        return -1;
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	e029      	b.n	8003e52 <mpu_init+0x176>
    if (mpu_set_lpf(188))
 8003dfe:	20bc      	movs	r0, #188	; 0xbc
 8003e00:	f000 fac8 	bl	8004394 <mpu_set_lpf>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <mpu_init+0x134>
        return -1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	e020      	b.n	8003e52 <mpu_init+0x176>
    if (mpu_set_sample_rate(100))
 8003e10:	2064      	movs	r0, #100	; 0x64
 8003e12:	f000 fb0d 	bl	8004430 <mpu_set_sample_rate>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <mpu_init+0x146>
        return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	e017      	b.n	8003e52 <mpu_init+0x176>
    if (mpu_configure_fifo(0))
 8003e22:	2000      	movs	r0, #0
 8003e24:	f000 fbb2 	bl	800458c <mpu_configure_fifo>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <mpu_init+0x158>
        return -1;
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e00e      	b.n	8003e52 <mpu_init+0x176>
    if (int_param)
        reg_int_cb(int_param);
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 8003e34:	f000 ff5a 	bl	8004cec <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8003e38:	200a      	movs	r0, #10
 8003e3a:	f000 fb67 	bl	800450c <mpu_set_compass_sample_rate>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <mpu_init+0x16e>
        return -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	e003      	b.n	8003e52 <mpu_init+0x176>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f000 fbf0 	bl	8004630 <mpu_set_sensors>
    return 0;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000014 	.word	0x20000014
 8003e60:	2000002a 	.word	0x2000002a

08003e64 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b28      	cmp	r3, #40	; 0x28
 8003e72:	d902      	bls.n	8003e7a <mpu_lp_accel_mode+0x16>
        return -1;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	e08c      	b.n	8003f94 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11c      	bne.n	8003eba <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f000 fd79 	bl	8004978 <mpu_set_int_latched>
        tmp[0] = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8003e8a:	2307      	movs	r3, #7
 8003e8c:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8003e8e:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	7818      	ldrb	r0, [r3, #0]
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	7d59      	ldrb	r1, [r3, #21]
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f001 fdf0 	bl	8005a84 <mpu9255_write>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <mpu_lp_accel_mode+0x4c>
            return -1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e071      	b.n	8003f94 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	751a      	strb	r2, [r3, #20]
        return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e06c      	b.n	8003f94 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f000 fd5c 	bl	8004978 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	733b      	strb	r3, [r7, #12]
 8003eca:	e032      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d102      	bne.n	8003ed8 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	733b      	strb	r3, [r7, #12]
 8003ed6:	e02c      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d802      	bhi.n	8003ee4 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8003ede:	2304      	movs	r3, #4
 8003ee0:	733b      	strb	r3, [r7, #12]
 8003ee2:	e026      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b0a      	cmp	r3, #10
 8003ee8:	d802      	bhi.n	8003ef0 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8003eea:	2305      	movs	r3, #5
 8003eec:	733b      	strb	r3, [r7, #12]
 8003eee:	e020      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	2b14      	cmp	r3, #20
 8003ef4:	d802      	bhi.n	8003efc <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8003ef6:	2306      	movs	r3, #6
 8003ef8:	733b      	strb	r3, [r7, #12]
 8003efa:	e01a      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b28      	cmp	r3, #40	; 0x28
 8003f00:	d802      	bhi.n	8003f08 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8003f02:	2307      	movs	r3, #7
 8003f04:	733b      	strb	r3, [r7, #12]
 8003f06:	e014      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	2b50      	cmp	r3, #80	; 0x50
 8003f0c:	d802      	bhi.n	8003f14 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 8003f0e:	2308      	movs	r3, #8
 8003f10:	733b      	strb	r3, [r7, #12]
 8003f12:	e00e      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2ba0      	cmp	r3, #160	; 0xa0
 8003f18:	d802      	bhi.n	8003f20 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8003f1a:	2309      	movs	r3, #9
 8003f1c:	733b      	strb	r3, [r7, #12]
 8003f1e:	e008      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f26:	d802      	bhi.n	8003f2e <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8003f28:	230a      	movs	r3, #10
 8003f2a:	733b      	strb	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 8003f2e:	230b      	movs	r3, #11
 8003f30:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	7818      	ldrb	r0, [r3, #0]
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	7a59      	ldrb	r1, [r3, #9]
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	2201      	movs	r2, #1
 8003f44:	f001 fd9e 	bl	8005a84 <mpu9255_write>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <mpu_lp_accel_mode+0xf0>
        return -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	e01f      	b.n	8003f94 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 8003f54:	2320      	movs	r3, #32
 8003f56:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	7818      	ldrb	r0, [r3, #0]
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	7d59      	ldrb	r1, [r3, #21]
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f001 fd8b 	bl	8005a84 <mpu9255_write>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <mpu_lp_accel_mode+0x116>
        return -1;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	e00c      	b.n	8003f94 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <mpu_lp_accel_mode+0x138>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f000 fafd 	bl	800458c <mpu_configure_fifo>

    return 0;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000014 	.word	0x20000014

08003fa0 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003fa6:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003fa8:	7a9b      	ldrb	r3, [r3, #10]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <mpu_reset_fifo+0x14>
        return -1;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	e0f1      	b.n	8004198 <mpu_reset_fifo+0x1f8>

    data = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003fb8:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	7818      	ldrb	r0, [r3, #0]
 8003fbe:	4b78      	ldr	r3, [pc, #480]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	7c59      	ldrb	r1, [r3, #17]
 8003fc4:	1dfb      	adds	r3, r7, #7
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f001 fd5c 	bl	8005a84 <mpu9255_write>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <mpu_reset_fifo+0x38>
        return -1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	e0df      	b.n	8004198 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8003fd8:	4b71      	ldr	r3, [pc, #452]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	7818      	ldrb	r0, [r3, #0]
 8003fde:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	7959      	ldrb	r1, [r3, #5]
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f001 fd4c 	bl	8005a84 <mpu9255_write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <mpu_reset_fifo+0x58>
        return -1;
 8003ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff6:	e0cf      	b.n	8004198 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003ff8:	4b69      	ldr	r3, [pc, #420]	; (80041a0 <mpu_reset_fifo+0x200>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	7818      	ldrb	r0, [r3, #0]
 8003ffe:	4b68      	ldr	r3, [pc, #416]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	7919      	ldrb	r1, [r3, #4]
 8004004:	1dfb      	adds	r3, r7, #7
 8004006:	2201      	movs	r2, #1
 8004008:	f001 fd3c 	bl	8005a84 <mpu9255_write>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <mpu_reset_fifo+0x78>
        return -1;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e0bf      	b.n	8004198 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8004018:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <mpu_reset_fifo+0x200>)
 800401a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d05c      	beq.n	80040dc <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8004022:	230c      	movs	r3, #12
 8004024:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004026:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	7818      	ldrb	r0, [r3, #0]
 800402c:	4b5c      	ldr	r3, [pc, #368]	; (80041a0 <mpu_reset_fifo+0x200>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	7919      	ldrb	r1, [r3, #4]
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	2201      	movs	r2, #1
 8004036:	f001 fd25 	bl	8005a84 <mpu9255_write>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <mpu_reset_fifo+0xa6>
            return -1;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	e0a8      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8004046:	2032      	movs	r0, #50	; 0x32
 8004048:	f001 fdb2 	bl	8005bb0 <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800404c:	23c0      	movs	r3, #192	; 0xc0
 800404e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004052:	7a9b      	ldrb	r3, [r3, #10]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f043 0320 	orr.w	r3, r3, #32
 8004062:	b2db      	uxtb	r3, r3
 8004064:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004066:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	7818      	ldrb	r0, [r3, #0]
 800406c:	4b4c      	ldr	r3, [pc, #304]	; (80041a0 <mpu_reset_fifo+0x200>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	7919      	ldrb	r1, [r3, #4]
 8004072:	1dfb      	adds	r3, r7, #7
 8004074:	2201      	movs	r2, #1
 8004076:	f001 fd05 	bl	8005a84 <mpu9255_write>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <mpu_reset_fifo+0xe6>
            return -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	e088      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004088:	7c5b      	ldrb	r3, [r3, #17]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800408e:	2302      	movs	r3, #2
 8004090:	71fb      	strb	r3, [r7, #7]
 8004092:	e001      	b.n	8004098 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <mpu_reset_fifo+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	7818      	ldrb	r0, [r3, #0]
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <mpu_reset_fifo+0x200>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	7c59      	ldrb	r1, [r3, #17]
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	2201      	movs	r2, #1
 80040a8:	f001 fcec 	bl	8005a84 <mpu9255_write>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <mpu_reset_fifo+0x118>
            return -1;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e06f      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        data = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80040bc:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <mpu_reset_fifo+0x200>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	7818      	ldrb	r0, [r3, #0]
 80040c2:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <mpu_reset_fifo+0x200>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	7959      	ldrb	r1, [r3, #5]
 80040c8:	1dfb      	adds	r3, r7, #7
 80040ca:	2201      	movs	r2, #1
 80040cc:	f001 fcda 	bl	8005a84 <mpu9255_write>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d05f      	beq.n	8004196 <mpu_reset_fifo+0x1f6>
            return -1;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e05d      	b.n	8004198 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 80040dc:	2304      	movs	r3, #4
 80040de:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <mpu_reset_fifo+0x200>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	7818      	ldrb	r0, [r3, #0]
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <mpu_reset_fifo+0x200>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	7919      	ldrb	r1, [r3, #4]
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	2201      	movs	r2, #1
 80040f0:	f001 fcc8 	bl	8005a84 <mpu9255_write>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <mpu_reset_fifo+0x160>
            return -1;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	e04b      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004102:	7c9b      	ldrb	r3, [r3, #18]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <mpu_reset_fifo+0x174>
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <mpu_reset_fifo+0x200>)
 800410a:	7a9b      	ldrb	r3, [r3, #10]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	e001      	b.n	800411e <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800411a:	2360      	movs	r3, #96	; 0x60
 800411c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	7818      	ldrb	r0, [r3, #0]
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	7919      	ldrb	r1, [r3, #4]
 800412a:	1dfb      	adds	r3, r7, #7
 800412c:	2201      	movs	r2, #1
 800412e:	f001 fca9 	bl	8005a84 <mpu9255_write>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <mpu_reset_fifo+0x19e>
            return -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e02c      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800413e:	2032      	movs	r0, #50	; 0x32
 8004140:	f001 fd36 	bl	8005bb0 <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004146:	7c5b      	ldrb	r3, [r3, #17]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 800414c:	2301      	movs	r3, #1
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	e001      	b.n	8004156 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	7818      	ldrb	r0, [r3, #0]
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <mpu_reset_fifo+0x200>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	7c59      	ldrb	r1, [r3, #17]
 8004162:	1dfb      	adds	r3, r7, #7
 8004164:	2201      	movs	r2, #1
 8004166:	f001 fc8d 	bl	8005a84 <mpu9255_write>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <mpu_reset_fifo+0x1d6>
            return -1;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
 8004174:	e010      	b.n	8004198 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <mpu_reset_fifo+0x200>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	7818      	ldrb	r0, [r3, #0]
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <mpu_reset_fifo+0x200>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	7959      	ldrb	r1, [r3, #5]
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <mpu_reset_fifo+0x204>)
 8004184:	2201      	movs	r2, #1
 8004186:	f001 fc7d 	bl	8005a84 <mpu9255_write>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <mpu_reset_fifo+0x1f6>
            return -1;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	e000      	b.n	8004198 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000014 	.word	0x20000014
 80041a4:	20000024 	.word	0x20000024

080041a8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <mpu_set_gyro_fsr+0xa4>)
 80041b4:	7a9b      	ldrb	r3, [r3, #10]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <mpu_set_gyro_fsr+0x18>
        return -1;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	e041      	b.n	8004244 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80041c6:	d017      	beq.n	80041f8 <mpu_set_gyro_fsr+0x50>
 80041c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80041cc:	dc17      	bgt.n	80041fe <mpu_set_gyro_fsr+0x56>
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	d00e      	beq.n	80041f2 <mpu_set_gyro_fsr+0x4a>
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	dc11      	bgt.n	80041fe <mpu_set_gyro_fsr+0x56>
 80041da:	2bfa      	cmp	r3, #250	; 0xfa
 80041dc:	d003      	beq.n	80041e6 <mpu_set_gyro_fsr+0x3e>
 80041de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041e2:	d003      	beq.n	80041ec <mpu_set_gyro_fsr+0x44>
 80041e4:	e00b      	b.n	80041fe <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ea:	e00b      	b.n	8004204 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 80041ec:	2308      	movs	r3, #8
 80041ee:	73fb      	strb	r3, [r7, #15]
        break;
 80041f0:	e008      	b.n	8004204 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 80041f2:	2310      	movs	r3, #16
 80041f4:	73fb      	strb	r3, [r7, #15]
        break;
 80041f6:	e005      	b.n	8004204 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80041f8:	2318      	movs	r3, #24
 80041fa:	73fb      	strb	r3, [r7, #15]
        break;
 80041fc:	e002      	b.n	8004204 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e01f      	b.n	8004244 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <mpu_set_gyro_fsr+0xa4>)
 8004206:	7a1a      	ldrb	r2, [r3, #8]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	08db      	lsrs	r3, r3, #3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	429a      	cmp	r2, r3
 8004210:	d101      	bne.n	8004216 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8004212:	2300      	movs	r3, #0
 8004214:	e016      	b.n	8004244 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <mpu_set_gyro_fsr+0xa4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	7818      	ldrb	r0, [r3, #0]
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <mpu_set_gyro_fsr+0xa4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	7999      	ldrb	r1, [r3, #6]
 8004222:	f107 030f 	add.w	r3, r7, #15
 8004226:	2201      	movs	r2, #1
 8004228:	f001 fc2c 	bl	8005a84 <mpu9255_write>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <mpu_set_gyro_fsr+0x90>
        return -1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	e005      	b.n	8004244 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b03      	ldr	r3, [pc, #12]	; (800424c <mpu_set_gyro_fsr+0xa4>)
 8004240:	721a      	strb	r2, [r3, #8]
    return 0;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000014 	.word	0x20000014

08004250 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <mpu_get_accel_fsr+0x70>)
 800425a:	7a5b      	ldrb	r3, [r3, #9]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d81b      	bhi.n	8004298 <mpu_get_accel_fsr+0x48>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <mpu_get_accel_fsr+0x18>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004281 	.word	0x08004281
 8004270:	08004289 	.word	0x08004289
 8004274:	08004291 	.word	0x08004291
    case INV_FSR_2G:
        fsr[0] = 2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
        break;
 800427e:	e00e      	b.n	800429e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	701a      	strb	r2, [r3, #0]
        break;
 8004286:	e00a      	b.n	800429e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2208      	movs	r2, #8
 800428c:	701a      	strb	r2, [r3, #0]
        break;
 800428e:	e006      	b.n	800429e <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2210      	movs	r2, #16
 8004294:	701a      	strb	r2, [r3, #0]
        break;
 8004296:	e002      	b.n	800429e <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	e00a      	b.n	80042b4 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <mpu_get_accel_fsr+0x70>)
 80042a0:	7cdb      	ldrb	r3, [r3, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	701a      	strb	r2, [r3, #0]
    return 0;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000014 	.word	0x20000014

080042c4 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <mpu_set_accel_fsr+0xcc>)
 80042d0:	7a9b      	ldrb	r3, [r3, #10]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <mpu_set_accel_fsr+0x18>
        return -1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	e054      	b.n	8004386 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	3b02      	subs	r3, #2
 80042e0:	2b0e      	cmp	r3, #14
 80042e2:	d82d      	bhi.n	8004340 <mpu_set_accel_fsr+0x7c>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <mpu_set_accel_fsr+0x28>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004329 	.word	0x08004329
 80042f0:	08004341 	.word	0x08004341
 80042f4:	0800432f 	.word	0x0800432f
 80042f8:	08004341 	.word	0x08004341
 80042fc:	08004341 	.word	0x08004341
 8004300:	08004341 	.word	0x08004341
 8004304:	08004335 	.word	0x08004335
 8004308:	08004341 	.word	0x08004341
 800430c:	08004341 	.word	0x08004341
 8004310:	08004341 	.word	0x08004341
 8004314:	08004341 	.word	0x08004341
 8004318:	08004341 	.word	0x08004341
 800431c:	08004341 	.word	0x08004341
 8004320:	08004341 	.word	0x08004341
 8004324:	0800433b 	.word	0x0800433b
    case 2:
        data = INV_FSR_2G << 3;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
        break;
 800432c:	e00b      	b.n	8004346 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800432e:	2308      	movs	r3, #8
 8004330:	73fb      	strb	r3, [r7, #15]
        break;
 8004332:	e008      	b.n	8004346 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8004334:	2310      	movs	r3, #16
 8004336:	73fb      	strb	r3, [r7, #15]
        break;
 8004338:	e005      	b.n	8004346 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800433a:	2318      	movs	r3, #24
 800433c:	73fb      	strb	r3, [r7, #15]
        break;
 800433e:	e002      	b.n	8004346 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	e01f      	b.n	8004386 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <mpu_set_accel_fsr+0xcc>)
 8004348:	7a5a      	ldrb	r2, [r3, #9]
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	08db      	lsrs	r3, r3, #3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	429a      	cmp	r2, r3
 8004352:	d101      	bne.n	8004358 <mpu_set_accel_fsr+0x94>
        return 0;
 8004354:	2300      	movs	r3, #0
 8004356:	e016      	b.n	8004386 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <mpu_set_accel_fsr+0xcc>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	7818      	ldrb	r0, [r3, #0]
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <mpu_set_accel_fsr+0xcc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	79d9      	ldrb	r1, [r3, #7]
 8004364:	f107 030f 	add.w	r3, r7, #15
 8004368:	2201      	movs	r2, #1
 800436a:	f001 fb8b 	bl	8005a84 <mpu9255_write>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <mpu_set_accel_fsr+0xb6>
        return -1;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	e005      	b.n	8004386 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <mpu_set_accel_fsr+0xcc>)
 8004382:	725a      	strb	r2, [r3, #9]
    return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000014 	.word	0x20000014

08004394 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <mpu_set_lpf+0x98>)
 80043a0:	7a9b      	ldrb	r3, [r3, #10]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <mpu_set_lpf+0x18>
        return -1;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e03b      	b.n	8004424 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2bbb      	cmp	r3, #187	; 0xbb
 80043b0:	d902      	bls.n	80043b8 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e019      	b.n	80043ec <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b61      	cmp	r3, #97	; 0x61
 80043bc:	d902      	bls.n	80043c4 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80043be:	2302      	movs	r3, #2
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	e013      	b.n	80043ec <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b29      	cmp	r3, #41	; 0x29
 80043c8:	d902      	bls.n	80043d0 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80043ca:	2303      	movs	r3, #3
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e00d      	b.n	80043ec <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	2b13      	cmp	r3, #19
 80043d4:	d902      	bls.n	80043dc <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80043d6:	2304      	movs	r3, #4
 80043d8:	73fb      	strb	r3, [r7, #15]
 80043da:	e007      	b.n	80043ec <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d902      	bls.n	80043e8 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 80043e2:	2305      	movs	r3, #5
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e001      	b.n	80043ec <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 80043e8:	2306      	movs	r3, #6
 80043ea:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <mpu_set_lpf+0x98>)
 80043ee:	7ada      	ldrb	r2, [r3, #11]
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d101      	bne.n	80043fa <mpu_set_lpf+0x66>
        return 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e014      	b.n	8004424 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <mpu_set_lpf+0x98>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	7818      	ldrb	r0, [r3, #0]
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <mpu_set_lpf+0x98>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	7899      	ldrb	r1, [r3, #2]
 8004406:	f107 030f 	add.w	r3, r7, #15
 800440a:	2201      	movs	r2, #1
 800440c:	f001 fb3a 	bl	8005a84 <mpu9255_write>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <mpu_set_lpf+0x88>
        return -1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e003      	b.n	8004424 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	4b03      	ldr	r3, [pc, #12]	; (800442c <mpu_set_lpf+0x98>)
 8004420:	72da      	strb	r2, [r3, #11]
    return 0;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000014 	.word	0x20000014

08004430 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <mpu_set_sample_rate+0xd8>)
 800443c:	7a9b      	ldrb	r3, [r3, #10]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <mpu_set_sample_rate+0x18>
        return -1;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	e05b      	b.n	8004500 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <mpu_set_sample_rate+0xd8>)
 800444a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <mpu_set_sample_rate+0x28>
        return -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e053      	b.n	8004500 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <mpu_set_sample_rate+0xd8>)
 800445a:	7d1b      	ldrb	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <mpu_set_sample_rate+0x48>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b28      	cmp	r3, #40	; 0x28
 800446a:	d805      	bhi.n	8004478 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fcf8 	bl	8003e64 <mpu_lp_accel_mode>
                return 0;
 8004474:	2300      	movs	r3, #0
 8004476:	e043      	b.n	8004500 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8004478:	2000      	movs	r0, #0
 800447a:	f7ff fcf3 	bl	8003e64 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d802      	bhi.n	800448a <mpu_set_sample_rate+0x5a>
            rate = 4;
 8004484:	2304      	movs	r3, #4
 8004486:	80fb      	strh	r3, [r7, #6]
 8004488:	e006      	b.n	8004498 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004490:	d902      	bls.n	8004498 <mpu_set_sample_rate+0x68>
            rate = 1000;
 8004492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004496:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800449e:	fb92 f3f3 	sdiv	r3, r2, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <mpu_set_sample_rate+0xd8>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	7818      	ldrb	r0, [r3, #0]
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <mpu_set_sample_rate+0xd8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	7859      	ldrb	r1, [r3, #1]
 80044b6:	f107 030f 	add.w	r3, r7, #15
 80044ba:	2201      	movs	r2, #1
 80044bc:	f001 fae2 	bl	8005a84 <mpu9255_write>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <mpu_set_sample_rate+0x9c>
            return -1;
 80044c6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ca:	e019      	b.n	8004500 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	3301      	adds	r3, #1
 80044d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80044d8:	b29a      	uxth	r2, r3
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <mpu_set_sample_rate+0xd8>)
 80044dc:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <mpu_set_sample_rate+0xd8>)
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	bf28      	it	cs
 80044e6:	2364      	movcs	r3, #100	; 0x64
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f80e 	bl	800450c <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <mpu_set_sample_rate+0xd8>)
 80044f2:	89db      	ldrh	r3, [r3, #14]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff4b 	bl	8004394 <mpu_set_lpf>
        return 0;
 80044fe:	2300      	movs	r3, #0
    }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000014 	.word	0x20000014

0800450c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <mpu_set_compass_sample_rate+0x20>
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 800451e:	89db      	ldrh	r3, [r3, #14]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	429a      	cmp	r2, r3
 8004524:	d802      	bhi.n	800452c <mpu_set_compass_sample_rate+0x20>
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	2b64      	cmp	r3, #100	; 0x64
 800452a:	d902      	bls.n	8004532 <mpu_set_compass_sample_rate+0x26>
        return -1;
 800452c:	f04f 33ff 	mov.w	r3, #4294967295
 8004530:	e026      	b.n	8004580 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 8004534:	89da      	ldrh	r2, [r3, #14]
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	b29b      	uxth	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	7818      	ldrb	r0, [r3, #0]
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8004554:	f107 030f 	add.w	r3, r7, #15
 8004558:	2201      	movs	r2, #1
 800455a:	f001 fa93 	bl	8005a84 <mpu9255_write>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	e00a      	b.n	8004580 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 800456c:	89db      	ldrh	r3, [r3, #14]
 800456e:	461a      	mov	r2, r3
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	3301      	adds	r3, #1
 8004574:	fb92 f3f3 	sdiv	r3, r2, r3
 8004578:	b29a      	uxth	r2, r3
 800457a:	4b03      	ldr	r3, [pc, #12]	; (8004588 <mpu_set_compass_sample_rate+0x7c>)
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 800457e:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000014 	.word	0x20000014

0800458c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <mpu_configure_fifo+0xa0>)
 80045a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <mpu_configure_fifo+0x24>
        return 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e038      	b.n	8004622 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <mpu_configure_fifo+0xa0>)
 80045b2:	7a9b      	ldrb	r3, [r3, #10]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <mpu_configure_fifo+0x32>
            return -1;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	e031      	b.n	8004622 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80045be:	4b1b      	ldr	r3, [pc, #108]	; (800462c <mpu_configure_fifo+0xa0>)
 80045c0:	7c1b      	ldrb	r3, [r3, #16]
 80045c2:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <mpu_configure_fifo+0xa0>)
 80045c6:	7a9a      	ldrb	r2, [r3, #10]
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <mpu_configure_fifo+0xa0>)
 80045d0:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <mpu_configure_fifo+0xa0>)
 80045d4:	7c1b      	ldrb	r3, [r3, #16]
 80045d6:	79fa      	ldrb	r2, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d003      	beq.n	80045e4 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e001      	b.n	80045e8 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <mpu_configure_fifo+0x6a>
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <mpu_configure_fifo+0xa0>)
 80045f0:	7d1b      	ldrb	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7ff fb16 	bl	8003c28 <set_int_enable>
 80045fc:	e002      	b.n	8004604 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80045fe:	2000      	movs	r0, #0
 8004600:	f7ff fb12 	bl	8003c28 <set_int_enable>
        if (sensors) {
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800460a:	f7ff fcc9 	bl	8003fa0 <mpu_reset_fifo>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <mpu_configure_fifo+0xa0>)
 8004616:	7afb      	ldrb	r3, [r7, #11]
 8004618:	7413      	strb	r3, [r2, #16]
                return -1;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e000      	b.n	8004622 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000014 	.word	0x20000014

08004630 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e007      	b.n	800465a <mpu_set_sensors+0x2a>
    else if (sensors)
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <mpu_set_sensors+0x26>
        data = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e001      	b.n	800465a <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8004656:	2340      	movs	r3, #64	; 0x40
 8004658:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <mpu_set_sensors+0x1b8>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	7818      	ldrb	r0, [r3, #0]
 8004660:	4b61      	ldr	r3, [pc, #388]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	7d59      	ldrb	r1, [r3, #21]
 8004666:	f107 030f 	add.w	r3, r7, #15
 800466a:	2201      	movs	r2, #1
 800466c:	f001 fa0a 	bl	8005a84 <mpu9255_write>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8004676:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004678:	2200      	movs	r2, #0
 800467a:	729a      	strb	r2, [r3, #10]
        return -1;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	e0ae      	b.n	80047e0 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	b2da      	uxtb	r2, r3
 800468a:	4b57      	ldr	r3, [pc, #348]	; (80047e8 <mpu_set_sensors+0x1b8>)
 800468c:	731a      	strb	r2, [r3, #12]

    data = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	f043 0304 	orr.w	r3, r3, #4
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	7818      	ldrb	r0, [r3, #0]
 80046e8:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	7d99      	ldrb	r1, [r3, #22]
 80046ee:	f107 030f 	add.w	r3, r7, #15
 80046f2:	2201      	movs	r2, #1
 80046f4:	f001 f9c6 	bl	8005a84 <mpu9255_write>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80046fe:	4b3a      	ldr	r3, [pc, #232]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004700:	2200      	movs	r2, #0
 8004702:	729a      	strb	r2, [r3, #10]
        return -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	e06a      	b.n	80047e0 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <mpu_set_sensors+0xec>
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	2b08      	cmp	r3, #8
 8004714:	d002      	beq.n	800471c <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8004716:	2000      	movs	r0, #0
 8004718:	f000 f92e 	bl	8004978 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <mpu_set_sensors+0x1b8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	7919      	ldrb	r1, [r3, #4]
 8004728:	f107 030e 	add.w	r3, r7, #14
 800472c:	2201      	movs	r2, #1
 800472e:	f001 f9f5 	bl	8005b1c <mpu9255_read>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <mpu_set_sensors+0x10e>
        return -1;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	e050      	b.n	80047e0 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8004748:	2311      	movs	r3, #17
 800474a:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	f043 0320 	orr.w	r3, r3, #32
 8004752:	b2db      	uxtb	r3, r3
 8004754:	73bb      	strb	r3, [r7, #14]
 8004756:	e006      	b.n	8004766 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8004758:	2310      	movs	r3, #16
 800475a:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 800475c:	7bbb      	ldrb	r3, [r7, #14]
 800475e:	f023 0320 	bic.w	r3, r3, #32
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004776:	b2db      	uxtb	r3, r3
 8004778:	73bb      	strb	r3, [r7, #14]
 800477a:	e004      	b.n	8004786 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004782:	b2db      	uxtb	r3, r3
 8004784:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <mpu_set_sensors+0x1b8>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	7818      	ldrb	r0, [r3, #0]
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <mpu_set_sensors+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8004794:	f107 030f 	add.w	r3, r7, #15
 8004798:	2201      	movs	r2, #1
 800479a:	f001 f973 	bl	8005a84 <mpu9255_write>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <mpu_set_sensors+0x17a>
        return -1;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	e01a      	b.n	80047e0 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	7818      	ldrb	r0, [r3, #0]
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	7919      	ldrb	r1, [r3, #4]
 80047b6:	f107 030e 	add.w	r3, r7, #14
 80047ba:	2201      	movs	r2, #1
 80047bc:	f001 f962 	bl	8005a84 <mpu9255_write>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <mpu_set_sensors+0x19c>
        return -1;
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	e009      	b.n	80047e0 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80047cc:	4a06      	ldr	r2, [pc, #24]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <mpu_set_sensors+0x1b8>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80047d8:	2032      	movs	r0, #50	; 0x32
 80047da:	f001 f9e9 	bl	8005bb0 <mpu9255_delay_ms>
    return 0;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000014 	.word	0x20000014

080047ec <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <mpu_set_bypass+0x188>)
 80047f8:	7c9b      	ldrb	r3, [r3, #18]
 80047fa:	79fa      	ldrb	r2, [r7, #7]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d101      	bne.n	8004804 <mpu_set_bypass+0x18>
        return 0;
 8004800:	2300      	movs	r3, #0
 8004802:	e0b2      	b.n	800496a <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d050      	beq.n	80048ac <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800480a:	4b5a      	ldr	r3, [pc, #360]	; (8004974 <mpu_set_bypass+0x188>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	7818      	ldrb	r0, [r3, #0]
 8004810:	4b58      	ldr	r3, [pc, #352]	; (8004974 <mpu_set_bypass+0x188>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	7919      	ldrb	r1, [r3, #4]
 8004816:	f107 030f 	add.w	r3, r7, #15
 800481a:	2201      	movs	r2, #1
 800481c:	f001 f97e 	bl	8005b1c <mpu9255_read>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <mpu_set_bypass+0x40>
            return -1;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	e09e      	b.n	800496a <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	b2db      	uxtb	r3, r3
 8004834:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8004836:	4b4f      	ldr	r3, [pc, #316]	; (8004974 <mpu_set_bypass+0x188>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	7818      	ldrb	r0, [r3, #0]
 800483c:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <mpu_set_bypass+0x188>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	7919      	ldrb	r1, [r3, #4]
 8004842:	f107 030f 	add.w	r3, r7, #15
 8004846:	2201      	movs	r2, #1
 8004848:	f001 f91c 	bl	8005a84 <mpu9255_write>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <mpu_set_bypass+0x6c>
            return -1;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e088      	b.n	800496a <mpu_set_bypass+0x17e>
        delay_ms(3);
 8004858:	2003      	movs	r0, #3
 800485a:	f001 f9a9 	bl	8005bb0 <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 800485e:	2302      	movs	r3, #2
 8004860:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8004862:	4b44      	ldr	r3, [pc, #272]	; (8004974 <mpu_set_bypass+0x188>)
 8004864:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004872:	b2db      	uxtb	r3, r3
 8004874:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8004876:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <mpu_set_bypass+0x188>)
 8004878:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004886:	b2db      	uxtb	r3, r3
 8004888:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800488a:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <mpu_set_bypass+0x188>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	7818      	ldrb	r0, [r3, #0]
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <mpu_set_bypass+0x188>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	7dd9      	ldrb	r1, [r3, #23]
 8004896:	f107 030f 	add.w	r3, r7, #15
 800489a:	2201      	movs	r2, #1
 800489c:	f001 f8f2 	bl	8005a84 <mpu9255_write>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d05d      	beq.n	8004962 <mpu_set_bypass+0x176>
            return -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	e05e      	b.n	800496a <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80048ac:	4b31      	ldr	r3, [pc, #196]	; (8004974 <mpu_set_bypass+0x188>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	7818      	ldrb	r0, [r3, #0]
 80048b2:	4b30      	ldr	r3, [pc, #192]	; (8004974 <mpu_set_bypass+0x188>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	7919      	ldrb	r1, [r3, #4]
 80048b8:	f107 030f 	add.w	r3, r7, #15
 80048bc:	2201      	movs	r2, #1
 80048be:	f001 f92d 	bl	8005b1c <mpu9255_read>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <mpu_set_bypass+0xe2>
            return -1;
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
 80048cc:	e04d      	b.n	800496a <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <mpu_set_bypass+0x188>)
 80048d0:	7a9b      	ldrb	r3, [r3, #10]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e004      	b.n	80048f0 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	f023 0320 	bic.w	r3, r3, #32
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80048f0:	4b20      	ldr	r3, [pc, #128]	; (8004974 <mpu_set_bypass+0x188>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	7818      	ldrb	r0, [r3, #0]
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <mpu_set_bypass+0x188>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	7919      	ldrb	r1, [r3, #4]
 80048fc:	f107 030f 	add.w	r3, r7, #15
 8004900:	2201      	movs	r2, #1
 8004902:	f001 f8bf 	bl	8005a84 <mpu9255_write>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <mpu_set_bypass+0x126>
            return -1;
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	e02b      	b.n	800496a <mpu_set_bypass+0x17e>
        delay_ms(3);
 8004912:	2003      	movs	r0, #3
 8004914:	f001 f94c 	bl	8005bb0 <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <mpu_set_bypass+0x188>)
 800491a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e001      	b.n	800492c <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <mpu_set_bypass+0x188>)
 800492e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800493c:	b2db      	uxtb	r3, r3
 800493e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <mpu_set_bypass+0x188>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	7818      	ldrb	r0, [r3, #0]
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <mpu_set_bypass+0x188>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	7dd9      	ldrb	r1, [r3, #23]
 800494c:	f107 030f 	add.w	r3, r7, #15
 8004950:	2201      	movs	r2, #1
 8004952:	f001 f897 	bl	8005a84 <mpu9255_write>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <mpu_set_bypass+0x176>
            return -1;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	e003      	b.n	800496a <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <mpu_set_bypass+0x188>)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	7493      	strb	r3, [r2, #18]
    return 0;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000014 	.word	0x20000014

08004978 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8004982:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <mpu_set_int_latched+0x84>)
 8004984:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004988:	79fa      	ldrb	r2, [r7, #7]
 800498a:	429a      	cmp	r2, r3
 800498c:	d101      	bne.n	8004992 <mpu_set_int_latched+0x1a>
        return 0;
 800498e:	2300      	movs	r3, #0
 8004990:	e030      	b.n	80049f4 <mpu_set_int_latched+0x7c>

    if (enable)
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8004998:	2330      	movs	r3, #48	; 0x30
 800499a:	73fb      	strb	r3, [r7, #15]
 800499c:	e001      	b.n	80049a2 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <mpu_set_int_latched+0x84>)
 80049a4:	7c9b      	ldrb	r3, [r3, #18]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <mpu_set_int_latched+0x84>)
 80049b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <mpu_set_int_latched+0x84>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	7818      	ldrb	r0, [r3, #0]
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <mpu_set_int_latched+0x84>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	7dd9      	ldrb	r1, [r3, #23]
 80049d4:	f107 030f 	add.w	r3, r7, #15
 80049d8:	2201      	movs	r2, #1
 80049da:	f001 f853 	bl	8005a84 <mpu9255_write>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <mpu_set_int_latched+0x72>
        return -1;
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	e004      	b.n	80049f4 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <mpu_set_int_latched+0x84>)
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000014 	.word	0x20000014

08004a00 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	603a      	str	r2, [r7, #0]
 8004a0a:	80fb      	strh	r3, [r7, #6]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <mpu_write_mem+0x1c>
        return -1;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1a:	e03d      	b.n	8004a98 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004a1c:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a1e:	7a9b      	ldrb	r3, [r3, #10]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <mpu_write_mem+0x2a>
        return -1;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	e036      	b.n	8004a98 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	88bb      	ldrh	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a44:	6852      	ldr	r2, [r2, #4]
 8004a46:	8952      	ldrh	r2, [r2, #10]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	dd02      	ble.n	8004a52 <mpu_write_mem+0x52>
        return -1;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	e022      	b.n	8004a98 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	7818      	ldrb	r0, [r3, #0]
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	7ed9      	ldrb	r1, [r3, #27]
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	2202      	movs	r2, #2
 8004a64:	f001 f80e 	bl	8005a84 <mpu9255_write>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <mpu_write_mem+0x74>
        return -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a72:	e011      	b.n	8004a98 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	7818      	ldrb	r0, [r3, #0]
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <mpu_write_mem+0xa0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	7e19      	ldrb	r1, [r3, #24]
 8004a80:	88bb      	ldrh	r3, [r7, #4]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f000 fffd 	bl	8005a84 <mpu9255_write>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <mpu_write_mem+0x96>
        return -1;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	e000      	b.n	8004a98 <mpu_write_mem+0x98>
    return 0;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000014 	.word	0x20000014

08004aa4 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	603a      	str	r2, [r7, #0]
 8004aae:	80fb      	strh	r3, [r7, #6]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <mpu_read_mem+0x1c>
        return -1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	e03d      	b.n	8004b3c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8004ac0:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <mpu_read_mem+0xa0>)
 8004ac2:	7a9b      	ldrb	r3, [r3, #10]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <mpu_read_mem+0x2a>
        return -1;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	e036      	b.n	8004b3c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8004ade:	7b7b      	ldrb	r3, [r7, #13]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	88bb      	ldrh	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <mpu_read_mem+0xa0>)
 8004ae8:	6852      	ldr	r2, [r2, #4]
 8004aea:	8952      	ldrh	r2, [r2, #10]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	dd02      	ble.n	8004af6 <mpu_read_mem+0x52>
        return -1;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	e022      	b.n	8004b3c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <mpu_read_mem+0xa0>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	7818      	ldrb	r0, [r3, #0]
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <mpu_read_mem+0xa0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	7ed9      	ldrb	r1, [r3, #27]
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	2202      	movs	r2, #2
 8004b08:	f000 ffbc 	bl	8005a84 <mpu9255_write>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <mpu_read_mem+0x74>
        return -1;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	e011      	b.n	8004b3c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <mpu_read_mem+0xa0>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	7818      	ldrb	r0, [r3, #0]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <mpu_read_mem+0xa0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	7e19      	ldrb	r1, [r3, #24]
 8004b24:	88bb      	ldrh	r3, [r7, #4]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f000 fff7 	bl	8005b1c <mpu9255_read>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <mpu_read_mem+0x96>
        return -1;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	e000      	b.n	8004b3c <mpu_read_mem+0x98>
    return 0;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000014 	.word	0x20000014

08004b48 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4611      	mov	r1, r2
 8004b52:	461a      	mov	r2, r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	81fb      	strh	r3, [r7, #14]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	81bb      	strh	r3, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8004b60:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <mpu_load_firmware+0xf8>)
 8004b62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	e062      	b.n	8004c36 <mpu_load_firmware+0xee>

    if (!firmware)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <mpu_load_firmware+0x34>
        return -1;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e05c      	b.n	8004c36 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b80:	e034      	b.n	8004bec <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8004b82:	89fa      	ldrh	r2, [r7, #14]
 8004b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	bfa8      	it	ge
 8004b8c:	2310      	movge	r3, #16
 8004b8e:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8004b90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	441a      	add	r2, r3
 8004b96:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff30 	bl	8004a00 <mpu_write_mem>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <mpu_load_firmware+0x64>
            return -1;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8004baa:	e044      	b.n	8004c36 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8004bac:	f107 0214 	add.w	r2, r7, #20
 8004bb0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff75 	bl	8004aa4 <mpu_read_mem>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <mpu_load_firmware+0x7e>
            return -1;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	e037      	b.n	8004c36 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8004bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4413      	add	r3, r2
 8004bcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bce:	f107 0114 	add.w	r1, r7, #20
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f002 fb9e 	bl	8007314 <memcmp>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <mpu_load_firmware+0x9c>
            return -2;
 8004bde:	f06f 0301 	mvn.w	r3, #1
 8004be2:	e028      	b.n	8004c36 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8004be4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004be8:	4413      	add	r3, r2
 8004bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3c6      	bcc.n	8004b82 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8004bf4:	89bb      	ldrh	r3, [r7, #12]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8004bfe:	89bb      	ldrh	r3, [r7, #12]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <mpu_load_firmware+0xf8>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	7818      	ldrb	r0, [r3, #0]
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <mpu_load_firmware+0xf8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	7f59      	ldrb	r1, [r3, #29]
 8004c10:	f107 0310 	add.w	r3, r7, #16
 8004c14:	2202      	movs	r2, #2
 8004c16:	f000 ff35 	bl	8005a84 <mpu9255_write>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <mpu_load_firmware+0xde>
        return -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	e007      	b.n	8004c36 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <mpu_load_firmware+0xf8>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8004c2e:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <mpu_load_firmware+0xf8>)
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3728      	adds	r7, #40	; 0x28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000014 	.word	0x20000014

08004c44 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c54:	79fa      	ldrb	r2, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d101      	bne.n	8004c5e <mpu_set_dmp_state+0x1a>
        return 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e040      	b.n	8004ce0 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d027      	beq.n	8004cb4 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004c66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <mpu_set_dmp_state+0x30>
            return -1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c72:	e035      	b.n	8004ce0 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7fe ffd7 	bl	8003c28 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7ff fdb6 	bl	80047ec <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fbd3 	bl	8004430 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	7818      	ldrb	r0, [r3, #0]
 8004c94:	f107 030f 	add.w	r3, r7, #15
 8004c98:	2201      	movs	r2, #1
 8004c9a:	2123      	movs	r1, #35	; 0x23
 8004c9c:	f000 fef2 	bl	8005a84 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f7fe ffbd 	bl	8003c28 <set_int_enable>
        mpu_reset_fifo();
 8004cae:	f7ff f977 	bl	8003fa0 <mpu_reset_fifo>
 8004cb2:	e014      	b.n	8004cde <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7fe ffb7 	bl	8003c28 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004cbc:	7c1b      	ldrb	r3, [r3, #16]
 8004cbe:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	7818      	ldrb	r0, [r3, #0]
 8004cc6:	f107 030f 	add.w	r3, r7, #15
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2123      	movs	r1, #35	; 0x23
 8004cce:	f000 fed9 	bl	8005a84 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <mpu_set_dmp_state+0xa4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8004cda:	f7ff f961 	bl	8003fa0 <mpu_reset_fifo>
    }
    return 0;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000014 	.word	0x20000014

08004cec <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f7ff fd7a 	bl	80047ec <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	e00f      	b.n	8004d1e <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	7bf8      	ldrb	r0, [r7, #15]
 8004d02:	2201      	movs	r2, #1
 8004d04:	2100      	movs	r1, #0
 8004d06:	f000 ff09 	bl	8005b1c <mpu9255_read>
 8004d0a:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <setup_compass+0x2c>
 8004d12:	793b      	ldrb	r3, [r7, #4]
 8004d14:	2b48      	cmp	r3, #72	; 0x48
 8004d16:	d006      	beq.n	8004d26 <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b0f      	cmp	r3, #15
 8004d22:	d9ec      	bls.n	8004cfe <setup_compass+0x12>
 8004d24:	e000      	b.n	8004d28 <setup_compass+0x3c>
            break;
 8004d26:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d902      	bls.n	8004d34 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        //log_e("Compass not found.\n");
        return -1;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e112      	b.n	8004f5a <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8004d34:	4a8b      	ldr	r2, [pc, #556]	; (8004f64 <setup_compass+0x278>)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004d40:	4b88      	ldr	r3, [pc, #544]	; (8004f64 <setup_compass+0x278>)
 8004d42:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	2201      	movs	r2, #1
 8004d4a:	210a      	movs	r1, #10
 8004d4c:	f000 fe9a 	bl	8005a84 <mpu9255_write>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <setup_compass+0x70>
        return -1;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	e0fe      	b.n	8004f5a <setup_compass+0x26e>
    delay_ms(1);
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f000 ff27 	bl	8005bb0 <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8004d62:	231f      	movs	r3, #31
 8004d64:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004d66:	4b7f      	ldr	r3, [pc, #508]	; (8004f64 <setup_compass+0x278>)
 8004d68:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	2201      	movs	r2, #1
 8004d70:	210a      	movs	r1, #10
 8004d72:	f000 fe87 	bl	8005a84 <mpu9255_write>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <setup_compass+0x96>
        return -1;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	e0eb      	b.n	8004f5a <setup_compass+0x26e>
    delay_ms(1);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f000 ff14 	bl	8005bb0 <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8004d88:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <setup_compass+0x278>)
 8004d8a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	2203      	movs	r2, #3
 8004d92:	2110      	movs	r1, #16
 8004d94:	f000 fec2 	bl	8005b1c <mpu9255_read>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <setup_compass+0xb8>
        return -1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	e0da      	b.n	8004f5a <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8004da4:	793b      	ldrb	r3, [r7, #4]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3380      	adds	r3, #128	; 0x80
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	4b6d      	ldr	r3, [pc, #436]	; (8004f64 <setup_compass+0x278>)
 8004db0:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8004db2:	797b      	ldrb	r3, [r7, #5]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3380      	adds	r3, #128	; 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b21a      	sxth	r2, r3
 8004dbc:	4b69      	ldr	r3, [pc, #420]	; (8004f64 <setup_compass+0x278>)
 8004dbe:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8004dc0:	79bb      	ldrb	r3, [r7, #6]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3380      	adds	r3, #128	; 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	b21a      	sxth	r2, r3
 8004dca:	4b66      	ldr	r3, [pc, #408]	; (8004f64 <setup_compass+0x278>)
 8004dcc:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8004dce:	2310      	movs	r3, #16
 8004dd0:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004dd2:	4b64      	ldr	r3, [pc, #400]	; (8004f64 <setup_compass+0x278>)
 8004dd4:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	2201      	movs	r2, #1
 8004ddc:	210a      	movs	r1, #10
 8004dde:	f000 fe51 	bl	8005a84 <mpu9255_write>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <setup_compass+0x102>
        return -1;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dec:	e0b5      	b.n	8004f5a <setup_compass+0x26e>
    delay_ms(1);
 8004dee:	2001      	movs	r0, #1
 8004df0:	f000 fede 	bl	8005bb0 <mpu9255_delay_ms>

    mpu_set_bypass(0);
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7ff fcf9 	bl	80047ec <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <setup_compass+0x278>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	7818      	ldrb	r0, [r3, #0]
 8004e04:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <setup_compass+0x278>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	7e99      	ldrb	r1, [r3, #26]
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f000 fe39 	bl	8005a84 <mpu9255_write>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <setup_compass+0x132>
        return -1;
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1c:	e09d      	b.n	8004f5a <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8004e1e:	4b51      	ldr	r3, [pc, #324]	; (8004f64 <setup_compass+0x278>)
 8004e20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8004e2c:	4b4d      	ldr	r3, [pc, #308]	; (8004f64 <setup_compass+0x278>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	7818      	ldrb	r0, [r3, #0]
 8004e32:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <setup_compass+0x278>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	7f99      	ldrb	r1, [r3, #30]
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f000 fe22 	bl	8005a84 <mpu9255_write>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <setup_compass+0x160>
        return -1;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	e086      	b.n	8004f5a <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8004e50:	4b44      	ldr	r3, [pc, #272]	; (8004f64 <setup_compass+0x278>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	7818      	ldrb	r0, [r3, #0]
 8004e56:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <setup_compass+0x278>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	7fd9      	ldrb	r1, [r3, #31]
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f000 fe10 	bl	8005a84 <mpu9255_write>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <setup_compass+0x184>
        return -1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	e074      	b.n	8004f5a <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8004e70:	2388      	movs	r3, #136	; 0x88
 8004e72:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8004e74:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <setup_compass+0x278>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	7818      	ldrb	r0, [r3, #0]
 8004e7a:	4b3a      	ldr	r3, [pc, #232]	; (8004f64 <setup_compass+0x278>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f893 1020 	ldrb.w	r1, [r3, #32]
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	2201      	movs	r2, #1
 8004e86:	f000 fdfd 	bl	8005a84 <mpu9255_write>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <setup_compass+0x1aa>
        return -1;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e061      	b.n	8004f5a <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8004e96:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <setup_compass+0x278>)
 8004e98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004e9c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8004e9e:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <setup_compass+0x278>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	7818      	ldrb	r0, [r3, #0]
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <setup_compass+0x278>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8004eac:	1d3b      	adds	r3, r7, #4
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f000 fde8 	bl	8005a84 <mpu9255_write>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <setup_compass+0x1d4>
        return -1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	e04c      	b.n	8004f5a <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8004ec0:	230a      	movs	r3, #10
 8004ec2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <setup_compass+0x278>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	7818      	ldrb	r0, [r3, #0]
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <setup_compass+0x278>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f000 fdd5 	bl	8005a84 <mpu9255_write>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <setup_compass+0x1fa>
        return -1;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	e039      	b.n	8004f5a <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8004ee6:	2381      	movs	r3, #129	; 0x81
 8004ee8:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <setup_compass+0x278>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	7818      	ldrb	r0, [r3, #0]
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <setup_compass+0x278>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	2201      	movs	r2, #1
 8004efc:	f000 fdc2 	bl	8005a84 <mpu9255_write>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <setup_compass+0x220>
        return -1;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	e026      	b.n	8004f5a <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8004f0c:	2311      	movs	r3, #17
 8004f0e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <setup_compass+0x278>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	7818      	ldrb	r0, [r3, #0]
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <setup_compass+0x278>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	2201      	movs	r2, #1
 8004f22:	f000 fdaf 	bl	8005a84 <mpu9255_write>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <setup_compass+0x246>
        return -1;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	e013      	b.n	8004f5a <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8004f32:	2303      	movs	r3, #3
 8004f34:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <setup_compass+0x278>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	7818      	ldrb	r0, [r3, #0]
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <setup_compass+0x278>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	2201      	movs	r2, #1
 8004f48:	f000 fd9c 	bl	8005a84 <mpu9255_write>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <setup_compass+0x26c>
        return -1;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
 8004f56:	e000      	b.n	8004f5a <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000014 	.word	0x20000014

08004f68 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8004f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f70:	23c8      	movs	r3, #200	; 0xc8
 8004f72:	4904      	ldr	r1, [pc, #16]	; (8004f84 <dmp_load_motion_driver_firmware+0x1c>)
 8004f74:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8004f78:	f7ff fde6 	bl	8004b48 <mpu_load_firmware>
 8004f7c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08008664 	.word	0x08008664

08004f88 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8004f92:	4a6e      	ldr	r2, [pc, #440]	; (800514c <dmp_set_orientation+0x1c4>)
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	8019      	strh	r1, [r3, #0]
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	0c12      	lsrs	r2, r2, #16
 8004fa2:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8004fa4:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <dmp_set_orientation+0x1c8>)
 8004fa6:	f107 0310 	add.w	r3, r7, #16
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4611      	mov	r1, r2
 8004fae:	8019      	strh	r1, [r3, #0]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	0c12      	lsrs	r2, r2, #16
 8004fb4:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8004fb6:	4a67      	ldr	r2, [pc, #412]	; (8005154 <dmp_set_orientation+0x1cc>)
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	8019      	strh	r1, [r3, #0]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	0c12      	lsrs	r2, r2, #16
 8004fc6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8004fc8:	4a63      	ldr	r2, [pc, #396]	; (8005158 <dmp_set_orientation+0x1d0>)
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	8019      	strh	r1, [r3, #0]
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	0c12      	lsrs	r2, r2, #16
 8004fd8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	3320      	adds	r3, #32
 8004fe2:	443b      	add	r3, r7
 8004fe4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004fe8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	08db      	lsrs	r3, r3, #3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	3320      	adds	r3, #32
 8004ff6:	443b      	add	r3, r7
 8004ff8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004ffc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	b29b      	uxth	r3, r3
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	3320      	adds	r3, #32
 800500a:	443b      	add	r3, r7
 800500c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005010:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	3320      	adds	r3, #32
 800501a:	443b      	add	r3, r7
 800501c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005020:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	b29b      	uxth	r3, r3
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	3320      	adds	r3, #32
 800502e:	443b      	add	r3, r7
 8005030:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005034:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	b29b      	uxth	r3, r3
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	3320      	adds	r3, #32
 8005042:	443b      	add	r3, r7
 8005044:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005048:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800504a:	f107 031c 	add.w	r3, r7, #28
 800504e:	461a      	mov	r2, r3
 8005050:	2103      	movs	r1, #3
 8005052:	f240 4026 	movw	r0, #1062	; 0x426
 8005056:	f7ff fcd3 	bl	8004a00 <mpu_write_mem>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <dmp_set_orientation+0xde>
        return -1;
 8005060:	f04f 33ff 	mov.w	r3, #4294967295
 8005064:	e06e      	b.n	8005144 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8005066:	f107 0318 	add.w	r3, r7, #24
 800506a:	461a      	mov	r2, r3
 800506c:	2103      	movs	r1, #3
 800506e:	f240 402a 	movw	r0, #1066	; 0x42a
 8005072:	f7ff fcc5 	bl	8004a00 <mpu_write_mem>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <dmp_set_orientation+0xfa>
        return -1;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
 8005080:	e060      	b.n	8005144 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8005082:	f107 031c 	add.w	r3, r7, #28
 8005086:	f107 020c 	add.w	r2, r7, #12
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	4611      	mov	r1, r2
 800508e:	8019      	strh	r1, [r3, #0]
 8005090:	3302      	adds	r3, #2
 8005092:	0c12      	lsrs	r2, r2, #16
 8005094:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8005096:	f107 0318 	add.w	r3, r7, #24
 800509a:	f107 0208 	add.w	r2, r7, #8
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	4611      	mov	r1, r2
 80050a2:	8019      	strh	r1, [r3, #0]
 80050a4:	3302      	adds	r3, #2
 80050a6:	0c12      	lsrs	r2, r2, #16
 80050a8:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 80050b4:	7f3b      	ldrb	r3, [r7, #28]
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 80050be:	7e3b      	ldrb	r3, [r7, #24]
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80050d2:	7f7b      	ldrb	r3, [r7, #29]
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80050dc:	7e7b      	ldrb	r3, [r7, #25]
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80050f0:	7fbb      	ldrb	r3, [r7, #30]
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80050fa:	7ebb      	ldrb	r3, [r7, #26]
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8005104:	f107 031c 	add.w	r3, r7, #28
 8005108:	461a      	mov	r2, r3
 800510a:	2103      	movs	r1, #3
 800510c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005110:	f7ff fc76 	bl	8004a00 <mpu_write_mem>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <dmp_set_orientation+0x198>
        return -1;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	e011      	b.n	8005144 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8005120:	f107 0318 	add.w	r3, r7, #24
 8005124:	461a      	mov	r2, r3
 8005126:	2103      	movs	r1, #3
 8005128:	f240 4031 	movw	r0, #1073	; 0x431
 800512c:	f7ff fc68 	bl	8004a00 <mpu_write_mem>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <dmp_set_orientation+0x1b4>
        return -1;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	e003      	b.n	8005144 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <dmp_set_orientation+0x1d4>)
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	8113      	strh	r3, [r2, #8]
    return 0;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08008558 	.word	0x08008558
 8005150:	0800855c 	.word	0x0800855c
 8005154:	08008560 	.word	0x08008560
 8005158:	08008564 	.word	0x08008564
 800515c:	2000050c 	.word	0x2000050c

08005160 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <dmp_set_fifo_rate+0x88>)
 800516c:	f107 0310 	add.w	r3, r7, #16
 8005170:	ca07      	ldmia	r2, {r0, r1, r2}
 8005172:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2bc8      	cmp	r3, #200	; 0xc8
 800517a:	d902      	bls.n	8005182 <dmp_set_fifo_rate+0x22>
        return -1;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	e02e      	b.n	80051e0 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	22c8      	movs	r2, #200	; 0xc8
 8005186:	fb92 f3f3 	sdiv	r3, r2, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8005190:	8bfb      	ldrh	r3, [r7, #30]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	461a      	mov	r2, r3
 80051a6:	2102      	movs	r1, #2
 80051a8:	f240 2016 	movw	r0, #534	; 0x216
 80051ac:	f7ff fc28 	bl	8004a00 <mpu_write_mem>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <dmp_set_fifo_rate+0x5c>
        return -1;
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ba:	e011      	b.n	80051e0 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80051bc:	f107 0310 	add.w	r3, r7, #16
 80051c0:	461a      	mov	r2, r3
 80051c2:	210c      	movs	r1, #12
 80051c4:	f640 20c1 	movw	r0, #2753	; 0xac1
 80051c8:	f7ff fc1a 	bl	8004a00 <mpu_write_mem>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <dmp_set_fifo_rate+0x78>
        return -1;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	e003      	b.n	80051e0 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 80051d8:	4a04      	ldr	r2, [pc, #16]	; (80051ec <dmp_set_fifo_rate+0x8c>)
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	8193      	strh	r3, [r2, #12]
    return 0;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08008568 	.word	0x08008568
 80051ec:	2000050c 	.word	0x2000050c

080051f0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	460a      	mov	r2, r1
 80051fa:	71fb      	strb	r3, [r7, #7]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <dmp_set_tap_thresh+0x22>
 800520a:	88bb      	ldrh	r3, [r7, #4]
 800520c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005210:	d902      	bls.n	8005218 <dmp_set_tap_thresh+0x28>
        return -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	e10b      	b.n	8005430 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8005218:	88bb      	ldrh	r3, [r7, #4]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005222:	eddf 6a85 	vldr	s13, [pc, #532]	; 8005438 <dmp_set_tap_thresh+0x248>
 8005226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522a:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800522e:	f107 030b 	add.w	r3, r7, #11
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f80c 	bl	8004250 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	3b02      	subs	r3, #2
 800523c:	2b0e      	cmp	r3, #14
 800523e:	d87d      	bhi.n	800533c <dmp_set_tap_thresh+0x14c>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <dmp_set_tap_thresh+0x58>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	08005285 	.word	0x08005285
 800524c:	0800533d 	.word	0x0800533d
 8005250:	080052b3 	.word	0x080052b3
 8005254:	0800533d 	.word	0x0800533d
 8005258:	0800533d 	.word	0x0800533d
 800525c:	0800533d 	.word	0x0800533d
 8005260:	080052e1 	.word	0x080052e1
 8005264:	0800533d 	.word	0x0800533d
 8005268:	0800533d 	.word	0x0800533d
 800526c:	0800533d 	.word	0x0800533d
 8005270:	0800533d 	.word	0x0800533d
 8005274:	0800533d 	.word	0x0800533d
 8005278:	0800533d 	.word	0x0800533d
 800527c:	0800533d 	.word	0x0800533d
 8005280:	0800530f 	.word	0x0800530f
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8005284:	edd7 7a04 	vldr	s15, [r7, #16]
 8005288:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800543c <dmp_set_tap_thresh+0x24c>
 800528c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005294:	ee17 3a90 	vmov	r3, s15
 8005298:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800529a:	edd7 7a04 	vldr	s15, [r7, #16]
 800529e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005440 <dmp_set_tap_thresh+0x250>
 80052a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052aa:	ee17 3a90 	vmov	r3, s15
 80052ae:	82bb      	strh	r3, [r7, #20]
        break;
 80052b0:	e047      	b.n	8005342 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 80052b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052b6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8005444 <dmp_set_tap_thresh+0x254>
 80052ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c2:	ee17 3a90 	vmov	r3, s15
 80052c6:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 80052c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80052cc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005448 <dmp_set_tap_thresh+0x258>
 80052d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d8:	ee17 3a90 	vmov	r3, s15
 80052dc:	82bb      	strh	r3, [r7, #20]
        break;
 80052de:	e030      	b.n	8005342 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 80052e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80052e4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800544c <dmp_set_tap_thresh+0x25c>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 3a90 	vmov	r3, s15
 80052f4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 80052f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80052fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005450 <dmp_set_tap_thresh+0x260>
 80052fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	ee17 3a90 	vmov	r3, s15
 800530a:	82bb      	strh	r3, [r7, #20]
        break;
 800530c:	e019      	b.n	8005342 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800530e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005312:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005454 <dmp_set_tap_thresh+0x264>
 8005316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800531a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531e:	ee17 3a90 	vmov	r3, s15
 8005322:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8005324:	edd7 7a04 	vldr	s15, [r7, #16]
 8005328:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005458 <dmp_set_tap_thresh+0x268>
 800532c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005334:	ee17 3a90 	vmov	r3, s15
 8005338:	82bb      	strh	r3, [r7, #20]
        break;
 800533a:	e002      	b.n	8005342 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
 8005340:	e076      	b.n	8005430 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	b29b      	uxth	r3, r3
 8005348:	b2db      	uxtb	r3, r3
 800534a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800534c:	8afb      	ldrh	r3, [r7, #22]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8005352:	8abb      	ldrh	r3, [r7, #20]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	b29b      	uxth	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800535c:	8abb      	ldrh	r3, [r7, #20]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01c      	beq.n	80053a6 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	461a      	mov	r2, r3
 8005372:	2102      	movs	r1, #2
 8005374:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8005378:	f7ff fb42 	bl	8004a00 <mpu_write_mem>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <dmp_set_tap_thresh+0x198>
            return -1;
 8005382:	f04f 33ff 	mov.w	r3, #4294967295
 8005386:	e053      	b.n	8005430 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8005388:	f107 030c 	add.w	r3, r7, #12
 800538c:	3302      	adds	r3, #2
 800538e:	461a      	mov	r2, r3
 8005390:	2102      	movs	r1, #2
 8005392:	f44f 7092 	mov.w	r0, #292	; 0x124
 8005396:	f7ff fb33 	bl	8004a00 <mpu_write_mem>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <dmp_set_tap_thresh+0x1b6>
            return -1;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	e044      	b.n	8005430 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	461a      	mov	r2, r3
 80053b6:	2102      	movs	r1, #2
 80053b8:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 80053bc:	f7ff fb20 	bl	8004a00 <mpu_write_mem>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <dmp_set_tap_thresh+0x1dc>
            return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e031      	b.n	8005430 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80053cc:	f107 030c 	add.w	r3, r7, #12
 80053d0:	3302      	adds	r3, #2
 80053d2:	461a      	mov	r2, r3
 80053d4:	2102      	movs	r1, #2
 80053d6:	f44f 7094 	mov.w	r0, #296	; 0x128
 80053da:	f7ff fb11 	bl	8004a00 <mpu_write_mem>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <dmp_set_tap_thresh+0x1fa>
            return -1;
 80053e4:	f04f 33ff 	mov.w	r3, #4294967295
 80053e8:	e022      	b.n	8005430 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01c      	beq.n	800542e <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	461a      	mov	r2, r3
 80053fa:	2102      	movs	r1, #2
 80053fc:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8005400:	f7ff fafe 	bl	8004a00 <mpu_write_mem>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <dmp_set_tap_thresh+0x220>
            return -1;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	e00f      	b.n	8005430 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	3302      	adds	r3, #2
 8005416:	461a      	mov	r2, r3
 8005418:	2102      	movs	r1, #2
 800541a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800541e:	f7ff faef 	bl	8004a00 <mpu_write_mem>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <dmp_set_tap_thresh+0x23e>
            return -1;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	e000      	b.n	8005430 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	43480000 	.word	0x43480000
 800543c:	46800000 	.word	0x46800000
 8005440:	46400000 	.word	0x46400000
 8005444:	46000000 	.word	0x46000000
 8005448:	45c00000 	.word	0x45c00000
 800544c:	45800000 	.word	0x45800000
 8005450:	45400000 	.word	0x45400000
 8005454:	45000000 	.word	0x45000000
 8005458:	44c00000 	.word	0x44c00000

0800545c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800547a:	b2db      	uxtb	r3, r3
 800547c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f043 030c 	orr.w	r3, r3, #12
 800548e:	b2db      	uxtb	r3, r3
 8005490:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	f043 0303 	orr.w	r3, r3, #3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80054a6:	f107 030f 	add.w	r3, r7, #15
 80054aa:	461a      	mov	r2, r3
 80054ac:	2101      	movs	r1, #1
 80054ae:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80054b2:	f7ff faa5 	bl	8004a00 <mpu_write_mem>
 80054b6:	4603      	mov	r3, r0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <dmp_set_tap_count+0x16>
        min_taps = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	71fb      	strb	r3, [r7, #7]
 80054d4:	e004      	b.n	80054e0 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d901      	bls.n	80054e0 <dmp_set_tap_count+0x20>
        min_taps = 4;
 80054dc:	2304      	movs	r3, #4
 80054de:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80054e8:	f107 030f 	add.w	r3, r7, #15
 80054ec:	461a      	mov	r2, r3
 80054ee:	2101      	movs	r1, #1
 80054f0:	f240 104f 	movw	r0, #335	; 0x14f
 80054f4:	f7ff fa84 	bl	8004a00 <mpu_write_mem>
 80054f8:	4603      	mov	r3, r0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <dmp_set_tap_time+0x40>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	b29b      	uxth	r3, r3
 8005520:	b2db      	uxtb	r3, r3
 8005522:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8005524:	89fb      	ldrh	r3, [r7, #14]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	461a      	mov	r2, r3
 8005530:	2102      	movs	r1, #2
 8005532:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8005536:	f7ff fa63 	bl	8004a00 <mpu_write_mem>
 800553a:	4603      	mov	r3, r0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	cccccccd 	.word	0xcccccccd

08005548 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	4a0c      	ldr	r2, [pc, #48]	; (8005588 <dmp_set_tap_time_multi+0x40>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	b29b      	uxth	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800556e:	f107 030c 	add.w	r3, r7, #12
 8005572:	461a      	mov	r2, r3
 8005574:	2102      	movs	r1, #2
 8005576:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800557a:	f7ff fa41 	bl	8004a00 <mpu_write_mem>
 800557e:	4603      	mov	r3, r0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	cccccccd 	.word	0xcccccccd

0800558c <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <dmp_set_shake_reject_thresh+0x5c>)
 800559c:	fb82 1203 	smull	r1, r2, r2, r3
 80055a0:	1192      	asrs	r2, r2, #6
 80055a2:	17db      	asrs	r3, r3, #31
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	161b      	asrs	r3, r3, #24
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	141b      	asrs	r3, r3, #16
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	121b      	asrs	r3, r3, #8
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	461a      	mov	r2, r3
 80055d2:	2104      	movs	r1, #4
 80055d4:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 80055d8:	f7ff fa12 	bl	8004a00 <mpu_write_mem>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	10624dd3 	.word	0x10624dd3

080055ec <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	4a0c      	ldr	r2, [pc, #48]	; (800562c <dmp_set_shake_reject_time+0x40>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	b29b      	uxth	r3, r3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	461a      	mov	r2, r3
 8005618:	2102      	movs	r1, #2
 800561a:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800561e:	f7ff f9ef 	bl	8004a00 <mpu_write_mem>
 8005622:	4603      	mov	r3, r0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	cccccccd 	.word	0xcccccccd

08005630 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <dmp_set_shake_reject_timeout+0x40>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	b29b      	uxth	r3, r3
 800564c:	b2db      	uxtb	r3, r3
 800564e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	461a      	mov	r2, r3
 800565c:	2102      	movs	r1, #2
 800565e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005662:	f7ff f9cd 	bl	8004a00 <mpu_write_mem>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	cccccccd 	.word	0xcccccccd

08005674 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800567e:	2302      	movs	r3, #2
 8005680:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8005682:	23ca      	movs	r3, #202	; 0xca
 8005684:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8005686:	23e3      	movs	r3, #227	; 0xe3
 8005688:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800568a:	2309      	movs	r3, #9
 800568c:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	461a      	mov	r2, r3
 8005694:	2104      	movs	r1, #4
 8005696:	2068      	movs	r0, #104	; 0x68
 8005698:	f7ff f9b2 	bl	8004a00 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800569c:	23a3      	movs	r3, #163	; 0xa3
 800569e:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80056aa:	23c0      	movs	r3, #192	; 0xc0
 80056ac:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80056ae:	23c8      	movs	r3, #200	; 0xc8
 80056b0:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80056b2:	23c2      	movs	r3, #194	; 0xc2
 80056b4:	73fb      	strb	r3, [r7, #15]
 80056b6:	e005      	b.n	80056c4 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80056b8:	23a3      	movs	r3, #163	; 0xa3
 80056ba:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80056bc:	23a3      	movs	r3, #163	; 0xa3
 80056be:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80056c0:	23a3      	movs	r3, #163	; 0xa3
 80056c2:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80056ce:	23c4      	movs	r3, #196	; 0xc4
 80056d0:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80056d2:	23cc      	movs	r3, #204	; 0xcc
 80056d4:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80056d6:	23c6      	movs	r3, #198	; 0xc6
 80056d8:	74bb      	strb	r3, [r7, #18]
 80056da:	e005      	b.n	80056e8 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80056dc:	23a3      	movs	r3, #163	; 0xa3
 80056de:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80056e0:	23a3      	movs	r3, #163	; 0xa3
 80056e2:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80056e4:	23a3      	movs	r3, #163	; 0xa3
 80056e6:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80056e8:	23a3      	movs	r3, #163	; 0xa3
 80056ea:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80056ec:	23a3      	movs	r3, #163	; 0xa3
 80056ee:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80056f0:	23a3      	movs	r3, #163	; 0xa3
 80056f2:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	461a      	mov	r2, r3
 80056fa:	210a      	movs	r1, #10
 80056fc:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8005700:	f7ff f97e 	bl	8004a00 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800570e:	2320      	movs	r3, #32
 8005710:	733b      	strb	r3, [r7, #12]
 8005712:	e001      	b.n	8005718 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8005714:	23d8      	movs	r3, #216	; 0xd8
 8005716:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8005718:	f107 030c 	add.w	r3, r7, #12
 800571c:	461a      	mov	r2, r3
 800571e:	2101      	movs	r1, #1
 8005720:	f640 20b6 	movw	r0, #2742	; 0xab6
 8005724:	f7ff f96c 	bl	8004a00 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8005732:	2001      	movs	r0, #1
 8005734:	f000 f8c6 	bl	80058c4 <dmp_enable_gyro_cal>
 8005738:	e002      	b.n	8005740 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800573a:	2000      	movs	r0, #0
 800573c:	f000 f8c2 	bl	80058c4 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01d      	beq.n	8005786 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8005754:	23b2      	movs	r3, #178	; 0xb2
 8005756:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8005758:	238b      	movs	r3, #139	; 0x8b
 800575a:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800575c:	23b6      	movs	r3, #182	; 0xb6
 800575e:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8005760:	239b      	movs	r3, #155	; 0x9b
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e007      	b.n	8005776 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8005766:	23b0      	movs	r3, #176	; 0xb0
 8005768:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800576e:	23b4      	movs	r3, #180	; 0xb4
 8005770:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8005772:	2390      	movs	r3, #144	; 0x90
 8005774:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8005776:	f107 030c 	add.w	r3, r7, #12
 800577a:	461a      	mov	r2, r3
 800577c:	2104      	movs	r1, #4
 800577e:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8005782:	f7ff f93d 	bl	8004a00 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d025      	beq.n	80057dc <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8005790:	23f8      	movs	r3, #248	; 0xf8
 8005792:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	461a      	mov	r2, r3
 800579a:	2101      	movs	r1, #1
 800579c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80057a0:	f7ff f92e 	bl	8004a00 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80057a4:	21fa      	movs	r1, #250	; 0xfa
 80057a6:	2007      	movs	r0, #7
 80057a8:	f7ff fd22 	bl	80051f0 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80057ac:	2007      	movs	r0, #7
 80057ae:	f7ff fe55 	bl	800545c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7ff fe84 	bl	80054c0 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80057b8:	2064      	movs	r0, #100	; 0x64
 80057ba:	f7ff fea3 	bl	8005504 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80057be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057c2:	f7ff fec1 	bl	8005548 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80057c6:	21c8      	movs	r1, #200	; 0xc8
 80057c8:	483c      	ldr	r0, [pc, #240]	; (80058bc <dmp_enable_feature+0x248>)
 80057ca:	f7ff fedf 	bl	800558c <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80057ce:	2028      	movs	r0, #40	; 0x28
 80057d0:	f7ff ff0c 	bl	80055ec <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80057d4:	200a      	movs	r0, #10
 80057d6:	f7ff ff2b 	bl	8005630 <dmp_set_shake_reject_timeout>
 80057da:	e009      	b.n	80057f0 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80057dc:	23d8      	movs	r3, #216	; 0xd8
 80057de:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	461a      	mov	r2, r3
 80057e6:	2101      	movs	r1, #1
 80057e8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80057ec:	f7ff f908 	bl	8004a00 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80057fa:	23d9      	movs	r3, #217	; 0xd9
 80057fc:	733b      	strb	r3, [r7, #12]
 80057fe:	e001      	b.n	8005804 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8005800:	23d8      	movs	r3, #216	; 0xd8
 8005802:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	461a      	mov	r2, r3
 800580a:	2101      	movs	r1, #1
 800580c:	f240 703d 	movw	r0, #1853	; 0x73d
 8005810:	f7ff f8f6 	bl	8004a00 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800581e:	2001      	movs	r0, #1
 8005820:	f000 f880 	bl	8005924 <dmp_enable_lp_quat>
 8005824:	e002      	b.n	800582c <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8005826:	2000      	movs	r0, #0
 8005828:	f000 f87c 	bl	8005924 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8005836:	2001      	movs	r0, #1
 8005838:	f000 f89b 	bl	8005972 <dmp_enable_6x_lp_quat>
 800583c:	e002      	b.n	8005844 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800583e:	2000      	movs	r0, #0
 8005840:	f000 f897 	bl	8005972 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	b29a      	uxth	r2, r3
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <dmp_enable_feature+0x24c>)
 800584e:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8005850:	f7fe fba6 	bl	8003fa0 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8005854:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <dmp_enable_feature+0x24c>)
 8005856:	2200      	movs	r2, #0
 8005858:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8005864:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <dmp_enable_feature+0x24c>)
 8005866:	7b9b      	ldrb	r3, [r3, #14]
 8005868:	3306      	adds	r3, #6
 800586a:	b2da      	uxtb	r2, r3
 800586c:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <dmp_enable_feature+0x24c>)
 800586e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800587a:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <dmp_enable_feature+0x24c>)
 800587c:	7b9b      	ldrb	r3, [r3, #14]
 800587e:	3306      	adds	r3, #6
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <dmp_enable_feature+0x24c>)
 8005884:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	f003 0314 	and.w	r3, r3, #20
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <dmp_enable_feature+0x24c>)
 8005892:	7b9b      	ldrb	r3, [r3, #14]
 8005894:	3310      	adds	r3, #16
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <dmp_enable_feature+0x24c>)
 800589a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <dmp_enable_feature+0x24c>)
 80058a8:	7b9b      	ldrb	r3, [r3, #14]
 80058aa:	3304      	adds	r3, #4
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <dmp_enable_feature+0x24c>)
 80058b0:	739a      	strb	r2, [r3, #14]

    return 0;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	02cae309 	.word	0x02cae309
 80058c0:	2000050c 	.word	0x2000050c

080058c4 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <dmp_enable_gyro_cal+0x58>)
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	ca07      	ldmia	r2, {r0, r1, r2}
 80058dc:	c303      	stmia	r3!, {r0, r1}
 80058de:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80058e0:	f107 0314 	add.w	r3, r7, #20
 80058e4:	461a      	mov	r2, r3
 80058e6:	2109      	movs	r1, #9
 80058e8:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80058ec:	f7ff f888 	bl	8004a00 <mpu_write_mem>
 80058f0:	4603      	mov	r3, r0
 80058f2:	e00e      	b.n	8005912 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80058f4:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <dmp_enable_gyro_cal+0x5c>)
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80058fc:	c303      	stmia	r3!, {r0, r1}
 80058fe:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	461a      	mov	r2, r3
 8005906:	2109      	movs	r1, #9
 8005908:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800590c:	f7ff f878 	bl	8004a00 <mpu_write_mem>
 8005910:	4603      	mov	r3, r0
    }
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	08008574 	.word	0x08008574
 8005920:	08008580 	.word	0x08008580

08005924 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8005934:	23c0      	movs	r3, #192	; 0xc0
 8005936:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8005938:	23c2      	movs	r3, #194	; 0xc2
 800593a:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800593c:	23c4      	movs	r3, #196	; 0xc4
 800593e:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8005940:	23c6      	movs	r3, #198	; 0xc6
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	e006      	b.n	8005954 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8005946:	f107 030c 	add.w	r3, r7, #12
 800594a:	2204      	movs	r2, #4
 800594c:	218b      	movs	r1, #139	; 0x8b
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fcfe 	bl	8007350 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8005954:	f107 030c 	add.w	r3, r7, #12
 8005958:	461a      	mov	r2, r3
 800595a:	2104      	movs	r1, #4
 800595c:	f640 2098 	movw	r0, #2712	; 0xa98
 8005960:	f7ff f84e 	bl	8004a00 <mpu_write_mem>

    return mpu_reset_fifo();
 8005964:	f7fe fb1c 	bl	8003fa0 <mpu_reset_fifo>
 8005968:	4603      	mov	r3, r0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	4603      	mov	r3, r0
 800597a:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8005982:	2320      	movs	r3, #32
 8005984:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8005986:	2328      	movs	r3, #40	; 0x28
 8005988:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800598a:	2330      	movs	r3, #48	; 0x30
 800598c:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800598e:	2338      	movs	r3, #56	; 0x38
 8005990:	73fb      	strb	r3, [r7, #15]
 8005992:	e006      	b.n	80059a2 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	2204      	movs	r2, #4
 800599a:	21a3      	movs	r1, #163	; 0xa3
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fcd7 	bl	8007350 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80059a2:	f107 030c 	add.w	r3, r7, #12
 80059a6:	461a      	mov	r2, r3
 80059a8:	2104      	movs	r1, #4
 80059aa:	f640 209e 	movw	r0, #2718	; 0xa9e
 80059ae:	f7ff f827 	bl	8004a00 <mpu_write_mem>

    return mpu_reset_fifo();
 80059b2:	f7fe faf5 	bl	8003fa0 <mpu_reset_fifo>
 80059b6:	4603      	mov	r3, r0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <dmp_register_tap_cb>:
 *  \n TAP_Z_DOWN
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
    dmp.tap_cb = func;
 80059c8:	4a04      	ldr	r2, [pc, #16]	; (80059dc <dmp_register_tap_cb+0x1c>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6013      	str	r3, [r2, #0]
    return 0;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	2000050c 	.word	0x2000050c

080059e0 <dmp_register_android_orient_cb>:
 *  @brief      Register a function to be executed on a android orientation event.
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
    dmp.android_orient_cb = func;
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <dmp_register_android_orient_cb+0x1c>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6053      	str	r3, [r2, #4]
    return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	2000050c 	.word	0x2000050c

08005a00 <LL_SPI_TransmitData8>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_GPIO_SetOutputPin>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	619a      	str	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <LL_GPIO_ResetOutputPin>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <clearChipSelect>:
static uint8_t writeIndex = 0;
#else
dmp_data_t dmpData;
#endif
// CS is active low. This disables the chip
__STATIC_INLINE void clearChipSelect() {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8005a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a68:	f7ff ffdc 	bl	8005a24 <LL_GPIO_SetOutputPin>
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <setChipSelect>:

// CS is active low. This enables the chip.
__STATIC_INLINE void setChipSelect() {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(IMU_CS_GPIO_Port, IMU_CS_Pin);
 8005a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a7c:	f7ff ffe0 	bl	8005a40 <LL_GPIO_ResetOutputPin>
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <mpu9255_write>:

int mpu9255_write(unsigned char slave_addr, unsigned char reg_addr,
     unsigned char length, unsigned char const *data) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	71fb      	strb	r3, [r7, #7]
 8005a90:	460b      	mov	r3, r1
 8005a92:	71bb      	strb	r3, [r7, #6]
 8005a94:	4613      	mov	r3, r2
 8005a96:	717b      	strb	r3, [r7, #5]

	(void)slave_addr; // NOT NEEDED, I2C variable. Suppress unused variable warning

	setChipSelect();
 8005a98:	f7ff ffea 	bl	8005a70 <setChipSelect>

	// 4 byte fifo. Respect that and write when free
	LL_SPI_TransmitData8(SPI1, reg_addr);
 8005a9c:	79bb      	ldrb	r3, [r7, #6]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	481d      	ldr	r0, [pc, #116]	; (8005b18 <mpu9255_write+0x94>)
 8005aa2:	f7ff ffad 	bl	8005a00 <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
 8005aaa:	e011      	b.n	8005ad0 <mpu9255_write+0x4c>
		while (!(SPI1->SR & SPI_SR_TXE)) {
 8005aac:	bf00      	nop
 8005aae:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <mpu9255_write+0x94>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f9      	beq.n	8005aae <mpu9255_write+0x2a>
		};
		LL_SPI_TransmitData8(SPI1, data[i]);
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4814      	ldr	r0, [pc, #80]	; (8005b18 <mpu9255_write+0x94>)
 8005ac6:	f7ff ff9b 	bl	8005a00 <LL_SPI_TransmitData8>
	for (uint8_t i = 0; i < length; i++) {
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	3301      	adds	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	797b      	ldrb	r3, [r7, #5]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3e9      	bcc.n	8005aac <mpu9255_write+0x28>
	}

	// wait for completion
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 8005ad8:	bf00      	nop
 8005ada:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <mpu9255_write+0x94>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f9      	bne.n	8005ada <mpu9255_write+0x56>
	}; 	//transmit fifo empty?
	while ((SPI1->SR & SPI_SR_BSY)) {
 8005ae6:	bf00      	nop
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <mpu9255_write+0x94>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f9      	bne.n	8005ae8 <mpu9255_write+0x64>
	}; 	// no longer busy
	clearChipSelect();
 8005af4:	f7ff ffb2 	bl	8005a5c <clearChipSelect>

	// clear receive fifo. Overrun data will be lost, but we are only sending.
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8005af8:	e002      	b.n	8005b00 <mpu9255_write+0x7c>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <mpu9255_write+0x94>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	73bb      	strb	r3, [r7, #14]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <mpu9255_write+0x94>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f6      	bne.n	8005afa <mpu9255_write+0x76>
		(void) dummy;						// suppress unused variable warning
	};
	return 0;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40013000 	.word	0x40013000

08005b1c <mpu9255_read>:
 * Read assumes that calling function is providing a data location big enough
 * to handle the size of length. Be aware that this can overrun the calling
 * memory location if not sized appropriately!
 */
int mpu9255_read(unsigned char slave_addr, unsigned char reg_addr,
      unsigned char length, unsigned char *data) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4603      	mov	r3, r0
 8005b26:	71fb      	strb	r3, [r7, #7]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	71bb      	strb	r3, [r7, #6]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	717b      	strb	r3, [r7, #5]

	(void) slave_addr; // not used, suppress unused variable warning.

	setChipSelect();
 8005b30:	f7ff ff9e 	bl	8005a70 <setChipSelect>

	// 4 byte fifo not used. Reads need to be captured.
	LL_SPI_TransmitData8(SPI1, (reg_addr | 0x80)); // MSb set signals read.
 8005b34:	79bb      	ldrb	r3, [r7, #6]
 8005b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	481b      	ldr	r0, [pc, #108]	; (8005bac <mpu9255_read+0x90>)
 8005b40:	f7ff ff5e 	bl	8005a00 <LL_SPI_TransmitData8>
	while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 8005b44:	bf00      	nop
 8005b46:	4b19      	ldr	r3, [pc, #100]	; (8005bac <mpu9255_read+0x90>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f9      	beq.n	8005b46 <mpu9255_read+0x2a>
	uint8_t dummy = SPI1->DR; 				// first byte is from cmd transfer. Ignore
 8005b52:	4b16      	ldr	r3, [pc, #88]	; (8005bac <mpu9255_read+0x90>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	73bb      	strb	r3, [r7, #14]
	(void)dummy; // suppress unused variable warning

	// read the data sequentially
	for (uint8_t i = 0; i < length; i++) {
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	e014      	b.n	8005b88 <mpu9255_read+0x6c>
		LL_SPI_TransmitData8(SPI1, 0xFF);	// send clocking byte, not used.
 8005b5e:	21ff      	movs	r1, #255	; 0xff
 8005b60:	4812      	ldr	r0, [pc, #72]	; (8005bac <mpu9255_read+0x90>)
 8005b62:	f7ff ff4d 	bl	8005a00 <LL_SPI_TransmitData8>
		while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 8005b66:	bf00      	nop
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <mpu9255_read+0x90>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f9      	beq.n	8005b68 <mpu9255_read+0x4c>
		data[i] = SPI1->DR;
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <mpu9255_read+0x90>)
 8005b76:	68d9      	ldr	r1, [r3, #12]
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	b2ca      	uxtb	r2, r1
 8005b80:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++) {
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	3301      	adds	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	797b      	ldrb	r3, [r7, #5]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d3e6      	bcc.n	8005b5e <mpu9255_read+0x42>
	}

	while ((SPI1->SR & SPI_SR_BSY)) {
 8005b90:	bf00      	nop
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <mpu9255_read+0x90>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f9      	bne.n	8005b92 <mpu9255_read+0x76>
		}; 	// no longer busy
	clearChipSelect();
 8005b9e:	f7ff ff5d 	bl	8005a5c <clearChipSelect>

	return 0;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40013000 	.word	0x40013000

08005bb0 <mpu9255_delay_ms>:

void mpu9255_delay_ms(unsigned long num_ms) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	ms_delay = num_ms;
 8005bb8:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <mpu9255_delay_ms+0x28>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6013      	str	r3, [r2, #0]
	while (ms_delay > 0) {
 8005bbe:	bf00      	nop
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <mpu9255_delay_ms+0x28>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1fb      	bne.n	8005bc0 <mpu9255_delay_ms+0x10>
		// do nothing while we wait.
	}
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000548 	.word	0x20000548

08005bdc <delaytimer_event_handler>:

void mpu9255_get_ms(unsigned long *count) {
	*count = g_ul_ms_ticks;
}

void delaytimer_event_handler() {
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
	g_ul_ms_ticks++;
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <delaytimer_event_handler+0x2c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <delaytimer_event_handler+0x2c>)
 8005be8:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <delaytimer_event_handler+0x30>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <delaytimer_event_handler+0x20>
		ms_delay--;
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <delaytimer_event_handler+0x30>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <delaytimer_event_handler+0x30>)
 8005bfa:	6013      	str	r3, [r2, #0]
	}
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000544 	.word	0x20000544
 8005c0c:	20000548 	.word	0x20000548

08005c10 <readTimer_event_handler>:

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
	updateRequired = true;
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <readTimer_event_handler+0x14>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	2000054c 	.word	0x2000054c

08005c28 <android_orient_cb>:

void android_orient_cb(unsigned char orientation) {
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
	// do nothing, not used.
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <tap_cb>:
void tap_cb(unsigned char direction, unsigned char count) {
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	4603      	mov	r3, r0
 8005c46:	460a      	mov	r2, r1
 8005c48:	71fb      	strb	r3, [r7, #7]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71bb      	strb	r3, [r7, #6]
	// do nothing, not used.
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f993 3000 	ldrsb.w	r3, [r3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd02      	ble.n	8005c72 <inv_row_2_scale+0x18>
        b = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	81fb      	strh	r3, [r7, #14]
 8005c70:	e02d      	b.n	8005cce <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f993 3000 	ldrsb.w	r3, [r3]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da02      	bge.n	8005c82 <inv_row_2_scale+0x28>
        b = 4;
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	81fb      	strh	r3, [r7, #14]
 8005c80:	e025      	b.n	8005cce <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3301      	adds	r3, #1
 8005c86:	f993 3000 	ldrsb.w	r3, [r3]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd02      	ble.n	8005c94 <inv_row_2_scale+0x3a>
        b = 1;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	81fb      	strh	r3, [r7, #14]
 8005c92:	e01c      	b.n	8005cce <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3301      	adds	r3, #1
 8005c98:	f993 3000 	ldrsb.w	r3, [r3]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	da02      	bge.n	8005ca6 <inv_row_2_scale+0x4c>
        b = 5;
 8005ca0:	2305      	movs	r3, #5
 8005ca2:	81fb      	strh	r3, [r7, #14]
 8005ca4:	e013      	b.n	8005cce <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3302      	adds	r3, #2
 8005caa:	f993 3000 	ldrsb.w	r3, [r3]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd02      	ble.n	8005cb8 <inv_row_2_scale+0x5e>
        b = 2;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	81fb      	strh	r3, [r7, #14]
 8005cb6:	e00a      	b.n	8005cce <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3302      	adds	r3, #2
 8005cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da02      	bge.n	8005cca <inv_row_2_scale+0x70>
        b = 6;
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	81fb      	strh	r3, [r7, #14]
 8005cc8:	e001      	b.n	8005cce <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8005cca:	2307      	movs	r3, #7
 8005ccc:	81fb      	strh	r3, [r7, #14]
    return b;
 8005cce:	89fb      	ldrh	r3, [r7, #14]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ffb8 	bl	8005c5a <inv_row_2_scale>
 8005cea:	4603      	mov	r3, r0
 8005cec:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3303      	adds	r3, #3
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ffb1 	bl	8005c5a <inv_row_2_scale>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	b21a      	sxth	r2, r3
 8005cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3306      	adds	r3, #6
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ffa4 	bl	8005c5a <inv_row_2_scale>
 8005d12:	4603      	mov	r3, r0
 8005d14:	019b      	lsls	r3, r3, #6
 8005d16:	b21a      	sxth	r2, r3
 8005d18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	b21b      	sxth	r3, r3
 8005d20:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8005d22:	89fb      	ldrh	r3, [r7, #14]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <mpu9255_init>:


	}
}

void mpu9255_init(uint32_t readPeriod) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
//	spi1_init(); ??
	clearChipSelect();
 8005d34:	f7ff fe92 	bl	8005a5c <clearChipSelect>
	uint8_t whoami;
	mpu9255_read(0, 0x75, 1, &whoami);
 8005d38:	f107 031f 	add.w	r3, r7, #31
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2175      	movs	r1, #117	; 0x75
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7ff feeb 	bl	8005b1c <mpu9255_read>
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8005d46:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <mpu9255_init+0xc8>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	721a      	strb	r2, [r3, #8]
	delayTimer.alarm = 1; // 1ms
 8005d4c:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <mpu9255_init+0xc8>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	60da      	str	r2, [r3, #12]
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 8005d52:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <mpu9255_init+0xc8>)
 8005d54:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <mpu9255_init+0xcc>)
 8005d56:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&delayTimer);
 8005d58:	4826      	ldr	r0, [pc, #152]	; (8005df4 <mpu9255_init+0xc8>)
 8005d5a:	f7fd fa09 	bl	8003170 <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 8005d5e:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <mpu9255_init+0xc8>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd f9dc 	bl	8003120 <systick_app_timer_channel_start>

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8005d68:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <mpu9255_init+0xd0>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	721a      	strb	r2, [r3, #8]
	readTimer.alarm = readPeriod; // 1ms
 8005d6e:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <mpu9255_init+0xd0>)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60d3      	str	r3, [r2, #12]
	readTimer.timerAlarmCallback = readTimer_event_handler;
 8005d74:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <mpu9255_init+0xd0>)
 8005d76:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <mpu9255_init+0xd4>)
 8005d78:	611a      	str	r2, [r3, #16]
	systick_app_timer_channel_create(&readTimer);
 8005d7a:	4820      	ldr	r0, [pc, #128]	; (8005dfc <mpu9255_init+0xd0>)
 8005d7c:	f7fd f9f8 	bl	8003170 <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// reset internal data
	memset(&dmpData, 0, sizeof(dmpData));
 8005d80:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8005d84:	2100      	movs	r1, #0
 8005d86:	481f      	ldr	r0, [pc, #124]	; (8005e04 <mpu9255_init+0xd8>)
 8005d88:	f001 fae2 	bl	8007350 <memset>

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 8005d8c:	f107 0318 	add.w	r3, r7, #24
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fd ffa3 	bl	8003cdc <mpu_init>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8005d96:	2078      	movs	r0, #120	; 0x78
 8005d98:	f7fe fc4a 	bl	8004630 <mpu_set_sensors>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 8005d9c:	f7ff f8e4 	bl	8004f68 <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {1, 0, 0,
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <mpu9255_init+0xdc>)
 8005da2:	f107 030c 	add.w	r3, r7, #12
 8005da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005da8:	c303      	stmia	r3!, {r0, r1}
 8005daa:	701a      	strb	r2, [r3, #0]
							0, 0, -1,
							0, 1, 0};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff93 	bl	8005cdc <inv_orientation_matrix_to_scalar>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff f8e5 	bl	8004f88 <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 8005dbe:	4813      	ldr	r0, [pc, #76]	; (8005e0c <mpu9255_init+0xe0>)
 8005dc0:	f7ff fdfe 	bl	80059c0 <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 8005dc4:	4812      	ldr	r0, [pc, #72]	; (8005e10 <mpu9255_init+0xe4>)
 8005dc6:	f7ff fe0b 	bl	80059e0 <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
 8005dca:	20d0      	movs	r0, #208	; 0xd0
 8005dcc:	f7ff fc52 	bl	8005674 <dmp_enable_feature>

	dmp_set_fifo_rate(100);
 8005dd0:	2064      	movs	r0, #100	; 0x64
 8005dd2:	f7ff f9c5 	bl	8005160 <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	f7fe ff34 	bl	8004c44 <mpu_set_dmp_state>
	mpu_reset_fifo();
 8005ddc:	f7fe f8e0 	bl	8003fa0 <mpu_reset_fifo>
	systick_app_timer_channel_start(readTimer.channel);
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <mpu9255_init+0xd0>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fd f99b 	bl	8003120 <systick_app_timer_channel_start>
}
 8005dea:	bf00      	nop
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	2000051c 	.word	0x2000051c
 8005df8:	08005bdd 	.word	0x08005bdd
 8005dfc:	20000530 	.word	0x20000530
 8005e00:	08005c11 	.word	0x08005c11
 8005e04:	20000550 	.word	0x20000550
 8005e08:	080085a4 	.word	0x080085a4
 8005e0c:	08005c3f 	.word	0x08005c3f
 8005e10:	08005c29 	.word	0x08005c29

08005e14 <LL_ADC_REG_SetSequencerLength>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f023 020f 	bic.w	r2, r3, #15
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <LL_ADC_IsEnabled>:
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <LL_ADC_IsEnabled+0x18>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <LL_ADC_IsEnabled+0x1a>
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8005e6e:	481c      	ldr	r0, [pc, #112]	; (8005ee0 <LL_ADC_CommonInit+0x80>)
 8005e70:	f7ff ffe3 	bl	8005e3a <LL_ADC_IsEnabled>
 8005e74:	4604      	mov	r4, r0
 8005e76:	481b      	ldr	r0, [pc, #108]	; (8005ee4 <LL_ADC_CommonInit+0x84>)
 8005e78:	f7ff ffdf 	bl	8005e3a <LL_ADC_IsEnabled>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	431c      	orrs	r4, r3
 8005e80:	4819      	ldr	r0, [pc, #100]	; (8005ee8 <LL_ADC_CommonInit+0x88>)
 8005e82:	f7ff ffda 	bl	8005e3a <LL_ADC_IsEnabled>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4323      	orrs	r3, r4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d120      	bne.n	8005ed0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d012      	beq.n	8005ebc <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <LL_ADC_CommonInit+0x8c>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	6811      	ldr	r1, [r2, #0]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	4311      	orrs	r1, r2
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	4311      	orrs	r1, r2
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	68d2      	ldr	r2, [r2, #12]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]
 8005eba:	e00b      	b.n	8005ed4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <LL_ADC_CommonInit+0x8c>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	e001      	b.n	8005ed4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	50040000 	.word	0x50040000
 8005ee4:	50040100 	.word	0x50040100
 8005ee8:	50040200 	.word	0x50040200
 8005eec:	ffc030e0 	.word	0xffc030e0

08005ef0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff ff9b 	bl	8005e3a <LL_ADC_IsEnabled>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d111      	bne.n	8005f2e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f12:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	6811      	ldr	r1, [r2, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6852      	ldr	r2, [r2, #4]
 8005f1e:	4311      	orrs	r1, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	e001      	b.n	8005f32 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff ff75 	bl	8005e3a <LL_ADC_IsEnabled>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d132      	bne.n	8005fbc <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d015      	beq.n	8005f8a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <LL_ADC_REG_Init+0x90>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	68d2      	ldr	r2, [r2, #12]
 8005f74:	4311      	orrs	r1, r2
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	6912      	ldr	r2, [r2, #16]
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	6952      	ldr	r2, [r2, #20]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e011      	b.n	8005fae <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <LL_ADC_REG_Init+0x90>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	6912      	ldr	r2, [r2, #16]
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	6952      	ldr	r2, [r2, #20]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff2d 	bl	8005e14 <LL_ADC_REG_SetSequencerLength>
 8005fba:	e001      	b.n	8005fc0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	fff0c03c 	.word	0xfff0c03c

08005fd0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	600b      	str	r3, [r1, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	40010400 	.word	0x40010400

08005ff4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <LL_EXTI_EnableIT_32_63+0x20>)
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	4904      	ldr	r1, [pc, #16]	; (8006014 <LL_EXTI_EnableIT_32_63+0x20>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4313      	orrs	r3, r2
 8006006:	620b      	str	r3, [r1, #32]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40010400 	.word	0x40010400

08006018 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <LL_EXTI_DisableIT_0_31+0x24>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	43db      	mvns	r3, r3
 8006028:	4904      	ldr	r1, [pc, #16]	; (800603c <LL_EXTI_DisableIT_0_31+0x24>)
 800602a:	4013      	ands	r3, r2
 800602c:	600b      	str	r3, [r1, #0]
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010400 	.word	0x40010400

08006040 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <LL_EXTI_DisableIT_32_63+0x24>)
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	43db      	mvns	r3, r3
 8006050:	4904      	ldr	r1, [pc, #16]	; (8006064 <LL_EXTI_DisableIT_32_63+0x24>)
 8006052:	4013      	ands	r3, r2
 8006054:	620b      	str	r3, [r1, #32]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010400 	.word	0x40010400

08006068 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]

}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40010400 	.word	0x40010400

0800608c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <LL_EXTI_EnableEvent_32_63+0x20>)
 8006096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006098:	4904      	ldr	r1, [pc, #16]	; (80060ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4313      	orrs	r3, r2
 800609e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40010400 	.word	0x40010400

080060b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	43db      	mvns	r3, r3
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010400 	.word	0x40010400

080060d8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80060e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	4904      	ldr	r1, [pc, #16]	; (80060fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40010400 	.word	0x40010400

08006100 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	4904      	ldr	r1, [pc, #16]	; (8006120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4313      	orrs	r3, r2
 8006112:	608b      	str	r3, [r1, #8]

}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010400 	.word	0x40010400

08006124 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800612e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4313      	orrs	r3, r2
 8006136:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40010400 	.word	0x40010400

08006148 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	43db      	mvns	r3, r3
 8006158:	4904      	ldr	r1, [pc, #16]	; (800616c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800615a:	4013      	ands	r3, r2
 800615c:	608b      	str	r3, [r1, #8]

}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010400 	.word	0x40010400

08006170 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800617a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	43db      	mvns	r3, r3
 8006180:	4904      	ldr	r1, [pc, #16]	; (8006194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006182:	4013      	ands	r3, r2
 8006184:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010400 	.word	0x40010400

08006198 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	4904      	ldr	r1, [pc, #16]	; (80061b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60cb      	str	r3, [r1, #12]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40010400 	.word	0x40010400

080061bc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4904      	ldr	r1, [pc, #16]	; (80061dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40010400 	.word	0x40010400

080061e0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	43db      	mvns	r3, r3
 80061f0:	4904      	ldr	r1, [pc, #16]	; (8006204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	60cb      	str	r3, [r1, #12]
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010400 	.word	0x40010400

08006208 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	43db      	mvns	r3, r3
 8006218:	4904      	ldr	r1, [pc, #16]	; (800622c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800621a:	4013      	ands	r3, r2
 800621c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40010400 	.word	0x40010400

08006230 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7a1b      	ldrb	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80d1 	beq.w	80063e8 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d063      	beq.n	8006316 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7a5b      	ldrb	r3, [r3, #9]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d01c      	beq.n	8006290 <LL_EXTI_Init+0x60>
 8006256:	2b02      	cmp	r3, #2
 8006258:	dc25      	bgt.n	80062a6 <LL_EXTI_Init+0x76>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <LL_EXTI_Init+0x34>
 800625e:	2b01      	cmp	r3, #1
 8006260:	d00b      	beq.n	800627a <LL_EXTI_Init+0x4a>
 8006262:	e020      	b.n	80062a6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff21 	bl	80060b0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff feac 	bl	8005fd0 <LL_EXTI_EnableIT_0_31>
          break;
 8006278:	e018      	b.n	80062ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff feca 	bl	8006018 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff feed 	bl	8006068 <LL_EXTI_EnableEvent_0_31>
          break;
 800628e:	e00d      	b.n	80062ac <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fe9b 	bl	8005fd0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fee2 	bl	8006068 <LL_EXTI_EnableEvent_0_31>
          break;
 80062a4:	e002      	b.n	80062ac <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80062a6:	2301      	movs	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
          break;
 80062aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7a9b      	ldrb	r3, [r3, #10]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d030      	beq.n	8006316 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7a9b      	ldrb	r3, [r3, #10]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d01c      	beq.n	80062f6 <LL_EXTI_Init+0xc6>
 80062bc:	2b03      	cmp	r3, #3
 80062be:	dc25      	bgt.n	800630c <LL_EXTI_Init+0xdc>
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d002      	beq.n	80062ca <LL_EXTI_Init+0x9a>
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d00b      	beq.n	80062e0 <LL_EXTI_Init+0xb0>
 80062c8:	e020      	b.n	800630c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff86 	bl	80061e0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ff11 	bl	8006100 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80062de:	e01b      	b.n	8006318 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff ff2f 	bl	8006148 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ff52 	bl	8006198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80062f4:	e010      	b.n	8006318 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff00 	bl	8006100 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff ff47 	bl	8006198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800630a:	e005      	b.n	8006318 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f043 0302 	orr.w	r3, r3, #2
 8006312:	60fb      	str	r3, [r7, #12]
            break;
 8006314:	e000      	b.n	8006318 <LL_EXTI_Init+0xe8>
        }
      }
 8006316:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d078      	beq.n	8006412 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7a5b      	ldrb	r3, [r3, #9]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d01c      	beq.n	8006362 <LL_EXTI_Init+0x132>
 8006328:	2b02      	cmp	r3, #2
 800632a:	dc25      	bgt.n	8006378 <LL_EXTI_Init+0x148>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <LL_EXTI_Init+0x106>
 8006330:	2b01      	cmp	r3, #1
 8006332:	d00b      	beq.n	800634c <LL_EXTI_Init+0x11c>
 8006334:	e020      	b.n	8006378 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fecc 	bl	80060d8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe55 	bl	8005ff4 <LL_EXTI_EnableIT_32_63>
          break;
 800634a:	e01a      	b.n	8006382 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fe75 	bl	8006040 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fe96 	bl	800608c <LL_EXTI_EnableEvent_32_63>
          break;
 8006360:	e00f      	b.n	8006382 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fe44 	bl	8005ff4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fe8b 	bl	800608c <LL_EXTI_EnableEvent_32_63>
          break;
 8006376:	e004      	b.n	8006382 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f043 0304 	orr.w	r3, r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
          break;
 8006380:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7a9b      	ldrb	r3, [r3, #10]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d043      	beq.n	8006412 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7a9b      	ldrb	r3, [r3, #10]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d01c      	beq.n	80063cc <LL_EXTI_Init+0x19c>
 8006392:	2b03      	cmp	r3, #3
 8006394:	dc25      	bgt.n	80063e2 <LL_EXTI_Init+0x1b2>
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <LL_EXTI_Init+0x170>
 800639a:	2b02      	cmp	r3, #2
 800639c:	d00b      	beq.n	80063b6 <LL_EXTI_Init+0x186>
 800639e:	e020      	b.n	80063e2 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff2f 	bl	8006208 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff feb8 	bl	8006124 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80063b4:	e02e      	b.n	8006414 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fed8 	bl	8006170 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fef9 	bl	80061bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80063ca:	e023      	b.n	8006414 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fea7 	bl	8006124 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff feee 	bl	80061bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80063e0:	e018      	b.n	8006414 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
            break;
 80063e6:	e015      	b.n	8006414 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fe13 	bl	8006018 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fe5a 	bl	80060b0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fe1d 	bl	8006040 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fe64 	bl	80060d8 <LL_EXTI_DisableEvent_32_63>
 8006410:	e000      	b.n	8006414 <LL_EXTI_Init+0x1e4>
      }
 8006412:	bf00      	nop
  }

  return status;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <LL_GPIO_SetPinMode>:
{
 800641e:	b480      	push	{r7}
 8006420:	b08b      	sub	sp, #44	; 0x2c
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	fa93 f3a3 	rbit	r3, r3
 8006438:	613b      	str	r3, [r7, #16]
  return result;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006444:	2320      	movs	r3, #32
 8006446:	e003      	b.n	8006450 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	2103      	movs	r1, #3
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	401a      	ands	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	fa93 f3a3 	rbit	r3, r3
 8006466:	61fb      	str	r3, [r7, #28]
  return result;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006472:	2320      	movs	r3, #32
 8006474:	e003      	b.n	800647e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]
}
 800648c:	bf00      	nop
 800648e:	372c      	adds	r7, #44	; 0x2c
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LL_GPIO_SetPinOutputType>:
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	43db      	mvns	r3, r3
 80064ac:	401a      	ands	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	605a      	str	r2, [r3, #4]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <LL_GPIO_SetPinSpeed>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b08b      	sub	sp, #44	; 0x2c
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	fa93 f3a3 	rbit	r3, r3
 80064e2:	613b      	str	r3, [r7, #16]
  return result;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80064ee:	2320      	movs	r3, #32
 80064f0:	e003      	b.n	80064fa <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	fab3 f383 	clz	r3, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	2103      	movs	r1, #3
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	43db      	mvns	r3, r3
 8006504:	401a      	ands	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	61fb      	str	r3, [r7, #28]
  return result;
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800651c:	2320      	movs	r3, #32
 800651e:	e003      	b.n	8006528 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	609a      	str	r2, [r3, #8]
}
 8006536:	bf00      	nop
 8006538:	372c      	adds	r7, #44	; 0x2c
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_GPIO_SetPinPull>:
{
 8006542:	b480      	push	{r7}
 8006544:	b08b      	sub	sp, #44	; 0x2c
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	613b      	str	r3, [r7, #16]
  return result;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006568:	2320      	movs	r3, #32
 800656a:	e003      	b.n	8006574 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2103      	movs	r1, #3
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	401a      	ands	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	fa93 f3a3 	rbit	r3, r3
 800658a:	61fb      	str	r3, [r7, #28]
  return result;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006596:	2320      	movs	r3, #32
 8006598:	e003      	b.n	80065a2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	fab3 f383 	clz	r3, r3
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	fa01 f303 	lsl.w	r3, r1, r3
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	60da      	str	r2, [r3, #12]
}
 80065b0:	bf00      	nop
 80065b2:	372c      	adds	r7, #44	; 0x2c
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_GPIO_SetAFPin_0_7>:
{
 80065bc:	b480      	push	{r7}
 80065be:	b08b      	sub	sp, #44	; 0x2c
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	fa93 f3a3 	rbit	r3, r3
 80065d6:	613b      	str	r3, [r7, #16]
  return result;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80065e2:	2320      	movs	r3, #32
 80065e4:	e003      	b.n	80065ee <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	fab3 f383 	clz	r3, r3
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	210f      	movs	r1, #15
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	401a      	ands	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	fa93 f3a3 	rbit	r3, r3
 8006604:	61fb      	str	r3, [r7, #28]
  return result;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006610:	2320      	movs	r3, #32
 8006612:	e003      	b.n	800661c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	fab3 f383 	clz	r3, r3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	372c      	adds	r7, #44	; 0x2c
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <LL_GPIO_SetAFPin_8_15>:
{
 8006636:	b480      	push	{r7}
 8006638:	b08b      	sub	sp, #44	; 0x2c
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	fa93 f3a3 	rbit	r3, r3
 8006652:	613b      	str	r3, [r7, #16]
  return result;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800665e:	2320      	movs	r3, #32
 8006660:	e003      	b.n	800666a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	fab3 f383 	clz	r3, r3
 8006668:	b2db      	uxtb	r3, r3
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	210f      	movs	r1, #15
 800666e:	fa01 f303 	lsl.w	r3, r1, r3
 8006672:	43db      	mvns	r3, r3
 8006674:	401a      	ands	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	fa93 f3a3 	rbit	r3, r3
 8006682:	61fb      	str	r3, [r7, #28]
  return result;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800668e:	2320      	movs	r3, #32
 8006690:	e003      	b.n	800669a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	fab3 f383 	clz	r3, r3
 8006698:	b2db      	uxtb	r3, r3
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80066a8:	bf00      	nop
 80066aa:	372c      	adds	r7, #44	; 0x2c
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	60fb      	str	r3, [r7, #12]
  return result;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <LL_GPIO_Init+0x26>
    return 32U;
 80066d6:	2320      	movs	r3, #32
 80066d8:	e003      	b.n	80066e2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	fab3 f383 	clz	r3, r3
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80066e4:	e048      	b.n	8006778 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	2101      	movs	r1, #1
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	fa01 f303 	lsl.w	r3, r1, r3
 80066f2:	4013      	ands	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d03a      	beq.n	8006772 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d003      	beq.n	800670c <LL_GPIO_Init+0x58>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d10e      	bne.n	800672a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	461a      	mov	r2, r3
 8006712:	69b9      	ldr	r1, [r7, #24]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fed7 	bl	80064c8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6819      	ldr	r1, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff feb7 	bl	8006498 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	461a      	mov	r2, r3
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff ff05 	bl	8006542 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d111      	bne.n	8006764 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2bff      	cmp	r3, #255	; 0xff
 8006744:	d807      	bhi.n	8006756 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	461a      	mov	r2, r3
 800674c:	69b9      	ldr	r1, [r7, #24]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff34 	bl	80065bc <LL_GPIO_SetAFPin_0_7>
 8006754:	e006      	b.n	8006764 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	461a      	mov	r2, r3
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ff69 	bl	8006636 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	461a      	mov	r2, r3
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fe56 	bl	800641e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1af      	bne.n	80066e6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <LL_RCC_HSI_IsReady>:
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <LL_RCC_HSI_IsReady+0x24>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a0:	d101      	bne.n	80067a6 <LL_RCC_HSI_IsReady+0x16>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <LL_RCC_HSI_IsReady+0x18>
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40021000 	.word	0x40021000

080067b8 <LL_RCC_LSE_IsReady>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <LL_RCC_LSE_IsReady+0x24>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d101      	bne.n	80067ce <LL_RCC_LSE_IsReady+0x16>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <LL_RCC_LSE_IsReady+0x18>
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000

080067e0 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d101      	bne.n	80067f4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40021000 	.word	0x40021000

08006804 <LL_RCC_MSI_GetRange>:
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <LL_RCC_MSI_GetRange+0x18>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40021000 	.word	0x40021000

08006820 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800682a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40021000 	.word	0x40021000

0800683c <LL_RCC_GetSysClkSource>:
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <LL_RCC_GetSysClkSource+0x18>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 030c 	and.w	r3, r3, #12
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000

08006858 <LL_RCC_GetAHBPrescaler>:
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <LL_RCC_GetAHBPrescaler+0x18>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000

08006874 <LL_RCC_GetAPB1Prescaler>:
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <LL_RCC_GetAPB1Prescaler+0x18>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006880:	4618      	mov	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000

08006890 <LL_RCC_GetAPB2Prescaler>:
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000

080068ac <LL_RCC_GetUSARTClockSource>:
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <LL_RCC_GetUSARTClockSource+0x24>)
 80068b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	401a      	ands	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	4313      	orrs	r3, r2
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40021000 	.word	0x40021000

080068d4 <LL_RCC_GetUARTClockSource>:
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <LL_RCC_GetUARTClockSource+0x24>)
 80068de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	401a      	ands	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	4313      	orrs	r3, r2
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40021000 	.word	0x40021000

080068fc <LL_RCC_PLL_GetMainSource>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <LL_RCC_PLL_GetMainSource+0x18>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f003 0303 	and.w	r3, r3, #3
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000

08006918 <LL_RCC_PLL_GetN>:
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <LL_RCC_PLL_GetN+0x18>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40021000 	.word	0x40021000

08006934 <LL_RCC_PLL_GetR>:
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006938:	4b04      	ldr	r3, [pc, #16]	; (800694c <LL_RCC_PLL_GetR+0x18>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8006940:	4618      	mov	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000

08006950 <LL_RCC_PLL_GetDivider>:
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <LL_RCC_PLL_GetDivider+0x18>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000

0800696c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d137      	bne.n	80069ee <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ff94 	bl	80068ac <LL_RCC_GetUSARTClockSource>
 8006984:	4603      	mov	r3, r0
 8006986:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800698a:	2b03      	cmp	r3, #3
 800698c:	f200 80b3 	bhi.w	8006af6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069a9 	.word	0x080069a9
 80069a0:	080069b1 	.word	0x080069b1
 80069a4:	080069c3 	.word	0x080069c3
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80069a8:	f000 f95c 	bl	8006c64 <RCC_GetSystemClockFreq>
 80069ac:	60f8      	str	r0, [r7, #12]
        break;
 80069ae:	e0b5      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80069b0:	f7ff feee 	bl	8006790 <LL_RCC_HSI_IsReady>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 809f 	beq.w	8006afa <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80069bc:	4b5a      	ldr	r3, [pc, #360]	; (8006b28 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80069be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069c0:	e09b      	b.n	8006afa <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80069c2:	f7ff fef9 	bl	80067b8 <LL_RCC_LSE_IsReady>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8098 	beq.w	8006afe <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069d4:	e093      	b.n	8006afe <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80069d6:	f000 f945 	bl	8006c64 <RCC_GetSystemClockFreq>
 80069da:	4603      	mov	r3, r0
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f9d1 	bl	8006d84 <RCC_GetHCLKClockFreq>
 80069e2:	4603      	mov	r3, r0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f9f7 	bl	8006dd8 <RCC_GetPCLK2ClockFreq>
 80069ea:	60f8      	str	r0, [r7, #12]
        break;
 80069ec:	e096      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d146      	bne.n	8006a82 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff59 	bl	80068ac <LL_RCC_GetUSARTClockSource>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d87e      	bhi.n	8006b02 <LL_RCC_GetUSARTClockFreq+0x196>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a6b 	.word	0x08006a6b
 8006a10:	08006b03 	.word	0x08006b03
 8006a14:	08006b03 	.word	0x08006b03
 8006a18:	08006b03 	.word	0x08006b03
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006b03 	.word	0x08006b03
 8006a24:	08006b03 	.word	0x08006b03
 8006a28:	08006b03 	.word	0x08006b03
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006b03 	.word	0x08006b03
 8006a34:	08006b03 	.word	0x08006b03
 8006a38:	08006b03 	.word	0x08006b03
 8006a3c:	08006a59 	.word	0x08006a59
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006a40:	f000 f910 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006a44:	60f8      	str	r0, [r7, #12]
        break;
 8006a46:	e069      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006a48:	f7ff fea2 	bl	8006790 <LL_RCC_HSI_IsReady>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d059      	beq.n	8006b06 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006a52:	4b35      	ldr	r3, [pc, #212]	; (8006b28 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006a54:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006a56:	e056      	b.n	8006b06 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006a58:	f7ff feae 	bl	80067b8 <LL_RCC_LSE_IsReady>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d053      	beq.n	8006b0a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006a68:	e04f      	b.n	8006b0a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006a6a:	f000 f8fb 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f987 	bl	8006d84 <RCC_GetHCLKClockFreq>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f999 	bl	8006db0 <RCC_GetPCLK1ClockFreq>
 8006a7e:	60f8      	str	r0, [r7, #12]
        break;
 8006a80:	e04c      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d142      	bne.n	8006b0e <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff0f 	bl	80068ac <LL_RCC_GetUSARTClockSource>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006a94:	d01a      	beq.n	8006acc <LL_RCC_GetUSARTClockFreq+0x160>
 8006a96:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006a9a:	d83a      	bhi.n	8006b12 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00c      	beq.n	8006abc <LL_RCC_GetUSARTClockFreq+0x150>
 8006aa2:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d834      	bhi.n	8006b12 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aac:	d017      	beq.n	8006ade <LL_RCC_GetUSARTClockFreq+0x172>
 8006aae:	4a20      	ldr	r2, [pc, #128]	; (8006b30 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d12e      	bne.n	8006b12 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006ab4:	f000 f8d6 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006ab8:	60f8      	str	r0, [r7, #12]
          break;
 8006aba:	e02f      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006abc:	f7ff fe68 	bl	8006790 <LL_RCC_HSI_IsReady>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d027      	beq.n	8006b16 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006ac6:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006ac8:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006aca:	e024      	b.n	8006b16 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006acc:	f7ff fe74 	bl	80067b8 <LL_RCC_LSE_IsReady>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d021      	beq.n	8006b1a <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ada:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006adc:	e01d      	b.n	8006b1a <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006ade:	f000 f8c1 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 f94d 	bl	8006d84 <RCC_GetHCLKClockFreq>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f95f 	bl	8006db0 <RCC_GetPCLK1ClockFreq>
 8006af2:	60f8      	str	r0, [r7, #12]
          break;
 8006af4:	e012      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006af6:	bf00      	nop
 8006af8:	e010      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006afa:	bf00      	nop
 8006afc:	e00e      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006afe:	bf00      	nop
 8006b00:	e00c      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006b02:	bf00      	nop
 8006b04:	e00a      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006b06:	bf00      	nop
 8006b08:	e008      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006b0a:	bf00      	nop
 8006b0c:	e006      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006b0e:	bf00      	nop
 8006b10:	e004      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006b12:	bf00      	nop
 8006b14:	e002      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006b1a:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	00300020 	.word	0x00300020
 8006b30:	00300010 	.word	0x00300010

08006b34 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2bc0      	cmp	r3, #192	; 0xc0
 8006b44:	d136      	bne.n	8006bb4 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fec4 	bl	80068d4 <LL_RCC_GetUARTClockSource>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006b52:	d01a      	beq.n	8006b8a <LL_RCC_GetUARTClockFreq+0x56>
 8006b54:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006b58:	d82e      	bhi.n	8006bb8 <LL_RCC_GetUARTClockFreq+0x84>
 8006b5a:	4a3d      	ldr	r2, [pc, #244]	; (8006c50 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00c      	beq.n	8006b7a <LL_RCC_GetUARTClockFreq+0x46>
 8006b60:	4a3b      	ldr	r2, [pc, #236]	; (8006c50 <LL_RCC_GetUARTClockFreq+0x11c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d828      	bhi.n	8006bb8 <LL_RCC_GetUARTClockFreq+0x84>
 8006b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b6a:	d017      	beq.n	8006b9c <LL_RCC_GetUARTClockFreq+0x68>
 8006b6c:	4a39      	ldr	r2, [pc, #228]	; (8006c54 <LL_RCC_GetUARTClockFreq+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d122      	bne.n	8006bb8 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006b72:	f000 f877 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006b76:	60f8      	str	r0, [r7, #12]
        break;
 8006b78:	e023      	b.n	8006bc2 <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006b7a:	f7ff fe09 	bl	8006790 <LL_RCC_HSI_IsReady>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01b      	beq.n	8006bbc <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006b84:	4b34      	ldr	r3, [pc, #208]	; (8006c58 <LL_RCC_GetUARTClockFreq+0x124>)
 8006b86:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b88:	e018      	b.n	8006bbc <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006b8a:	f7ff fe15 	bl	80067b8 <LL_RCC_LSE_IsReady>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b98:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b9a:	e011      	b.n	8006bc0 <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006b9c:	f000 f862 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f8ee 	bl	8006d84 <RCC_GetHCLKClockFreq>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f900 	bl	8006db0 <RCC_GetPCLK1ClockFreq>
 8006bb0:	60f8      	str	r0, [r7, #12]
        break;
 8006bb2:	e006      	b.n	8006bc2 <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006bb4:	bf00      	nop
 8006bb6:	e004      	b.n	8006bc2 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006bc0:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc8:	d136      	bne.n	8006c38 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fe82 	bl	80068d4 <LL_RCC_GetUARTClockSource>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006bd6:	d01a      	beq.n	8006c0e <LL_RCC_GetUARTClockFreq+0xda>
 8006bd8:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006bdc:	d82e      	bhi.n	8006c3c <LL_RCC_GetUARTClockFreq+0x108>
 8006bde:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <LL_RCC_GetUARTClockFreq+0x128>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00c      	beq.n	8006bfe <LL_RCC_GetUARTClockFreq+0xca>
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <LL_RCC_GetUARTClockFreq+0x128>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d828      	bhi.n	8006c3c <LL_RCC_GetUARTClockFreq+0x108>
 8006bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bee:	d017      	beq.n	8006c20 <LL_RCC_GetUARTClockFreq+0xec>
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <LL_RCC_GetUARTClockFreq+0x12c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d122      	bne.n	8006c3c <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006bf6:	f000 f835 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006bfa:	60f8      	str	r0, [r7, #12]
        break;
 8006bfc:	e023      	b.n	8006c46 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006bfe:	f7ff fdc7 	bl	8006790 <LL_RCC_HSI_IsReady>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006c08:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <LL_RCC_GetUARTClockFreq+0x124>)
 8006c0a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c0c:	e018      	b.n	8006c40 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006c0e:	f7ff fdd3 	bl	80067b8 <LL_RCC_LSE_IsReady>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006c1e:	e011      	b.n	8006c44 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006c20:	f000 f820 	bl	8006c64 <RCC_GetSystemClockFreq>
 8006c24:	4603      	mov	r3, r0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f8ac 	bl	8006d84 <RCC_GetHCLKClockFreq>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f8be 	bl	8006db0 <RCC_GetPCLK1ClockFreq>
 8006c34:	60f8      	str	r0, [r7, #12]
        break;
 8006c36:	e006      	b.n	8006c46 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006c38:	bf00      	nop
 8006c3a:	e004      	b.n	8006c46 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006c44:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006c46:	68fb      	ldr	r3, [r7, #12]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	00c00080 	.word	0x00c00080
 8006c54:	00c00040 	.word	0x00c00040
 8006c58:	00f42400 	.word	0x00f42400
 8006c5c:	03000200 	.word	0x03000200
 8006c60:	03000100 	.word	0x03000100

08006c64 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006c6a:	f7ff fde7 	bl	800683c <LL_RCC_GetSysClkSource>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	d851      	bhi.n	8006d18 <RCC_GetSystemClockFreq+0xb4>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <RCC_GetSystemClockFreq+0x18>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006d19 	.word	0x08006d19
 8006c84:	08006d19 	.word	0x08006d19
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006d05 	.word	0x08006d05
 8006c90:	08006d19 	.word	0x08006d19
 8006c94:	08006d19 	.word	0x08006d19
 8006c98:	08006d19 	.word	0x08006d19
 8006c9c:	08006d0b 	.word	0x08006d0b
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006d11 	.word	0x08006d11
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006cb0:	f7ff fd96 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d111      	bne.n	8006cde <RCC_GetSystemClockFreq+0x7a>
 8006cba:	f7ff fd91 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <RCC_GetSystemClockFreq+0x6a>
 8006cc4:	f7ff fd9e 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	e003      	b.n	8006cd6 <RCC_GetSystemClockFreq+0x72>
 8006cce:	f7ff fda7 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	4a28      	ldr	r2, [pc, #160]	; (8006d78 <RCC_GetSystemClockFreq+0x114>)
 8006cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cdc:	e010      	b.n	8006d00 <RCC_GetSystemClockFreq+0x9c>
 8006cde:	f7ff fd7f 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <RCC_GetSystemClockFreq+0x8e>
 8006ce8:	f7ff fd8c 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006cec:	4603      	mov	r3, r0
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	e003      	b.n	8006cfa <RCC_GetSystemClockFreq+0x96>
 8006cf2:	f7ff fd95 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <RCC_GetSystemClockFreq+0x114>)
 8006cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d00:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006d02:	e033      	b.n	8006d6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006d04:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <RCC_GetSystemClockFreq+0x118>)
 8006d06:	607b      	str	r3, [r7, #4]
      break;
 8006d08:	e030      	b.n	8006d6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <RCC_GetSystemClockFreq+0x11c>)
 8006d0c:	607b      	str	r3, [r7, #4]
      break;
 8006d0e:	e02d      	b.n	8006d6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006d10:	f000 f876 	bl	8006e00 <RCC_PLL_GetFreqDomain_SYS>
 8006d14:	6078      	str	r0, [r7, #4]
      break;
 8006d16:	e029      	b.n	8006d6c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006d18:	f7ff fd62 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d111      	bne.n	8006d46 <RCC_GetSystemClockFreq+0xe2>
 8006d22:	f7ff fd5d 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <RCC_GetSystemClockFreq+0xd2>
 8006d2c:	f7ff fd6a 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006d30:	4603      	mov	r3, r0
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	e003      	b.n	8006d3e <RCC_GetSystemClockFreq+0xda>
 8006d36:	f7ff fd73 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	4a0e      	ldr	r2, [pc, #56]	; (8006d78 <RCC_GetSystemClockFreq+0x114>)
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	e010      	b.n	8006d68 <RCC_GetSystemClockFreq+0x104>
 8006d46:	f7ff fd4b 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <RCC_GetSystemClockFreq+0xf6>
 8006d50:	f7ff fd58 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006d54:	4603      	mov	r3, r0
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	e003      	b.n	8006d62 <RCC_GetSystemClockFreq+0xfe>
 8006d5a:	f7ff fd61 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	4a05      	ldr	r2, [pc, #20]	; (8006d78 <RCC_GetSystemClockFreq+0x114>)
 8006d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d68:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006d6a:	bf00      	nop
  }

  return frequency;
 8006d6c:	687b      	ldr	r3, [r7, #4]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	080085c8 	.word	0x080085c8
 8006d7c:	00f42400 	.word	0x00f42400
 8006d80:	007a1200 	.word	0x007a1200

08006d84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006d8c:	f7ff fd64 	bl	8006858 <LL_RCC_GetAHBPrescaler>
 8006d90:	4603      	mov	r3, r0
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	4a04      	ldr	r2, [pc, #16]	; (8006dac <RCC_GetHCLKClockFreq+0x28>)
 8006d9a:	5cd3      	ldrb	r3, [r2, r3]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	40d3      	lsrs	r3, r2
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	080085b0 	.word	0x080085b0

08006db0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006db8:	f7ff fd5c 	bl	8006874 <LL_RCC_GetAPB1Prescaler>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <RCC_GetPCLK1ClockFreq+0x24>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	40d3      	lsrs	r3, r2
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	080085c0 	.word	0x080085c0

08006dd8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006de0:	f7ff fd56 	bl	8006890 <LL_RCC_GetAPB2Prescaler>
 8006de4:	4603      	mov	r3, r0
 8006de6:	0adb      	lsrs	r3, r3, #11
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <RCC_GetPCLK2ClockFreq+0x24>)
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	40d3      	lsrs	r3, r2
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	080085c0 	.word	0x080085c0

08006e00 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006e06:	f7ff fd79 	bl	80068fc <LL_RCC_PLL_GetMainSource>
 8006e0a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d036      	beq.n	8006e80 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d836      	bhi.n	8006e86 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d02a      	beq.n	8006e7a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006e24:	e02f      	b.n	8006e86 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006e26:	f7ff fcdb 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d111      	bne.n	8006e54 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006e30:	f7ff fcd6 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006e3a:	f7ff fce3 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	e003      	b.n	8006e4c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006e44:	f7ff fcec 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	4a2f      	ldr	r2, [pc, #188]	; (8006f0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e52:	e010      	b.n	8006e76 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006e54:	f7ff fcc4 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006e5e:	f7ff fcd1 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006e62:	4603      	mov	r3, r0
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	e003      	b.n	8006e70 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006e68:	f7ff fcda 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e76:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006e78:	e02f      	b.n	8006eda <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006e7a:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006e7c:	607b      	str	r3, [r7, #4]
      break;
 8006e7e:	e02c      	b.n	8006eda <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006e80:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006e82:	607b      	str	r3, [r7, #4]
      break;
 8006e84:	e029      	b.n	8006eda <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006e86:	f7ff fcab 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d111      	bne.n	8006eb4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006e90:	f7ff fca6 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006e9a:	f7ff fcb3 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	0a1b      	lsrs	r3, r3, #8
 8006ea2:	e003      	b.n	8006eac <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006ea4:	f7ff fcbc 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	4a17      	ldr	r2, [pc, #92]	; (8006f0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb2:	e010      	b.n	8006ed6 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006eb4:	f7ff fc94 	bl	80067e0 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006ebe:	f7ff fca1 	bl	8006804 <LL_RCC_MSI_GetRange>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	e003      	b.n	8006ed0 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006ec8:	f7ff fcaa 	bl	8006820 <LL_RCC_MSI_GetRangeAfterStandby>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	4a0e      	ldr	r2, [pc, #56]	; (8006f0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006ed8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006eda:	f7ff fd39 	bl	8006950 <LL_RCC_PLL_GetDivider>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	fbb2 f4f3 	udiv	r4, r2, r3
 8006eea:	f7ff fd15 	bl	8006918 <LL_RCC_PLL_GetN>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	fb03 f404 	mul.w	r4, r3, r4
 8006ef4:	f7ff fd1e 	bl	8006934 <LL_RCC_PLL_GetR>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	0e5b      	lsrs	r3, r3, #25
 8006efc:	3301      	adds	r3, #1
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd90      	pop	{r4, r7, pc}
 8006f0c:	080085c8 	.word	0x080085c8
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	007a1200 	.word	0x007a1200

08006f18 <LL_SPI_IsEnabled>:
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d101      	bne.n	8006f30 <LL_SPI_IsEnabled+0x18>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <LL_SPI_IsEnabled+0x1a>
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <LL_SPI_SetRxFIFOThreshold>:
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	605a      	str	r2, [r3, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <LL_SPI_SetCRCPolynomial>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff ffc0 	bl	8006f18 <LL_SPI_IsEnabled>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d145      	bne.n	800702a <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa6:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	6811      	ldr	r1, [r2, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	6852      	ldr	r2, [r2, #4]
 8006fb2:	4311      	orrs	r1, r2
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	68d2      	ldr	r2, [r2, #12]
 8006fb8:	4311      	orrs	r1, r2
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	6912      	ldr	r2, [r2, #16]
 8006fbe:	4311      	orrs	r1, r2
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	6952      	ldr	r2, [r2, #20]
 8006fc4:	4311      	orrs	r1, r2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6992      	ldr	r2, [r2, #24]
 8006fca:	4311      	orrs	r1, r2
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	69d2      	ldr	r2, [r2, #28]
 8006fd0:	4311      	orrs	r1, r2
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6a12      	ldr	r2, [r2, #32]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fe6:	f023 0304 	bic.w	r3, r3, #4
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	6891      	ldr	r1, [r2, #8]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	6952      	ldr	r2, [r2, #20]
 8006ff2:	0c12      	lsrs	r2, r2, #16
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007004:	d204      	bcs.n	8007010 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8007006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff ff97 	bl	8006f3e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007018:	d105      	bne.n	8007026 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff ff9f 	bl	8006f64 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <LL_USART_IsEnabled>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <LL_USART_IsEnabled+0x18>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <LL_USART_IsEnabled+0x1a>
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <LL_USART_SetStopBitsLength>:
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <LL_USART_SetHWFlowCtrl>:
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <LL_USART_SetBaudRate>:
{
 80070a6:	b480      	push	{r7}
 80070a8:	b087      	sub	sp, #28
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
 80070b2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d11a      	bne.n	80070f2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	005a      	lsls	r2, r3, #1
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	441a      	add	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80070d6:	4013      	ands	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	60da      	str	r2, [r3, #12]
}
 80070f0:	e00a      	b.n	8007108 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	085a      	lsrs	r2, r3, #1
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	441a      	add	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	60da      	str	r2, [r3, #12]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff ff84 	bl	8007034 <LL_USART_IsEnabled>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d15b      	bne.n	80071ea <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b2f      	ldr	r3, [pc, #188]	; (80071f4 <LL_USART_Init+0xe0>)
 8007138:	4013      	ands	r3, r2
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	6851      	ldr	r1, [r2, #4]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68d2      	ldr	r2, [r2, #12]
 8007142:	4311      	orrs	r1, r2
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	6912      	ldr	r2, [r2, #16]
 8007148:	4311      	orrs	r1, r2
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	6992      	ldr	r2, [r2, #24]
 800714e:	430a      	orrs	r2, r1
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff7c 	bl	800705a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff89 	bl	8007080 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a21      	ldr	r2, [pc, #132]	; (80071f8 <LL_USART_Init+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d104      	bne.n	8007180 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007176:	2003      	movs	r0, #3
 8007178:	f7ff fbf8 	bl	800696c <LL_RCC_GetUSARTClockFreq>
 800717c:	60b8      	str	r0, [r7, #8]
 800717e:	e023      	b.n	80071c8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <LL_USART_Init+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d104      	bne.n	8007192 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007188:	200c      	movs	r0, #12
 800718a:	f7ff fbef 	bl	800696c <LL_RCC_GetUSARTClockFreq>
 800718e:	60b8      	str	r0, [r7, #8]
 8007190:	e01a      	b.n	80071c8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <LL_USART_Init+0xec>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d104      	bne.n	80071a4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800719a:	2030      	movs	r0, #48	; 0x30
 800719c:	f7ff fbe6 	bl	800696c <LL_RCC_GetUSARTClockFreq>
 80071a0:	60b8      	str	r0, [r7, #8]
 80071a2:	e011      	b.n	80071c8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <LL_USART_Init+0xf0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d104      	bne.n	80071b6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80071ac:	20c0      	movs	r0, #192	; 0xc0
 80071ae:	f7ff fcc1 	bl	8006b34 <LL_RCC_GetUARTClockFreq>
 80071b2:	60b8      	str	r0, [r7, #8]
 80071b4:	e008      	b.n	80071c8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a13      	ldr	r2, [pc, #76]	; (8007208 <LL_USART_Init+0xf4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d104      	bne.n	80071c8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80071be:	f44f 7040 	mov.w	r0, #768	; 0x300
 80071c2:	f7ff fcb7 	bl	8006b34 <LL_RCC_GetUARTClockFreq>
 80071c6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff5e 	bl	80070a6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	efff69f3 	.word	0xefff69f3
 80071f8:	40013800 	.word	0x40013800
 80071fc:	40004400 	.word	0x40004400
 8007200:	40004800 	.word	0x40004800
 8007204:	40004c00 	.word	0x40004c00
 8007208:	40005000 	.word	0x40005000

0800720c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	4a07      	ldr	r2, [pc, #28]	; (800723c <LL_InitTick+0x30>)
 8007220:	3b01      	subs	r3, #1
 8007222:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <LL_InitTick+0x30>)
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <LL_InitTick+0x30>)
 800722c:	2205      	movs	r2, #5
 800722e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	e000e010 	.word	0xe000e010

08007240 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8007248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffdd 	bl	800720c <LL_InitTick>
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007264:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <LL_mDelay+0x4c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800726e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d00c      	beq.n	8007292 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800727e:	e008      	b.n	8007292 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <LL_mDelay+0x4c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3b01      	subs	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f3      	bne.n	8007280 <LL_mDelay+0x24>
    }
  }
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	e000e010 	.word	0xe000e010

080072ac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80072b4:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <LL_SetSystemCoreClock+0x1c>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6013      	str	r3, [r2, #0]
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000010 	.word	0x20000010

080072cc <__libc_init_array>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4d0d      	ldr	r5, [pc, #52]	; (8007304 <__libc_init_array+0x38>)
 80072d0:	4c0d      	ldr	r4, [pc, #52]	; (8007308 <__libc_init_array+0x3c>)
 80072d2:	1b64      	subs	r4, r4, r5
 80072d4:	10a4      	asrs	r4, r4, #2
 80072d6:	2600      	movs	r6, #0
 80072d8:	42a6      	cmp	r6, r4
 80072da:	d109      	bne.n	80072f0 <__libc_init_array+0x24>
 80072dc:	4d0b      	ldr	r5, [pc, #44]	; (800730c <__libc_init_array+0x40>)
 80072de:	4c0c      	ldr	r4, [pc, #48]	; (8007310 <__libc_init_array+0x44>)
 80072e0:	f001 f92e 	bl	8008540 <_init>
 80072e4:	1b64      	subs	r4, r4, r5
 80072e6:	10a4      	asrs	r4, r4, #2
 80072e8:	2600      	movs	r6, #0
 80072ea:	42a6      	cmp	r6, r4
 80072ec:	d105      	bne.n	80072fa <__libc_init_array+0x2e>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f4:	4798      	blx	r3
 80072f6:	3601      	adds	r6, #1
 80072f8:	e7ee      	b.n	80072d8 <__libc_init_array+0xc>
 80072fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fe:	4798      	blx	r3
 8007300:	3601      	adds	r6, #1
 8007302:	e7f2      	b.n	80072ea <__libc_init_array+0x1e>
 8007304:	080092d0 	.word	0x080092d0
 8007308:	080092d0 	.word	0x080092d0
 800730c:	080092d0 	.word	0x080092d0
 8007310:	080092d4 	.word	0x080092d4

08007314 <memcmp>:
 8007314:	b510      	push	{r4, lr}
 8007316:	3901      	subs	r1, #1
 8007318:	4402      	add	r2, r0
 800731a:	4290      	cmp	r0, r2
 800731c:	d101      	bne.n	8007322 <memcmp+0xe>
 800731e:	2000      	movs	r0, #0
 8007320:	e005      	b.n	800732e <memcmp+0x1a>
 8007322:	7803      	ldrb	r3, [r0, #0]
 8007324:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007328:	42a3      	cmp	r3, r4
 800732a:	d001      	beq.n	8007330 <memcmp+0x1c>
 800732c:	1b18      	subs	r0, r3, r4
 800732e:	bd10      	pop	{r4, pc}
 8007330:	3001      	adds	r0, #1
 8007332:	e7f2      	b.n	800731a <memcmp+0x6>

08007334 <memcpy>:
 8007334:	440a      	add	r2, r1
 8007336:	4291      	cmp	r1, r2
 8007338:	f100 33ff 	add.w	r3, r0, #4294967295
 800733c:	d100      	bne.n	8007340 <memcpy+0xc>
 800733e:	4770      	bx	lr
 8007340:	b510      	push	{r4, lr}
 8007342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800734a:	4291      	cmp	r1, r2
 800734c:	d1f9      	bne.n	8007342 <memcpy+0xe>
 800734e:	bd10      	pop	{r4, pc}

08007350 <memset>:
 8007350:	4402      	add	r2, r0
 8007352:	4603      	mov	r3, r0
 8007354:	4293      	cmp	r3, r2
 8007356:	d100      	bne.n	800735a <memset+0xa>
 8007358:	4770      	bx	lr
 800735a:	f803 1b01 	strb.w	r1, [r3], #1
 800735e:	e7f9      	b.n	8007354 <memset+0x4>

08007360 <atan>:
 8007360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	ec55 4b10 	vmov	r4, r5, d0
 8007368:	4bc3      	ldr	r3, [pc, #780]	; (8007678 <atan+0x318>)
 800736a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800736e:	429e      	cmp	r6, r3
 8007370:	46ab      	mov	fp, r5
 8007372:	dd18      	ble.n	80073a6 <atan+0x46>
 8007374:	4bc1      	ldr	r3, [pc, #772]	; (800767c <atan+0x31c>)
 8007376:	429e      	cmp	r6, r3
 8007378:	dc01      	bgt.n	800737e <atan+0x1e>
 800737a:	d109      	bne.n	8007390 <atan+0x30>
 800737c:	b144      	cbz	r4, 8007390 <atan+0x30>
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f8 ff25 	bl	80001d4 <__adddf3>
 800738a:	4604      	mov	r4, r0
 800738c:	460d      	mov	r5, r1
 800738e:	e006      	b.n	800739e <atan+0x3e>
 8007390:	f1bb 0f00 	cmp.w	fp, #0
 8007394:	f300 8131 	bgt.w	80075fa <atan+0x29a>
 8007398:	a59b      	add	r5, pc, #620	; (adr r5, 8007608 <atan+0x2a8>)
 800739a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800739e:	ec45 4b10 	vmov	d0, r4, r5
 80073a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	4bb6      	ldr	r3, [pc, #728]	; (8007680 <atan+0x320>)
 80073a8:	429e      	cmp	r6, r3
 80073aa:	dc14      	bgt.n	80073d6 <atan+0x76>
 80073ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80073b0:	429e      	cmp	r6, r3
 80073b2:	dc0d      	bgt.n	80073d0 <atan+0x70>
 80073b4:	a396      	add	r3, pc, #600	; (adr r3, 8007610 <atan+0x2b0>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	ee10 0a10 	vmov	r0, s0
 80073be:	4629      	mov	r1, r5
 80073c0:	f7f8 ff08 	bl	80001d4 <__adddf3>
 80073c4:	4baf      	ldr	r3, [pc, #700]	; (8007684 <atan+0x324>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	f7f9 fb4a 	bl	8000a60 <__aeabi_dcmpgt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1e6      	bne.n	800739e <atan+0x3e>
 80073d0:	f04f 3aff 	mov.w	sl, #4294967295
 80073d4:	e02b      	b.n	800742e <atan+0xce>
 80073d6:	f000 f963 	bl	80076a0 <fabs>
 80073da:	4bab      	ldr	r3, [pc, #684]	; (8007688 <atan+0x328>)
 80073dc:	429e      	cmp	r6, r3
 80073de:	ec55 4b10 	vmov	r4, r5, d0
 80073e2:	f300 80bf 	bgt.w	8007564 <atan+0x204>
 80073e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073ea:	429e      	cmp	r6, r3
 80073ec:	f300 80a0 	bgt.w	8007530 <atan+0x1d0>
 80073f0:	ee10 2a10 	vmov	r2, s0
 80073f4:	ee10 0a10 	vmov	r0, s0
 80073f8:	462b      	mov	r3, r5
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 feea 	bl	80001d4 <__adddf3>
 8007400:	4ba0      	ldr	r3, [pc, #640]	; (8007684 <atan+0x324>)
 8007402:	2200      	movs	r2, #0
 8007404:	f7f8 fee4 	bl	80001d0 <__aeabi_dsub>
 8007408:	2200      	movs	r2, #0
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f8 fedd 	bl	80001d4 <__adddf3>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 f9b7 	bl	8000794 <__aeabi_ddiv>
 8007426:	f04f 0a00 	mov.w	sl, #0
 800742a:	4604      	mov	r4, r0
 800742c:	460d      	mov	r5, r1
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 f883 	bl	8000540 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4680      	mov	r8, r0
 8007440:	4689      	mov	r9, r1
 8007442:	f7f9 f87d 	bl	8000540 <__aeabi_dmul>
 8007446:	a374      	add	r3, pc, #464	; (adr r3, 8007618 <atan+0x2b8>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	4606      	mov	r6, r0
 800744e:	460f      	mov	r7, r1
 8007450:	f7f9 f876 	bl	8000540 <__aeabi_dmul>
 8007454:	a372      	add	r3, pc, #456	; (adr r3, 8007620 <atan+0x2c0>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 febb 	bl	80001d4 <__adddf3>
 800745e:	4632      	mov	r2, r6
 8007460:	463b      	mov	r3, r7
 8007462:	f7f9 f86d 	bl	8000540 <__aeabi_dmul>
 8007466:	a370      	add	r3, pc, #448	; (adr r3, 8007628 <atan+0x2c8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 feb2 	bl	80001d4 <__adddf3>
 8007470:	4632      	mov	r2, r6
 8007472:	463b      	mov	r3, r7
 8007474:	f7f9 f864 	bl	8000540 <__aeabi_dmul>
 8007478:	a36d      	add	r3, pc, #436	; (adr r3, 8007630 <atan+0x2d0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 fea9 	bl	80001d4 <__adddf3>
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f7f9 f85b 	bl	8000540 <__aeabi_dmul>
 800748a:	a36b      	add	r3, pc, #428	; (adr r3, 8007638 <atan+0x2d8>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fea0 	bl	80001d4 <__adddf3>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 f852 	bl	8000540 <__aeabi_dmul>
 800749c:	a368      	add	r3, pc, #416	; (adr r3, 8007640 <atan+0x2e0>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe97 	bl	80001d4 <__adddf3>
 80074a6:	4642      	mov	r2, r8
 80074a8:	464b      	mov	r3, r9
 80074aa:	f7f9 f849 	bl	8000540 <__aeabi_dmul>
 80074ae:	a366      	add	r3, pc, #408	; (adr r3, 8007648 <atan+0x2e8>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 f840 	bl	8000540 <__aeabi_dmul>
 80074c0:	a363      	add	r3, pc, #396	; (adr r3, 8007650 <atan+0x2f0>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fe83 	bl	80001d0 <__aeabi_dsub>
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	f7f9 f837 	bl	8000540 <__aeabi_dmul>
 80074d2:	a361      	add	r3, pc, #388	; (adr r3, 8007658 <atan+0x2f8>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fe7a 	bl	80001d0 <__aeabi_dsub>
 80074dc:	4632      	mov	r2, r6
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f9 f82e 	bl	8000540 <__aeabi_dmul>
 80074e4:	a35e      	add	r3, pc, #376	; (adr r3, 8007660 <atan+0x300>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe71 	bl	80001d0 <__aeabi_dsub>
 80074ee:	4632      	mov	r2, r6
 80074f0:	463b      	mov	r3, r7
 80074f2:	f7f9 f825 	bl	8000540 <__aeabi_dmul>
 80074f6:	a35c      	add	r3, pc, #368	; (adr r3, 8007668 <atan+0x308>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fe68 	bl	80001d0 <__aeabi_dsub>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f9 f81c 	bl	8000540 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f8 fe60 	bl	80001d4 <__adddf3>
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	f7f9 f812 	bl	8000540 <__aeabi_dmul>
 800751c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	d14b      	bne.n	80075be <atan+0x25e>
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f8 fe51 	bl	80001d0 <__aeabi_dsub>
 800752e:	e72c      	b.n	800738a <atan+0x2a>
 8007530:	ee10 0a10 	vmov	r0, s0
 8007534:	4b53      	ldr	r3, [pc, #332]	; (8007684 <atan+0x324>)
 8007536:	2200      	movs	r2, #0
 8007538:	4629      	mov	r1, r5
 800753a:	f7f8 fe49 	bl	80001d0 <__aeabi_dsub>
 800753e:	4b51      	ldr	r3, [pc, #324]	; (8007684 <atan+0x324>)
 8007540:	4606      	mov	r6, r0
 8007542:	460f      	mov	r7, r1
 8007544:	2200      	movs	r2, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f8 fe43 	bl	80001d4 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4630      	mov	r0, r6
 8007554:	4639      	mov	r1, r7
 8007556:	f7f9 f91d 	bl	8000794 <__aeabi_ddiv>
 800755a:	f04f 0a01 	mov.w	sl, #1
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	e764      	b.n	800742e <atan+0xce>
 8007564:	4b49      	ldr	r3, [pc, #292]	; (800768c <atan+0x32c>)
 8007566:	429e      	cmp	r6, r3
 8007568:	da1d      	bge.n	80075a6 <atan+0x246>
 800756a:	ee10 0a10 	vmov	r0, s0
 800756e:	4b48      	ldr	r3, [pc, #288]	; (8007690 <atan+0x330>)
 8007570:	2200      	movs	r2, #0
 8007572:	4629      	mov	r1, r5
 8007574:	f7f8 fe2c 	bl	80001d0 <__aeabi_dsub>
 8007578:	4b45      	ldr	r3, [pc, #276]	; (8007690 <atan+0x330>)
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	2200      	movs	r2, #0
 8007580:	4620      	mov	r0, r4
 8007582:	4629      	mov	r1, r5
 8007584:	f7f8 ffdc 	bl	8000540 <__aeabi_dmul>
 8007588:	4b3e      	ldr	r3, [pc, #248]	; (8007684 <atan+0x324>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 fe22 	bl	80001d4 <__adddf3>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4630      	mov	r0, r6
 8007596:	4639      	mov	r1, r7
 8007598:	f7f9 f8fc 	bl	8000794 <__aeabi_ddiv>
 800759c:	f04f 0a02 	mov.w	sl, #2
 80075a0:	4604      	mov	r4, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	e743      	b.n	800742e <atan+0xce>
 80075a6:	462b      	mov	r3, r5
 80075a8:	ee10 2a10 	vmov	r2, s0
 80075ac:	4939      	ldr	r1, [pc, #228]	; (8007694 <atan+0x334>)
 80075ae:	2000      	movs	r0, #0
 80075b0:	f7f9 f8f0 	bl	8000794 <__aeabi_ddiv>
 80075b4:	f04f 0a03 	mov.w	sl, #3
 80075b8:	4604      	mov	r4, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	e737      	b.n	800742e <atan+0xce>
 80075be:	4b36      	ldr	r3, [pc, #216]	; (8007698 <atan+0x338>)
 80075c0:	4e36      	ldr	r6, [pc, #216]	; (800769c <atan+0x33c>)
 80075c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80075c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80075ca:	e9da 2300 	ldrd	r2, r3, [sl]
 80075ce:	f7f8 fdff 	bl	80001d0 <__aeabi_dsub>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f8 fdfb 	bl	80001d0 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80075e2:	f7f8 fdf5 	bl	80001d0 <__aeabi_dsub>
 80075e6:	f1bb 0f00 	cmp.w	fp, #0
 80075ea:	4604      	mov	r4, r0
 80075ec:	460d      	mov	r5, r1
 80075ee:	f6bf aed6 	bge.w	800739e <atan+0x3e>
 80075f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075f6:	461d      	mov	r5, r3
 80075f8:	e6d1      	b.n	800739e <atan+0x3e>
 80075fa:	a51d      	add	r5, pc, #116	; (adr r5, 8007670 <atan+0x310>)
 80075fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007600:	e6cd      	b.n	800739e <atan+0x3e>
 8007602:	bf00      	nop
 8007604:	f3af 8000 	nop.w
 8007608:	54442d18 	.word	0x54442d18
 800760c:	bff921fb 	.word	0xbff921fb
 8007610:	8800759c 	.word	0x8800759c
 8007614:	7e37e43c 	.word	0x7e37e43c
 8007618:	e322da11 	.word	0xe322da11
 800761c:	3f90ad3a 	.word	0x3f90ad3a
 8007620:	24760deb 	.word	0x24760deb
 8007624:	3fa97b4b 	.word	0x3fa97b4b
 8007628:	a0d03d51 	.word	0xa0d03d51
 800762c:	3fb10d66 	.word	0x3fb10d66
 8007630:	c54c206e 	.word	0xc54c206e
 8007634:	3fb745cd 	.word	0x3fb745cd
 8007638:	920083ff 	.word	0x920083ff
 800763c:	3fc24924 	.word	0x3fc24924
 8007640:	5555550d 	.word	0x5555550d
 8007644:	3fd55555 	.word	0x3fd55555
 8007648:	2c6a6c2f 	.word	0x2c6a6c2f
 800764c:	bfa2b444 	.word	0xbfa2b444
 8007650:	52defd9a 	.word	0x52defd9a
 8007654:	3fadde2d 	.word	0x3fadde2d
 8007658:	af749a6d 	.word	0xaf749a6d
 800765c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007660:	fe231671 	.word	0xfe231671
 8007664:	3fbc71c6 	.word	0x3fbc71c6
 8007668:	9998ebc4 	.word	0x9998ebc4
 800766c:	3fc99999 	.word	0x3fc99999
 8007670:	54442d18 	.word	0x54442d18
 8007674:	3ff921fb 	.word	0x3ff921fb
 8007678:	440fffff 	.word	0x440fffff
 800767c:	7ff00000 	.word	0x7ff00000
 8007680:	3fdbffff 	.word	0x3fdbffff
 8007684:	3ff00000 	.word	0x3ff00000
 8007688:	3ff2ffff 	.word	0x3ff2ffff
 800768c:	40038000 	.word	0x40038000
 8007690:	3ff80000 	.word	0x3ff80000
 8007694:	bff00000 	.word	0xbff00000
 8007698:	08009280 	.word	0x08009280
 800769c:	08009260 	.word	0x08009260

080076a0 <fabs>:
 80076a0:	ec51 0b10 	vmov	r0, r1, d0
 80076a4:	ee10 2a10 	vmov	r2, s0
 80076a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076ac:	ec43 2b10 	vmov	d0, r2, r3
 80076b0:	4770      	bx	lr
	...

080076b4 <pow>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	ed2d 8b02 	vpush	{d8}
 80076ba:	eeb0 8a40 	vmov.f32	s16, s0
 80076be:	eef0 8a60 	vmov.f32	s17, s1
 80076c2:	ec55 4b11 	vmov	r4, r5, d1
 80076c6:	f000 f893 	bl	80077f0 <__ieee754_pow>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	ec57 6b10 	vmov	r6, r7, d0
 80076d6:	f7f9 f9cd 	bl	8000a74 <__aeabi_dcmpun>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d13b      	bne.n	8007756 <pow+0xa2>
 80076de:	ec51 0b18 	vmov	r0, r1, d8
 80076e2:	2200      	movs	r2, #0
 80076e4:	2300      	movs	r3, #0
 80076e6:	f7f9 f993 	bl	8000a10 <__aeabi_dcmpeq>
 80076ea:	b1b8      	cbz	r0, 800771c <pow+0x68>
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	4620      	mov	r0, r4
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f9 f98c 	bl	8000a10 <__aeabi_dcmpeq>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d146      	bne.n	800778a <pow+0xd6>
 80076fc:	ec45 4b10 	vmov	d0, r4, r5
 8007700:	f000 fe86 	bl	8008410 <finite>
 8007704:	b338      	cbz	r0, 8007756 <pow+0xa2>
 8007706:	2200      	movs	r2, #0
 8007708:	2300      	movs	r3, #0
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	f7f9 f989 	bl	8000a24 <__aeabi_dcmplt>
 8007712:	b300      	cbz	r0, 8007756 <pow+0xa2>
 8007714:	f000 ff0e 	bl	8008534 <__errno>
 8007718:	2322      	movs	r3, #34	; 0x22
 800771a:	e01b      	b.n	8007754 <pow+0xa0>
 800771c:	ec47 6b10 	vmov	d0, r6, r7
 8007720:	f000 fe76 	bl	8008410 <finite>
 8007724:	b9e0      	cbnz	r0, 8007760 <pow+0xac>
 8007726:	eeb0 0a48 	vmov.f32	s0, s16
 800772a:	eef0 0a68 	vmov.f32	s1, s17
 800772e:	f000 fe6f 	bl	8008410 <finite>
 8007732:	b1a8      	cbz	r0, 8007760 <pow+0xac>
 8007734:	ec45 4b10 	vmov	d0, r4, r5
 8007738:	f000 fe6a 	bl	8008410 <finite>
 800773c:	b180      	cbz	r0, 8007760 <pow+0xac>
 800773e:	4632      	mov	r2, r6
 8007740:	463b      	mov	r3, r7
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f995 	bl	8000a74 <__aeabi_dcmpun>
 800774a:	2800      	cmp	r0, #0
 800774c:	d0e2      	beq.n	8007714 <pow+0x60>
 800774e:	f000 fef1 	bl	8008534 <__errno>
 8007752:	2321      	movs	r3, #33	; 0x21
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	ecbd 8b02 	vpop	{d8}
 800775a:	ec47 6b10 	vmov	d0, r6, r7
 800775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007760:	2200      	movs	r2, #0
 8007762:	2300      	movs	r3, #0
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f9 f952 	bl	8000a10 <__aeabi_dcmpeq>
 800776c:	2800      	cmp	r0, #0
 800776e:	d0f2      	beq.n	8007756 <pow+0xa2>
 8007770:	eeb0 0a48 	vmov.f32	s0, s16
 8007774:	eef0 0a68 	vmov.f32	s1, s17
 8007778:	f000 fe4a 	bl	8008410 <finite>
 800777c:	2800      	cmp	r0, #0
 800777e:	d0ea      	beq.n	8007756 <pow+0xa2>
 8007780:	ec45 4b10 	vmov	d0, r4, r5
 8007784:	f000 fe44 	bl	8008410 <finite>
 8007788:	e7c3      	b.n	8007712 <pow+0x5e>
 800778a:	4f01      	ldr	r7, [pc, #4]	; (8007790 <pow+0xdc>)
 800778c:	2600      	movs	r6, #0
 800778e:	e7e2      	b.n	8007756 <pow+0xa2>
 8007790:	3ff00000 	.word	0x3ff00000

08007794 <sqrt>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	ed2d 8b02 	vpush	{d8}
 800779a:	ec55 4b10 	vmov	r4, r5, d0
 800779e:	f000 fd55 	bl	800824c <__ieee754_sqrt>
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	eeb0 8a40 	vmov.f32	s16, s0
 80077ae:	eef0 8a60 	vmov.f32	s17, s1
 80077b2:	f7f9 f95f 	bl	8000a74 <__aeabi_dcmpun>
 80077b6:	b990      	cbnz	r0, 80077de <sqrt+0x4a>
 80077b8:	2200      	movs	r2, #0
 80077ba:	2300      	movs	r3, #0
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f9 f930 	bl	8000a24 <__aeabi_dcmplt>
 80077c4:	b158      	cbz	r0, 80077de <sqrt+0x4a>
 80077c6:	f000 feb5 	bl	8008534 <__errno>
 80077ca:	2321      	movs	r3, #33	; 0x21
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	2200      	movs	r2, #0
 80077d0:	2300      	movs	r3, #0
 80077d2:	4610      	mov	r0, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	f7f8 ffdd 	bl	8000794 <__aeabi_ddiv>
 80077da:	ec41 0b18 	vmov	d8, r0, r1
 80077de:	eeb0 0a48 	vmov.f32	s0, s16
 80077e2:	eef0 0a68 	vmov.f32	s1, s17
 80077e6:	ecbd 8b02 	vpop	{d8}
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	0000      	movs	r0, r0
	...

080077f0 <__ieee754_pow>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	ed2d 8b06 	vpush	{d8-d10}
 80077f8:	b089      	sub	sp, #36	; 0x24
 80077fa:	ed8d 1b00 	vstr	d1, [sp]
 80077fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007802:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007806:	ea58 0102 	orrs.w	r1, r8, r2
 800780a:	ec57 6b10 	vmov	r6, r7, d0
 800780e:	d115      	bne.n	800783c <__ieee754_pow+0x4c>
 8007810:	19b3      	adds	r3, r6, r6
 8007812:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007816:	4152      	adcs	r2, r2
 8007818:	4299      	cmp	r1, r3
 800781a:	4b89      	ldr	r3, [pc, #548]	; (8007a40 <__ieee754_pow+0x250>)
 800781c:	4193      	sbcs	r3, r2
 800781e:	f080 84d2 	bcs.w	80081c6 <__ieee754_pow+0x9d6>
 8007822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f8 fcd3 	bl	80001d4 <__adddf3>
 800782e:	ec41 0b10 	vmov	d0, r0, r1
 8007832:	b009      	add	sp, #36	; 0x24
 8007834:	ecbd 8b06 	vpop	{d8-d10}
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	4b81      	ldr	r3, [pc, #516]	; (8007a44 <__ieee754_pow+0x254>)
 800783e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007842:	429c      	cmp	r4, r3
 8007844:	ee10 aa10 	vmov	sl, s0
 8007848:	463d      	mov	r5, r7
 800784a:	dc06      	bgt.n	800785a <__ieee754_pow+0x6a>
 800784c:	d101      	bne.n	8007852 <__ieee754_pow+0x62>
 800784e:	2e00      	cmp	r6, #0
 8007850:	d1e7      	bne.n	8007822 <__ieee754_pow+0x32>
 8007852:	4598      	cmp	r8, r3
 8007854:	dc01      	bgt.n	800785a <__ieee754_pow+0x6a>
 8007856:	d10f      	bne.n	8007878 <__ieee754_pow+0x88>
 8007858:	b172      	cbz	r2, 8007878 <__ieee754_pow+0x88>
 800785a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800785e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007862:	ea55 050a 	orrs.w	r5, r5, sl
 8007866:	d1dc      	bne.n	8007822 <__ieee754_pow+0x32>
 8007868:	e9dd 3200 	ldrd	r3, r2, [sp]
 800786c:	18db      	adds	r3, r3, r3
 800786e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007872:	4152      	adcs	r2, r2
 8007874:	429d      	cmp	r5, r3
 8007876:	e7d0      	b.n	800781a <__ieee754_pow+0x2a>
 8007878:	2d00      	cmp	r5, #0
 800787a:	da3b      	bge.n	80078f4 <__ieee754_pow+0x104>
 800787c:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <__ieee754_pow+0x258>)
 800787e:	4598      	cmp	r8, r3
 8007880:	dc51      	bgt.n	8007926 <__ieee754_pow+0x136>
 8007882:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007886:	4598      	cmp	r8, r3
 8007888:	f340 84ac 	ble.w	80081e4 <__ieee754_pow+0x9f4>
 800788c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007894:	2b14      	cmp	r3, #20
 8007896:	dd0f      	ble.n	80078b8 <__ieee754_pow+0xc8>
 8007898:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800789c:	fa22 f103 	lsr.w	r1, r2, r3
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	4293      	cmp	r3, r2
 80078a6:	f040 849d 	bne.w	80081e4 <__ieee754_pow+0x9f4>
 80078aa:	f001 0101 	and.w	r1, r1, #1
 80078ae:	f1c1 0302 	rsb	r3, r1, #2
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	b182      	cbz	r2, 80078d8 <__ieee754_pow+0xe8>
 80078b6:	e05f      	b.n	8007978 <__ieee754_pow+0x188>
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d15b      	bne.n	8007974 <__ieee754_pow+0x184>
 80078bc:	f1c3 0314 	rsb	r3, r3, #20
 80078c0:	fa48 f103 	asr.w	r1, r8, r3
 80078c4:	fa01 f303 	lsl.w	r3, r1, r3
 80078c8:	4543      	cmp	r3, r8
 80078ca:	f040 8488 	bne.w	80081de <__ieee754_pow+0x9ee>
 80078ce:	f001 0101 	and.w	r1, r1, #1
 80078d2:	f1c1 0302 	rsb	r3, r1, #2
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	4b5c      	ldr	r3, [pc, #368]	; (8007a4c <__ieee754_pow+0x25c>)
 80078da:	4598      	cmp	r8, r3
 80078dc:	d132      	bne.n	8007944 <__ieee754_pow+0x154>
 80078de:	f1b9 0f00 	cmp.w	r9, #0
 80078e2:	f280 8478 	bge.w	80081d6 <__ieee754_pow+0x9e6>
 80078e6:	4959      	ldr	r1, [pc, #356]	; (8007a4c <__ieee754_pow+0x25c>)
 80078e8:	4632      	mov	r2, r6
 80078ea:	463b      	mov	r3, r7
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7f8 ff51 	bl	8000794 <__aeabi_ddiv>
 80078f2:	e79c      	b.n	800782e <__ieee754_pow+0x3e>
 80078f4:	2300      	movs	r3, #0
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d13d      	bne.n	8007978 <__ieee754_pow+0x188>
 80078fc:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <__ieee754_pow+0x254>)
 80078fe:	4598      	cmp	r8, r3
 8007900:	d1ea      	bne.n	80078d8 <__ieee754_pow+0xe8>
 8007902:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007906:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800790a:	ea53 030a 	orrs.w	r3, r3, sl
 800790e:	f000 845a 	beq.w	80081c6 <__ieee754_pow+0x9d6>
 8007912:	4b4f      	ldr	r3, [pc, #316]	; (8007a50 <__ieee754_pow+0x260>)
 8007914:	429c      	cmp	r4, r3
 8007916:	dd08      	ble.n	800792a <__ieee754_pow+0x13a>
 8007918:	f1b9 0f00 	cmp.w	r9, #0
 800791c:	f2c0 8457 	blt.w	80081ce <__ieee754_pow+0x9de>
 8007920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007924:	e783      	b.n	800782e <__ieee754_pow+0x3e>
 8007926:	2302      	movs	r3, #2
 8007928:	e7e5      	b.n	80078f6 <__ieee754_pow+0x106>
 800792a:	f1b9 0f00 	cmp.w	r9, #0
 800792e:	f04f 0000 	mov.w	r0, #0
 8007932:	f04f 0100 	mov.w	r1, #0
 8007936:	f6bf af7a 	bge.w	800782e <__ieee754_pow+0x3e>
 800793a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800793e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007942:	e774      	b.n	800782e <__ieee754_pow+0x3e>
 8007944:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007948:	d106      	bne.n	8007958 <__ieee754_pow+0x168>
 800794a:	4632      	mov	r2, r6
 800794c:	463b      	mov	r3, r7
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f8 fdf5 	bl	8000540 <__aeabi_dmul>
 8007956:	e76a      	b.n	800782e <__ieee754_pow+0x3e>
 8007958:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <__ieee754_pow+0x264>)
 800795a:	4599      	cmp	r9, r3
 800795c:	d10c      	bne.n	8007978 <__ieee754_pow+0x188>
 800795e:	2d00      	cmp	r5, #0
 8007960:	db0a      	blt.n	8007978 <__ieee754_pow+0x188>
 8007962:	ec47 6b10 	vmov	d0, r6, r7
 8007966:	b009      	add	sp, #36	; 0x24
 8007968:	ecbd 8b06 	vpop	{d8-d10}
 800796c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	f000 bc6c 	b.w	800824c <__ieee754_sqrt>
 8007974:	2300      	movs	r3, #0
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	ec47 6b10 	vmov	d0, r6, r7
 800797c:	f7ff fe90 	bl	80076a0 <fabs>
 8007980:	ec51 0b10 	vmov	r0, r1, d0
 8007984:	f1ba 0f00 	cmp.w	sl, #0
 8007988:	d129      	bne.n	80079de <__ieee754_pow+0x1ee>
 800798a:	b124      	cbz	r4, 8007996 <__ieee754_pow+0x1a6>
 800798c:	4b2f      	ldr	r3, [pc, #188]	; (8007a4c <__ieee754_pow+0x25c>)
 800798e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007992:	429a      	cmp	r2, r3
 8007994:	d123      	bne.n	80079de <__ieee754_pow+0x1ee>
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	da05      	bge.n	80079a8 <__ieee754_pow+0x1b8>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	2000      	movs	r0, #0
 80079a2:	492a      	ldr	r1, [pc, #168]	; (8007a4c <__ieee754_pow+0x25c>)
 80079a4:	f7f8 fef6 	bl	8000794 <__aeabi_ddiv>
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	f6bf af40 	bge.w	800782e <__ieee754_pow+0x3e>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80079b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80079b8:	4323      	orrs	r3, r4
 80079ba:	d108      	bne.n	80079ce <__ieee754_pow+0x1de>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f7f8 fc04 	bl	80001d0 <__aeabi_dsub>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	e78f      	b.n	80078ee <__ieee754_pow+0xfe>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	f47f af2c 	bne.w	800782e <__ieee754_pow+0x3e>
 80079d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079da:	4619      	mov	r1, r3
 80079dc:	e727      	b.n	800782e <__ieee754_pow+0x3e>
 80079de:	0feb      	lsrs	r3, r5, #31
 80079e0:	3b01      	subs	r3, #1
 80079e2:	9306      	str	r3, [sp, #24]
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d102      	bne.n	80079f2 <__ieee754_pow+0x202>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	e7e6      	b.n	80079c0 <__ieee754_pow+0x1d0>
 80079f2:	4b19      	ldr	r3, [pc, #100]	; (8007a58 <__ieee754_pow+0x268>)
 80079f4:	4598      	cmp	r8, r3
 80079f6:	f340 80fb 	ble.w	8007bf0 <__ieee754_pow+0x400>
 80079fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80079fe:	4598      	cmp	r8, r3
 8007a00:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <__ieee754_pow+0x260>)
 8007a02:	dd0c      	ble.n	8007a1e <__ieee754_pow+0x22e>
 8007a04:	429c      	cmp	r4, r3
 8007a06:	dc0f      	bgt.n	8007a28 <__ieee754_pow+0x238>
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	da0f      	bge.n	8007a2e <__ieee754_pow+0x23e>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	b009      	add	sp, #36	; 0x24
 8007a12:	ecbd 8b06 	vpop	{d8-d10}
 8007a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	f000 bcf0 	b.w	80083fe <__math_oflow>
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	dbf2      	blt.n	8007a08 <__ieee754_pow+0x218>
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <__ieee754_pow+0x25c>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	dd19      	ble.n	8007a5c <__ieee754_pow+0x26c>
 8007a28:	f1b9 0f00 	cmp.w	r9, #0
 8007a2c:	dcef      	bgt.n	8007a0e <__ieee754_pow+0x21e>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	b009      	add	sp, #36	; 0x24
 8007a32:	ecbd 8b06 	vpop	{d8-d10}
 8007a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	f000 bcd7 	b.w	80083ec <__math_uflow>
 8007a3e:	bf00      	nop
 8007a40:	fff00000 	.word	0xfff00000
 8007a44:	7ff00000 	.word	0x7ff00000
 8007a48:	433fffff 	.word	0x433fffff
 8007a4c:	3ff00000 	.word	0x3ff00000
 8007a50:	3fefffff 	.word	0x3fefffff
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	41e00000 	.word	0x41e00000
 8007a5c:	4b60      	ldr	r3, [pc, #384]	; (8007be0 <__ieee754_pow+0x3f0>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f7f8 fbb6 	bl	80001d0 <__aeabi_dsub>
 8007a64:	a354      	add	r3, pc, #336	; (adr r3, 8007bb8 <__ieee754_pow+0x3c8>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	f7f8 fd67 	bl	8000540 <__aeabi_dmul>
 8007a72:	a353      	add	r3, pc, #332	; (adr r3, 8007bc0 <__ieee754_pow+0x3d0>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fd5e 	bl	8000540 <__aeabi_dmul>
 8007a84:	4b57      	ldr	r3, [pc, #348]	; (8007be4 <__ieee754_pow+0x3f4>)
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	4629      	mov	r1, r5
 8007a90:	f7f8 fd56 	bl	8000540 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	a14b      	add	r1, pc, #300	; (adr r1, 8007bc8 <__ieee754_pow+0x3d8>)
 8007a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9e:	f7f8 fb97 	bl	80001d0 <__aeabi_dsub>
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	f7f8 fd4b 	bl	8000540 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	2000      	movs	r0, #0
 8007ab0:	494d      	ldr	r1, [pc, #308]	; (8007be8 <__ieee754_pow+0x3f8>)
 8007ab2:	f7f8 fb8d 	bl	80001d0 <__aeabi_dsub>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4680      	mov	r8, r0
 8007aba:	4689      	mov	r9, r1
 8007abc:	462b      	mov	r3, r5
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7f8 fd3d 	bl	8000540 <__aeabi_dmul>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f8 fd37 	bl	8000540 <__aeabi_dmul>
 8007ad2:	a33f      	add	r3, pc, #252	; (adr r3, 8007bd0 <__ieee754_pow+0x3e0>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fd32 	bl	8000540 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	f7f8 fb74 	bl	80001d0 <__aeabi_dsub>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4680      	mov	r8, r0
 8007aee:	4689      	mov	r9, r1
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fb6e 	bl	80001d4 <__adddf3>
 8007af8:	2000      	movs	r0, #0
 8007afa:	4632      	mov	r2, r6
 8007afc:	463b      	mov	r3, r7
 8007afe:	4604      	mov	r4, r0
 8007b00:	460d      	mov	r5, r1
 8007b02:	f7f8 fb65 	bl	80001d0 <__aeabi_dsub>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fb5f 	bl	80001d0 <__aeabi_dsub>
 8007b12:	9b04      	ldr	r3, [sp, #16]
 8007b14:	9a06      	ldr	r2, [sp, #24]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	468b      	mov	fp, r1
 8007b1e:	f040 81e7 	bne.w	8007ef0 <__ieee754_pow+0x700>
 8007b22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007bd8 <__ieee754_pow+0x3e8>
 8007b26:	eeb0 8a47 	vmov.f32	s16, s14
 8007b2a:	eef0 8a67 	vmov.f32	s17, s15
 8007b2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b32:	2600      	movs	r6, #0
 8007b34:	4632      	mov	r2, r6
 8007b36:	463b      	mov	r3, r7
 8007b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b3c:	f7f8 fb48 	bl	80001d0 <__aeabi_dsub>
 8007b40:	4622      	mov	r2, r4
 8007b42:	462b      	mov	r3, r5
 8007b44:	f7f8 fcfc 	bl	8000540 <__aeabi_dmul>
 8007b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	4689      	mov	r9, r1
 8007b50:	4650      	mov	r0, sl
 8007b52:	4659      	mov	r1, fp
 8007b54:	f7f8 fcf4 	bl	8000540 <__aeabi_dmul>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 fb38 	bl	80001d4 <__adddf3>
 8007b64:	4632      	mov	r2, r6
 8007b66:	463b      	mov	r3, r7
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4689      	mov	r9, r1
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7f8 fce6 	bl	8000540 <__aeabi_dmul>
 8007b74:	460b      	mov	r3, r1
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4640      	mov	r0, r8
 8007b80:	f7f8 fb28 	bl	80001d4 <__adddf3>
 8007b84:	4b19      	ldr	r3, [pc, #100]	; (8007bec <__ieee754_pow+0x3fc>)
 8007b86:	4299      	cmp	r1, r3
 8007b88:	ec45 4b19 	vmov	d9, r4, r5
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460f      	mov	r7, r1
 8007b90:	468b      	mov	fp, r1
 8007b92:	f340 82f1 	ble.w	8008178 <__ieee754_pow+0x988>
 8007b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007b9e:	4303      	orrs	r3, r0
 8007ba0:	f000 81e4 	beq.w	8007f6c <__ieee754_pow+0x77c>
 8007ba4:	ec51 0b18 	vmov	r0, r1, d8
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2300      	movs	r3, #0
 8007bac:	f7f8 ff3a 	bl	8000a24 <__aeabi_dcmplt>
 8007bb0:	3800      	subs	r0, #0
 8007bb2:	bf18      	it	ne
 8007bb4:	2001      	movne	r0, #1
 8007bb6:	e72b      	b.n	8007a10 <__ieee754_pow+0x220>
 8007bb8:	60000000 	.word	0x60000000
 8007bbc:	3ff71547 	.word	0x3ff71547
 8007bc0:	f85ddf44 	.word	0xf85ddf44
 8007bc4:	3e54ae0b 	.word	0x3e54ae0b
 8007bc8:	55555555 	.word	0x55555555
 8007bcc:	3fd55555 	.word	0x3fd55555
 8007bd0:	652b82fe 	.word	0x652b82fe
 8007bd4:	3ff71547 	.word	0x3ff71547
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	bff00000 	.word	0xbff00000
 8007be0:	3ff00000 	.word	0x3ff00000
 8007be4:	3fd00000 	.word	0x3fd00000
 8007be8:	3fe00000 	.word	0x3fe00000
 8007bec:	408fffff 	.word	0x408fffff
 8007bf0:	4bd5      	ldr	r3, [pc, #852]	; (8007f48 <__ieee754_pow+0x758>)
 8007bf2:	402b      	ands	r3, r5
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	b92b      	cbnz	r3, 8007c04 <__ieee754_pow+0x414>
 8007bf8:	4bd4      	ldr	r3, [pc, #848]	; (8007f4c <__ieee754_pow+0x75c>)
 8007bfa:	f7f8 fca1 	bl	8000540 <__aeabi_dmul>
 8007bfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c02:	460c      	mov	r4, r1
 8007c04:	1523      	asrs	r3, r4, #20
 8007c06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c0a:	4413      	add	r3, r2
 8007c0c:	9305      	str	r3, [sp, #20]
 8007c0e:	4bd0      	ldr	r3, [pc, #832]	; (8007f50 <__ieee754_pow+0x760>)
 8007c10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c1e:	dd08      	ble.n	8007c32 <__ieee754_pow+0x442>
 8007c20:	4bcc      	ldr	r3, [pc, #816]	; (8007f54 <__ieee754_pow+0x764>)
 8007c22:	429c      	cmp	r4, r3
 8007c24:	f340 8162 	ble.w	8007eec <__ieee754_pow+0x6fc>
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007c32:	2400      	movs	r4, #0
 8007c34:	00e3      	lsls	r3, r4, #3
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	4bc7      	ldr	r3, [pc, #796]	; (8007f58 <__ieee754_pow+0x768>)
 8007c3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c3e:	ed93 7b00 	vldr	d7, [r3]
 8007c42:	4629      	mov	r1, r5
 8007c44:	ec53 2b17 	vmov	r2, r3, d7
 8007c48:	eeb0 9a47 	vmov.f32	s18, s14
 8007c4c:	eef0 9a67 	vmov.f32	s19, s15
 8007c50:	4682      	mov	sl, r0
 8007c52:	f7f8 fabd 	bl	80001d0 <__aeabi_dsub>
 8007c56:	4652      	mov	r2, sl
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	ec51 0b19 	vmov	r0, r1, d9
 8007c62:	f7f8 fab7 	bl	80001d4 <__adddf3>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	49bb      	ldr	r1, [pc, #748]	; (8007f5c <__ieee754_pow+0x76c>)
 8007c6e:	f7f8 fd91 	bl	8000794 <__aeabi_ddiv>
 8007c72:	ec41 0b1a 	vmov	d10, r0, r1
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	f7f8 fc5f 	bl	8000540 <__aeabi_dmul>
 8007c82:	2300      	movs	r3, #0
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c8e:	46ab      	mov	fp, r5
 8007c90:	106d      	asrs	r5, r5, #1
 8007c92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007c96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007c9a:	ec41 0b18 	vmov	d8, r0, r1
 8007c9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	4614      	mov	r4, r2
 8007caa:	461d      	mov	r5, r3
 8007cac:	f7f8 fc48 	bl	8000540 <__aeabi_dmul>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fa8a 	bl	80001d0 <__aeabi_dsub>
 8007cbc:	ec53 2b19 	vmov	r2, r3, d9
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	460f      	mov	r7, r1
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 fa82 	bl	80001d0 <__aeabi_dsub>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	f7f8 fa7c 	bl	80001d0 <__aeabi_dsub>
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	f7f8 fc30 	bl	8000540 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 fa72 	bl	80001d0 <__aeabi_dsub>
 8007cec:	ec53 2b1a 	vmov	r2, r3, d10
 8007cf0:	f7f8 fc26 	bl	8000540 <__aeabi_dmul>
 8007cf4:	ec53 2b18 	vmov	r2, r3, d8
 8007cf8:	ec41 0b19 	vmov	d9, r0, r1
 8007cfc:	ec51 0b18 	vmov	r0, r1, d8
 8007d00:	f7f8 fc1e 	bl	8000540 <__aeabi_dmul>
 8007d04:	a37c      	add	r3, pc, #496	; (adr r3, 8007ef8 <__ieee754_pow+0x708>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	460d      	mov	r5, r1
 8007d0e:	f7f8 fc17 	bl	8000540 <__aeabi_dmul>
 8007d12:	a37b      	add	r3, pc, #492	; (adr r3, 8007f00 <__ieee754_pow+0x710>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fa5c 	bl	80001d4 <__adddf3>
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	462b      	mov	r3, r5
 8007d20:	f7f8 fc0e 	bl	8000540 <__aeabi_dmul>
 8007d24:	a378      	add	r3, pc, #480	; (adr r3, 8007f08 <__ieee754_pow+0x718>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fa53 	bl	80001d4 <__adddf3>
 8007d2e:	4622      	mov	r2, r4
 8007d30:	462b      	mov	r3, r5
 8007d32:	f7f8 fc05 	bl	8000540 <__aeabi_dmul>
 8007d36:	a376      	add	r3, pc, #472	; (adr r3, 8007f10 <__ieee754_pow+0x720>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fa4a 	bl	80001d4 <__adddf3>
 8007d40:	4622      	mov	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	f7f8 fbfc 	bl	8000540 <__aeabi_dmul>
 8007d48:	a373      	add	r3, pc, #460	; (adr r3, 8007f18 <__ieee754_pow+0x728>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fa41 	bl	80001d4 <__adddf3>
 8007d52:	4622      	mov	r2, r4
 8007d54:	462b      	mov	r3, r5
 8007d56:	f7f8 fbf3 	bl	8000540 <__aeabi_dmul>
 8007d5a:	a371      	add	r3, pc, #452	; (adr r3, 8007f20 <__ieee754_pow+0x730>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fa38 	bl	80001d4 <__adddf3>
 8007d64:	4622      	mov	r2, r4
 8007d66:	4606      	mov	r6, r0
 8007d68:	460f      	mov	r7, r1
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fbe6 	bl	8000540 <__aeabi_dmul>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fbe0 	bl	8000540 <__aeabi_dmul>
 8007d80:	4642      	mov	r2, r8
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	464b      	mov	r3, r9
 8007d88:	ec51 0b18 	vmov	r0, r1, d8
 8007d8c:	f7f8 fa22 	bl	80001d4 <__adddf3>
 8007d90:	ec53 2b19 	vmov	r2, r3, d9
 8007d94:	f7f8 fbd4 	bl	8000540 <__aeabi_dmul>
 8007d98:	4622      	mov	r2, r4
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	f7f8 fa1a 	bl	80001d4 <__adddf3>
 8007da0:	4642      	mov	r2, r8
 8007da2:	4682      	mov	sl, r0
 8007da4:	468b      	mov	fp, r1
 8007da6:	464b      	mov	r3, r9
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fbc8 	bl	8000540 <__aeabi_dmul>
 8007db0:	4b6b      	ldr	r3, [pc, #428]	; (8007f60 <__ieee754_pow+0x770>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	4606      	mov	r6, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	f7f8 fa0c 	bl	80001d4 <__adddf3>
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	465b      	mov	r3, fp
 8007dc0:	f7f8 fa08 	bl	80001d4 <__adddf3>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	f7f8 fbb5 	bl	8000540 <__aeabi_dmul>
 8007dd6:	4b62      	ldr	r3, [pc, #392]	; (8007f60 <__ieee754_pow+0x770>)
 8007dd8:	4680      	mov	r8, r0
 8007dda:	4689      	mov	r9, r1
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 f9f5 	bl	80001d0 <__aeabi_dsub>
 8007de6:	4632      	mov	r2, r6
 8007de8:	463b      	mov	r3, r7
 8007dea:	f7f8 f9f1 	bl	80001d0 <__aeabi_dsub>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4650      	mov	r0, sl
 8007df4:	4659      	mov	r1, fp
 8007df6:	f7f8 f9eb 	bl	80001d0 <__aeabi_dsub>
 8007dfa:	ec53 2b18 	vmov	r2, r3, d8
 8007dfe:	f7f8 fb9f 	bl	8000540 <__aeabi_dmul>
 8007e02:	4622      	mov	r2, r4
 8007e04:	4606      	mov	r6, r0
 8007e06:	460f      	mov	r7, r1
 8007e08:	462b      	mov	r3, r5
 8007e0a:	ec51 0b19 	vmov	r0, r1, d9
 8007e0e:	f7f8 fb97 	bl	8000540 <__aeabi_dmul>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 f9db 	bl	80001d4 <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4640      	mov	r0, r8
 8007e28:	4649      	mov	r1, r9
 8007e2a:	f7f8 f9d3 	bl	80001d4 <__adddf3>
 8007e2e:	a33e      	add	r3, pc, #248	; (adr r3, 8007f28 <__ieee754_pow+0x738>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	2000      	movs	r0, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	f7f8 fb81 	bl	8000540 <__aeabi_dmul>
 8007e3e:	4642      	mov	r2, r8
 8007e40:	ec41 0b18 	vmov	d8, r0, r1
 8007e44:	464b      	mov	r3, r9
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 f9c1 	bl	80001d0 <__aeabi_dsub>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 f9bb 	bl	80001d0 <__aeabi_dsub>
 8007e5a:	a335      	add	r3, pc, #212	; (adr r3, 8007f30 <__ieee754_pow+0x740>)
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f7f8 fb6e 	bl	8000540 <__aeabi_dmul>
 8007e64:	a334      	add	r3, pc, #208	; (adr r3, 8007f38 <__ieee754_pow+0x748>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 fb65 	bl	8000540 <__aeabi_dmul>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7f8 f9a9 	bl	80001d4 <__adddf3>
 8007e82:	9a07      	ldr	r2, [sp, #28]
 8007e84:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <__ieee754_pow+0x774>)
 8007e86:	4413      	add	r3, r2
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 f9a2 	bl	80001d4 <__adddf3>
 8007e90:	4682      	mov	sl, r0
 8007e92:	9805      	ldr	r0, [sp, #20]
 8007e94:	468b      	mov	fp, r1
 8007e96:	f7f8 fae9 	bl	800046c <__aeabi_i2d>
 8007e9a:	9a07      	ldr	r2, [sp, #28]
 8007e9c:	4b32      	ldr	r3, [pc, #200]	; (8007f68 <__ieee754_pow+0x778>)
 8007e9e:	4413      	add	r3, r2
 8007ea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	465b      	mov	r3, fp
 8007eac:	ec51 0b18 	vmov	r0, r1, d8
 8007eb0:	f7f8 f990 	bl	80001d4 <__adddf3>
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	f7f8 f98c 	bl	80001d4 <__adddf3>
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	f7f8 f988 	bl	80001d4 <__adddf3>
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	4632      	mov	r2, r6
 8007ec8:	463b      	mov	r3, r7
 8007eca:	4604      	mov	r4, r0
 8007ecc:	460d      	mov	r5, r1
 8007ece:	f7f8 f97f 	bl	80001d0 <__aeabi_dsub>
 8007ed2:	4642      	mov	r2, r8
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	f7f8 f97b 	bl	80001d0 <__aeabi_dsub>
 8007eda:	ec53 2b18 	vmov	r2, r3, d8
 8007ede:	f7f8 f977 	bl	80001d0 <__aeabi_dsub>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	4659      	mov	r1, fp
 8007eea:	e610      	b.n	8007b0e <__ieee754_pow+0x31e>
 8007eec:	2401      	movs	r4, #1
 8007eee:	e6a1      	b.n	8007c34 <__ieee754_pow+0x444>
 8007ef0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007f40 <__ieee754_pow+0x750>
 8007ef4:	e617      	b.n	8007b26 <__ieee754_pow+0x336>
 8007ef6:	bf00      	nop
 8007ef8:	4a454eef 	.word	0x4a454eef
 8007efc:	3fca7e28 	.word	0x3fca7e28
 8007f00:	93c9db65 	.word	0x93c9db65
 8007f04:	3fcd864a 	.word	0x3fcd864a
 8007f08:	a91d4101 	.word	0xa91d4101
 8007f0c:	3fd17460 	.word	0x3fd17460
 8007f10:	518f264d 	.word	0x518f264d
 8007f14:	3fd55555 	.word	0x3fd55555
 8007f18:	db6fabff 	.word	0xdb6fabff
 8007f1c:	3fdb6db6 	.word	0x3fdb6db6
 8007f20:	33333303 	.word	0x33333303
 8007f24:	3fe33333 	.word	0x3fe33333
 8007f28:	e0000000 	.word	0xe0000000
 8007f2c:	3feec709 	.word	0x3feec709
 8007f30:	dc3a03fd 	.word	0xdc3a03fd
 8007f34:	3feec709 	.word	0x3feec709
 8007f38:	145b01f5 	.word	0x145b01f5
 8007f3c:	be3e2fe0 	.word	0xbe3e2fe0
 8007f40:	00000000 	.word	0x00000000
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	43400000 	.word	0x43400000
 8007f50:	0003988e 	.word	0x0003988e
 8007f54:	000bb679 	.word	0x000bb679
 8007f58:	080092a0 	.word	0x080092a0
 8007f5c:	3ff00000 	.word	0x3ff00000
 8007f60:	40080000 	.word	0x40080000
 8007f64:	080092c0 	.word	0x080092c0
 8007f68:	080092b0 	.word	0x080092b0
 8007f6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008244 <__ieee754_pow+0xa54>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 f92d 	bl	80001d4 <__adddf3>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	ec41 0b1a 	vmov	d10, r0, r1
 8007f80:	462b      	mov	r3, r5
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 f923 	bl	80001d0 <__aeabi_dsub>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	ec51 0b1a 	vmov	r0, r1, d10
 8007f92:	f7f8 fd65 	bl	8000a60 <__aeabi_dcmpgt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f47f ae04 	bne.w	8007ba4 <__ieee754_pow+0x3b4>
 8007f9c:	4aa4      	ldr	r2, [pc, #656]	; (8008230 <__ieee754_pow+0xa40>)
 8007f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	f340 8108 	ble.w	80081b8 <__ieee754_pow+0x9c8>
 8007fa8:	151b      	asrs	r3, r3, #20
 8007faa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007fae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007fb2:	fa4a f303 	asr.w	r3, sl, r3
 8007fb6:	445b      	add	r3, fp
 8007fb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007fbc:	4e9d      	ldr	r6, [pc, #628]	; (8008234 <__ieee754_pow+0xa44>)
 8007fbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007fc2:	4116      	asrs	r6, r2
 8007fc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007fc8:	2000      	movs	r0, #0
 8007fca:	ea23 0106 	bic.w	r1, r3, r6
 8007fce:	f1c2 0214 	rsb	r2, r2, #20
 8007fd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007fd6:	fa4a fa02 	asr.w	sl, sl, r2
 8007fda:	f1bb 0f00 	cmp.w	fp, #0
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	bfb8      	it	lt
 8007fe8:	f1ca 0a00 	rsblt	sl, sl, #0
 8007fec:	f7f8 f8f0 	bl	80001d0 <__aeabi_dsub>
 8007ff0:	ec41 0b19 	vmov	d9, r0, r1
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	ec51 0b19 	vmov	r0, r1, d9
 8007ffc:	f7f8 f8ea 	bl	80001d4 <__adddf3>
 8008000:	a37b      	add	r3, pc, #492	; (adr r3, 80081f0 <__ieee754_pow+0xa00>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	2000      	movs	r0, #0
 8008008:	4604      	mov	r4, r0
 800800a:	460d      	mov	r5, r1
 800800c:	f7f8 fa98 	bl	8000540 <__aeabi_dmul>
 8008010:	ec53 2b19 	vmov	r2, r3, d9
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	4620      	mov	r0, r4
 800801a:	4629      	mov	r1, r5
 800801c:	f7f8 f8d8 	bl	80001d0 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 f8d2 	bl	80001d0 <__aeabi_dsub>
 800802c:	a372      	add	r3, pc, #456	; (adr r3, 80081f8 <__ieee754_pow+0xa08>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 fa85 	bl	8000540 <__aeabi_dmul>
 8008036:	a372      	add	r3, pc, #456	; (adr r3, 8008200 <__ieee754_pow+0xa10>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4680      	mov	r8, r0
 800803e:	4689      	mov	r9, r1
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 fa7c 	bl	8000540 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 f8c0 	bl	80001d4 <__adddf3>
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4630      	mov	r0, r6
 800805e:	4639      	mov	r1, r7
 8008060:	f7f8 f8b8 	bl	80001d4 <__adddf3>
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	f7f8 f8b0 	bl	80001d0 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 f8aa 	bl	80001d0 <__aeabi_dsub>
 800807c:	4642      	mov	r2, r8
 800807e:	4606      	mov	r6, r0
 8008080:	460f      	mov	r7, r1
 8008082:	464b      	mov	r3, r9
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 fa5a 	bl	8000540 <__aeabi_dmul>
 800808c:	a35e      	add	r3, pc, #376	; (adr r3, 8008208 <__ieee754_pow+0xa18>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	4604      	mov	r4, r0
 8008094:	460d      	mov	r5, r1
 8008096:	f7f8 fa53 	bl	8000540 <__aeabi_dmul>
 800809a:	a35d      	add	r3, pc, #372	; (adr r3, 8008210 <__ieee754_pow+0xa20>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 f896 	bl	80001d0 <__aeabi_dsub>
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	f7f8 fa4a 	bl	8000540 <__aeabi_dmul>
 80080ac:	a35a      	add	r3, pc, #360	; (adr r3, 8008218 <__ieee754_pow+0xa28>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f88f 	bl	80001d4 <__adddf3>
 80080b6:	4622      	mov	r2, r4
 80080b8:	462b      	mov	r3, r5
 80080ba:	f7f8 fa41 	bl	8000540 <__aeabi_dmul>
 80080be:	a358      	add	r3, pc, #352	; (adr r3, 8008220 <__ieee754_pow+0xa30>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 f884 	bl	80001d0 <__aeabi_dsub>
 80080c8:	4622      	mov	r2, r4
 80080ca:	462b      	mov	r3, r5
 80080cc:	f7f8 fa38 	bl	8000540 <__aeabi_dmul>
 80080d0:	a355      	add	r3, pc, #340	; (adr r3, 8008228 <__ieee754_pow+0xa38>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f87d 	bl	80001d4 <__adddf3>
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	f7f8 fa2f 	bl	8000540 <__aeabi_dmul>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f871 	bl	80001d0 <__aeabi_dsub>
 80080ee:	4604      	mov	r4, r0
 80080f0:	460d      	mov	r5, r1
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4640      	mov	r0, r8
 80080f8:	4649      	mov	r1, r9
 80080fa:	f7f8 fa21 	bl	8000540 <__aeabi_dmul>
 80080fe:	2200      	movs	r2, #0
 8008100:	ec41 0b19 	vmov	d9, r0, r1
 8008104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 f860 	bl	80001d0 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	ec51 0b19 	vmov	r0, r1, d9
 8008118:	f7f8 fb3c 	bl	8000794 <__aeabi_ddiv>
 800811c:	4632      	mov	r2, r6
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	463b      	mov	r3, r7
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fa0a 	bl	8000540 <__aeabi_dmul>
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	f7f8 f850 	bl	80001d4 <__adddf3>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 f848 	bl	80001d0 <__aeabi_dsub>
 8008140:	4642      	mov	r2, r8
 8008142:	464b      	mov	r3, r9
 8008144:	f7f8 f844 	bl	80001d0 <__aeabi_dsub>
 8008148:	460b      	mov	r3, r1
 800814a:	4602      	mov	r2, r0
 800814c:	493a      	ldr	r1, [pc, #232]	; (8008238 <__ieee754_pow+0xa48>)
 800814e:	2000      	movs	r0, #0
 8008150:	f7f8 f83e 	bl	80001d0 <__aeabi_dsub>
 8008154:	ec41 0b10 	vmov	d0, r0, r1
 8008158:	ee10 3a90 	vmov	r3, s1
 800815c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008164:	da2b      	bge.n	80081be <__ieee754_pow+0x9ce>
 8008166:	4650      	mov	r0, sl
 8008168:	f000 f95e 	bl	8008428 <scalbn>
 800816c:	ec51 0b10 	vmov	r0, r1, d0
 8008170:	ec53 2b18 	vmov	r2, r3, d8
 8008174:	f7ff bbed 	b.w	8007952 <__ieee754_pow+0x162>
 8008178:	4b30      	ldr	r3, [pc, #192]	; (800823c <__ieee754_pow+0xa4c>)
 800817a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800817e:	429e      	cmp	r6, r3
 8008180:	f77f af0c 	ble.w	8007f9c <__ieee754_pow+0x7ac>
 8008184:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <__ieee754_pow+0xa50>)
 8008186:	440b      	add	r3, r1
 8008188:	4303      	orrs	r3, r0
 800818a:	d009      	beq.n	80081a0 <__ieee754_pow+0x9b0>
 800818c:	ec51 0b18 	vmov	r0, r1, d8
 8008190:	2200      	movs	r2, #0
 8008192:	2300      	movs	r3, #0
 8008194:	f7f8 fc46 	bl	8000a24 <__aeabi_dcmplt>
 8008198:	3800      	subs	r0, #0
 800819a:	bf18      	it	ne
 800819c:	2001      	movne	r0, #1
 800819e:	e447      	b.n	8007a30 <__ieee754_pow+0x240>
 80081a0:	4622      	mov	r2, r4
 80081a2:	462b      	mov	r3, r5
 80081a4:	f7f8 f814 	bl	80001d0 <__aeabi_dsub>
 80081a8:	4642      	mov	r2, r8
 80081aa:	464b      	mov	r3, r9
 80081ac:	f7f8 fc4e 	bl	8000a4c <__aeabi_dcmpge>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f43f aef3 	beq.w	8007f9c <__ieee754_pow+0x7ac>
 80081b6:	e7e9      	b.n	800818c <__ieee754_pow+0x99c>
 80081b8:	f04f 0a00 	mov.w	sl, #0
 80081bc:	e71a      	b.n	8007ff4 <__ieee754_pow+0x804>
 80081be:	ec51 0b10 	vmov	r0, r1, d0
 80081c2:	4619      	mov	r1, r3
 80081c4:	e7d4      	b.n	8008170 <__ieee754_pow+0x980>
 80081c6:	491c      	ldr	r1, [pc, #112]	; (8008238 <__ieee754_pow+0xa48>)
 80081c8:	2000      	movs	r0, #0
 80081ca:	f7ff bb30 	b.w	800782e <__ieee754_pow+0x3e>
 80081ce:	2000      	movs	r0, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	f7ff bb2c 	b.w	800782e <__ieee754_pow+0x3e>
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7ff bb28 	b.w	800782e <__ieee754_pow+0x3e>
 80081de:	9204      	str	r2, [sp, #16]
 80081e0:	f7ff bb7a 	b.w	80078d8 <__ieee754_pow+0xe8>
 80081e4:	2300      	movs	r3, #0
 80081e6:	f7ff bb64 	b.w	80078b2 <__ieee754_pow+0xc2>
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w
 80081f0:	00000000 	.word	0x00000000
 80081f4:	3fe62e43 	.word	0x3fe62e43
 80081f8:	fefa39ef 	.word	0xfefa39ef
 80081fc:	3fe62e42 	.word	0x3fe62e42
 8008200:	0ca86c39 	.word	0x0ca86c39
 8008204:	be205c61 	.word	0xbe205c61
 8008208:	72bea4d0 	.word	0x72bea4d0
 800820c:	3e663769 	.word	0x3e663769
 8008210:	c5d26bf1 	.word	0xc5d26bf1
 8008214:	3ebbbd41 	.word	0x3ebbbd41
 8008218:	af25de2c 	.word	0xaf25de2c
 800821c:	3f11566a 	.word	0x3f11566a
 8008220:	16bebd93 	.word	0x16bebd93
 8008224:	3f66c16c 	.word	0x3f66c16c
 8008228:	5555553e 	.word	0x5555553e
 800822c:	3fc55555 	.word	0x3fc55555
 8008230:	3fe00000 	.word	0x3fe00000
 8008234:	000fffff 	.word	0x000fffff
 8008238:	3ff00000 	.word	0x3ff00000
 800823c:	4090cbff 	.word	0x4090cbff
 8008240:	3f6f3400 	.word	0x3f6f3400
 8008244:	652b82fe 	.word	0x652b82fe
 8008248:	3c971547 	.word	0x3c971547

0800824c <__ieee754_sqrt>:
 800824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008250:	ec55 4b10 	vmov	r4, r5, d0
 8008254:	4e55      	ldr	r6, [pc, #340]	; (80083ac <__ieee754_sqrt+0x160>)
 8008256:	43ae      	bics	r6, r5
 8008258:	ee10 0a10 	vmov	r0, s0
 800825c:	ee10 3a10 	vmov	r3, s0
 8008260:	462a      	mov	r2, r5
 8008262:	4629      	mov	r1, r5
 8008264:	d110      	bne.n	8008288 <__ieee754_sqrt+0x3c>
 8008266:	ee10 2a10 	vmov	r2, s0
 800826a:	462b      	mov	r3, r5
 800826c:	f7f8 f968 	bl	8000540 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f7 ffac 	bl	80001d4 <__adddf3>
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	ec45 4b10 	vmov	d0, r4, r5
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	2d00      	cmp	r5, #0
 800828a:	dc10      	bgt.n	80082ae <__ieee754_sqrt+0x62>
 800828c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008290:	4330      	orrs	r0, r6
 8008292:	d0f5      	beq.n	8008280 <__ieee754_sqrt+0x34>
 8008294:	b15d      	cbz	r5, 80082ae <__ieee754_sqrt+0x62>
 8008296:	ee10 2a10 	vmov	r2, s0
 800829a:	462b      	mov	r3, r5
 800829c:	ee10 0a10 	vmov	r0, s0
 80082a0:	f7f7 ff96 	bl	80001d0 <__aeabi_dsub>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	f7f8 fa74 	bl	8000794 <__aeabi_ddiv>
 80082ac:	e7e6      	b.n	800827c <__ieee754_sqrt+0x30>
 80082ae:	1512      	asrs	r2, r2, #20
 80082b0:	d074      	beq.n	800839c <__ieee754_sqrt+0x150>
 80082b2:	07d4      	lsls	r4, r2, #31
 80082b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80082b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80082bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80082c0:	bf5e      	ittt	pl
 80082c2:	0fda      	lsrpl	r2, r3, #31
 80082c4:	005b      	lslpl	r3, r3, #1
 80082c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80082ca:	2400      	movs	r4, #0
 80082cc:	0fda      	lsrs	r2, r3, #31
 80082ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80082d2:	107f      	asrs	r7, r7, #1
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	2516      	movs	r5, #22
 80082d8:	4620      	mov	r0, r4
 80082da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80082de:	1886      	adds	r6, r0, r2
 80082e0:	428e      	cmp	r6, r1
 80082e2:	bfde      	ittt	le
 80082e4:	1b89      	suble	r1, r1, r6
 80082e6:	18b0      	addle	r0, r6, r2
 80082e8:	18a4      	addle	r4, r4, r2
 80082ea:	0049      	lsls	r1, r1, #1
 80082ec:	3d01      	subs	r5, #1
 80082ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80082f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80082f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082fa:	d1f0      	bne.n	80082de <__ieee754_sqrt+0x92>
 80082fc:	462a      	mov	r2, r5
 80082fe:	f04f 0e20 	mov.w	lr, #32
 8008302:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008306:	4281      	cmp	r1, r0
 8008308:	eb06 0c05 	add.w	ip, r6, r5
 800830c:	dc02      	bgt.n	8008314 <__ieee754_sqrt+0xc8>
 800830e:	d113      	bne.n	8008338 <__ieee754_sqrt+0xec>
 8008310:	459c      	cmp	ip, r3
 8008312:	d811      	bhi.n	8008338 <__ieee754_sqrt+0xec>
 8008314:	f1bc 0f00 	cmp.w	ip, #0
 8008318:	eb0c 0506 	add.w	r5, ip, r6
 800831c:	da43      	bge.n	80083a6 <__ieee754_sqrt+0x15a>
 800831e:	2d00      	cmp	r5, #0
 8008320:	db41      	blt.n	80083a6 <__ieee754_sqrt+0x15a>
 8008322:	f100 0801 	add.w	r8, r0, #1
 8008326:	1a09      	subs	r1, r1, r0
 8008328:	459c      	cmp	ip, r3
 800832a:	bf88      	it	hi
 800832c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008330:	eba3 030c 	sub.w	r3, r3, ip
 8008334:	4432      	add	r2, r6
 8008336:	4640      	mov	r0, r8
 8008338:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800833c:	f1be 0e01 	subs.w	lr, lr, #1
 8008340:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008348:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800834c:	d1db      	bne.n	8008306 <__ieee754_sqrt+0xba>
 800834e:	430b      	orrs	r3, r1
 8008350:	d006      	beq.n	8008360 <__ieee754_sqrt+0x114>
 8008352:	1c50      	adds	r0, r2, #1
 8008354:	bf13      	iteet	ne
 8008356:	3201      	addne	r2, #1
 8008358:	3401      	addeq	r4, #1
 800835a:	4672      	moveq	r2, lr
 800835c:	f022 0201 	bicne.w	r2, r2, #1
 8008360:	1063      	asrs	r3, r4, #1
 8008362:	0852      	lsrs	r2, r2, #1
 8008364:	07e1      	lsls	r1, r4, #31
 8008366:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800836a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800836e:	bf48      	it	mi
 8008370:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008374:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008378:	4614      	mov	r4, r2
 800837a:	e781      	b.n	8008280 <__ieee754_sqrt+0x34>
 800837c:	0ad9      	lsrs	r1, r3, #11
 800837e:	3815      	subs	r0, #21
 8008380:	055b      	lsls	r3, r3, #21
 8008382:	2900      	cmp	r1, #0
 8008384:	d0fa      	beq.n	800837c <__ieee754_sqrt+0x130>
 8008386:	02cd      	lsls	r5, r1, #11
 8008388:	d50a      	bpl.n	80083a0 <__ieee754_sqrt+0x154>
 800838a:	f1c2 0420 	rsb	r4, r2, #32
 800838e:	fa23 f404 	lsr.w	r4, r3, r4
 8008392:	1e55      	subs	r5, r2, #1
 8008394:	4093      	lsls	r3, r2
 8008396:	4321      	orrs	r1, r4
 8008398:	1b42      	subs	r2, r0, r5
 800839a:	e78a      	b.n	80082b2 <__ieee754_sqrt+0x66>
 800839c:	4610      	mov	r0, r2
 800839e:	e7f0      	b.n	8008382 <__ieee754_sqrt+0x136>
 80083a0:	0049      	lsls	r1, r1, #1
 80083a2:	3201      	adds	r2, #1
 80083a4:	e7ef      	b.n	8008386 <__ieee754_sqrt+0x13a>
 80083a6:	4680      	mov	r8, r0
 80083a8:	e7bd      	b.n	8008326 <__ieee754_sqrt+0xda>
 80083aa:	bf00      	nop
 80083ac:	7ff00000 	.word	0x7ff00000

080083b0 <with_errno>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	4616      	mov	r6, r2
 80083b8:	f000 f8bc 	bl	8008534 <__errno>
 80083bc:	4629      	mov	r1, r5
 80083be:	6006      	str	r6, [r0, #0]
 80083c0:	4620      	mov	r0, r4
 80083c2:	bd70      	pop	{r4, r5, r6, pc}

080083c4 <xflow>:
 80083c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c6:	4614      	mov	r4, r2
 80083c8:	461d      	mov	r5, r3
 80083ca:	b108      	cbz	r0, 80083d0 <xflow+0xc>
 80083cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083d0:	e9cd 2300 	strd	r2, r3, [sp]
 80083d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083d8:	4620      	mov	r0, r4
 80083da:	4629      	mov	r1, r5
 80083dc:	f7f8 f8b0 	bl	8000540 <__aeabi_dmul>
 80083e0:	2222      	movs	r2, #34	; 0x22
 80083e2:	b003      	add	sp, #12
 80083e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e8:	f7ff bfe2 	b.w	80083b0 <with_errno>

080083ec <__math_uflow>:
 80083ec:	b508      	push	{r3, lr}
 80083ee:	2200      	movs	r2, #0
 80083f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083f4:	f7ff ffe6 	bl	80083c4 <xflow>
 80083f8:	ec41 0b10 	vmov	d0, r0, r1
 80083fc:	bd08      	pop	{r3, pc}

080083fe <__math_oflow>:
 80083fe:	b508      	push	{r3, lr}
 8008400:	2200      	movs	r2, #0
 8008402:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008406:	f7ff ffdd 	bl	80083c4 <xflow>
 800840a:	ec41 0b10 	vmov	d0, r0, r1
 800840e:	bd08      	pop	{r3, pc}

08008410 <finite>:
 8008410:	b082      	sub	sp, #8
 8008412:	ed8d 0b00 	vstr	d0, [sp]
 8008416:	9801      	ldr	r0, [sp, #4]
 8008418:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800841c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008420:	0fc0      	lsrs	r0, r0, #31
 8008422:	b002      	add	sp, #8
 8008424:	4770      	bx	lr
	...

08008428 <scalbn>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	ec55 4b10 	vmov	r4, r5, d0
 800842e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008432:	4606      	mov	r6, r0
 8008434:	462b      	mov	r3, r5
 8008436:	b99a      	cbnz	r2, 8008460 <scalbn+0x38>
 8008438:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800843c:	4323      	orrs	r3, r4
 800843e:	d036      	beq.n	80084ae <scalbn+0x86>
 8008440:	4b39      	ldr	r3, [pc, #228]	; (8008528 <scalbn+0x100>)
 8008442:	4629      	mov	r1, r5
 8008444:	ee10 0a10 	vmov	r0, s0
 8008448:	2200      	movs	r2, #0
 800844a:	f7f8 f879 	bl	8000540 <__aeabi_dmul>
 800844e:	4b37      	ldr	r3, [pc, #220]	; (800852c <scalbn+0x104>)
 8008450:	429e      	cmp	r6, r3
 8008452:	4604      	mov	r4, r0
 8008454:	460d      	mov	r5, r1
 8008456:	da10      	bge.n	800847a <scalbn+0x52>
 8008458:	a32b      	add	r3, pc, #172	; (adr r3, 8008508 <scalbn+0xe0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	e03a      	b.n	80084d6 <scalbn+0xae>
 8008460:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008464:	428a      	cmp	r2, r1
 8008466:	d10c      	bne.n	8008482 <scalbn+0x5a>
 8008468:	ee10 2a10 	vmov	r2, s0
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 feb0 	bl	80001d4 <__adddf3>
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	e019      	b.n	80084ae <scalbn+0x86>
 800847a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800847e:	460b      	mov	r3, r1
 8008480:	3a36      	subs	r2, #54	; 0x36
 8008482:	4432      	add	r2, r6
 8008484:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008488:	428a      	cmp	r2, r1
 800848a:	dd08      	ble.n	800849e <scalbn+0x76>
 800848c:	2d00      	cmp	r5, #0
 800848e:	a120      	add	r1, pc, #128	; (adr r1, 8008510 <scalbn+0xe8>)
 8008490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008494:	da1c      	bge.n	80084d0 <scalbn+0xa8>
 8008496:	a120      	add	r1, pc, #128	; (adr r1, 8008518 <scalbn+0xf0>)
 8008498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849c:	e018      	b.n	80084d0 <scalbn+0xa8>
 800849e:	2a00      	cmp	r2, #0
 80084a0:	dd08      	ble.n	80084b4 <scalbn+0x8c>
 80084a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084ae:	ec45 4b10 	vmov	d0, r4, r5
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80084b8:	da19      	bge.n	80084ee <scalbn+0xc6>
 80084ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80084be:	429e      	cmp	r6, r3
 80084c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80084c4:	dd0a      	ble.n	80084dc <scalbn+0xb4>
 80084c6:	a112      	add	r1, pc, #72	; (adr r1, 8008510 <scalbn+0xe8>)
 80084c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e2      	bne.n	8008496 <scalbn+0x6e>
 80084d0:	a30f      	add	r3, pc, #60	; (adr r3, 8008510 <scalbn+0xe8>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f7f8 f833 	bl	8000540 <__aeabi_dmul>
 80084da:	e7cb      	b.n	8008474 <scalbn+0x4c>
 80084dc:	a10a      	add	r1, pc, #40	; (adr r1, 8008508 <scalbn+0xe0>)
 80084de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0b8      	beq.n	8008458 <scalbn+0x30>
 80084e6:	a10e      	add	r1, pc, #56	; (adr r1, 8008520 <scalbn+0xf8>)
 80084e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ec:	e7b4      	b.n	8008458 <scalbn+0x30>
 80084ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084f2:	3236      	adds	r2, #54	; 0x36
 80084f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80084fc:	4620      	mov	r0, r4
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <scalbn+0x108>)
 8008500:	2200      	movs	r2, #0
 8008502:	e7e8      	b.n	80084d6 <scalbn+0xae>
 8008504:	f3af 8000 	nop.w
 8008508:	c2f8f359 	.word	0xc2f8f359
 800850c:	01a56e1f 	.word	0x01a56e1f
 8008510:	8800759c 	.word	0x8800759c
 8008514:	7e37e43c 	.word	0x7e37e43c
 8008518:	8800759c 	.word	0x8800759c
 800851c:	fe37e43c 	.word	0xfe37e43c
 8008520:	c2f8f359 	.word	0xc2f8f359
 8008524:	81a56e1f 	.word	0x81a56e1f
 8008528:	43500000 	.word	0x43500000
 800852c:	ffff3cb0 	.word	0xffff3cb0
 8008530:	3c900000 	.word	0x3c900000

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	2000004c 	.word	0x2000004c

08008540 <_init>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr

0800854c <_fini>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr
